<html>
<head>
<title>Programming Microsoft Visual Basic 6.0</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style type="text/css">
<!--
h1 {font-size: 24pt;line-height: 50px;}
h2 {font-size: 18pt;line-height: 30px;}
h3 {font-size: 16pt;line-height: 20px;}
h4 {font-size: 14pt;line-height: 18px;}
h5 {font-size: 12pt;line-height: 16px;}
h6 {font-size: 10pt;line-height: 14px;}

.ProjectTitle {
	font-size: 64px;
	color: #000000;
	font-weight: bold;
}
-->
</style>

</head>

<body>
<div align="center">
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><font class="ProjectTitle">Programming Microsoft Visual Basic 6.0</font></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<P Style="page-break-before: always"><a name="A0"></a><h1>1. Cover</h1>

<A HREF="#A1">[Next]</A><P>

<CENTER>
<IMG SRC="605580f.JPG" width=271 height=340 border=1 alt="cover">
<br>
<SMALL><FONT color="gray">Copyright&#169; 1999
by Francesco Balena</FONT></SMALL></CENTER>



<a name="A1"></a><h2>1.1 LOC Page</h2>


<A HREF="#A0">[Previous]</A> <A HREF="#A2">[Next]</A><P>

<P>PUBLISHED BY
<BR>Microsoft Press
<BR>A Division of Microsoft Corporation
<BR>One Microsoft Way
<BR>Redmond, Washington 98052-6399

<P STYLE="margin-top: .5em">&nbsp;</P>

<P>Copyright &#169; 1999 by Francesco Balena</P>

<P>All rights reserved. No part of the contents of this book may be reproduced or transmitted in any form or by any means without the written permission of the publisher.</P>

<PRE STYLE="font-family: 'Verdana'">
<P>Library of Congress Cataloging-in-Publication Data
<BR>Balena, Francesco, 1960--
<BR>        Programming Microsoft Visual Basic 6.0 / Francesco Balena.
<BR>              p.   cm.
<BR>        Includes index.
<BR>        ISBN 0-7356-0558-0
<BR>        1. Microsoft Visual Basic.    2. Basic (Computer program language)
<BR>    I.  Title.
<BR>    QA76.73.B3B345  1999
<BR>    005.26'8--dc21                                                           99-20381
<BR>                                                                                            CIP
</PRE>

<P>Printed and bound in the United States of America.</P>

<P>1 2 3 4 5 6 7 8 9&nbsp;&nbsp;&nbsp;QMQM&nbsp;&nbsp;&nbsp;4 3 2 1 0 9</P> 

<P>Distributed in Canada by Penguin Books Canada Limited.</P>

<P>A CIP catalogue record for this book is available from the British Library.</P>

<P>Microsoft Press books are available through booksellers and distributors worldwide. For further information about international editions, contact your local Microsoft Corporation office or contact Microsoft Press International directly at fax (425) 936-7329. Visit our Web site at <A HREF="http://mspress.microsoft.com" TARGET="window_2">mspress.microsoft.com</A>.</P>

<P>Active Desktop, ActiveX, the BackOffice logo, FrontPage, IntelliSense, Microsoft, Microsoft Press, MS-DOS, Visual Basic, and Windows are either registered trademarks or trademarks of燤icrosoft Corporation in the United States and/or other countries. Other product and company names mentioned herein may be the trademarks of their respective owners.</P>

<P>The example companies, organizations, products, people, and events depicted herein are fictitious. No association with any real company, organization, product, person, or event is intended or should be inferred.</P>

<P>
<B>Acquisitions Editor:&nbsp;</B>Eric Stroo
<P><B>Project Editor:</B> Kathleen Atkins
<P><B>Manuscript Editors:</B> Kathleen Atkins, Sally Stickney
<P><B>Technical Editor:</B> Marzena Makuta
</P>






<a name="A2"></a><h1>2. Acknowledgements</h1>

<A HREF="#A1">[Previous]</A> <A HREF="#A3">[Next]</A><P>

<H1>Acknowledgments</H1>

<P>Several people have helped me make this book, and it's such a joy to have an 
opportunity to publicly thank them all.

<P>I'd like to especially mention four of my best friends, who dedicated some 
of their evenings and nights to reviewing the manuscript while I was writing it. 
Marco Losavio is a great Visual Basic programmer and was precious help in refining all 
the chapters about VBA, classes, and controls. Luigi Intonti has that special intuition 
that makes a developer a great developer and used it to help me enrich the book 
with some tricky techniques and tips. Giuseppe Dimauro, simply the finest C++ 
programmer I have ever met on this side of the Atlantic Ocean, revealed to me many 
intriguing details about Windows architecture. Finally, the sections about database 
and Internet programming wouldn't have been complete and accurate without the 
support of Francesco Albano, who has amazed me by always having the correct 
answers to all my questions about Jet, SQL Server, and Windows DNA architecture. 
Marco, Luigi, Giuseppe, and Francesco are well-known Italian technical writers, and I 
hope you'll read some of their works in English on my 
<A HREF="http://www.vb2themax.com" target="_window2"><I>www.vb2themax.com</I></A> Web site.

<P>The book also contains many traces of my conversations with two other 
renowned Italian authors. Giovanni Librando has shared with me his knowledge of 
ADO and COM, while Dino Esposito has given me much good advice and made many 
suggestions. Also, I'm very grateful to Matt Curland, who on several occasions helped 
me understand what happens behind the Visual Basic 
scenes.
<P>When writing a technical book, acquiring knowledge is only half the story. 
The other half consists in putting this knowledge in a form that other people can 
easily understand, especially when you're writing in a language that isn't your own 
mother tongue. In recent years, many people have devoted time teaching me how to 
write better English. They include the editors at the 
<I>Visual Basic Programmer's Journal</I> magazine, especially Lee Th&eacute; and Patrick Meader. I also want to thank 
editor-in-chief Jeff Hadfield for permission to mention a couple of interesting tips that 
originally appeared in the magazine's Tech Tips supplement, and of course, publisher 
Jim Fawcette for the opportunity to write for VBPJ in the first place.

<P>I was so excited to write this book with Microsoft Press, and I was even 
happier when I finally met the people I had worked with for these nine months. 
Kathleen Atkins, Marzena Makuta, and Sally Stickney are among the best editors an author 
can hope to work with. In spite of all the text they had to revert from italics to 
roman, and vice versa, they often found the time to explain to me all the subtle dos and 
don'ts of the editing black art. And big thanks to Eric Stroo, the one who started it all 
and gave me the chance to write the book that I always wanted to write.

<P>Finally, I am grateful to Dave Sanborn, Keith Jarrett, Pat Metheny, and 
Jan Garbarek, a few of the many great musicians who provided the soundtrack for 
this book. Their music kept me company for many nights and helped even more 
than the one thousand cups of espresso coffee I drank during these months.

<P>I still haven't mentioned the two people who have helped me more 
than anyone else. It's not a coincidence that they are also the ones I love most.

<P>Thank you, Andrea, for always strolling in my room and insisting on 
playing on my knees with those weird widgets called mouse and keyboard. In the end, I 
had to give up my Windows NT Server system for your experiments with Paint and 
WordArt, but in return you continuously reminded me of how exciting being the dad of a 
lively two-year-old baby is.

<P>Thank you, Adriana, for convincing me to write this book and for helping 
me be in the right humor and find the concentration to be at my best to write it. 
Living together is more and more like a fascinating, never-ending journey. What else can 
I say? You're simply the best wife I could dream of.

<P>This book is dedicated to you both.


<a name="A3"></a><h1>3. Foreword</h1>

<A HREF="#A2">[Previous]</A> <A HREF="#A4">[Next]</A><P>
<H1>Foreword</H1>

<P>I was excited to hear that Francesco was writing this book.

<P>Certainly, there's no shortage of books on Visual Basic. At our magazine, 
<I>Visual Basic Programmer's Journal</I>, we see stacks of development books sent to us 
every week. Reading another Visual Basic book is about as exciting as seeing yet 
another grid control.

<P>But what Francesco is doing is important for several reasons. First, anything 
he writes is going to be good. We know that because he is one of our most 
respected magazine authors, and he's a popular speaker at our VBITS conferences from 
San Francisco to Stockholm. Beyond that, he brings a pragmatic real-world view to 
everything he writes. He's an actual Visual Basic developer and has a unique eye for 
tips, tricks, and techniques that make his readers more productive in their work.

<P>Finally, the project itself, how he's defined his book, fills an important gap. 
His book is a truly comprehensive look at Visual Basic from a professional 
developer's perspective. I don't know of anything quite like it.

<P>There are three general types of books for developers. The first are the 
ones rushed out to grab sales when the product initially ships. These are of value but 
have inherent problems. They are by nature hurried and are based on working with 
beta releases, whose feature sets may or may not exactly match the final release. Also, 
as Visual Basic gets more complex, those early book authors simply lack the time to 
learn the tool in depth. Next come the &quot;build a complete data warehouse in 7 days&quot; 
books, aimed at exploiting less skilled wannabe developers by making unrealistic 
promises. Then there are the massive, vertical tomes that probe one subject in depth. 
These are generally more valuable. But if your work is broad, you end up collecting a 
dozen of these and never read them all.

<P>What Francesco is doing is fundamentally different. He has spent over a 
year and a half, from the early beta to the latest updates, learning Visual Basic and 
using it for professional development. He's sharing that hard-won knowledge in a 
book that's almost encyclopedic in scope. As a developer, you know that the product 
is getting deeper and much more complex with every release. Mastering it takes 
much more work than before.

<P>Francesco's book can help you get to work faster, perhaps helping you learn 
a few things you wouldn't have discovered on your own. The book is not a rehashing of the language manuals, as so many of the larger books are, but an extensive 
compiling of coding techniques that are the results of Francesco's own work. 
Tutorials span HTML, Dynamic HTML, scripting, and ASP programming&#151;topics sorely 
missing from Visual Basic's documentation.

<P>This is an ambitious project I'm confident any Visual Basic developer, 
from intermediate to experienced, can benefit from.

<P>Sincerely,
<P>James E. Fawcette
<BR>President
<P>Fawcette Technical Publications
<P>Producers of VBPJ, VBITS, JavaPro, Enterprise Development, The 
Development Exchange family of Web sites, and other information services for developers.


<a name="A4"></a><h1>4. Introduction</h1>

<A HREF="#A3">[Previous]</A> <A HREF="#A6">[Next]</A><P>

<H1>Introduction</H1>

<P>In its six versions, Visual Basic has evolved from the simplest programming 
language for Microsoft Windows to an exceedingly complex development environment, 
capable of delivering virtually anything from tiny utilities to huge n-tier 
client/server applications. For this reason, the job of writing a book that encompasses all 
the language's features has become a daunting task, and I was actually intimidated 
when I began to write this book. I would have preferred to write several books on 
specific topics, or at least this is what I thought at first.
<P>It took me some months of hard work, but in the end I managed to put 
everything I wanted to write about in one big tome. I believe that from the reader's 
point of view this is much better than having to deal with a collection of books or one 
thick volume written by several authors. One big book by one author ensures a 
uniform approach to problems and no redundancy. Nevertheless, 
<I>Programming Microsoft Visual Basic 6.0 </I>has been such a large undertaking that I like to think of it as 
many books in one. The following list will help you to understand what you'll find in it.

<P><B>A survey of the new Visual Basic 6 
features</B>

Visual Basic 6 includes many new features, especially in the database and Internet areas. Among these are ADO, 
DHTML applications, and WebClasses, just to mention the outstanding ones. I have 
explored these new features and shown you how you can take advantage of them to 
create the next generation of your applications. But at the same time, I've noted some 
of their rough edges, so you won't be lost when you find that something doesn't 
work as expected. This is one of the advantages of a book that isn't rushed to the 
market as soon as the product is released.

<P><B>A demystifying tutorial on object-oriented 
programming</B>

You've been able to build classes using Visual Basic since version 4, yet a relatively small 
number of developers actively use objects in their applications. This isn't surprising, 
after all, since most of the available OOP code examples are &quot;toy classes&quot; that deal 
with dogs, fleas, and other animals. This hardly stimulates the imagination of 
programmers who must deal with invoices, products, customers, and orders. You won't 
find the source code for a complete object-oriented invoicing application in this 
book, but you'll surely learn a lot about <I>practical 
</I>uses of classes in Chapters 6, 7, and 9 or by browsing the 100 classes on the companion CD, some of which can be 
immediately reused in your applications. And in Chapters 16 through 20, you'll see how 
you can leverage your OOP skills to create ActiveX controls, local and remote 
ActiveX components, and exotic variations such as components for ADO, RDS, and ASP.

<P><B>An in-depth reference to Visual Basic and the VBA 
language</B>

I didn't want to write a book that simply rehashes the language manuals and the on-line help. 
If you want to know the syntax of Visual Basic's keywords, don't buy a book: Just 
press F1 and see what appears on the screen. I've organized the material in Chapters 
2 through 5 so that each property, method, and event is introduced only when it 
becomes logical to do so. Even more important, you'll see all these features in 
action, with a lot of source code for you to study.

<P><B>A closer look at ADO technology</B>

Database programming is important for 
most Visual Basic developers, and ADO has much to offer in this field. That's why I 
devoted 4 out of 20 chapters&#151;that is, Chapters 8, 13, 14, and 15&#151;to it, covering 
the basics to more advanced topics, such as optimistic batch updates, 
asynchronous operations, hierarchical Recordsets, and some of the ADO 2.1 new features. 
Moreover, Chapter 18 covers data-aware components and OLE DB Simple Providers. 
And Chapter 19 includes a section about Remote Data Services, which shows how 
you can create thin clients that access a remote database through the Internet.

<P><B>A painless introduction to Internet 
programming</B>

Visual Basic 6 can create great Internet applications, but it requires that you already know the basics of 
HTML, Dynamic HTML, VBScript, and Active Server Pages development. For this reason, 
Chapters 19 and 20 include tutorials that cover all these arguments, plus an 
introduction to Microsoft Internet Information Server 4 and a guide to creating ASP 
components. Armed with this knowledge, you'll find using the new Internet-related features a breeze.

<P><B>A transition guide for Visual Basic 5 
developers</B>

Each time a new version of the language is released, programmers are eager to know what has changed 
from the previous one. It's not just a matter of curiosity: Programmers need to 
determine how long it will take to port existing applications to the new version. And, of 
course, they need to ensure that the new features don't have a negative impact on the 
existing code. Throughout the book, each description of a new Visual Basic feature 
has been marked with a <I>NEW </I>icon so that developers can spot the new features quickly.

<P><B>A digest of advanced programming 
techniques</B>

To some developers, doing advanced programming means writing a lot of API calls, possibly with some 
obscure and tricky techniques that only a few experts can understand. The truth is that 
you can solve several thorny programming problems with nothing but the power of 
Visual Basic, as I'll demonstrate throughout the book. But if you like API programming, you can refer to the Appendix to learn how to access the Registry, exploit 
the hidden features of Visual Basic controls, and master advanced techniques such 
as subclassing. You'll even find a ready-to-use DLL for safe subclassing inside the 
environment, together with its source code.

<P><B>Just a few other notes about the five-part structure of the book</B>

Part I, &quot;The Basics,&quot; is about general programming. Chapter 1 is an 
introduction to the environment for those who have never worked with Visual Basic. 
Chapters 2 through 5 focus on forms, intrinsic controls, and the VBA language, 
and contain a lot of reusable, optimized routines. Chapters 6 and 7 cover all the 
object-oriented features that will be exploited in the rest of the book. Chapter 8 
introduces the new Visual Basic 6 database features, including Visual Database Tools and 
the DataEnvironment designer, and it defines a few concepts that are made use of 
in Part&#160;II, but that will be completely developed only in Part III.

<P>Part II, &quot;The User Interface,&quot; takes a closer look at forms and ActiveX 
controls. Chapter 9 builds on the object-oriented nature of forms to create reusable 
user interface modules, parameterized forms, and generic MDI containers that can 
be reused as is in many applications. It also shows how you can exploit the 
dynamic control creation feature to create data-driven forms. Chapters 10 and 11 describe 
all the Windows common controls that come with Visual Basic, including the 
newer ImageCombo, MonthView, DateTimePicker, and 
CoolBar controls. Chapter 12 covers a few of the other controls that are provided in the package, such as the 
MaskEdBox and SSTab controls.

<P>Part III, &quot;Database Programming,&quot; continues where Chapter 8 left off. 
Chapter&#160;13 explores the ADO 2 object model, with a detailed description of all the 
properties, methods, and events. It also covers the DDL and security extensions provided 
with ADO 2.1. Chapter 14 illustrates how you can apply ADO in real-world programs 
and covers more advanced topics such as hierarchical Recordsets and stored 
procedures. Chapter 15 is about additional tools and controls that you can use for easily 
creating database applications, such as the DataGrid control, the Hierarchical FlexGrid 
control, and the DataReport designer.

<P>Part IV, &quot;ActiveX Programming,&quot; covers the ActiveX components that you 
can create in Visual Basic. Chapter 16 describes ActiveX code components, from the 
basics to advanced topics such as COM callbacks, multithreading, satellite DLLs, and 
DCOM security. Chapter 17 is about ActiveX controls and guides you through the 
creation of useful controls of increasing difficulty. It also covers major new Visual Basic 
6 features in this area, such as windowless controls, and some advanced 
techniques for the best performances. Chapter 18 illustrates the new types of ActiveX 
components that you can create with Visual Basic 6, such as data source and data 
consumer components and OLE DB Simple Providers.

<P>Part V, &quot;Internet Programming,&quot; consists of just two long chapters. Chapter 
19 is about client programming: It includes tutorials on HTML, Dynamic HTML, 
and VBScript, followed by an in-depth description of the DHTMLPage designer. 
This chapter also contains a detailed coverage of Remote Data Services, including 
the exciting capabilities offered by components that you can instantiate on a remote 
Web server. Chapter 20 is about programming for Internet Information Server 4: It 
begins with a tutorial on the ASP object model, continues with the creation of 
components for Active Server Pages, and ends with an in-depth description of the new 
Visual Basic&#160;6 WebClasses. The step-by-step descriptions guide you through the creation 
of a complete ASP application that lets remote users place their orders using a 
database of products.

<P>The Appendix is about API programming. The first part of the Appendix 
shows how you can augment the capabilities of standard controls, retrieve important 
system configuration values, control the keyboard and the mouse, and access the 
Registry. The second part explains how to get the best from advanced techniques, 
such as callback and window subclassing.

<P>On the companion CD, you'll find the complete source code for all the 
samples described or mentioned in the text. I'm talking about 150 projects and about 2 
megabytes of well-commented source code, so you have something to keep you busy 
for a while. You'll also find a library of more than 170 routines, ready to be reused 
in your applications.

<P>Have fun.

<P><I>F.B.</I>


<a name="A5"></a><h1>5. Part I: The Basics</h1>
<a name="A6"></a><h2>5.1 Chapter 1 -- First Steps with Microsoft Visual Basic 6</h2>

<A HREF="#A4">[Previous]</A> <A HREF="#A7">[Next]</A><P>


<font size="+3">Chapter 1</font>

<A NAME="4"><h1>First Steps with Microsoft Visual Basic 6</h1></A>
<p>This chapter introduces you to the Visual Basic environment and guides you 
through the creation of your first Visual Basic program. It also presents a number of 
important concepts that are crucial to Visual Basic programming, such as the event-driven 
programming model. If you aren't new to Visual Basic, you can probably skip over 
this chapter without any problem. Interspersed in the main text, however, you might 
find a few interesting tips for making the best use of the environment as well as a 
couple of introductions to features of Visual Basic that are new in version 6, so I suggest 
that you give this chapter a quick look, regardless of your Visual Basic experience.</p>


<a name="A7"></a><h3>5.1.1 The Integrated Development Environment</h3>

<A HREF="#A6">[Previous]</A> <A HREF="#A8">[Next]</A><P>

<A NAME="5"><h1>The Integrated Development Environment</h1></A>

<p>Much of the popularity of Visual Basic comes from its Integrated Development 
Environment, or IDE for short. In theory, you can edit your Visual Basic programs 
using any editor, including the aged Notepad, but I never met a programmer insane 
enough to do that. In fact, the IDE gives you everything you need to create great 
applications, to write code for them, to test and fine-tune them, and, finally, to produce 
executable files. These files are independent of the environment and therefore can be 
delivered to customers for execution on their machines, even if they haven't installed Visual Basic.</p>

<A NAME="6"><h2>Running the IDE </h2></A>

<p>You can choose from several ways to launch the Visual Basic IDE, as is true for 
any Windows executable:</p>

<UL>

<p><li> You can run the Visual Basic 6 environment from the Start Menu; the 
exact path to the menu command depends on whether you have installed 
Visual Basic as part of the Microsoft Visual Studio suite.</li></p>

<p><li> You can create a shortcut to the IDE on your desktop and run it by 
simply double-clicking on it.</li></p>

<p><li> When Visual Basic is installed, it registers the .vbp, .frm, .bas, and a 
few other extensions with the operating system. Therefore, you can run 
the environment by double-clicking on any Visual Basic file.</li></p>

<p><li> If you have installed Microsoft Active Desktop, you can create a 
shortcut to the Visual Basic IDE on the system taskbar. This is probably the 
fastest way to run the IDE: it's similar to a desktop shortcut, but you don't 
have to minimize other windows to uncover it.</li></p>
</UL>
 
<p>Don't underestimate the convenience of running the Visual Basic IDE in 
the fastest way possible. When you develop COM components or add-ins, you might 
need to follow the commonplace practice of opening multiple instances of the 
environment at the same time. You might need to repeat this operation several times 
during your working day.</p>

<A NAME="7"><h2>Selecting the Project Type</h2></A>

<p>The first time you run the Visual Basic IDE, you're asked to select the type of 
project you want to create, as you can see in Figure 1-1. In this chapter, as well as in 
many chapters in the first part of this book, we're going to create Standard EXE 
projects only, so you can click on the Open button&#8212;or just press the Enter key&#8212;to 
start working with a regular project that, once compiled, will deliver a stand-alone 
EXE application. You can also decide to tick the &quot;Don't show this dialog in future&quot; 
check box if you want to avoid this operation the next time you launch the IDE.</p>

<p>
<A HREF="javascript:fullSize('F01ph01x.htm')"> <img src="F01ph01.JPG" width=404 height=386 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-1.</B> <I>The New Project dialog box that appears when you launch the Visual Basic 6 environment.</I><!--/caption-->
</p>


<A NAME="8"><h2>IDE Windows</h2></A>

<p>If you have worked with Visual Basic 5, the Visual Basic 6 IDE will look very 
familiar to you, as you can see in Figure 1-2. In fact, the only 
indication that you're not interacting with Visual Basic 5 is a couple of new 
top-level menus&#8212;Query and Diagram&#8212;and two new icons on the standard toolbar. When 
you begin to explore the IDE's menus, you might find a few other commands (in the 
Edit, View, Project, and Tools menus) that were missing in Visual Basic 5. But 
overall changes are minimal, and if you're familiar with the Visual Basic 5 environment 
you can start working with Visual Basic 6 right away.</p>

<p>On the other hand, if you have worked only with versions of Visual Basic 
earlier than 5, you're going to be surprised by the many changes in the working 
environment. For one thing, the IDE is now an MDI (Multiple Document Interface) 
application, and you can reduce it and its dependent window with a single operation. 
You can restore the SDI (Single Document Interface) working mode, if you prefer, 
by choosing Options from the Tools menu, clicking the Advanced tab, and ticking 
the SDI Development Environment check box.</p>

<p>
<A HREF="javascript:fullSize('F01ph02x.htm')"> <img src="F01ph02.JPG" width=404 height=404 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-2.</B> <I>The Visual Basic 6 environment with most windows opened. </I><!--/caption-->
</p>

<p>Finally, if this is your first exposure to Visual Basic, you'll surely be 
confused by the many menu commands, toolbars, and windows that the IDE hosts. Let's 
quickly review the purpose of each item. You can display any of the windows using 
an appropriate command in the View menu. Many of them can also be opened using 
a keyboard shortcut, as described in the following paragraphs, or by clicking on an 
icon in the main toolbar.</p>

<UL>

<p><li> The Project window gives you an overview of all the modules that 
are contained in your application. You can display such modules grouped 
by their types or in alphabetical order by clicking on the rightmost icon 
on the Project window's toolbar. You can then view the code in each 
module or the object associated with each module (for example, a form) 
by clicking the first or the second icon, respectively. You can quickly 
display the Project window or put it in front of other windows by pressing 
the Ctrl+R key combination or by clicking on the Project Explorer icon on 
the standard toolbar.</li></p>

<p><li> You use the Form Designer window to design your application's 
user interface. Any application can contain multiple forms, and you can 
open a number of form designers at the same time. 
Moreover, both Visual Basic 5 and 6 support additional designers, such as the UserControl 
and UserDocument designers.</li></p>

<p><li> The Toolbox window includes a set of objects that you can place on a 
form or on another designer. Visual Basic comes with a fixed set of 
controls&#8212;the so-called <I>intrinsic 
controls</I>&#8212;but you can add other Microsoft 
ActiveX controls to this window. To avoid filling this window with too many 
controls, you can create multiple <I>tabs </I>on it: just right-click on the 
window, select the Add Tab command, and at a prompt assign a name to the 
new tab. Then you can place additional ActiveX controls on this new tab 
or drag one or more controls from the General tab. Similarly, you can 
delete or rename any tab by right-clicking on it and selecting the Delete 
Tab or Rename Tab commands, respectively. You can't delete or rename 
the General tab, though.</li></p>

<p><li> You use the Code window to write code that determines the behavior 
of your forms and other objects in your application. You can keep a 
number of code windows visible at one time, each one displaying the 
code related to a form or, more generally, to a module in your application. 
You can't open two code windows for the same module; however, you can 
split a code window into two distinct and independent portions by 
dragging the small gray rectangle located immediately above the vertical scrollbar.</li></p>
</UL>
 
<P><div class="tip"><blockquote><B>TIP</B><HR>You can quickly show the code window associated with a form or 
another designer by pressing the F7 function key while the focus is on the 
designer. Similarly, if you have opened the code window related to a 
designer, press the Shift-F7 key combination to display the associated designer.</blockquote></div>
</P>

<UL>
<p><li> The Properties window lists all the properties of the object that's 
currently selected and gives you the opportunity to modify them. For instance, 
you can change the foreground and background colors of the form or the 
control that's currently selected. You can list properties in alphabetical 
order or group them in categories, and you can find a short description of 
the currently selected property near the bottom of this window. When 
you select an object, its properties are automatically displayed in the 
Properties window. If the window isn't visible, you can quickly display it 
by pressing the F4 key or by clicking on the Toolbox icon on the toolbar.</li></p>

<p><li> The Color Palette window is handy for quickly assigning a color to 
an object, such as the control that's currently selected on a form designer. 
You can select the foreground color of an object by left-clicking on the 
desired color, and if you click on an empty item in the bottom row of cells 
you can also define a custom color. Finally, you can select the 
background color of an object if you click on the larger square located near the 
upper left corner of the Color Palette window.</li></p>

<p><li> The Form Layout window shows how a given form will be displayed 
when the program runs. You can drag a form to the place on the screen 
where you want it to appear during execution, and you can also compare 
the relative sizes and positions of two or more forms. By right-clicking on 
this window, you can show its <I>resolution 
guides,</I> which enable you to check how your forms display at screen resolutions different from the current one.</li></p>

<p><li> The Immediate window lets you enter a Visual Basic command or 
expression and see its result using the 
<I>Print</I> command (which can also be shortened to 
<I>?</I>). In <I>break mode</I>&#8212;that is, when you have temporarily 
suspended a running program&#8212;you can use these commands to display the 
current value of a variable or an expression. You can also write diagnostic 
messages from your application's code to this window using the 
<I>Debug.Print</I> statement. Because the Immediate window isn't visible when the 
application is compiled and executed outside the environment, such 
diagnostic statements aren't included in the executable file. You can quickly 
open the Immediate window by pressing the Ctrl+G key combination.</li></p>
</UL>

<P><div class="tip"><blockquote><B>TIP</B><HR> No menu command or toolbar icon lets you delete the current contents 
of the Immediate window. The quickest way to do it is by pressing the 
Ctrl+A key combination to select the Immediate window's entire contents, after which 
you press the Delete key to delete it or simply begin typing to replace the 
contents with whatever you want to type in instead.</blockquote></div>
</P>

<UL>
<p><li> The Object Browser is one of the most important tools available to the 
Visual Basic developer. It lets you explore external libraries so that you can 
learn about the objects they expose and their properties, methods, and 
events. The Object Browser also helps you quickly locate and jump to any 
procedure in any module of your application. You can open the Object 
Browser by pressing the F2 key or by clicking its icon on the standard toolbar.</li></p>

<p><li> The Locals window is active only when a program is executing. It lists 
the values of all the variables that are local to a module or to a procedure. 
If the variable is an object itself (a form or a control, for example) a plus 
(+) sign appears to the left of the variable name, which means that you 
can expand it and look at its properties.</li></p>

<p><li> The Watches window has a dual purpose: it lets you continuously 
monitor the value of a variable or an expression in your 
program&#8212;including a global variable, which is outside the capabilities of the Locals 
window&#8212;and it also gives you the ability to stop the execution of a program when 
a given expression becomes True or whenever it changes its value. 
You can add one or more watch expressions using the Add Watch 
command from the Debug menu, or you can select the Add Watch command 
from the pop-up menu that appears when you right-click the Watches 
window itself.</li></p>

<p><li> The Call Stack window (not visible in Figure 1-2) appears only when 
you break the execution of a running program and press Ctrl+L. It shows 
all the procedures that are waiting for the current procedure to complete. 
It's a useful debugging tool in that it lets you understand the execution 
path that led to the current situation. Note that this is a modal window, so 
you must close it to resume regular execution.</li></p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p><li> The Data View window is new to Visual Basic. (See Figure 1-3 below.) In a nutshell, the Data View window offers an 
integrated tool to administer your databases and to explore their structures and 
the attributes of their tables and fields. The Data View window is 
particularly versatile when connecting to a Microsoft SQL Server or Oracle 
database because you can also add and delete its tables, views, and fields and 
edit stored procedures. Regardless of the database you're using, you can 
often drag tables and fields from the Data View window onto other 
windows in the IDE. You display this window using the Data View command 
from the View menu or by clicking on its icon on the standard toolbar.</li></p>
</UL>
 
<p>Most of the windows I've just described can be 
<I>docked</I>: in other words, they can stick to the external frame of the main window of the IDE and are always on 
top of all other windows. By default, the majority of IDE windows are docked, 
although only the Toolbox, Project, Properties, and Form Layout windows are visible 
when the environment is launched. You can switch the 
<I>Docked </I>attribute on and off for a single window by right-clicking in it and then selecting the Dockable menu 
command. Alternatively, you can modify the 
<I>Docked</I> attribute individually for all the 
windows in the IDE by choosing Options from the Tools menu and then clicking the 
Docking tab. Just tick the check box associated with any window you want to be docked.</p>

<p>
<A HREF="javascript:fullSize('F01ph03x.htm')"> <img src="F01ph03.JPG" width=404 height=300 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-3.</B> <I>The Data View window lets you interactively create a new View object in an SQL Server database. </I><!--/caption-->
</p>

<A NAME="9"><h2>Menus </h2></A>

<p>It's unnecessary to describe in detail the purpose of each menu command at this 
point in the book because most of the commands are related to advanced features of 
Visual Basic. But I think that an overview of all the top-level menus is useful, in that 
it gives you an idea of where to look for a given function when you need it.</p>

<UL>
<p><li> The File menu includes the commands to load and save a Visual 
Basic project or a group of projects (Visual Basic 6 can open multiple 
projects in the environment), to save the current module, to print the entire 
project or selected portions of it, and to build the executable file.</li></p>

<p><li> The Edit menu lets you perform the typical editing commands, 
including Cut, Copy, Paste, Find, Replace, Undo, and Redo. It also includes 
commands that act on database tables, but they are active only when 
you're viewing the structure of a database or a database diagram. This menu 
also includes a bunch of commands related to Microsoft IntelliSense, a 
feature of the Visual Basic IDE that lets you automatically complete 
commands, list the syntax of functions and expected arguments, and so forth.</li></p>

<p><li> The View menu is the primary means of displaying any of the 
environment's windows described previously. It also includes some 
database-related commands that are enabled only if you have activated a tool for 
database maintenance.</li></p>

<p><li> The Project menu lets you add modules to the current project, 
including forms, standard (BAS) modules, class modules, UserControl modules, 
and so on. It also lets you add <I>designer </I>modules, which are the key to 
many new Visual Basic 6 features. The last three commands in this menu 
are particularly useful because they give you access to the References, 
the Components, and the Project Properties dialog boxes, respectively.</li></p>

<p><li> The Format menu is used to align and resize one or more controls on 
a form or on a designer of any type. You can also center a control on 
its form and increase or decrease the distance among a group of 
controls. When you're satisfied with the appearance of your form, you should 
select the Lock Controls option so that you can't accidentally move or 
resize the controls using the mouse.</li></p>

<p><li> The Debug menu contains the commands that you usually issue 
when you're testing an application within the IDE. You can execute your 
code step-by-step, display the value of a variable or an expression, and set 
one or more <I>breakpoints</I> in code. Breakpoints are special points in the 
code that, when reached during the program's execution, cause the Visual 
Basic environment to interrupt execution, thus entering break mode. You 
can also create <I>conditional breakpoints,</I> which are expressions that are 
monitored as each statement is executed. When the value of a 
conditional breakpoint changes or when the condition you specified becomes 
True, the program enters break mode and you can debug it easily.</li></p>

<p><li> The Run menu is probably the simplest of the group. It contains the 
commands to start the execution of the application being developed, to 
stop it and enter break mode, and to definitively end it.</li></p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p><li> The Query menu is new to the Visual Basic environment. It's available 
only in Visual Basic Enterprise and Professional Editions and only when 
you're interactively creating an SQL query using the Microsoft Query 
Builder utility, which you can see in Figure 1-3.</li></p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p><li>  The Diagram menu, shown in Figure 1-4, is 
also new to Visual Basic. As with the Query menu, the Diagram menu is 
available only in the Enterprise and Professional Editions and only when 
you're interacting with SQL Server or Oracle databases to create or edit a 
database diagram.</li></p>

 
<p>
<img src="F01ph04.GIF" width=170 height=276 border="0">
<p>
<!--caption--><B>Figure 1-4.</B> <I>The Diagram menu becomes active only when you're building a query or editing an SQL Server View object. </I><!--/caption-->


<p><li> The Tools menu contains several miscellaneous commands, the 
most important of which is the Options command. This command allows 
you to access a dialog box that lets you customize the IDE.</li></p>

<p><li> The Add-In menu lists a collection of commands related to external 
modules that integrate into the environment. Visual Basic 6 itself comes 
with a number of such external add-ins, and you can also write your own.</li></p>

<p><li> The Window menu is the typical menu that you find in most MDI 
applications; it lets you arrange and tile your windows.</li></p>

<p><li> The Help menu is also standard for 
Microsoft Windows applications. Visual Basic 6 doesn't use standard HLP files any longer, and its help 
subsystem requires that you install Microsoft Developer Network (MSDN) to 
access its documentation.</li></p>
</UL>
 
<A NAME="10"><h2>Toolbars</h2></A>

<p>Visual Basic comes with a standard toolbar that includes many common 
commands, such as those for loading and saving the project, running the program, and 
opening the most frequently used windows. Three more toolbars, Debug, Edit, and 
Form Editor, are visible only after you right-click on the standard toolbar and select 
one toolbar at a time from the submenu that 
appears. You can also make these 
toolbars visible by selecting the Toolbars option from the View menu.</p>

<p>All the toolbars can be docked in the upper portion of the main IDE 
window, or they can freely float in the environment, as you can see in Figure 1-5. You 
can quickly dock a floating toolbar by double-clicking on its title bar, and you can 
make a docked toolbar float by double-clicking on its left-most vertical stripes. If you want to know what a particular toolbar icon represents, place the mouse cursor over it 
and a yellow ToolTip showing a short explanation will appear after about a second.</p>

<p>
<A HREF="javascript:fullSize('F01ph05x.htm')"> <img src="F01ph05.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-5.</B> <I>Visual Basic 6 comes with four toolbars, which can float or be docked. </I><!--/caption-->
</p>


<p>The Debug toolbar hosts most of the commands that are found in the 
Debug menu. The Edit toolbar is useful when you're editing code and setting 
breakpoints and bookmarks. The Form Editor toolbar includes most of the commands in the 
Format menu and is useful only when you're arranging controls on a form's surface.</p>

<p>Making these additional toolbars visible or not is largely a matter of 
personal taste. I usually prefer not to waste valuable desktop space with toolbars other 
than the standard one. If you work with a higher screen resolution, this might not be 
an issue for you.</p>

<P><div class="tip"><blockquote><B>TIP</B><HR>The Edit toolbar is unusual because it contains two commands that 
aren't available through menu commands&#8212;the Comment Block and Uncomment 
Block commands, which are useful when you're testing an application. (See Figure 
1-5 for an example of a routine that has been commented using the Comment 
Block command.) For this reason, you might want to make the Edit toolbar visible.</blockquote></div>
</P>


<p>You can customize the appearance of all the Visual Basic toolbars and 
even create new ones, as you can see in Figure 1-6. The 
procedure for creating a new toolbar is simple:</p>

<OL>
<p><li>  Right-click on any toolbar, and select the Customize menu command; 
this brings up the Customize dialog box.</li></p>

<p><li> Click the New button, and type a name for the new custom toolbar 
(for example, <I>Custom Toolbar</I>). The name of the new toolbar appears in 
the list of toolbars, and its check box is ticked. The empty toolbar appears 
on the screen. You're now ready to add commands to it.</li></p>

<p><li> Click the Commands tab, and then click a menu name in the leftmost 
list box. Click on an item in the list box on the right, and drag it over the 
custom toolbar to the spot where you want to insert it.</li></p>

<p><li> Right-click on the icon you have just added, and select a command 
from the pop-up menu that appears. The commands in this menu let you 
replace the icon with a different one, associate it with a caption, make it 
the beginning of a group, and so on.</li></p>

<p><li> Repeat steps 3 and 4 for all the commands you want to add to the 
custom toolbar, and then click on the Close button to make your 
additions permanent.</li></p>
</OL>

<p>
<A HREF="javascript:fullSize('F01ph06x.htm')"> <img src="F01ph06.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-6.</B> <I>Creating a custom toolbar.</I><!--/caption-->
</p>


<p>Here are a few commands that you should consider for inclusion in a 
custom toolbar because they're frequently used but don't have any associated hot keys:</p>

<UL>
<p><li> The References and Properties commands from the Project menu</li></p>

<p><li> The Comment Block and Uncomment Block commands from the 
Edit toolbar (not displayed on the menu)</li></p>

<p><li> All the Bookmark submenu commands from the Edit menu</li></p>

<p><li> The Options command from the Tools menu</li></p>
</UL>
 
<A NAME="11"><h2>The Toolbox</h2></A>

<p>The Toolbox window is probably the first window you'll become familiar with 
because it lets you visually create the user interface for your applications. More 
specifically, the Toolbox contains the icons of all the intrinsic controls&#8212;that is, all 
the controls that are included in the Visual Basic runtime.</p>

<p>If you have already programmed with a previous version of Visual Basic, 
you surely know the characteristics of all the controls that are present in the Toolbox. 
If you haven't, refer to Figure 1-7 while you read the following condensed descriptions.</p>

<p>
<img src="F01ph07.GIF" width=377 height=716 border="0">
<p>
<!--caption--><B>Figure 1-7.</B> <I>The Visual Basic 6 Toolbox with all the intrinsic controls.</I><!--/caption-->


<UL>
<p><li> The Pointer isn't a control; click this icon when you want to select 
controls already on the form rather than create new ones.</li></p>

<p><li> The PictureBox control is used to display images in any of the 
following formats: BMP, DIB (bitmap), ICO (icon), CUR (cursor), WMF 
(metafile), EMF (enhanced metafile), GIF, and JPEG.</li></p>

<p><li> The Label control serves to display static text or text that shouldn't 
be edited by the user; it's often used to label other controls, such as 
TextBox controls.</li></p>

<p><li> The TextBox control is a field that contains a string of characters that 
can be edited by the user. It can be single-line (for entering simple values) 
or multiline (for memos and longer notes). This is probably the most 
widely used control of any Windows application and is also one of the 
richest controls in terms of properties and events.</li></p>

<p><li> The Frame control is typically used as a container for other controls. 
You rarely write code that reacts to events raised by this control.</li></p>

<p><li> The CommandButton control is present in almost every form, often in 
the guise of the OK and Cancel buttons. You usually write code in the 
<I>Click</I> event procedure of this control.</li></p>

<p><li> The CheckBox control is used when the user has to make a yes/no, 
true/false selection.</li></p>

<p><li> OptionButton controls are always used in groups, and you can select 
only one control in the group at a time. When the user selects a control in 
the group, all other controls in the group are automatically 
deselected. OptionButton controls are useful for offering to the user a number 
of mutually exclusive selections. If you want to create two or more 
groups of OptionButton controls on a form, you must place each group 
inside another container control (most often a Frame control). Otherwise, 
Visual Basic can't understand which control belongs to which group.</li></p>

<p><li> The ListBox control contains a number of items, and the user can 
select one or more of them (depending on the value of the control's 
<I>MultiSelect </I>property).</li></p>

<p><li> The ComboBox control is a combination of a TextBox and a ListBox 
control, with the difference that the list portion is visible only if the user 
clicks on the down arrow to the right of the edit area. ComboBox controls 
don't support multiple selections.</li></p>

<p><li> The HScrollBar and VScrollBar controls let you create stand-alone scroll 
bars. These controls are used infrequently because the majority of other 
controls display their own scroll bars if necessary. Stand-alone scroll bars are 
sometimes used as sliders, but in this case you'd better use other, more 
eye-catching controls, such as the Slider control, which is covered in 
<a href="#A57">Chapter 10</a>.</li></p>

<p><li> The Timer control is peculiar in that it isn't visible at run time. Its 
only purpose is to regularly raise an event in its parent form. By writing 
code in the corresponding event procedure, you can perform a task in 
the background&#8212;for instance, updating a clock or checking the status of 
a peripheral device.</li></p>

<p><li> The DriveListBox, DirListBox, and 
FileListBox controls are often used together to create file-oriented dialog boxes. DriveListBox is a 
ComboBox-like control filled automatically with the names of all the drives in 
the system. DirListBox is a variant of the ListBox control; it shows all 
the subdirectories of a given directory. FileListBox is another special 
ListBox control; this control fills automatically with names of the files in a 
specified directory. While these three controls offer a lot of functionality, in 
a sense they have been superseded by the Common Dialog control, 
which displays a more modern user interface (to be covered in <a href="#A74">Chapter 12</a>). 
If you want to write applications that closely conform to the Windows 
9x look, you should avoid using these controls.</li></p>

<p><li> The Shape and Line controls are mostly cosmetic controls that never 
raise any events and are used only to display lines, rectangles, circles, and 
ovals on forms or on other designers.</li></p>

<p><li> The Image control is similar to the PictureBox control, but it can't 
act as a container for other controls and has other limitations as well. 
Nevertheless, you should use an Image control in place of a PictureBox 
control whenever possible because Image controls consume fewer 
system resources.</li></p>

<p><li> The Data control is the key to 
<I>data binding,</I> a Visual Basic feature that lets you connect one or more controls on a form to fields in a 
database table. The Data control works with Jet databases even though you can 
also use attached tables to connect to data stored in databases stored in 
other formats. But it can't work with ActiveX Data Objects (ADO) sources 
and is therefore not suitable for exploiting the most interesting 
database-oriented Visual Basic 6 features.</li></p>

<p><li> The OLE control can host windows belonging to external programs, 
such as a spreadsheet window generated by Microsoft Excel. In other 
words, you can make a window provided by another program appear as if 
it belongs to your Visual Basic application.</li></p>
</UL>
 
<p>From this short description, you can see that not all the intrinsic controls 
are equally important. Some controls, such as the TextBox, Label, and 
CommandButton controls, are used in virtually every Visual Basic application, while other controls, 
such as the DriveListBox, DirListBox, and FileListBox controls, have been replaced, 
in practice, by newer controls. Similarly, you shouldn't use the Data control in 
any application that uses the ADO data sources.</p>


<a name="A8"></a><h3>5.1.2 Your Very First Visual Basic Program</h3>

<A HREF="#A7">[Previous]</A> <A HREF="#A9">[Next]</A><P>

<A NAME="12"><h1>Your Very First Visual Basic Program</h1></A>

<p>Visual Basic lets you build a complete and functional Windows application by 
dropping a bunch of controls on a form and writing some code that executes when 
something happens to those controls or to the form itself. For instance, you can write 
code that executes when a form loads or unloads or when the user resizes it. 
Likewise, you can write code that executes when the user clicks on a control or types 
while the control has the input focus.</p>

<p>This programming paradigm is also known as <I>event-driven 
programming</I> because your application is made up of several event procedures executed in an 
order that's dependent on what happens at run 
time. The order of execution can't, in general, be foreseen when the program is under construction. This programming 
model contrasts with the procedural approach, which was dominant in the old days.</p>

<p>This section offers a quick review of the event-driven model and uses a 
sample application as a context for introducing Visual Basic's intrinsic controls, with 
their properties, methods, and events. This sample application, a very simple one, 
queries the user for the lengths of the two sides of a rectangle, evaluates its 
perimeter and area, and displays the results to the 
user. Like all lengthy code examples and programs illustrated in this book, this application is included on the companion CD.</p>

<A NAME="13"><h2>Adding Controls to a Form</h2></A>

<p>We're ready to get practical. Launch the Visual Basic IDE, and select a Standard 
EXE project. You should have a blank form near the center of the work area. More 
accurately, you have a <I>form designer, </I>which you use to define the appearance of the 
main window of your application. You can also create other forms, if you need them, 
and you can create other objects as well, using different designers (the UserControl 
and UserDocument designers, for example). Other chapters of this book are devoted 
to such designers.</p>

<p>One of the greatest strengths of the Visual Basic language is that 
programmers can design an application and then test it without leaving the environment. But 
you should be aware that designing and testing a program are two completely 
different tasks. At <I>design time, </I>you create your forms and other visible objects, set their 
properties, and write code in their event procedures. Conversely, at 
<I>run time </I>you monitor the effects of your programming efforts: What you see on your screen is, 
more or less, what your end users will see. At run time, you can't invoke the form 
designer, and you have only a limited ability to modify the code you have written at 
design time. For instance, you can modify existing statements and add new ones, but 
you can't add new procedures, forms, or controls. On the other hand, at run time 
you can use some diagnostic tools that aren't available at design time because they 
would make no sense in that context (for example, the Locals, the Watches, and the 
Call Stack windows).</p>

<p>To create one or more controls on a form's surface, you select the control 
type that you want from the Toolbox window, click on the form, and drag the mouse 
cursor until the control has the size and shape you want. (Not all controls are 
resizable. Some, such as the Timer control, will allow you to drag but will return to their original 
size and shape when you release the mouse 
button.) Alternatively, you can place a control on the form's surface by double-clicking its icon in the Toolbox: this action 
creates a control in the center of the form. Regardless of the method you follow, 
you can then move and resize the control on the form using the mouse.</p>

<P><div class="tip"><blockquote><B>TIP</B><HR>If you need to create multiple controls of the same type, you can 
follow this three-step procedure: First, click on the control's icon on the Toolbox 
window while you keep the Ctrl key pressed. Next, draw multiple controls by clicking 
the left button on the form's surface and then dragging the cursor. Finally, 
when you're finished creating controls, press the Escape key or click the Pointer 
icon in the upper left corner of the Toolbox.</blockquote></div>
</P>


<p>To complete our Rectangle sample application, we need four TextBox 
controls&#8212;two for entering the rectangle's width and height and two for showing the 
resulting perimeter and area, as shown in Figure 1-8. Even if they 
aren't strictly required from an operational point of view, we also need four Label 
controls for clarifying the purpose of each TextBox control. Finally we add a 
CommandButton control named <I>Evaluate</I> that starts the computation and shows the results.</p>

<p>Place these controls on the form, and then move and resize them as 
depicted in Figure 1-8. Don't worry too much if the controls aren't perfectly aligned 
because you can later move and resize them using the mouse or using the commands in 
the Format menu.</p>

<p>
<A HREF="javascript:fullSize('F01ph08x.htm')"> <img src="F01ph08.JPG" width=404 height=170 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-8</B> <I>The Rectangle Demo form at design time, soon after the placement of its controls. </I><!--/caption-->
</p>


<A NAME="14"><h2>Setting Properties of Controls</h2></A>

<p>Each control is characterized by a set of properties that define its behavior and 
appearance. For instance, Label controls expose a 
<I>Caption</I> property that corresponds to the character string displayed on the control itself, and a 
<I>BorderStyle</I> property that affects the appearance of a border around the label. The TextBox control's 
most important property is <I>Text</I>, which corresponds to the string of characters that 
appears within the control itself and that can be edited by the user.</p>

<p>In all cases, you can modify one or more properties of a control by 
selecting the control in the form designer and then pressing F4 to show the Properties 
window. You can scroll through the contents of the Properties window until the property 
you're interested in becomes visible. You can then select it and enter a new value.</p>

<p>Using this procedure, you can modify the 
<I>Caption</I> property of all four Label controls to 
<I>&amp;Width</I>, <I>&amp;Height</I>, 
<I>&amp;Perimeter</I>, and <I>&amp;Area</I>, respectively. You will note 
that the ampersand character doesn't appear on the control and that its effect is to 
underline the character that follows it. This operation actually creates a 
<I>hot key </I>and associates it with the control. When a control is associated with a hot key, the 
user can quickly move the focus to the control by pressing an 
Alt+<I>x</I> key combination, as you normally do within most Windows applications. Notice that only controls 
exposing a <I>Caption</I> property can be associated with a hot key. Such controls include 
the Label, Frame, CommandButton, OptionButton, and CheckBox.</p>

<P><div class="tip"><blockquote><B>TIP</B><HR>There is one handy but undocumented technique for quickly selecting 
a given property of a control. You just have to select the control on the form 
and press the Ctrl+Shift+<I>x</I> key, where <I>x 
</I>is the first letter in the property's name. 
For instance, select a Label control, and then press 
Ctrl+Shift+C to display the Properties window and select the 
<I>Caption</I> property in one operation. Pressing 
the Ctrl+Shift+C key again moves the focus to the next property whose name 
begins with the C character, and so on in a cyclic fashion.</blockquote></div>
</P>


<p>Notice that once you have selected the 
<I>Caption</I> property for the first Label control, it stays selected when you then click on other controls. You can take 
advantage of this mechanism to change the 
<I>Caption</I> property of the CommandButton 
control to <I>&amp;Evaluate</I> and the 
<I>Caption</I> property of the Form itself to <I>Rectangle 
Demo,</I> without having to select the 
<I>Caption</I> item in the Properties window each time. Note 
that ampersand characters within a form's caption don't have any special meaning.</p>

<p>As an exercise, let's change the font attributes used for the controls, 
which you do through the <I>Font</I> property. While you can perform this action on a 
control-by-control basis, it's much easier to select the group of controls that you want to 
affect and then modify their properties in a single operation. To select multiple 
controls, you can click on each one of them while you press either the Shift or the Ctrl 
key, or you can drag an imaginary rectangle around them. (This technique is also called 
<I>lassoing </I>the controls.)</p>

<P><div class="tip"><blockquote><B>TIP</B><HR>A quick way to select all the controls on a form is to click anywhere on 
the form and press the Ctrl+A key combination. After selecting all controls, you 
can deselect a few of them by clicking on them while pressing the Shift or Ctrl 
key. Note that this shortcut doesn't select controls that are contained in other 
controls.</blockquote></div>
</P> 


<p>When you select a group of controls and then press the F4 key, the 
Properties window displays only the properties that are common to all the selected 
controls. The only properties that are exposed by any control are 
<I>Left</I>, <I>Top</I>, <I>Width</I>, and 
<I>Height</I>. If you select a group of controls that display a string of characters, such as the 
TextBox, Label, and CommandButton controls in our Rectangle example, the 
<I>Font</I> property is also available and can therefore be selected. When you double-click on the 
<I>Font</I> item in the Properties window, a Font dialog box appears. Let's select a Tahoma font 
and set its size to 11 points.</p>

<P><div class="tip"><blockquote><B>TIP</B><HR>If you want to copy a number of properties from one control to one or 
more other controls, you can select the control you want to copy from, press Shift 
and select the other controls, press F4 to show the Properties window, and 
triple-click the name of the property you want to copy. Note that you must click the 
name of the property on the left, not the value cell on the right. The values of the 
properties on which you triple-click are copied from the source controls to all the 
other selected controls. This technique doesn't work with all the items in the 
Properties window.</blockquote></div>
</P>


<p>Finally we must clear the <I>Text</I> property of each of the four TextBox 
controls so that the end user will find them empty when the program begins its 
execution. Oddly, when you select two or more TextBox controls, the 
<I>Text</I> property doesn't appear in the Properties window. Therefore, you must set the 
<I>Text </I>property to an empty string for each individual TextBox control on the form. To be honest, I 
don't know why this property is an exception to the rule stated earlier. The result of 
all these operations is shown in Figure 1-9.</p>

<p>
<A HREF="javascript:fullSize('F01ph09x.htm')"> <img src="F01ph09.JPG" width=404 height=122 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-9.</B> <I>The Rectangle Demo form at design time, after setting the controls' properties. </I><!--/caption-->
</p>

<P><div class="tip"><blockquote><B>TIP</B><HR>When a control is created from the Toolbox, its 
<I>Font</I> property reflects the font of the parent form. For this reason, you can often avoid individual font 
settings by changing the form's <I>Font</I> property before placing any controls on 
the form itself.</blockquote></div>
</P>


<A NAME="15"><h2>Naming Controls</h2></A>

<p>One property that every control has and that's very important to Visual Basic 
programmers is the <I>Name</I> property. This is the string of characters that identifies 
the control in code. This property can't be an empty string, and you can't have two 
or more controls on a form with the same name. The special nature of this property 
is indirectly confirmed by the fact that it appears as (Name) in the Properties 
window, where the initial parenthesis serves to move it to the beginning of the property list.</p>

<p>When you create a control, Visual Basic assigns it a default name. For 
example, the first TextBox control that you place on the form is named 
<I>Text1</I>, the second one is named <I>Text2</I>, and so forth. Similarly, the first Label control is named 
<I>Label1</I>, and the first CommandButton control is named 
<I>Command1</I>. This default naming scheme frees you from having to invent a new, unique name each time you create a 
control. Notice that the <I>Caption</I> property of Label and CommandButton controls, as well 
as the <I>Text</I> property of TextBox controls, initially reflect the control's 
<I>Name</I> property, but the two properties are independent of each other. In fact, you have just 
modified the <I>Caption</I> and <I>Text</I> properties of the controls in the Rectangle Demo 
form without affecting their <I>Name</I> properties.</p>

<p>Because the <I>Name </I>property identifies the control in code, it's a good habit 
to modify it so that it conveys the meaning of the control itself. This is as important 
as selecting meaningful names for your variables. In a sense, most controls on a 
form are special variables whose contents are entered directly by the user.</p>

<p>Microsoft suggests that you always use the same three-letter prefix for all 
the controls of a given class. The control classes and their recommended prefixes 
are shown in Table 1-1.</p>

<p><B>Table 1-1.</B> <i>Standard three-letter prefixes for forms and all intrinsic controls.</i></p>

<P>
<table cellpadding=5 width="95%">
<tr>  
<th><i>Control Class  </i></th>
<th><i>Prefix    </i></th>
<th><i>Control Class   </i></th>
<th><i>Prefix  </i></th></tr>
<tr>
<td valign="top">CommandButton  </td>
<td valign="top">cmd   </td>
<td valign="top">Data  </td>
<td valign="top">dat  </td></tr>
<tr>
<td valign="top">TextBox  </td>
<td valign="top">txt   </td>
<td valign="top">HScrollBar  </td>
<td valign="top">hsb  </td></tr>
<tr>
<td valign="top">Label   </td>
<td valign="top">lbl   </td>
<td valign="top">VScrollBar  </td>
<td valign="top">vsb  </td></tr>
<tr>
<td valign="top">PictureBox  </td>
<td valign="top">pic    </td>
<td valign="top">DriveListBox   </td>
<td valign="top">drv  </td></tr>              
<tr>
<td valign="top">OptionButton  </td>
<td valign="top">opt    </td>
<td valign="top">DirListBox   </td>
<td valign="top">dir  </td></tr>
<tr>
<td valign="top">CheckBox  </td>
<td valign="top">chk   </td>
<td valign="top">FileListBox  </td>
<td valign="top">fil  </td></tr>        
<tr>
<td valign="top">ComboBox  </td>
<td valign="top">cbo  </td>
<td valign="top">Line   </td>
<td valign="top">lin  </td></tr>
<tr>
<td valign="top">ListBox  </td>
<td valign="top">lst  </td>
<td valign="top">Shape  </td>
<td valign="top">shp  </td></tr>
<tr>
<td valign="top">Timer  </td>
<td valign="top">tmr   </td>
<td valign="top">OLE     </td>
<td valign="top">ole  </td></tr>
<tr>
<td valign="top">Frame  </td>
<td valign="top">fra   </td>
<td valign="top">Form  </td>
<td valign="top">frm  </td></tr>
</table></p>           

<p>For instance, you should prefix the name of a TextBox control 
with txt, the name of a Label control with lbl, and the name of a CommandButton control with 
cmd. Forms should also follow this convention, and the name of a form should be 
prefixed with the <I>frm</I> string. This convention makes a lot of sense because it lets 
you deduce both the control's type and meaning from its name. This book sticks to 
this naming convention, especially for more complex examples when code 
readability is at stake.</p>

<p>In our example, we will rename the Text1 through Text4 controls as 
txtWidth, txtHeight, txtPerimeter, and txtArea respectively. The Command1 control will be 
renamed cmdEvaluate, and the four Label1 through Label4 controls will be 
renamed lblWidth, lblHeight, lblPerimeter, and lblArea, respectively. However, please note 
that Label controls are seldom referred to in code, so in most cases you can leave 
their names unmodified without affecting the code's readability.</p>

<A NAME="16"><h2>Moving and Resizing Controls</h2></A>

<p>You probably won't be able to place your controls on the form in the right 
position on your first attempt. Most likely, you will try several layouts until you are 
satisfied with the overall appearance of the form. Fortunately, the IDE offers you many 
ways to modify the position and size of your controls without much effort.</p>

<UL>
<p><li> Select one or more controls, and move them as a single entity using 
the mouse.</li></p>

<p><li> Move one or more controls with arrow keys while you press the Ctrl 
key. The steps along the x- and y-axes are determined by the Grid Units 
settings. You can view and modify these settings using the General tab of 
the Options dialog box from the Tools menu.</li></p>

<p><li> Resize the selected control(s) by using the arrow keys while you press 
the Shift key. You can also resize a control by dragging one of the blue 
handles surrounding it when it is selected. Like the move operation, the resize 
step depends on the Grid Units settings.</li></p>

<p><li> Center a control or a group of controls on the form, either 
horizontally or vertically, using the Center In Form submenu of the Format menu.</li></p>

<p><li> Align a group of controls with respect to another control using the 
commands in the Align submenu of the Format menu. The control used as 
a reference in the aligning process is the one that was selected last (that 
is, the one with blue handles around it).</li></p>

<p><li> Resize a group of controls by selecting them and invoking a command 
in the Make Same Size submenu of the Format menu. All selected 
controls will be resized to reflect the size of the control that was selected last.</li></p>

<p><li> You can align or resize a group of controls by selecting them, 
pressing F4 to display the Properties window, and then manually modifying the 
<I>Left</I>, <I>Top</I>, <I>Width</I>, or 
<I>Height</I> properties. This procedure is useful when you 
know the absolute position or size of the controls.</li></p>
</UL>
 
<P><div class="tip"><blockquote><B>TIP</B><HR>A ComboBox control is peculiar in that its height is determined by 
the system and depends on its <I>Font</I> property. Therefore, if you have ComboBox 
and single-line TextBox controls on the same form, you should use either one of 
the last two techniques that I just described to resize the TextBox controls to 
reflect the height of the ComboBox control(s) placed on the form. This will give 
your form a consistent look.</blockquote></div>
</P>


<A NAME="17"><h2>Setting the Tab Order</h2></A>

<p>Windows standards dictate that the user can press the Tab key to visit all the 
fields in a window in the logical order. Such a sequence is known as the 
<I>Tab order </I>sequence. In Visual Basic, you set the correct Tab order sequence by assigning a proper 
value to the <I>TabIndex </I>property for all the controls that can receive the input focus, 
starting with 0 for the control that should receive the input focus when the form 
appears and assigning increasing values for all the others. In our Rectangle sample 
application, this means assigning 0 to the txtWidth control's 
<I>TabIndex</I> property, 1 to the txtHeight control's 
<I>TabIndex</I> property, and so on.</p>

<p>But wait, there's more to know about the Tab order setting. Even if Label 
controls never get the focus themselves, they expose a 
<I>TabIndex</I> property. Why?</p>

<p>As I mentioned previously, TextBox controls&#8212;or more to the point, 
controls that don't expose a <I>Caption</I> property&#8212;can't be directly associated with a hot 
key. This means that you can't use an Alt+<I>x</I> key combination to activate them. In 
our Rectangle example, we overcome this limitation by placing Label controls above 
each individual TextBox control. Unfortunately, placing a Label control near another 
control doesn't automatically provide it with hot key capabilities. To have a Label control 
lend its hot key to another control on the form, you must assign the Label's 
<I>TabIndex </I>property a value that is 1 less than the value of the other control's 
<I>TabIndex </I>property.</p>

<p>In our Rectangle sample application, this means assigning the TabIndex 
property as follows: 0 to lblWidth, 1 to txtWidth, 2 to lblHeight, 3 to txtHeight, 4 to 
cmdEvaluate, 5 to lblPerimeter, 6 to txtPerimeter, 7 to lblArea, and 8 to txtArea.</p>

<p>It's immediately apparent that when you have forms with tens or even 
hundreds of controls, correctly setting the 
<I>TabIndex</I> property for each one of them is a 
nuisance. For this reason, a number of third-party commercial or shareware vendors 
have developed special add-ins that permit you to solve this task in a visual manner, 
for example by clicking on each control, or in a semiautomatic manner by analyzing 
the relative position of all controls on the form. While these add-ins are real 
lifesavers, here's a trick well known among Visual Basic programmers that solves the 
problem with relatively little effort:</p>

<OL>
<p><li> Select the <I>last </I>control in your planned Tab order.</li></p>

<p><li> Press the Ctrl+Shift+T key combination to activate the Properties 
window. For most controls, this combination selects the 
<I>TabIndex </I>properties; for others, you might need to press it more than once.</li></p>

<p><li> Press the 0 key, thus assigning a 0 to the 
<I>TabIndex </I>property of the selected control.</li></p>

<p><li> Click on the next to last control in the Tab order, and press the 0 key 
again; this assigns a 0 to the <I>TabIndex</I> property of the current control and 1 
to the <I>TabIndex</I> property of the last control. This occurs because Visual 
Basic prevents you from using the same 
<I>TabIndex</I> value for two or more controls on the same form.</li></p>

<p><li> Repeat step 4, working backward in the Tab order sequence and 
pressing the 0 key after selecting each control. When you reach the first control 
in the sequence, the <I>TabIndex </I>property for all the controls on the form 
will be set correctly.</li></p>
</OL>

<P><div class="tip"><blockquote><B>TIP</B><HR>Visual Basic 5 and 6 also come with an 
add-in that permits you to arrange the <I>TabIndex 
</I>property for all the controls on the current form. This 
add-in is provided in source code format, in the TabOrder.vbp project located in 
the Samples\CompTool\AddIns subdirectory. To use this 
add-in, you must compile and install it manually. This tool lets you save a lot of time when 
arranging the Tab order for forms with many 
controls.</blockquote></div>
</P>


<p>Now that we have completed our project, we'll save it. Choose Save Project 
from the File menu, or click the floppy disk 
icon. Visual Basic will ask you for the 
name of the form file, and again for the name of the project file; type 
<I>Rectangle</I> for both. You'll see that you now have two new files, Rectangle.frm and Rectangle.vbp.</p>

<A NAME="18"><h2>Adding Code</h2></A>

<p>Up to this point, you have created and refined the user interface of your 
program and created an application that in principle can be run. (Press F5 and run it to 
convince yourself that it indeed works.) But you don't have a useful application yet. 
To turn your pretty but useless program into your first working application, you 
need to add some code. More precisely, you have to add some code in the 
<I>Click </I>event of the cmdEvaluate control. This event fires when the user clicks on the 
Evaluate<I> </I>button or presses its associated hot key (the Alt+E key combination, in this case).</p>

<p>To write code within the <I>Click</I> event, you just select the cmdEvaluate 
control and then press the F7 key, or right-click on it and then invoke the View Code 
command from the pop-up menu. Or you simply double-click on the control using 
the left mouse button. In all cases, the code editor window appears, with the 
flashing cursor located between the following two lines of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdEvaluate_Click()

End Sub
</pre>
</td></tr>
</table></p>


<p>Visual Basic has prepared the template of the 
<I>Click</I> event procedure for you, and you have to add one or more lines of code between the 
<I>Sub</I> and <I>End Sub</I> statements. In this simple program, you need to extract the values stored in the 
txtWidth and txtHeight controls, use them to compute the rectangle's perimeter and area, 
and assign the results to the txtPerimeter and txtArea controls respectively:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdEvaluate_Click()
    ' Declare two floating point variables.
    Dim reWidth As Double, reHeight As Double
    ' Extract values from input TextBox controls.
    reWidth = CDbl(txtWidth.Text)
    reHeight = CDbl(txtHeight.Text)
    ' Evaluate results and assign to output text boxes.
    txtPerimeter.Text = CStr((reWidth + reHeight) * 2)
    txtArea.Text = CStr(reWidth * reHeight)
End Sub
</pre>
</td></tr>
</table></p>

<P><div class="tip"><blockquote><B>TIP</B><HR>Many developers, especially those with prior experience in the 
QuickBasic language, are accustomed to extracting numeric values from character 
strings using the <I>Val</I> function. The 
<I>CDbl</I> or <I>CSng </I>conversion functions are better 
choices in most cases, however, because they're 
<I>locale-aware </I>and correctly interpret the number in those countries where the decimal separator is the comma 
instead of the period. Even more important, the 
<I>CDbl </I>or <I>CSng</I> functions conveniently skip over separator characters and currency symbols (as in $1,234), 
whereas the <I>Val</I> function doesn't.</blockquote></div>
</P>


<p>Note that you should always use the <I>Dim</I> statement to declare the variables 
you are going to use so that you can specify for them the most suitable data type. If 
you don't do that, Visual Basic will default them to the Variant data type. While this 
would be OK for this sample program, for most occasions you can make better and 
faster applications if you use variables of a more specific type. Moreover, you should 
add an <I>Option Explicit</I> statement at the very beginning of the code module so that 
Visual Basic will automatically trap any attempt to use a variable that isn't declared 
anywhere in the program code. By this single action, you'll avoid a lot of problems later in 
the development phase.</p>

<A NAME="19"><h2>Running and Debugging the Program</h2></A>

<p>You're finally ready to run this sample program. You can start its execution in 
several ways: By invoking the Start command from the Run menu, by clicking the 
corresponding icon on the toolbar, or by pressing the F5 key. In all cases, you'll see 
the form designer disappear and be replaced (but not necessarily in the same 
position on the screen) by the real form. You can enter any value in the leftmost 
TextBox controls and then click on the Evaluate button (or press the Alt+E key 
combination) to see the calculated perimeter and area in the rightmost controls. When you're 
finished, end the program by closing its main (and only) form.</p>

<P><div class="caution"><blockquote><B>CAUTION</B><HR>You can also stop any Visual Basic program running in the 
environment by invoking the End command from the Run menu, but in general 
this isn't a good approach because it prevents a few form-related 
events&#8212;namely the <I>QueryUnload</I> and the 
<I>Unload</I> events&#8212;from firing. In some cases, these 
event procedures contain the so-called <I>clean-up 
code,</I> for example, statements that close a database or delete a temporary file. If you abruptly stop the execution 
of a program, you're actually preventing the execution of this code. As a 
general rule, use the End command only if strictly necessary.</blockquote></div>
</P>


<p>This program is so simple that you hardly need to test and debug it. Of 
course, this wouldn't be true for any real-world application. Virtually all programs need 
to be tested and debugged, which is probably the most delicate (and often tedious) 
part of a programmer's job. Visual Basic can't save you from this nuisance, but at least 
it offers so many tools that you can often complete it very quickly.</p>

<p>To see some Visual Basic debugging tools in action, place a breakpoint on 
the first line of the <I>Click</I> event procedure while the program is in design mode. You 
can set a breakpoint by moving the text cursor to the appropriate line and then 
invoking the Toggle Breakpoint command from the Debug menu or pressing the F9 
shortcut key. You can also set and delete breakpoints by left-clicking on the gray vertical 
strip that runs near the left border of the code editor window. In all cases, the line on 
which the breakpoint is set will be highlighted in red.</p>

<p>After setting the breakpoint at the beginning of the 
<I>Click</I> event procedure, press F5 to run the program once again, enter some values in the Width and Height 
fields, and then click on the Evaluate button. You'll see the Visual Basic environment 
enter break mode, and you are free to perform several actions that let you better 
understand what's actually going on:</p>

<UL>
<p><li> Press F8 to execute the program one statement at a time. The Visual 
Basic instruction that's going to be executed next&#8212;that is, the current 
statement &#8212;is highlighted in yellow.</li></p>

<p><li> Show the value of an expression by highlighting it in the code 
window and then pressing F9 (or selecting the Quick Watch command from 
the Debug menu). You can also add the selected expression to the list of 
values displayed in the Watch window, as you can see in Figure 1-10.</li></p>

<p><li> An alternative way to show the value of a variable or a property is to 
move the mouse cursor over it in the code window; after a couple of 
seconds, a yellow <I>data tip </I>containing the corresponding value appears.</li></p>

<p><li> Evaluate any expression by clicking on the Immediate window and 
typing <I>?</I> or <I>Print</I> followed by the expression. This is necessary when you 
need to evaluate the value of an expression that doesn't appear in the 
code window.</li></p>

<p><li> You can view the values of all the local variables (but not 
expressions) by selecting the Locals command from the View menu. This command 
is particularly useful when you need to monitor the value of many 
local variables and you don't want to set up a watching expression for each one.</li></p>

<p><li> You can affect the execution flow by placing the text cursor on the 
statement that you want to execute next and then selecting the Set Next 
Statement command from the Debug menu. Or you can press the Ctrl+F9 
key combination. You need this technique to skip over a piece of code 
that you don't want to execute or to reexecute a given block of lines 
without restarting the program.</li></p>
</UL>
 
<p>
<A HREF="javascript:fullSize('F01ph10x.htm')"> <img src="F01ph10.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 1-10.</B> <I>The Rectangle Demo program in break mode, with several debug tools activated. </I><!--/caption-->
</p>

<A NAME="20"><h2>Refining the Sample Program</h2></A>

<p>Our first Visual Basic project, Rectangle.vbp, is just a sample program, but this is 
no excuse not to refine it and turn it into a complete and robust, albeit trivial, application.</p>

<p>The first type of refinement is very simple. Because the txtPerimeter and 
txtArea controls are used to show the results of the computation, it doesn't make sense 
to make their contents editable by the user. You can make them read-only fields 
by setting their <I>Locked</I> property to True. (A suggestion: select the two controls, press 
F4, and modify the property just once.) Some programmers prefer to use Label 
controls to display result values on a form, but using read-only TextBox controls has an 
advantage: The end user can copy their contents to the clipboard and paste those 
contents into another application.</p>

<p>A second refinement is geared toward increasing the application's consistency 
and usability. Let's suppose that your user uses the Rectangle program to determine 
the perimeter and area of a rectangle, takes note of the results, and then enters a new 
width or a new height (or both). Unfortunately, an instant before your user clicks on 
the Evaluate button the phone rings, engaging the user in a long conversation. When 
he or she hangs up, the form shows a plausible, though incorrect, result. How can 
you be sure that those values won't be mistaken for good ones? The solution is 
simple, indeed: as soon as the user modifies either the txtWidth or the 
txtHeight<I> </I>TextBox controls, the result fields must be cleared. In Visual Basic, you can 
accomplish this task by trapping each source control's 
<I>Change</I> event and writing a couple of 
statements in the corresponding event procedure. Since 
<I>Change</I> is the default event for TextBox controls&#8212;just as the 
<I>Click</I> event is for CommandButtons controls&#8212;you only have 
to double-click the txtWidth<I> </I>and txtHeight controls on the form designer to have 
Visual Basic create the template for the corresponding event procedures. This is the 
code that you have to add to the procedures:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtWidth_Change()
    txtPerimeter.Text = &quot;&quot;
    txtArea.Text = &quot;&quot;
End Sub

Private Sub txtHeight_Change()
    txtPerimeter.Text = &quot;&quot;
    txtArea.Text = &quot;&quot;
End Sub
</pre>
</td></tr>
</table></p>


<p>Note that you don't have to retype the statements in the 
<I>txtHeight</I>'s <I>Change </I>event procedure: just double-click the control to create the 
<I>Sub</I> ... <I>End Sub</I> template, and then copy and paste the code from the 
<I>txtWidth_Click</I> procedure. When you're finished, press F5 to run the program to check that it now behaves as expected.</P>

<P>The purpose of the next refinement that I am proposing is to increase 
the program's robustness. To see what I mean, run the Rectangle project and press 
the Evaluate button without entering width or height values: the program raises a 
Type Mismatch error when trying to extract a numeric value from the txtWidth control. 
If this were a real-world, compiled application, such an 
<I>untrapped </I>error<I> </I>would cause the application to end abruptly, which is, of course, unacceptable. All errors 
should be trapped and dealt with in a convenient way. For example, you should show 
the user where the problem is and how to fix it. The easiest way to achieve this is 
by setting up an error handler in the 
<I>cmdEvaluate_Click</I> procedure, as follows. (The 
lines you would add are in boldface.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdEvaluate_Click()
    ' Declare two floating point variables.
    Dim reWidth As Double, reHeight As Double
    <B>On Error GoTo WrongValues</B>

    ' Extract values from input textbox controls.
    reWidth = CDbl(txtWidth.Text)
    reHeight = CDbl(txtHeight.Text)
<B>    Ensure that they are positive values.
    If reWidth &lt;= 0 Or reHeight &lt;= 0 Then GoTo WrongValues</B>
    ' Evaluate results and assign to output text boxes.
    txtPerimeter.Text = CStr((reWidth + reHeight) * 2)
    txtArea.Text = CStr(reWidth * reHeight)
    <B>Exit Sub
WrongValues:
    MsgBox &quot;Please enter valid Width and Height values&quot;, vbExclamation</B>
End Sub 
</pre>
</td></tr>
</table></p>


<p>Note that we have to add an <I>Exit Sub</I> statement to prevent the 
<I>MsgBox</I> statement from being erroneously executed during the normal execution flow. To see 
how the <I>On Error</I> statement works, set a breakpoint on the first line of this 
procedure, run the application, and press the F8 key to see what happens when either of 
the TextBox controls contains an empty or invalid string.</p>

<A NAME="21"><h2>Ready, Compile, Run!</h2></A>

<p>Visual Basic is a very productive programming language because it allows you to 
build and test your applications in a controlled environment, without first producing a 
compiled executable program. This is possible because Visual Basic converts your 
source code into <I>p-code</I> and then interprets it. 
P-code is a sort of intermediate language, 
which, because it's not executed directly by the CPU, is slower than real 
natively compiled code. On the other hand, the conversion from source code to p-code takes only a 
fraction of the time needed to deliver a compiled application. This is 
a great productivity bonus unknown to many other languages. Another benefit of p-code is that you 
can execute it step-by-step while the program is running in the environment, 
investigate the values of the variables, and&#8212;to some extent&#8212;even modify the code itself. This 
is a capability that many other languages don't have or have acquired only recently; 
for example, the latest version of Microsoft Visual C++ has it. By comparison, Visual 
Basic has always offered this feature, which undoubtedly contributed to making it a 
successful language.</p>

<p>At some time during the program development, you might want to create 
an executable (EXE) program. There are several reasons to do 
this: compiled programs are often (much) faster than interpreted ones, users don't need to install Visual 
Basic to run your application, and you usually don't want to let other people peek 
at your source code. Visual Basic makes the compilation process a breeze: when 
you're sure that your application is completed, you just have to run the Make 
<I>projectname</I> command from the File menu.</p>

<p>It takes a few seconds to create the Rectangle.exe file. This executable file 
is independent of the Visual Basic environment and can be executed in the same 
way as any other Windows application&#8212;for example, from the Run command of the 
Start menu. But this doesn't mean that you can pass this EXE file to another user and 
expect that it works. All Visual Basic programs, in fact, depend on a number of 
ancillary files&#8212;most notably the MSVBVM60.DLL file, a part of the Visual 
Basic runtime&#8212;and won't execute accurately unless all such files are correctly installed 
on the target system.</p>

<p>For this reason, you should never assume that a Visual Basic program 
will execute on every Windows system because it's working on your computer or on 
other computers in your office. (If your business is software development, it's highly 
probable that the Visual Basic environment is installed on all the computers around 
you.) Instead, prepare a standard installation using the Package and Deployment 
Wizard, and try running your application on a clean system. If you develop software 
professionally, you should always have such a clean system at hand, if possible with 
just the operating system installed. If you're an independent developer, you 
probably won't be inclined to buy a complete system just to test your software. I found a 
very simple and relatively inexpensive solution to this dilemma: I use one computer 
with removable hard disks, so I can easily test my applications under different 
system configurations. And since a clean system requires only hundreds of megabytes 
of disk space, I can recycle all of my old hard disks that aren't large enough for 
any other use.</p>

<p>Before I conclude this chapter, you should be aware of one more detail. 
The compilation process doesn't necessarily mean that you aren't using p-code. In 
the Visual Basic jargon, <I>compiling</I> merely means 
<I>creating an</I> <I>executable file</I>. In fact, 
you can compile to p-code, even if this sounds like an oxymoron to a developer 
coming from another language. (See Figure 1-11.) In this case, Visual Basic creates an 
EXE file that embeds the same p-code that was used inside the development 
environment. That's why you can often hear Visual Basic developers talking about 
<I>p-code </I>and <I>native-code </I>compilations to better specify which type of compilation 
they're referring to.</p>

<p>
<img src="F01ph11x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 1-11.</B> <I>You can opt to compile to p-code or native code in the Compile tab of the Project Properties dialog. </I><!--/caption-->
</p>


<p>In general, such p-code-compiled programs run at the same speed as 
interpreted programs within the IDE, so you're missing one of the biggest benefits of the 
compilation process. But here are a few reasons why you might decide to create a 
p-code executable:</p>

<UL>
<p><li> P-code-compiled executables are often smaller than programs 
compiled to native code. This point can be important if you're going to 
distribute your application over the Internet or when you're creating ActiveX 
controls that are embedded in an HTML page.</li></p>

<p><li> P-code compilation is often faster than native code compilation, so 
you might prefer to stick to p-code when you compile the program in the 
test phase. (A few types of applications can't be tested within the IDE, 
most notably multithreaded components.)</li></p>

<p><li> If your application spends most of its time accessing databases or 
redrawing windows, compilation to native code doesn't significantly improve 
its performance because the time spent executing Visual Basic code is 
only a fraction of the total execution time.</li></p>
</UL>
 
<p>We've come to the end of this <I>tour de force 
</I>in the Visual Basic IDE. In this chapter, I've illustrated the basics of Visual Basic development, and I hope I've given you 
a taste of how productive this language can be. Now you're ready to move to the 
next chapters, where you can learn more about forms and controls and about how to 
make the best of their properties, methods, and events.</p>


<a name="A9"></a><h2>5.2 Chapter 2 -- Introduction to Forms</h2>

<A HREF="#A8">[Previous]</A> <A HREF="#A10">[Next]</A><P>


<font size="+3">Chapter 2</font>

<A NAME="22"><H1>Introduction to Forms</H1></A>
<p>Forms are the first Microsoft Visual Basic objects you get acquainted with. 
Although you can write useful programs with only rudimentary user 
interfaces&#8212;command-line driven utilities, for example&#8212;most Visual Basic applications include one or 
more forms, and so you need to be familiar with their properties and features.</p>

<p>Despite their different natures, forms and controls have one important thing 
in common: All of them are Visual Basic 
<I>objects</I>, and as such they expose 
properties, react to methods, and raise events. In this sense, Visual Basic is said to be an 
<I>object-based </I>programming language because the developer's job consists of reading 
and modifying objects' properties, calling their methods, and responding to their 
events. Moreover, Visual Basic can be considered a 
<I>visual </I>programming environment in that the appearance of such objects can be defined by means of interactive tools at 
design time and without writing any code.</p>

<p>Forms and controls expose dozens of properties, and when you explore 
them in the Object Browser you might legitimately wonder how you can learn the 
meaning of all of them. It takes some time until you realize that there are a few 
recurring patterns and that most of the properties are shared among forms and among 
most types of controls. In the end, properties that are peculiar to form objects or to a 
given class of controls are relatively few.</p>

<p>This consideration led me to structure this and the <a href="#A14">following chapter</a> in a 
somewhat unusual way. Most language manuals introduce forms first, describe each 
intrinsic control class and illustrate its features, passing from one control to the next, and 
so on. In my opinion, this approach forces you to study each particular object as if 
it were a separate case. Such fragmentation of information makes it difficult to get the 
big picture, and in the end it makes for a steeper leaning curve. Worse, this 
mnemonic effort doesn't help much in understanding how things actually work behind the 
scenes. For example, why do some controls expose a 
<I>TabIndex</I> property but not a <I>TabStop</I> property? Why do some controls support the 
<I>hWnd </I>property, while others do not?</p>

<p>After some thinking, I decided to depart from the typical 
control-by-control description and focus instead on the many properties, methods, and events that 
forms and most intrinsic controls have in common. The features and peculiarities of 
forms are covered only later in this chapter, and <a href="#A14">Chapter 3</a> is entirely devoted to Visual 
Basic's intrinsic controls. This means that you won't see complete programming 
examples until the second half of this chapter, even though I use some shorter pieces of 
code that explain how a property can be used or how you usually react to the events 
that are shared by most types of controls. After all, when you're working in the 
Visual Basic environment, the complete list of all the properties, methods, and 
events supported by each object is always just one keystroke away: Just press F2 to 
display the Object Browser or F1 to get more complete and descriptive help. You don't 
want to read the same information here, do you?</p>

<p>I have another reason for explaining common properties in one section. In 
its six versions, Visual Basic has undergone many important changes: Each version 
has added new features and, consequently, forms and controls have acquired more 
and more new properties, methods, and events. Backward compatibility has always 
been a primary goal in Microsoft's plans, however, and old features are still supported. 
In fact, you can often load a Visual Basic 3 project in the Visual Basic 6 
environment and run it without changing a single line of code. (The most notable exceptions 
are code that refers to external libraries and controls that access databases.) 
Backward compatibility has its drawbacks, though, the first of which is the ever-growing list 
of properties, methods, and events. For example, there are duplicated sets of 
properties that have to do with drag-and-drop, and there are two distinct ways to set 
font attributes. The result is that most beginning programmers are confused, and 
more seasoned developers tend to continue to use the old (and often inefficient) 
features because they don't want to learn a new syntax. I hope that the following 
descriptions of common properties, methods, and events can contribute to making things 
clearer to both kinds of readers.</p>


<a name="A10"></a><h3>5.2.1 Common Properties</h3>

<A HREF="#A9">[Previous]</A> <A HREF="#A11">[Next]</A><P>

<A NAME="23"><h1>Common Properties </h1></A>

<p>At first glance, it might seem that Visual Basic 6 supports countless properties 
for various objects. Fortunately, there's a set of properties many objects of different 
classes share. In this section, we'll examine these common properties.</p>

<A NAME="24"><H2>The <I>Left</I>, <I>Top</I>, <I>Width</I>, and <I>Height</I> Properties</H2></A>
<p>All visible objects&#8212;forms and controls&#8212;expose these properties, which affect 
the object's position and size. These values are always relative to the object's 
container&#8212;that is, the screen for a form and the parent form for a control. A control can also 
be contained in another control, which is said to be its 
<I>container: </I>In this case, <I>Top</I> and 
<I>Left</I> properties are relative to such a container control. By default, these 
properties are measured in <I>twips,</I> a unit that lets you create resolution-independent 
user interfaces, but you can switch to another unit, for example, pixels or inches, by 
setting the container's <I>ScaleMode</I> property. 
But you can't change the unit used for forms because they have no container: 
<I>Left</I>, <I>Top</I>, <I>Width</I>, and 
<I>Height</I> properties for forms are always measured in twips. For more information about the twip 
measurement unit, see the section &quot;<A HREF="#66">The <I>ScaleMode</I> Property</A>&quot; later in this chapter.</p>

<p>While you can enter numeric values for these properties right in the 
Properties window at design time, you often set them in a visual manner by moving and 
resizing the control on its parent form. Keep in mind that Visual Basic also offers many 
interactive commands in the Format menu that let you resize, align, and space 
multiple controls in one operation. You can also access and modify these 
properties through code to move or resize objects at run time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Double a form's width, and move it to the
' upper left corner of the screen.
Form1.Width = Form1.Width * 2
Form1.Left = 0 
Form1.Top = 0
</pre>
</td></tr>
</table></p>


<p>Note that while all controls&#8212;even invisible ones&#8212;expose these four 
properties at design time in the Properties window, controls that are inherently 
invisible&#8212;Timer controls, for example&#8212;don't support these properties at run time, and you 
can't therefore read or modify them through code.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
Controls don't necessarily have to support all four properties in 
a uniform manner. For example, ComboBox controls' 
<I>Height</I> property can be read but not written to, both at design time and run time. As far as I know, this is 
the only example of a property that appears in the Properties window but can't 
be modified at design time. This happens because the height of a ComboBox 
control depends on the control's Font attributes. Remember this exception when 
writing code that modifies the <I>Height</I> property for all the controls in a form.
</blockquote></div></p>

<A NAME="25"><h2>The <I>ForeColor</I> and <I>BackColor</I> Properties</h2></A>

<p>Most visible objects expose <I>ForeColor</I> and 
<I>BackColor</I> properties, which affect the 
color of the text and the color of the background, respectively. The colors of a few 
controls&#8212;scroll bars, for example&#8212;are dictated by Microsoft Windows, however, and you 
won't find <I>ForeColor</I> and <I>BackColor</I> entries in the Properties window. In other cases, 
the effect of these properties depends on other properties: for example, setting 
the <I>BackColor</I> property of a Label control has no effect if you set the 
<I>BackStyle</I> property of that Label to 0-Transparent. CommandButton controls are peculiar in that 
they expose a <I>BackColor</I> property but not a 
<I>ForeColor</I> property, and the background 
color is active only if you also set the 
<I>Style</I> property to 1-Graphical. (Because the default 
value for the <I>Style</I> property is 0-Standard, it might take you a while until you 
understand why the <I>BackColor</I> property doesn't affect the background color in the usual manner.)</p>

<p>When you're setting one of these two properties in the Properties window, 
you can select either a standard Windows color or a custom color using the System tab 
in the first case and the Palette tab in the second, as you can see in Figure 2-1. My 
first suggestion is always use a standard color value unless you have a very good 
reason to use a custom color. System colors display well on any Windows machine, are 
likely to conform to your customers' tastes, and contribute to making your application 
look well integrated in the system. My second suggestion is if you want to use custom 
colors, develop a consistent color scheme and use it throughout your application. I 
also have a third suggestion: Never mix standard and custom colors on the same 
form, and don't use a standard color for the 
<I>ForeColor</I> property and a custom color for 
the <I>BackColor</I> property of the same control (or vice versa), because the user might 
change the system palette in a way that makes the control completely unreadable.</p>

<p>You can choose from several ways to assign a color in code. Visual Basic 
provides a set of symbolic constants that correspond to all the colors that appear in 
the System tab in the Properties window at design time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Make Label1 appear in a selected state.
Label1.ForeColor = vbHighlightText
Label1.BackColor = vbHighlight
</pre>
</td></tr>
</table></p>


<p>All the symbolic constants are shown in Table 2-1, but you can also browse 
them in the Object Browser window, after clicking the SystemColorConstants item in 
the leftmost list box. (If you don't see it, first select &lt;All libraries&gt; or VBRUN in the 
top ComboBox control). Note that all the values of these constants are negative.</p>

<p>
<A HREF="javascript:fullSize('F02ph01x.htm')"> <img src="F02ph01.JPG" width=404 height=306 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-1.</B> <i>Two different ways to set the ForeColor and BackColor properties at design time.</i><!--/caption-->
</p>

<p><b>Table 2-1.</b> <i>Visual Basic constants for system colors.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Hex Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">vb3DDKShadow</td>
<td valign="top">&amp;H80000015</td>
<td valign="top">Darkest shadow</td>
</tr>
<tr>
<td valign="top">vb3Dface</td>
<td valign="top">&amp;H8000000F</td>
<td valign="top">Dark shadow color for 3-D display elements</td>
</tr>
<tr>
<td valign="top">vb3Dhighlight</td>
<td valign="top">&amp;H80000014</td>
<td valign="top">Highlight color for 3-D display elements</td>
</tr>
<tr>
<td valign="top">vb3Dlight</td>
<td valign="top">&amp;H80000016</td>
<td valign="top">Second lightest of the 3-D colors after vb3Dhighlight</td>
</tr>
<tr>
<td valign="top">vb3Dshadow</td>
<td valign="top">&amp;H80000010</td>
<td valign="top">Color of automatic window shadows</td>
</tr>
<tr>
<td valign="top">vbActiveBorder</td>
<td valign="top">&amp;H8000000A</td>
<td valign="top">Active window border color</td>
</tr>
<tr>
<td valign="top">vbActiveTitleBar</td>
<td valign="top">&amp;H80000002</td>
<td valign="top">Active window caption color</td>
</tr>
<tr>
<td valign="top">vbActiveTitleBarText</td>
<td valign="top">&amp;H80000009</td>
<td valign="top">Text color in active caption, size box, scroll bar arrow box</td>
</tr>
<tr>
<td valign="top">vbApplicationWorkspace</td>
<td valign="top">&amp;H8000000C</td>
<td valign="top">Background color of multiple-document interface (MDI) applications</td>
</tr>
<tr>
<td valign="top">vbButtonFace</td>
<td valign="top">&amp;H8000000F</td>
<td valign="top">Face shading on command buttons</td>
</tr>
<tr>
<td valign="top">vbButtonShadow</td>
<td valign="top">&amp;H80000010</td>
<td valign="top">Edge shading on command buttons</td>
</tr>
<tr>
<td valign="top">vbButtonText</td>
<td valign="top">&amp;H80000012</td>
<td valign="top">Text color on push buttons</td>
</tr>
<tr>
<td valign="top">vbDesktop</td>
<td valign="top">&amp;H80000001</td>
<td valign="top">Desktop color</td>
</tr>
<tr>
<td valign="top">vbGrayText</td>
<td valign="top">&amp;H80000011</td>
<td valign="top">Grayed (disabled) text</td>
</tr>
<tr>
<td valign="top">vbHighlight</td>
<td valign="top">&amp;H8000000D</td>
<td valign="top">Background color of items selected in a control</td>
</tr>
<tr>
<td valign="top">vbHighlightText</td>
<td valign="top">&amp;H8000000E</td>
<td valign="top">Text color of items selected in a control</td>
</tr>
<tr>
<td valign="top">vbInactiveBorder</td>
<td valign="top">&amp;H8000000B</td>
<td valign="top">Inactive window border color</td>
</tr>
<tr>
<td valign="top">vbInactiveCaptionText</td>
<td valign="top">&amp;H80000013</td>
<td valign="top">Color of text in an inactive caption</td>
</tr>
<tr>
<td valign="top">vbInactiveTitleBar</td>
<td valign="top">&amp;H80000003</td>
<td valign="top">Inactive window caption color</td>
</tr>
<tr>
<td valign="top">vbInactiveTitleBarText</td>
<td valign="top">&amp;H80000013</td>
<td valign="top">Text color in inactive window caption, size box, scroll bar arrow box</td>
</tr>
<tr>
<td valign="top">vbInfoBackground</td>
<td valign="top">&amp;H80000018</td>
<td valign="top">Background color of ToolTips</td>
</tr>
<tr>
<td valign="top">vbInfoText</td>
<td valign="top">&amp;H80000017</td>
<td valign="top">Color of text in ToolTips</td>
</tr>
<tr>
<td valign="top">vbMenuBar</td>
<td valign="top">&amp;H80000004</td>
<td valign="top">Menu background color</td>
</tr>
<tr>
<td valign="top">vbMenuText</td>
<td valign="top">&amp;H80000007</td>
<td valign="top">Text color in menus</td>
</tr>
<tr>
<td valign="top">vbScrollBars</td>
<td valign="top">&amp;H80000000</td>
<td valign="top">Scroll bar gray area color</td>
</tr>
<tr>
<td valign="top">vbTitleBarText</td>
<td valign="top">&amp;H80000009</td>
<td valign="top">Text color in active caption, size box, scroll bar arrow box</td>
</tr>
<tr>
<td valign="top">vbWindowBackground</td>
<td valign="top">&amp;H80000005</td>
<td valign="top">Window background color</td>
</tr>
<tr>
<td valign="top">vbWindowFrame</td>
<td valign="top">&amp;H80000006</td>
<td valign="top">Window frame color</td>
</tr>
<tr>
<td valign="top">vbWindowText</td>
<td valign="top">&amp;H80000008</td>
<td valign="top">Text color in windows</td>
</tr>
</table></p>

<p>When you're assigning a custom color, you can use one of the symbolic 
constants that Visual Basic defines for the most common colors 
(<I>vbBlack</I>, <I>vbBlue</I>, <I>vbCyan</I>, 
<I>vbGreen</I>, <I>vbMagenta</I>, <I>vbRed</I>, 
<I>vbWhite</I>, and <I>vbYellow</I>), or you can use a 
numeric decimal or hexadecimal constant:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' These statements are equivalent.
Text1.BackColor = vbCyan
Text1.BackColor = 16776960 
Text1.BackColor = &amp;HFFFF00
</pre>
</td></tr>
</table></p>


<p>You can also use an <I>RGB</I> function to build a color value composed of its 
red, green, and blue components. Finally, to ease the porting of existing 
QuickBasic applications, Visual Basic supports the 
<I>QBColor</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' These statements are equivalent to the ones above.
Text1.BackColor = RGB(0, 255, 255)    ' red, green, blue values
Text1.BackColor = QBColor(11)
</pre>
</td></tr>
</table></p>


<A NAME="26"><h2>The <I>Font</I> Property</h2></A>

<p>Forms and those controls that can display strings of characters expose the 
<I>Font</I> property. At design time, you set font attributes using a common dialog box, 
which you can see in Figure 2-2. Dealing with fonts at run time, however, is less simple 
because you must account for the fact that Font is a compound object, and you 
must assign its properties separately. Font objects expose the 
<I>Name</I>, <I>Size</I>, <I>Bold</I>, 
<I>Italic</I>, <I>Underline</I>, and 
<I>Strikethrough</I> properties.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text1.Font.Name = &quot;Tahoma&quot;
Text1.Font.Size = 12
Text1.Font.Bold = True
Text1.Font.Underline = True
</pre>
</td></tr>
</table></p>


<p>
<img src="F02ph02.GIF" width=397 height=342 border=0>
<p>
<!--caption--><B>Figure 2-2.</B> <i>At design time the Font dialog box lets you modify all font attributes at once and preview the result.</i><!--/caption-->


<P><div class="TIP"><blockquote>
<B>TIP</B><HR>
You can use the 
<I>Set</I> command to assign whole Font objects to 
controls (thus avoiding having to set individual font attributes for each control), as 
you can see in the following code fragment:

<p><table><tr><td>
<PRE>
' Assign to Text2 the same font as used by Text1.
Set Text2.Font = Text1.Font
</PRE>
</td></tr></table></p>

<p>It should be made clear, however, that the preceding code actually assigns 
the <I>same </I>Font objects to both controls. This means that if you later change 
Text1's font attributes, the appearance of Text2 will also be affected. This behavior 
is perfectly consistent with the Font object's nature, even though the reasons for 
it will become clear only later in <a href="#A37">Chapter 6</a>. You can take advantage of this 
approach&#8212;for example, if all the controls in your form always use the same 
font&#8212;but you should absolutely avoid it when the controls in question are 
supposed to have independent font attributes.</p>
</blockquote></div></p>

<p>Visual Basic 6 still supports old-style Font properties such as 
<I>FontName</I>,<I> FontSize</I>,<I> 
FontBold</I>,<I> FontItalic</I>,<I> 
FontUnderline</I>, and <I>FontStrikethru</I>, but you can modify 
them only through code because they don't appear in the Properties window at design 
time. You can use the syntax that you like most because the two forms are perfectly 
interchangeable. In this book, however, I mostly follow the newer object-oriented syntax.</p>

<p>The <I>Font.Size</I> property (or the equivalent 
<I>FontSize</I> property) is peculiar because in general you can't be sure that Visual Basic is able to create a font of that 
particular size, especially if you aren't working with a TrueType font. The short code 
snippet below proves this.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text1.Font.Name = &quot;Courier&quot;
Text1.Font.Size = 22
Print Text1.Font.Size  ' Prints 19.5
</pre>
</td></tr>
</table></p>


<p>Note that no error is raised if you specify a font size that isn't actually available.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>In general, Visual Basic doesn't raise errors when you try to 
assign invalid font names. In this case, the effect is somewhat unpredictable. For 
example, try the following code:

<p><table><tr><td>
<PRE>
' Warning: you may get different results on your system.
Print Font.Name       ' Displays &quot;Ms Sans Serif&quot;
Font.Name = &quot;xyz&quot;
Print Font.Name       ' Displays &quot;Arial&quot; 
</PRE>
</td></tr></table></p>

</blockquote></div></p>


<A NAME="27"><h2>The <I>Caption</I> and <I>Text</I> Properties</h2></A>

<p>The <I>Caption</I> property is a string of characters that appears inside a control (or in 
the title bar of a form) and that the user can't directly modify. Conversely, the 
<I>Text</I> property corresponds to the &quot;contents&quot; of a control and is usually editable by the end 
user. No intrinsic control exposes both a 
<I>Caption</I> and a <I>Text</I> property, so in practice a 
look at the Properties window can resolve your doubts as to what you're working 
with. Label, CommandButton, CheckBox, OptionButton, Data, and Frame controls 
expose the <I>Caption</I> property, whereas TextBox, ListBox, and ComboBox controls expose 
the <I>Text</I> property.</p>

<p>The <I>Caption</I> property is special in that it can include an ampersand (&amp;) 
character to associate a hot key with the control. The 
<I>Text</I> property, when present, is always the default property for the control, which means that it can be omitted in code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' These statements are equivalent.
Text2.Text = Text1.Text
Text2 = Text1
</pre>
</td></tr>
</table></P>


<p><div class="note"><blockquote><b>NOTE</b><hr>Specifying or omitting the name of the default property in code is 
mostly a matter of personal taste. I always try to specify the name of all the 
properties referenced in code because doing so tends to make the code more 
readable. However, if you have long lines of code, specifying all the default properties 
can sometimes make the code <I>less </I>readable and can force you to horizontally 
scroll through the code window. This consideration has been followed in this book: 
Most of the time, I specify the default property, but don't be surprised if 
I sometimes omit it, especially in longer listings.

<p>While we are on this topic, note that many programmers mistakenly 
believe that using default properties can make their code run faster. This is a 
leftover notion from Visual Basic 3 days, but it hasn't been true since Visual 
Basic 4 changed the internal implementation of controls.</p> 
</blockquote></div></p>

<p>In general, if a control exposes the 
<I>Text</I> property it also supports the 
<I>SelText</I>, <I>SelStart</I>, and 
<I>SelLength</I> properties, which return information about the portion of 
text that's currently selected in the control.</p>

<A NAME="28"><h2>The <I>Parent </I>and <I>Container</I> Properties</h2></A>

<p>The <I>Parent</I> property is a run time_only property (that is, you don't see it in 
the Properties window), which returns a reference to the form that hosts the control. 
The <I>Container</I> property is also a run time_only property, which returns a reference to 
the container of the control. These two properties are correlated, in that they 
return the same object&#8212;the parent form&#8212;when a control is placed directly on the form 
surface.</p>

<p>While you can't move a control from one form to another using the 
<I>Parent</I> property (which is read-only), you can move a control to another container by 
assigning a different value to its 
<I>Container</I> property (which is a read-write 
property). Because you're assigning objects and not plain values, you must use the 
<I>Set</I> keyword:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Move Text1 into the Picture1 container. 
Set Text1.Container = Picture1
' Move it back on the form's surface.
Set Text1.Container = Form1
</pre>
</td></tr>
</table></p>


<A NAME="29"><h2>The <I>Enabled</I> and <I>Visible</I> Properties</h2></A>

<p>By default, all controls and forms are both visible and enabled at run time. For 
a number of reasons, however, you might want to hide them or show them in a 
disabled state. For example, you might use a hidden DriveListBox control simply to 
enumerate all the drives in the system. In this case, you set the 
<I>Visible</I> property of the DriveListBox control to False in the Properties window at design time. More frequently, 
however, you change these properties at run time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Enable or disable the Text1 control when
' the user clicks on the Check1 CheckBox control.
Private Sub Check1_Click()
    Text1.Enabled = (Check1.Value = vbChecked)
End Sub
</pre>
</td></tr>
</table></p>


<p>Disabled controls don't react to user's actions, but otherwise they're 
fully functional and can be manipulated through code. Invisible controls are 
automatically disabled, so you never need to set both these properties to False. All mouse 
events for disabled or invisible controls are passed to the underlying container or to 
the form itself.</p>

<p>If an object works as a container for other objects&#8212;for instance, a Form is 
a container for its controls and a Frame control can be a container for a group 
of OptionButton controls&#8212;setting its 
<I>Visible</I> or <I>Enabled</I> properties indirectly affects 
the state of its contained objects. This feature can often be exploited to reduce the 
amount of code you write to enable or disable a group of related controls.</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>
Most controls change their appearance when they're disabled. 
Generally speaking, this is a useful practice because the user can understand at first 
glance which controls he or she can act on. If you have a good reason to disable a 
control but still display it in an active state, you can place the control inside a 
container (a Frame or a PictureBox, for example) and then set the container's 
<I>Enabled</I> property to False. Visual Basic will disable all contained controls, but they 
will continue to appear in an enabled state. This trick works better if you also set 
the container's <I>BorderStyl</I>e property to 0-None. 
</blockquote></div></p>

<p>Some programmers set the <I>Enabled</I> properties to False for TextBox or 
ComboBox controls that must work in a read-only mode. This is reminiscent of the way 
things worked under Visual Basic 3 and previous versions. But these controls now 
expose a <I>Locked</I> property that, if True, makes the controls completely functional, except 
that users can't modify their <I>Text</I> property. This means that users can scroll through 
their content but can't accidentally modify it.</p>

<A NAME="30"><h2>The <I>hWnd</I> Property</h2></A>

<p>The <I>hWnd </I>property doesn't appear in the Properties window because its value 
is available only at run time. Moreover, it's a read-only property, and therefore you 
can't assign a value to it. The <I>hWnd</I> property returns the 32-bit integer value that 
Windows uses internally to identify a control. This value is absolutely meaningless in 
standard Visual Basic programming and only becomes useful if you invoke Windows 
API routines (which I'll cover in <a href="#A129">Appendix A</a>). Even if you're not going to use this 
property in your code, it's good for you to know that not all controls support it and it's 
important to understand why.</p>

<p>Visual Basic controls&#8212;both intrinsic controls and external Microsoft 
ActiveX controls&#8212;can be grouped in two categories: 
<I>standard </I>controls and <I>windowless </I>(or 
<I>lightweight</I>) controls. To grasp the difference between the two groups, let's 
compare the PictureBox control (a standard control) and the Image control (a 
windowless control). Even though they appear similar at a first glance, behind the scenes 
they are completely different.</p>

<p>When you place a standard control on the form, Visual Basic asks the 
operating system to create an instance of that control's class, and in return Windows passes 
back to Visual Basic the internal <I>handle </I>to that control, which the language then 
exposes to the programmer through the <I>hWnd</I> property. All subsequent operations 
that Visual Basic performs on that control&#8212;resizing, font setting, and so on&#8212;are 
actually delegated to Windows. When the application raises an event 
(such as resizing), Visual Basic runtime calls an internal Windows API function and passes it the 
handle so that Windows knows which control is to be affected.</p>

<p>Lightweight controls such as Image controls, on the other hand, don't 
correspond to any Windows object and are entirely managed by Visual Basic itself. In a 
sense, Visual Basic just simulates the existence of that control: It keeps track of all 
the lightweight controls and redraws them each time the form is refreshed. For this 
reason, lightweight controls don't expose an 
<I>hWnd</I> property because there aren't any Windows handles associated with them. Windows doesn't even know a control is there.</p>

<p>From a practical point of view, the distinction between standard and 
lightweight controls is that the former consume system resources and memory while the 
latter don't. For this reason, you should always try to replace standard controls with 
lightweight controls. For example, use an Image control instead of a PictureBox 
control unless you really need some of PictureBox's specific features. To give you an 
idea of what this means in practice, a form with 100 PictureBox controls loads 
<I>10 times slower</I> than a form with 100 Image controls.</p>

<p>To understand whether a control is lightweight, see whether it supports 
the <I>hWnd</I> property. If it does, it surely is a standard control. A trip to the Object 
Browser reveals that the TextBox, CommandButton, OptionButton, CheckBox, Frame, 
ComboBox, and OLE controls, as well as both scroll bar controls and the ListBox control 
and all its variations, are standard controls. The Label, Shape, Line, Image, and 
Timer controls don't expose the <I>hWnd</I> property and should be therefore 
considered lightweight controls. But note that a missing 
<I>hWnd</I> property in an external ActiveX control doesn't necessarily mean that the control is windowless because the 
control's creator might decide not to expose the window's handle to the outside. For 
more information about standard and windowless controls, see the description of 
the <I>ZOrder</I> method later in this chapter.</p>

<A NAME="31"><h2>The <I>TabStop</I> and <I>TabIndex</I> Properties</h2></A>

<p>If a control is able to receive the input focus, it exposes the 
<I>TabStop</I> property. Most intrinsic controls support this property, including TextBox, OptionButton, 
CheckBox, CommandButton, OLE, ComboBox, both types of scroll bars, the ListBox control, 
and all its variations. In general, intrinsic lightweight controls don't support this 
property because they can never receive the input focus. The default value for this 
property is True, but you can set it to False either at design time or run time.</p>

<p>If a control supports the <I>TabStop</I> property, it also supports the 
<I>TabIndex</I> property, which affects the Tab order sequence&#8212;that is, the sequence in which the 
controls are visited when the user presses the Tab key repeatedly. (See the section 
&quot;<A HREF="#17">Setting the Tab Order</A>&quot; in Chapter 1.) The 
<I>TabIndex</I> property is also supported by Label 
and Frame controls, but since these two controls don't support the 
<I>TabStop</I> property, the resulting effect is that when the user clicks on a Label or a Frame control (or 
presses the hot key specified in the Label or Frame 
<I>Caption</I> property), the input focus goes to the control that follows in the Tab order sequence. You can exploit this feature 
to use Label and Frame controls to provide hot keys to other controls:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Let the user press the Alt+N hot key
' to move the input focus on the Text1 control.
Label1.Caption = &quot;&amp;Name&quot;
Text1.TabIndex = Label1.TabIndex + 1
</pre>
</td></tr>
</table></p>


<A NAME="32"><h2>The <I>MousePointer</I> and <I>MouseIcon</I> Properties</h2></A>

<p>These properties affect the shape of the mouse cursor when it hovers over a 
control. Windows permits a very flexible mouse cursor management in that each form 
and each control can display a different cursor, and you can also set an 
application-wide mouse cursor using the Screen global object. Nevertheless, the rules that affect 
the actual cursor used aren't straightforward:</p>

<UL>
<p><li>If the <I>Screen.MousePointer</I> property is set to a value different from 0-vbDefault, the mouse cursor reflects this value and no other 
properties are considered. But when the mouse floats over a different application 
(or the desktop), the cursor appearance depends on 
<I>that </I>application's current state, not yours.</li></p>

<p><li>If <I>Screen.MousePointer</I> is 0 and the mouse cursor is over a control, 
Visual Basic checks that control's 
<I>MousePointer</I> property; if this value is 
different from 0-vbDefault, the mouse cursor is set to this value.</li></p>

<p><li>If <I>Screen.MousePointer</I> is 0 and the mouse is over a form's surface or 
it's over a control whose <I>MousePointer</I> property is 0, Visual Basic uses 
the value stored in the form's <I>MousePointer</I> property.</li></p>
</UL>
 
<p>If you want to show an hourglass cursor, wherever the user moves the 
mouse, use this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' A lengthy routine
Screen.MousePointer = vbHourglass
...
' Do your stuff here
...
' but remember to restore default pointer.
Screen.MousePointer = vbDefault
</pre>
</td></tr>
</table></p>


<p>Here's another example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show a crosshair cursor when the mouse is over the Picture1
' control and an hourglass elsewhere on the parent form.
Picture1.MousePointer = vbCrosshair
MousePointer = vbHourglass
</pre>
</td></tr>
</table></p>


<p>The <I>MouseIcon</I> property is used to display a custom, user-defined mouse 
cursor. In this case, you must set the 
<I>MousePointer</I> to the special value 99-vbCustom and 
then assign an icon to the <I>MouseIcon</I> property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display a red Stop sign mouse cursor. The actual path may differ,
' depending on the main directory where you installed Visual Basic. 
MousePointer = vbCustom
MouseIcon = LoadPicture(&quot;d:\vb6\graphics\icons\computer\msgbox01.ico&quot;)
</pre>
</td></tr>
</table></p>


<p>You don't need to load a custom mouse cursor at run time using the 
<I>LoadPicture</I> command. For example, you can assign it to the 
<I>MouseIcon</I> property at design time in the Properties window, as you can see in Figure 2-3, and activate it only 
when needed by setting the <I>MousePointer</I> property to 99-vbCustom. If you need to 
alternate among multiple cursors for the same control but don't want to distribute 
additional files, you can load additional ICO files in hidden Image controls and switch 
among them at run time.</p>

<p>
<A HREF="javascript:fullSize('F02ph03x.htm')"> <img src="F02ph03.JPG" width=404 height=327 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-3.</B> <i>Visual Basic 6 comes with a lot of ready-to-go custom cursors, icons, and bitmaps in the \GRAPHICS subdirectory.</i><!--/caption-->
</p>

<A NAME="33"><h2>The <I>Tag</I> Property</h2></A>

<p>All controls support the <I>Tag</I> property, without exception. This is true even for 
ActiveX controls, including any third-party controls. How can I be so certain that all 
controls support this property? The reason is that the property is provided by Visual Basic 
itself, not by the control. <I>Tag</I> isn't the only property provided by Visual Basic to any 
control: <I>Index</I>,<I> Visible</I>,<I> 
TabStop</I>,<I> TabIndex</I>,<I> ToolTipText</I>, 
<I>HelpContextID</I>, and <I>WhatsThisHelpID</I> properties all belong to the same category. These properties are collectively 
known as <I>extender properties</I>. Note that a few extender properties are available only 
under certain conditions. For example, 
<I>TabStop</I> is present only if the control can 
actually receive the focus. The <I>Tag</I> property is distinctive because it's guaranteed to be 
always available, and you can reference it in code without any risk of raising a run-time 
error.</p>

<p>The <I>Tag</I> property has no particular meaning to Visual Basic: 
It's simply a container for any data related to the control that you want to store. For example, 
you might use it to store the initial value displayed in a control so that you can 
easily restore it if the user wants to undo his or her changes.</p>

<A NAME="34"><h2>Other Properties </h2></A>

<p>The <I>Value</I> property is common to several intrinsic controls, namely 
CheckBox, OptionButton, CommandButton, and scroll bar controls, as well as to many 
external ActiveX controls. The meaning of this property varies from control to control, but 
in all cases it's a numerical or Boolean property.</p>

<p>The <I>Index</I> property is the key to building 
<I>control arrays,</I> a nifty Visual Basic feature that helps you create more versatile programs. (I explain control arrays 
more fully in <a href="#A14">Chapter 3</a>.) If you don't want to create a control array, just leave this 
property blank in the Properties window at design time. Note that this property is 
read-only at run time for controls that belong to a control array. Note that Visual Basic 
raises an error if you reference the <I>Index</I> property of a control that doesn't belong to 
a control array.</p>

<p>Most intrinsic controls support the 
<I>Appearance</I> property, which can be 
assigned at design time only and is read-only at run time. By default, Visual Basic 
creates controls with a three-dimensional aspect, unless you modify the value of this 
property to 0-Flat. You might decide to do so for visual consistency with older programs. 
For all your new applications, you should simply forget about the 
<I>Appearance</I> property and leave it at its default value (1-3D).</p>

<p>You can have Visual Basic automatically attach a control to the border of 
its parent window by setting its <I>Align</I> property to a non-Null value. Only two 
intrinsic controls support this property&#8212;PictureBox and Data controls&#8212;but several 
external ActiveX controls can be aligned in this way. Possible values for this property are 
0-None, 1-Align Top, 2-Align Bottom, 3-Align Left, and 4-Align Right.</p>

<p>The <I>BorderStyle</I> property is supported by a few intrinsic controls, namely 
the TextBox, Label, Frame, PictureBox, Image, and OLE controls. You can set this 
property to 0-None to suppress a border around the controller to 1-Fixed Single to draw 
it. Forms also support this property, but they allow different settings (as you'll see 
later in this chapter).</p>

<p><I>ToolTips </I>are those tiny, usually yellow windows that appear in most 
Windows applications when you move the mouse over a control or an icon and keep the 
mouse pointer still for a second or two. (Figure 2-4 shows you helpful advice from a 
ToolTip.) Until Visual Basic 4, developers had to create special routines or buy third-party 
tools to add this functionality to their programs. In Visual Basic 5 and 6, you only have 
to assign a string to the <I>ToolTipText</I> property of the control. Unfortunately, form 
objects don't support this property. Note that you have no control over the position or 
size of ToolTip windows and can modify their foreground and background color only 
on a systemwide basis. (Open the Control Panel window, double-click on the 
Display icon, and then move to the Appearance tab of the Display Properties dialog box 
where you can change the font and the background color of your ToolTips.)</p>

<p>
<img src="F02ph04.GIF" width=310 height=161 border=0>
<p>
<!--caption--><B>Figure 2-4.</B> <i>A tiny ToolTip tells you to enter your name.</i><!--/caption-->


<p>The <I>DragMode</I> and 
<I>DragIcon</I> properties (as well as the 
<I>Drag</I> method) were used to drag controls on the form, but they have been superseded by the 
<I>OLE</I>xxxx methods and properties. The old properties are still included for backward compatibility, 
but you shouldn't use them if you want to make your application conform to 
Windows 95 standards. OLE Drag and Drop properties, methods, and events are described in 
the &quot;<A HREF="#400">Using Drag-and-Drop</A>&quot; section of Chapter 9.</p>

<p>You use <I>LinkMode</I>,<I> LinkTopic</I>,<I> 
LinkItem</I>, and <I>LinkTimeout </I>properties (as 
well as <I>LinkPoke</I>, <I>LinkExecute</I>, 
<I>LinkRequest</I>, and <I>LinkSend</I> methods) to enable a control or form to communicate through DDE (Dynamic Data Exchange) protocol with 
other controls or forms, possibly in another application. Before the advent of OLE and 
COM, Dynamic Data Exchange was the preferred way for two Windows programs 
to communicate. These days, you shouldn't use this technique because these 
properties have been maintained only for backward compatibility with applications written 
in previous versions of Visual Basic. I won't cover DDE in this book.</p>


<a name="A11"></a><h3>5.2.2 Common Methods</h3>

<A HREF="#A10">[Previous]</A> <A HREF="#A12">[Next]</A><P>

<A NAME="35"><h1>Common Methods</h1></A>

<p> Just as there are many properties that most objects share, they also have 
many methods in common. In this section, we examine these methods.</p>

<A NAME="36"><h2>The <I>Move</I> Method</h2></A>

<p>If a control supports <I>Left</I>, <I>Top</I>, 
<I>Width</I>, and <I>Height</I> properties, it also supports the 
<I>Move</I> method, through which you can change some or all four properties in a single 
operation. The following example changes three properties: 
<I>Left</I>, <I>Top</I>, and <I>Width</I>.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Double a form's width, and move it to the upper left corner of the screen.
' Syntax is: Move Left, Top, Width, Height.
Form1.Move 0, 0, Form1.Width * 2
</pre>
</td></tr>
</table></p>


<p>Note that all arguments but the first one are optional, but you can't omit 
any of them in the middle of the command. For example, you can't pass the 
<I>Height</I> 
argument if you omit the <I>Width</I> argument. As I mentioned in the description of 
individual properties, you should be aware that the 
<I>Height</I> property is read-only for the ComboBox control.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
The <I>Move</I> method should always be preferred to individual property 
assignment for at least two reasons: This operation is two to three times 
faster than four distinct assignments, and if you're modifying the 
<I>Width</I> and <I>Height</I> 
properties of a form, each individual property assignments would fire a 
separate <I>Resize</I> event, thus adding a lot of overhead to your code.
</blockquote></div></p>

<A NAME="37"><h2>The <I>Refresh</I> Method</h2></A>

<p>The <I>Refresh</I> method causes the control to be redrawn. You normally don't need 
to explicitly call this method because Visual Basic automatically refreshes the 
control's appearance when it has a chance (usually when no user code is running and 
Visual Basic is in an idle state). But you can explicitly invoke this method when you 
modify a control's property and you want the user interface to be immediately updated:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For n = 1000 To 1 Step -1
    Label1.Caption = CStr(i)
    Label1.Refresh          ' Update the label immediately.
Next
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You can also refresh a form using the 
<I>DoEvents</I> command because it yields the control to Visual Basic, and the Visual Basic form engine 
exploits this opportunity to update the user interface. But you should be aware 
that <I>DoEvents</I> performs additional processing as well&#8212;for example, it 
checks whether any button has been clicked and if so it executes its 
<I>Click</I> procedure. Therefore, the two techniques aren't always equivalent. In general, using 
the <I>Refresh</I> method on the only control that has been modified delivers better 
performance than executing a <I>DoEvents</I> command. It also avoids reentrancy 
problems that can occur, for example, when the user clicks again on the same 
button before the previous <I>Click</I> procedure has completed its processing. If you 
want to update all the controls on a form but you don't want the end user to 
interact with the program, just execute the <I>Refresh 
</I>method of the parent form.
</blockquote></div></p>

<A NAME="38"><h2>The <I>SetFocus</I> Method</h2></A>

<p>The <I>SetFocus</I> method moves the input focus on the specified control. You need 
to call this method only if you want to modify the default Tab order sequence that 
you implicitly create at design time by setting the 
<I>TabIndex</I> property of the controls on the form, as we saw in <a href="#A6">Chapter 1</a>. The control whose 
<I>TabIndex </I>property is set to 0 receives the focus when the form loads.</p>

<p>A potential problem with the <I>SetFocus</I> method is that it fails and raises a 
run-time error if the control is currently disabled or invisible. For this reason, avoid 
using this method in the <I>Form_Load</I> event (when all controls aren't yet visible) and 
you should either ensure that the control is ready to receive the focus or protect 
the method with an <I>On Error</I> statement. Here's the code for the former approach:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the focus to Text1. 
If Text1.Visible And Text1.Enabled Then
    Text1.SetFocus
End If
</pre>
</td></tr>
</table></p>


<p>And here's the code for the other possible approach, using the 
<I>On Error</I> 
statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the focus to Text1. 
On Error Resume Next
Text1.SetFocus
</pre>
</td></tr>
</table></p>


<P><div class="TIP"><blockquote>
<B>TIP</B><HR>
The <I>SetFocus</I> method is often used in the 
<I>Form_Load</I> event procedure to programmatically set which control on the form should receive the focus 
when the form initially appears. Because you can't use 
<I>SetFocus</I> on invisible controls, you're forced to make the form visible first:

<p><table><tr><td>
<PRE>
Private Sub Form_Load()
    Show          ' Make the form visible.
    Text1.SetFocus
End Sub
</PRE>
</td></tr></table></p>


<p>Here's another possible solution:</p>

<p><table><tr><td>
<PRE>
Private Sub Form_Load()
    Text1.TabIndex = 0  
End Sub
</PRE>
</td></tr></table></p>

<p>Note that if <I>Text1</I> isn't able to receive the input focus (for example, 
its <I>TabStop</I> property is set to False), Visual Basic automatically moves the 
focus on the next control in the Tab order sequence, without raising any error. 
The drawback of this second approach is that it affects the Tab order of all 
other controls on the form.</p>
</blockquote></div></p>

<A NAME="39"><h2>The <I>ZOrder</I> Method</h2></A>

<p>The <I>ZOrder</I> method affects the visibility of the control with respect to other 
overlapping controls. You just execute this method without any argument if you want to 
position the control in front of other controls; or you can pass 1 as an argument to move 
the control behind other controls:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move a control behind any other control on the form.
Text1.ZOrder 1      
Text1.ZOrder        ' Move it in front.
</pre>
</td></tr>
</table></p>


<p>Note that you can set the relative z-order of controls at design time using 
the commands in the Order submenu of the Format menu, and you can also use the 
Ctrl+J key combination to bring the selected control to the front or the Ctrl+K key 
combination to move it behind other controls.</p>

<p>The actual behavior of the <I>ZOrder</I> method depends on whether the control 
is standard or lightweight. In fact, lightweight controls can never appear in front 
of standard controls. In other words, the two types of controls&#8212;standard and 
lightweight&#8212;are located on distinct z-order layers, with the layer of standard controls in front 
of the layer of lightweight controls. This means that the 
<I>ZOrder</I> method can change the relative z-order of a control only within the layer it belongs to. For example, you 
can't place a Label (lightweight) control in front of a TextBox (standard) control. 
However, if the standard control can behave like a container control&#8212;a PictureBox or a 
Frame control, for example&#8212;you can make a lightweight control appear in front of 
the standard control if you place the lightweight control inside that container control, 
as you can see in Figure 2-5.</p>

<p>The <I>ZOrder</I> method also applies to forms. You can send a form behind all 
other forms in the same Visual Basic application, or you can bring it in front of them. 
You can't use this method, however, to control the relative position of your forms 
with respect to windows belonging to other applications.</p>

<p>
<A HREF="javascript:fullSize('F02ph05x.htm')"> <img src="F02ph05.JPG" width=404 height=273 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-5.</B> <i>Relative z-order of controls.</i><!--/caption-->
</p>


<a name="A12"></a><h3>5.2.3 Common Events</h3>

<A HREF="#A11">[Previous]</A> <A HREF="#A13">[Next]</A><P>

<A NAME="40"><h1>Common Events</h1></A>

<p>In addition to common properties and methods, Visual Basic 6 forms and 
controls support common events. In this section, we'll describe these events in some detail.</p>

<A NAME="41"><h2>The <I>Click</I> and <I>DblClick</I> Events</h2></A>

<p>A <I>Click</I> event occurs when the user left-clicks on a control, whereas the 
<I>DblClick</I> event occurs&#8212;you guessed it&#8212;when he or she double-clicks on the control using the 
left mouse button. But don't be fooled by this apparent simplicity because the 
<I>Click</I> event can occur under different circumstances as well. For example, whenever a 
CheckBox or an OptionButton control's <I>Value</I> property changes through code, Visual Basic 
fires a <I>Click</I> event, exactly as if the user had clicked on it. This behavior is useful 
because it lets you deal with the two different cases in a uniform way. ListBox and 
ComboBox controls also fire <I>Click</I> events whenever their 
<I>ListIndex</I> properties change.</p>

<p><I>Click</I> and <I>DblClick</I> events don't pass arguments to the program, and 
therefore you can't count on these events to tell you where the mouse cursor is. To get 
this information, you must trap the 
<I>MouseDown</I> event instead, about which I'll say 
more later in this chapter. Also notice that when you double-click on a control, it 
receives both the <I>Click</I> and the 
<I>DblClick</I> events. This makes it difficult to distinguish 
single clicks from double-clicks because when Visual Basic calls your 
<I>Click</I> event procedure you don't know whether it will later call the 
<I>DblClick</I> procedure. At any rate, you should avoid assigning different functions to click and double-click actions 
on the same control because it tends to confuse the user.</p>

<P><div class="TIP"><blockquote>
<B>TIP</B><HR>
While you shouldn't assign separate effects to click and double-click 
actions on the same control, here's a simple method to work around the 
problem of finding out what the user actually did:

<p><table><tr><td>
<PRE>
' A module-level variable
Dim isClick As Boolean

Private Sub Form_Click()
    Dim t As Single
    isClick = True
    ' Wait for the second click for half a second.
    t = Timer
    Do
        DoEvents
        ' If the DblClick procedure canceled this event, 
        ' bail out.
        If Not isClick Then Exit Sub
        ' The next test accounts for clicks just before midnight.
    Loop Until Timer &gt; t + .5 Or Timer &lt; t
    ' Do your single-click processing here.
    ...
End Sub

Private Sub Form_DblClick()
    ' Cancel any pending click.
    isClick = False
    ' Do your double-click processing here.
    ...
End Sub
</PRE>
</td></tr></table></p>
</blockquote></div></p>

<A NAME="42"><h2>The <I>Change</I> Event</h2></A>

<p>The <I>Change</I> event is the simplest event offered by Visual Basic: Whenever the 
contents of a control change, Visual Basic fires a 
<I>Change</I> event. Unfortunately, this simple scheme hasn't been consistently followed in the Visual Basic architecture. As I 
explained in the previous section, when you click on CheckBox and OptionButton controls, 
they fire a <I>Click</I> event (rather than a 
<I>Change</I> event). Fortunately, this inconsistency 
isn't a serious one.</p>

<p>TextBox and ComboBox controls raise a 
<I>Change</I> event when the user types something in the editable area of the control. (But be careful, the ComboBox 
control raises a <I>Click</I> event when the user 
<I>selects</I> an item from the list portion rather 
than types in a box.) Both scroll bar controls raise the 
<I>Change</I> event when the user clicks on either arrows or moves the scroll boxes. The 
<I>Change</I> event is also supported by the PictureBox, DriveListBox, and DirListBox controls.</p>

<p>The <I>Change</I> event also fires when the contents of the control are 
changed through code. This behavior often leads to some inefficiencies in the program. 
For instance, many programmers initialize the 
<I>Text</I> properties of all TextBox controls in the form's 
<I>Load </I>event, thus firing many <I>Change</I> events that tend to slow down 
the loading process.</p>

<A NAME="43"><h2>The <I>GotFocus </I>and <I>LostFocus</I> Events</h2></A>

<p>These events are conceptually very simple: 
<I>GotFocus</I> fires when a control receives the input focus, and 
<I>LostFocus</I> fires when the input focus leaves it and passes 
to another control. At first glance, these events seem ideal for implementing a sort 
of validation mechanism&#8212;that is, a piece of code that checks the contents of a 
field and notifies the user if the input value isn't correct as soon as he or she moves 
the focus to another control. In practice, the sequence of these events is subject to 
several factors, including the presence of 
<I>MsgBox</I> and <I>DoEvents</I> statements. 
Fortunately, Visual Basic 6 has introduced the new 
<I>Validate</I> event, which elegantly solves 
the problem of field validation. (See the &quot;<a href="#73">The 
<I>CausesValidation</I> Property and the 
<I>Validate </I>Event</a>&quot; section in Chapter 3 for more details.)</p>

<p>Finally, note that forms support both 
<I>GotFocus</I> and <I>LostFocus</I> events, but 
these events are raised only when the form doesn't contain any control that can 
receive the input focus, either because all of the controls are invisible or the 
<I>TabStop</I> property for each of them is set to False.</p>

<A NAME="44"><H2>The <I>KeyPress</I>, <I>KeyDown</I>, and <I>KeyUp</I> Events</H2></A>
<p>These events fire whenever the end user presses a key while a control has the 
input focus. The exact sequence is as follows: <I>KeyDown 
</I>(the users presses the key), <I>KeyPress</I> (Visual Basic translates the key into an ANSI numeric code), and 
<I>KeyUp</I> (the user releases the key). Only keys that correspond to control keys 
(Ctrl+<I>x</I>, BackSpace, Enter, and Escape) and printable characters activate the 
<I>KeyPress</I> event. For all other keys&#8212;including arrow keys, function keys, 
Alt+<I>x</I> key combinations, and so on&#8212;this 
event doesn't fire and only the <I>KeyDown</I> and 
<I>KeyUp</I> events are raised.</p>

<p>The <I>KeyPress</I> event is the simplest of the three. It's passed the ANSI code of 
the key that has been pressed by the user, so you often need to convert it to a string 
using the <I>Chr$()</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Text1_KeyPress(KeyAscii As Integer)
    MsgBox &quot;User pressed &quot; &amp; Chr$(KeyAscii)
End Sub
</pre>
</td></tr>
</table></p>


<p>If you modify the <I>KeyAscii</I> parameter, your changes affect how the 
program interprets the key. You can also &quot;eat&quot; a key by setting this parameter to 0, as 
shown in the code below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyPress(KeyAscii As Integer)
    ' Convert all keys to uppercase, and reject blanks.
    KeyAscii = Asc(UCase$(Chr$(KeyAscii)
    If KeyAscii = Asc(&quot; &quot;) Then KeyAscii = 0 
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>KeyDown</I> and <I>KeyUp</I> events receive two parameters, 
<I>KeyCode </I>and <I>Shift</I>. 
The former is the code of the pressed key, the latter is an Integer value that reports 
the state of the Ctrl, Shift, and Alt keys; because this value is bit-coded, you have 
to use the AND operator to extract the relevant information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyDown(KeyCode As Integer, Shift As Integer)
    If Shift And vbShiftMask Then
        ' Shift key pressed
    End If
    If Shift And vbCtrlMask Then
        ' Ctrl key pressed
    End If
    If Shift And vbAltMask Then
        ' Alt key pressed
    End If
    ' ... 
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>KeyCode</I> parameter tells which physical key has been pressed, and 
it's therefore different from the <I>KeyAscii </I>parameter received by the 
<I>KeyPress</I> event. You usually test this value using a symbolic constant, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyDown(KeyCode As Integer, Shift As Integer)
    ' If user presses Ctrl+F2, replace the contents
    ' of the control with the current date. 
    If KeyCode = vbKeyF2 And Shift = vbCtrlMask Then
        Text1.Text = Date$
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>In contrast to what you can do with the <I>KeyPress 
</I>event, you can't alter the program's behavior if you assign a different value to the 
<I>KeyCode</I> parameter.</p>

<p>You should note that <I>KeyPress</I>, 
<I>KeyDown</I>, and <I>KeyUp</I> events might pose 
special problems during the debugging phase. In fact, if you place a breakpoint inside 
a <I>KeyDown</I> event procedure, the target control will never receive a notification 
that a key has been pressed and the 
<I>KeyPress</I> and <I>KeyUp</I> events will never fire. 
Similarly, if you enter break mode when Visual Basic is executing the 
<I>KeyPress</I> event procedure, the target control will receive the key but the 
<I>KeyUp</I> event will never fire.</p>

<P><div class="TIP"><blockquote>
<B>TIP</B><HR>
While you can't edit the 
<I>KeyCode</I> parameter and let the modified 
value affect the program, here's a trick that, in most cases, lets you discard an 
unwanted key in TextBox controls:

<p><table><tr><td>
<PRE>
Private Sub Text1_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyDelete Then
        ' Make the control read-only; this actually
        ' discards the key.
        Text1.Locked = True
    End If
End Sub

Private Sub Text1_KeyUp(KeyCode As Integer, Shift As Integer)
    ' Restore normal operation.
    Text1.Locked = False
End Sub
</PRE>
</td></tr></table></p>
</blockquote></div></p>

<p>The <I>KeyDown</I>, <I>KeyPress</I>, and 
<I>KeyUp</I> events are received only by the control 
that has the input focus when the key is pressed. This circumstance, however, makes 
it difficult to create <I>form-level key 
handlers,</I> that is, code routines that monitor 
keys pressed in any control on the form. For example, suppose that you want to offer 
your users the ability to clear the current field by pressing the F7 key. You don't want 
to write the same piece of code in the 
<I>KeyDown</I> event procedure for each and every control on your form, and fortunately you don't have to. In fact, you only have 
to set the form's <I>KeyPreview</I> property to True (either at design time or at run time, 
in the <I>Form_Load</I> procedure, for example) and then write this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyF7 Then
        ' An error handler is necessary because we can't be sure
        ' that the active control actually supports the Text
        ' property.
        On Error Resume Next
        ActiveControl.Text = &quot;&quot;
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>If the form's <I>KeyPreview</I> property is set to True, the Form object receives 
all keyboard-related events before they're sent to the control that currently has the 
input focus. Use the form's <I>ActiveControl</I> property if you need to act on the control 
with the input focus, as in the previous code snippet.</p>

<A NAME="45"><H2>The <I>MouseDown</I>, <I>MouseUp</I>, and <I>MouseMove</I> Events</H2></A>
<p>These events fire when the mouse is clicked, released, or moved on a 
control, respectively. All of them receive the same set of parameters: the state of 
mouse buttons, the state of Shift/Ctrl/Alt keys, and the 
<I>x-</I> and <I>y</I>-coordinates of the mouse 
cursor. The coordinates are always relative to the upper left corner of the control or the 
form. Following Figure 2-6 is a code sample that displays the status and position of 
the mouse on a Label control and creates a log in the Immediate window. You can 
see the results of running this code in Figure 2-6.</p>

<p>
<A HREF="javascript:fullSize('F02ph06x.htm')"> <img src="F02ph06.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-6.</B> <i>Monitor mouse state using the MouseDown, MouseMove, and MouseUp events. Note the negative y value when the cursor is outside the form's client area.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    ShowMouseState Button, Shift, X, Y
End Sub

Private Sub Form_MouseMove(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    ShowMouseState Button, Shift, X, Y
End Sub
Private Sub Form_MouseUp(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    ShowMouseState Button, Shift, X, Y
End Sub

Private Sub ShowMouseState (Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    Dim descr As String
    descr = Space$(20)
    If Button And vbLeftButton Then Mid$(descr, 1, 1) = &quot;L&quot;
    If Button And vbRightButton Then Mid$(descr, 3, 1) = &quot;R&quot;
    If Button And vbMiddleButton Then Mid$(descr, 2, 1) = &quot;M&quot;
    If Shift And vbShiftMask Then Mid$(descr, 5, 5) = &quot;Shift&quot;
    If Shift And vbCtrlMask Then Mid$(descr, 11, 4) = &quot;Ctrl&quot;
    If Shift And vbAltMask Then Mid$(descr, 16, 3) = &quot;Alt&quot;
    descr = &quot;(&quot; &amp; X &amp; &quot;, &quot; &amp; Y &amp; &quot;) &quot; &amp; descr
    Label1.Caption = descr
    Debug.Print descr
End Sub
</pre>
</td></tr>
</table></p>


<p>While writing code for mouse events, you should be aware of a few 
implementation details as well as some pitfalls in using these events. Keep in mind the 
following points:</p>
<UL>

<p><li>The <I>x</I> and <I>y</I> values are relative to the 
<I>client area </I>of the form or the control, not to its external border; for a form object, the coordinates (0,0) 
correspond to the pixel in the upper left corner below the title bar or the 
menu bar (if there is one). When you move the mouse cursor outside the 
form area, the values of coordinates might become negative or exceed 
the height and width of the client area.</li></p>

<p><li>When you press a mouse button over a form or a control and then 
move the mouse outside its client area while keeping the button pressed, 
the original control continues to receive mouse events. In this case, the 
mouse is said to be <I>captured </I>by the control: the capture state terminates 
only when you release the mouse button. All the 
<I>MouseMove</I> and <I>MouseUp</I> events fired in the meantime might receive negative values for the 
<I>x</I> and <I>y</I> parameters or values that exceed the object's width or height, respectively.</li></p>

<p><li><I>     MouseDown</I> and <I>MouseUp</I> events are raised any time the user presses 
or releases a button. For example, if the user presses the left button and 
then the right button (without releasing the left button), the control 
receives two <I>MouseDown</I> events and eventually two 
<I>MouseUp</I> events.</li></p>

<p><li>The <I>Button</I> parameter passed to 
<I>MouseDown</I> and <I>MouseUp</I> events reports which button has just been pressed and released, respectively. 
Conversely, the <I>MouseMove</I> event receives the current state of all (two or three) 
mouse buttons.</li></p>

<p><li>When the user releases the only button being pressed, Visual Basic 
fires a <I>MouseUp</I> event and then a 
<I>MouseMove</I> event, even if the mouse hasn't moved. This detail is what makes the previous code example work 
correctly after a button release: The current status is updated by the extra 
<I>MouseMove</I> event, not by the <I>MouseUp</I> event, as you probably expected. Note, 
however, that this additional <I>MouseMove</I> event doesn't fire when you press 
two buttons and then release only one of them.</li></p>
</UL>
 
<p>It's interesting to see how <I>MouseDown</I>, 
<I>MouseUp</I>, and <I>MouseMove</I> events relate to 
<I>Click</I> and <I>DblClick</I> events:</p>
<UL>

<p><li>A <I>Click</I> event occurs after a <I>MouseDown &#8230; 
MouseUp</I> sequence and before the extra 
<I>MouseMove</I> event.</li></p>

<p><li>When the user double-clicks on a control, the complete event 
sequence is as follows: <I>MouseDown</I>, 
<I>MouseUp</I>, <I>Click</I>, <I>MouseMove</I>, 
<I>DblClick</I>, <I>MouseUp</I>, <I>MouseMove</I>. Note that the second 
<I>MouseDown</I> event isn't generated.</li></p>

<p><li>If the control is clicked and then the mouse is moved outside its client 
area, the <I>Click </I>event is never raised. However, if you double-click a control 
and then you move the mouse outside its client area, the complete 
event sequence occurs. This behavior reflects how controls work under 
Windows and shouldn't be considered a bug.</li></p>
</UL>
 

<a name="A13"></a><h3>5.2.4 The Form Object</h3>

<A HREF="#A12">[Previous]</A> <A HREF="#A14">[Next]</A><P>

<A NAME="46"><h1>The Form Object</h1></A>
<p>After this long introductory description of properties, methods, and events that 
are common to most Visual Basic objects, it's time to see the particular features of all 
of them individually. The most important visible object is undoubtedly the Form 
object because you can't display any control without a parent Form. Conversely, you 
can write some moderately useful applications using only forms that have no controls 
on them. In this section, I'll show a number of examples that are centered on 
forms' singular features.</p>

<p>You create a new form at design time using the Add Form command from 
the Project menu or by clicking on the corresponding icon on the standard toolbar. 
You can create forms from scratch, or you can take advantage of the many form 
templates provided by Visual Basic 6. If you don't see the dialog box shown in Figure 2-7, 
invoke the Options command from the Tools menu, click the Environment tab, and 
select the topmost check box on the right.</p>

<p>Feel free to create new form templates when you need them. A form 
template doesn't necessarily have to be a complex form with many controls on it. Even 
an empty form with a group of properties carefully set can save you some precious 
time. For example, see the Dialog Form template provided by Visual Basic. To 
produce your custom form templates, you just have to create a form, add any necessary 
controls and code, and then save it in the \Template\Forms directory. (The complete 
path of Visual Basic's template directory can be read and modified in the Environment 
tab of the Options dialog box.)</p>

<p>
<A HREF="javascript:fullSize('F02ph07x.htm')"> <img src="F02ph07.JPG" width=404 height=328 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-7.</B> <i>Form templates offered by Visual Basic 6.</i><!--/caption-->
</p>

<A NAME="47"><h2>Basic Form Properties</h2></A>

<p>After creating a form and resizing it to meet your requirements, you'll probably 
want to set a few key properties. 
<I>BorderStyle</I> is one of the properties that largely 
affects the form's behavior. Its default value is 2-Sizable, which creates a resizable 
window. To create a nonresizable form, you should set it to 1-Fixed Single or 3-Fixed 
Dialog: the only difference between the two settings is that the latter can't show 
Minimize and Maximize buttons. If you're creating a floating, toolboxlike form, you should 
use the values 4-Fixed Toolwindow or 5-Sizable Toolwindow. Theoretically, you can 
also use the value 0-None to exclude any type of border and caption, but you'll rarely 
find a use for such borderless forms.</p>

<p>Next you must decide what should appear on the title bar. Apart from 
assigning a suitable string to the form's 
<I>Caption</I> property, you should also decide whether you want the form to support a system menu and a Close button 
(<I>ControlBox</I> property, default is True) and a Minimize and a Maximize button 
(<I>MinButton</I> and <I>MaxButton</I> property, respectively). Selecting the right values for these properties 
is important because you can't change them at run time through code. If you want 
the form to start in maximized state, you can set the 
<I>WindowState</I> property to 
2-Maximized.</p>


<p><div class="tip"><blockquote><b>TIP</b><hr>
To create a captionless resizable window, you must set the 
<I>ControlBox</I>, <I>MinButton</I>, and 
<I>MaxButton</I> properties to False and the 
<I>Caption</I> property to an empty string. If you assign a non-empty string to the 
<I>Caption</I> property at run time, Visual Basic creates the form's title bar on the fly. Assigning it an empty 
string at run time makes the title bar disappear again. You can't move a 
captionless form using the mouse as you normally do with other types of windows.
</blockquote></div></p>

<p>Visual Basic 5 added three important form properties, which are also 
present in Visual Basic 6. You can have the form appear in the center of the screen by 
setting its <I>StartupPosition</I> property to the value 2-Center Screen. And you can make 
your window unmovable by setting the 
<I>Moveable</I> property to False. You can set 
these properties only at design time. The third new property is 
<I>ShowInTaskbar</I>; if you set this property to False, the form isn't shown in the Windows taskbar. Captionless 
forms appear in the taskbar as &quot;blank&quot; forms, so you might want to set the 
<I>ShowInTaskbar</I> property to False for such forms.</p>

<A NAME="48"><h2>Fine-Tuning the Performance of Forms</h2></A>

<p>A few form properties noticeably affect performance. First and foremost, 
the <I>AutoRedraw </I>property dictates whether the form is backed up by a persistent 
bitmap so that when it's covered by another form and then uncovered, Visual Basic 
can quickly restore its contents from the internal bitmap. 
<I>AutoRedraw</I>'s default value is False: setting it to True speeds up refresh operations but also causes a lot of 
memory to be allocated for the persistent bitmap. To give you an idea of what this means 
in practice, for a system with 1024-by-768 screen resolution and 256 colors, a 
persistent bitmap for a resizable form takes 768 KB. On an 800-by-600 pixel, true-color 
system, the persistent bitmap takes 1406 KB. If you have more forms running at the same 
time, you can clearly see that you shouldn't set the 
<I>AutoRedraw</I> property to True, at least not for all the forms. 
<I>AutoRedraw</I> affects performance in another way: Each time 
you perform a graphic method (including printing text and drawing figures), 
Visual Basic creates the output on the hidden persistent bitmap and then copies the bitmap as 
a whole on the visible area of the form. Needless to say, this is slower than 
creating the output directly on the form's surface.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
If 
<I>AutoRedraw</I> is set to True, Visual Basic creates a persistent bitmap 
as large as the largest possible size for the form, which means the entire 
screen for resizable windows. Therefore, you can limit the memory overhead 
caused by the persistent bitmap if you create smaller forms and set their 
<I>BorderStyle </I>property to 1-Fixed Single or 3-Fixed Dialog.
</blockquote></div></p>

<p>The <I>ClipControls</I> property also affects performance. If you execute many 
graphic methods&#8212;such as Line, Circle, Point, and Print&#8212;you should set this property to 
False because all your graphic methods are going to execute about twice as fast. When 
you set this property to False, Visual Basic doesn't have to create a 
<I>clipping region</I>. However, if your graphic methods do overlap controls on the form, you're going 
to experience the unpleasant effect shown in Figure 2-8, so be very careful. 
(Compare this figure with Figure 2-9, which shows the same application with the more 
appropriate setting of True for the 
<I>ClipControls</I> property.) If you don't execute graphic 
methods, you might leave it set to True (the default value) because it won't slow down 
the application.</p>

<p>
<img src="F02ph08.GIF" width=360 height=273 border=0>
<p>
<!--caption--><B>Figure 2-8.</B> <i>Nasty effects of the ClipControls setting when graphic methods overlap existing controls.</i><!--/caption-->


<p>
<img src="F02ph09.GIF" width=360 height=273 border=0>
<p>
<!--caption--><B>Figure 2-9.</B> <i>Running the application shown in Figure 2-8 with the more appropriate setting for the ClipControls property.</i><!--/caption-->


<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>The <I>HasDC</I> property is new to Visual Basic 6. The default value for this 
property is True, which causes Visual Basic to create a permanent device 
context for this form, and this device context exists as long as the form itself is loaded in memory. (A 
<I>device context</I> is a structure used by Windows for drawing on a window's surface.) If 
you set this property to False, Visual Basic creates a device context for the form only 
when strictly needed and discards it as soon as it's not useful anymore. This setting 
reduces the application's requirements in terms of system resources and can therefore 
improve its performance on less powerful machines. On the other hand, it adds a little 
overhead whenever Visual Basic creates and destroys the temporary device context. 
This happens when Visual Basic fires an event in the program's code.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You can set the 
<I>HasDC</I> property to False and still run any 
existing Visual Basic application without any problem. If, however, you use 
advanced graphic techniques that bypass Visual Basic and write directly onto the 
form's device context, you shouldn't cache the form's 
<I>hDC</I> property in a module-level or a global variable, because Visual Basic can destroy and re-create the 
form's device context between events. Instead, query the 
<I>hDC</I> property at the beginning of each event procedure.
</blockquote></div></p>

<A NAME="49"><h2>A Form's Life Cycle</h2></A>

<p>To understand how Form objects really work, the best approach is having a look at the sequence of events that they raise. This sequence is shown in the illustration below. I'll describe each event in turn.</p>

<A NAME="50"><h3>The <I>Initialize</I> event</h3></A>

<p>The first event in the life of any form is the 
<I>Initialize</I> event. This event fires as soon as you reference the form's name in your code, even before Visual Basic creates 
the actual window and the controls on its surface. You usually write code in this 
event to correctly initialize the form's variables:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public CustomerName As String
Public NewCustomer As Boolean

Private Sub Form_Initialize()
    CustomerName = &quot;&quot;      ' This isn't really needed.
    NewCustomer = True     ' This is necessary.
End Sub
</pre>
</td></tr>
</table></p>


<p>When a form is initialized, all its module-level variables 
(<I>CustomerName</I> and <I>NewCustomer</I>, in the preceding example) are assigned their default values. So it 
isn't strictly necessary to assign a value to a variable if the value is 0 or an empty 
string. In the code above, for example, there's no need for the assignment to the 
<I>CustomerName</I> variable, but you might want to leave it there for better readability.</p>

<p>
<A HREF="javascript:fullSize('G02ph01x.htm')"> <img src="G02ph01.JPG" width=404 height=536 border=0 ALT = "Click to view at full size."> </A>
</p>

<A NAME="51"><h3>The <I>Load</I> event</h3></A>

<p>What happens after the <I>Initialize</I> event depends on how you referenced the 
form in your code. If you referenced only one of its public variables (or, more 
correctly, its <I>Public</I> properties), as in the following line of code,</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>frmCustomer.CustomerName = &quot;John Smith&quot;
</pre>
</td></tr>
</table></p>


<p>nothing else happens and execution flow goes back to the caller. Your code is 
now able to set the <I>CustomerName</I> variable/property to the new value because in 
the meantime Visual Basic has created a new instance of the 
<I>frmCustomer</I> object. On the other hand, if your code had referenced a form's own property or a control 
on the form itself, Visual Basic can't complete the operation until it actually creates 
the window and its child controls. When this step is completed, a 
<I>Load</I> event is fired:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    ' You can initialize child controls. 
    txtName.Text = CustomerName
    If NewCustomer Then chkNewCustomer.Value = vbChecked
End Sub
</pre>
</td></tr>
</table></p>


<p>At this point, the form isn't visible yet. This implies that if you execute 
graphic commands in this event procedure&#8212;including a Print command, which is 
considered a graphic command in Visual Basic&#8212;you won't see anything. Likewise, while 
you can freely read and modify most controls' properties, you should avoid any 
operation that can't be performed on invisible controls. For example, you can't invoke a 
<I>SetFocus</I> method to move the focus on a particular control.</p>

<p>Loading a form doesn't necessarily mean that the form is going to 
become visible. A form becomes visible only if you invoke its 
<I>Show</I> method or if the form is the application's startup form. You can decide to load a form and keep it hidden 
until you set some of its properties, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The Load method is optional: Visual Basic loads the form
' when you reference the form or one of its controls.
Load frmCustomer
' Directly assign a control's property.
' (Not recommended, but this is just an example.)
frmCustomer.txtNotes.Text = gloCustomerNotes
frmCustomer.Show
</pre>
</td></tr>
</table></p>


<p>Directly referencing a form's control from outside the form itself, as the 
previous code example does, is considered a bad programming technique. I will show 
you how to correctly initialize control properties in <a href="#A53">Chapter 9</a>.</p>

<A NAME="52"><h3>The <I>Resize</I> event</h3></A>

<p>One instant before the form becomes visible, Visual Basic fires a 
<I>Resize</I> event. You usually take advantage of this event to rearrange the controls on the form so that 
they fit the available space in a nice layout. For example, you might want the 
txtCustomer control to extend to the right border and the multiline txtNotes control to extend 
to both the right and the bottom border:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Resize()
    txtCustomer.Width = ScaleWidth _ txtCustomer.Left
    txtNotes.Width = ScaleWidth _ txtNotes.Left
    txtNotes.Height = ScaleHeight _ txtNotes.Top
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>Resize</I> event also fires when the user resizes the form manually and 
when you programmatically alter the form's size.</p>

<A NAME="53"><h3>The <I>Activate</I> event</h3></A>

<p>Soon after the first <I>Resize</I> event comes the 
<I>Activate</I> event. This event also 
fires whenever the form becomes the active form in the current application but not if 
it loses and then regains the focus because the user switched to another 
application. The <I>Activate</I> event is most useful when you need to update the form's contents 
with data that might have been modified in another form. When the focus returns to 
the current form, you refresh its fields:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Activate()
    ' Refresh displayed information from global variables.
    txtTotalOrders.Text = gloTotalOrders
    ...
End Sub
</pre>
</td></tr>
</table></p>


<A NAME="54"><h3>The <I>Paint </I>event</h3></A>

<p>Another event might fire before the form becomes fully functional&#8212;the 
<I>Paint</I> event. This event doesn't fire if you set the form's 
<I>AutoRedraw</I> property to True. In a 
<I>Paint</I> event procedure, you're expected to redraw the form's contents using 
graphic methods, such as <I>Print</I>, <I>Line</I>, 
<I>Circle</I>, <I>Point</I>, <I>Cls</I>, and so on. Here's an example 
that draws a colorful circular target:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Paint()
    Dim r As Single, initR As Single
    Dim x As Single, y As Single, qbc As Integer
    
    ' Start with a clean surface.
    Cls                                 
    ' The center of all circles
    x = ScaleWidth / 2: y = ScaleHeight / 2 
    ' Initial radius is the lower of the two values.
    If x &lt; y Then initR = x Else initR = y
    FillStyle = vbFSSolid            ' Circles are filled.
    ' Draw circles, from the outside in. 
    For r = initR To 1 Step -(initR / 16)
        ' Use a different color for each circle.
        FillColor = QBColor(qbc)
        qbc = qbc + 1
        Circle (x, y), r
    Next
    ' Restore regular filling style.
    FillStyle = vbFSTransparent           
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>Paint</I> event procedure is executed whenever the form needs to be 
refreshed&#8212;for example, when the user closes or moves away a window that 
partially or totally covered the form. The <I>Paint 
</I>event also fires when the user resizes the 
form and uncovers new areas. But it does <I>not 
</I>fire if the user shrinks the form. To complete the example above, you may want to manually force a 
<I>Paint</I> event from within the <I>Resize</I> event so that concentric circles are always in the center of the form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Resize()
    Refresh
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You might be tempted to force a 
<I>Paint</I> event by manually calling the 
<I>Form_Paint</I> procedure. Don't do that! The correct and most efficient way 
to repaint a window is to execute its <I>Refresh 
</I>method and let Visual Basic decide the most appropriate moment to do that. Moreover, if you replace the 
<I>Refresh</I> method with a direct call to the 
<I>Form_Paint</I> procedure, in some cases the 
result is that the <I>Paint</I> event procedure is executed twice!
</blockquote></div></p>

<p>After the very first <I>Paint</I> event&#8212;or immediately after the 
<I>Activate</I> event, if the <I>AutoRedraw</I> property is set to True&#8212;the form is finally ready to accept user 
input. If the form doesn't contain any controls or if none of its controls can receive the 
input focus, the form itself receives a <I>GotFocus 
</I>event. You will rarely write code in a form's 
<I>GotFocus</I> event, though, because you can always use the 
<I>Activate</I> event instead.</p>

<A NAME="55"><h3>The <I>Deactivate</I> event</h3></A>

<p>As I mentioned previously, when you switch to another form in your application, 
the form receives a <I>Deactivate</I> event and another 
<I>Activate</I> event when it regains the input focus. The same sequence occurs if you temporarily make a form invisible by 
setting its <I>Visible</I> property to False or by invoking its 
<I>Hide</I> method.</p>

<A NAME="56"><h3>The <I>QueryUnload</I> event</h3></A>

<p>When the form is about to be unloaded, the form object receives a 
<I>QueryUnload</I> event. You can learn why a form is unloading by examining the 
<I>UnloadMode</I> parameter. I have created this code skeleton, which I reuse in my applications as necessary:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_QueryUnload(Cancel As Integer, _
    UnloadMode As Integer)
    Select Case UnloadMode
        Case vbFormControlMenu   ' = 0
            ' Form is being closed by user.
        Case vbFormCode          ' = 1
            ' Form is being closed by code.
        Case vbAppWindows        ' = 2
            ' The current Windows session is ending.
        Case vbAppTaskManager    ' = 3
            ' Task Manager is closing this application.
        Case vbFormMDIForm       ' = 4
            ' MDI parent is closing this form.
        Case vbFormOwner         ' = 5
            ' The owner form is closing.
    End Select
End Sub
</pre>
</td></tr>
</table></p>


<p>You can refuse to unload by setting the 
<I>Cancel</I> parameter to True, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_QueryUnload(Cancel As Integer, _
    UnloadMode As Integer)
    ' Don't let the user close this form.
    Select Case UnloadMode
        Case vbFormControlMenu, vbAppTaskManager
            Cancel = True
    End Select
End Sub
</pre>
</td></tr>
</table></p>


<A NAME="57"><h3>The <I>Unload</I> event</h3></A>

<p>If you don't cancel the unload operation, Visual Basic eventually raises the 
<I>Unload</I> event and gives you a last chance to prevent the closure of the form. In most 
cases, you take this opportunity to alert the user that data needs to be saved:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is a module-level variable.
Dim Saved As Boolean

Private Sub Form_Unload(Cancel As Integer)
    If Not Saved Then
        MsgBox &quot;Please save data first!&quot;
        Cancel = True
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>Unless you canceled the request, Visual Basic destroys all the controls and 
then unloads the form and releases all the Windows resources allocated at load time 
when the <I>Unload</I> event procedure exits. Depending on how you invoked the form, it 
might also fire the form's <I>Terminate </I>event, which is where you put your clean-up code, 
close your files, and so on. The reasons why this event might fire (or not) are 
explained in <a href="#A53">Chapter 9</a>.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
When the 
<I>Terminate </I>event is fired, the form object is already 
gone, so you shouldn't reference it or its controls in code. If you accidentally do 
that, no error is raised. Instead, Visual Basic creates another, new instance of the 
form object, which silently remains hidden in memory, unnecessarily consuming a 
lot of system resources.
</blockquote></div></p>

<A NAME="58"><h2>The Controls Collection</h2></A>

<p>Forms expose a special property, the 
Controls collection, which contains all the controls that are currently loaded on the form itself. This collection lets you 
streamline the code in your form modules often and is the key to some programming 
techniques that would be otherwise impossible. For example, see how simple it is to clear 
all the TextBox and ComboBox controls in the form with just four lines of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
For i = 0 To Controls.Count - 1
    Controls(i).Text = &quot;&quot;
Next
</pre>
</td></tr>
</table></p>


<p>Error handling is necessary here because you must account for all the 
controls on the form that don't support the 
<I>Text</I> property. For example, the Controls 
collection also includes all the menu items on a form, and menu items don't have a 
<I>Text</I> property. So, you must account for these cases when you iterate over the collection. 
Here's an alternative way to loop on all the controls in the collection using the generic 
Control object and a <I>For 
Each&#8230;Next</I> statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim ctrl As Control
On Error Resume Next
For Each ctrl In Controls
    ctrl.Text = &quot;&quot;
Next
</pre>
</td></tr>
</table></p>


<p>Both preceding code snippets work with any number of controls on the 
form, and they also work if you cut and paste them in another form module. The 
beauty of the Controls collection is that it makes it possible to create such generic 
routines, which couldn't be written in any other way. Later in this book, you'll see many 
other programming techniques based on the Controls collection.</p>

<A NAME="59"><h2>The Screen Object</h2></A>

<p>Visual Basic forms live on your computer screen. Even if you plan to use only a 
portion of the screen estate for your application, you need in many cases to learn more 
about what's around you. To this end, Visual Basic provides you with a Screen object, 
a global object that corresponds to the visible desktop.</p>

<p>A form's <I>Left</I>, <I>Top</I>, <I>Width</I>, and 
<I>Height</I> properties are expressed in 
<I>twips</I>. Twips are measurement units that can be used for both screen and printer devices. On 
the printer, 1 inch corresponds to 1,440 twips; on the screen, it depends on the 
monitor's size and the video card's current resolution. You can find the current size of the 
screen, in twips, through the <I>Width</I> and 
<I>Height</I> properties of the Screen object. You can 
then use the values of these properties; for example, you can move the current form 
to the bottom right corner of your monitor using this line of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Move Screen.Width - Width, Screen.Height - Height
</pre>
</td></tr>
</table></p>


<p>Although you can't have the Screen object's properties returned in a 
unit other than twips, you can easily convert these values into pixels using the 
Screen object's <I>TwipsPerPixelX</I> and 
<I>TwipsPerPixelY</I> properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Evaluate the screen width and height in pixels.
scrWidth = Screen.Width / Screen.TwipsPerPixelX 
scrHeight = Screen.Height / Screen.TwipsPerPixelY

' Shrink the current form of 10 pixels along the
' x-axis and 20 pixels along the y-axis.
Move Left, Top, Width - 10 * Screen.TwipPerPixelX, _
    Height - 20 * Screen.TwipsPerPixelY
</pre>
</td></tr>
</table></p>


<p>The Screen object also lets you enumerate all the character fonts that are 
available for the screen through its 
<I>Font</I> and <I>FontCount</I> properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Load the names of all the screen's fonts in a list box.
Dim i As Integer 
For i = 0 To Screen.FontCount - 1
    lstFonts.AddItem Screen.Fonts(i)
Next
</pre>
</td></tr>
</table></p>


<p>The only two properties of the Screen object that can be written to are 
<I>MousePointer</I> and <I>MouseIcon</I>. (I described these properties earlier in this chapter.) You 
can modify the mouse pointer using the following statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Screen.MousePointer = vbHourglass
</pre>
</td></tr>
</table></p>


<p>A value assigned to this property actually affects only the current 
application: If you move the mouse cursor to the desktop or over a window belonging to 
another application, the original mouse cursor is restored. In this sense, therefore, you 
aren't actually dealing with a screen property. This concept also applies to the 
remaining Screen properties, <I>ActiveForm</I> and 
<I>ActiveControl</I>. <I>ActiveForm</I> is a read-only 
property that returns a reference to the active form in the current application; 
<I>ActiveControl </I>returns a reference to the control that has the input focus on the active form. You 
often use these properties together:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' If the current form is frmCustomer, clear the control that has
' the focus. 
' On Error is necessary because you can't be sure that it supports
' the Text property, or even that there actually *is* an active
' control.
On Error Resume Next
If Screen.ActiveForm.Name = &quot;frmCustomer&quot; Then
    Screen.ActiveControl.Text = &quot;&quot;
End If
</pre>
</td></tr>
</table></p>


<p>A form can be the active form without even having the input focus. If you 
have switched to another application, the Screen object continues to return a reference 
to the last form that was current in your application as the active form. Always keep 
in mind that the Screen object can't see beyond the current application's 
boundaries. As far as it's concerned, the current application is the only application running 
on the system. This is a sort of axiom in Win32 programming: No application 
should know anything about, or affect in any way, other applications running on the system.</p>

<A NAME="60"><h2>Printing Text</h2></A>

<p>In most Visual Basic applications, you don't display text directly on a form's 
surface. Instead, you usually make use of Label controls or print your messages inside 
PictureBox controls. But understanding how you can display text in a form can help you in 
many situations because it reveals how Visual Basic deals with text in general. 
Moreover, anything I say here about a form's graphic commands and properties also applies 
to PictureBox controls.</p>

<p>The most important graphic method for showing text is the 
<I>Print</I> method. This command has been part of the Basic language since its early incarnations and 
has survived for all these years without any relevant modification, until it found its 
way into Visual Basic. Because old MS-DOS programs written in Basic heavily relied 
on this command for all their user interfaces, it was essential for Visual Basic to 
support it. Since modern Visual Basic programming doesn't rely on this command 
anymore, however, I'll cover only its basic features.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Don't look for the 
<I>Print </I>method in the Object Browser because you 
won't find it. The hybrid nature of this command and its contorted syntax&#8212;just 
think of the many separators you can use in a 
<I>Print</I> statement, including commas, semicolons, and 
<I>Tab()</I> functions&#8212;prevented Microsoft engineers from 
including it there. Instead, the <I>Print</I> method is directly implemented in the language 
at run time, at the expense of a more coherent and complete object-oriented 
implementation of the language as a whole.
</blockquote></div></p>

<p>You often use the <I>Print</I> method for a quick-and-dirty output on the form's 
client area. For example, you can show the form's current size and position with 
this simple code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Resize()
    Cls                ' Resets the printing position to (0,0)
    Print &quot;Left = &quot; &amp; Left &amp; vbTab &amp; &quot;Top = &quot; &amp; Top
    Print &quot;Width = &quot; &amp; Width &amp; vbTab &amp; &quot;Height = &quot; &amp; Height
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
You can use semicolons instead of the &amp; operator and commas 
instead of the vbTab constant. But if you purposely stick to a standard syntax 
and stay clear of special features of the 
<I>Print</I> method, you can easily recycle your arguments and pass them to your custom methods or assign them to 
the <I>Caption</I> property of a Label. This can save you some time later, when 
you want to turn a quick-and-dirty prototype into a regular application.
</blockquote></div></p>

<p>The output from the <I>Print</I> method is affected by the current values of the 
<I>Font</I> and <I>ForeColor</I> properties, which I described earlier in this chapter. By default, 
the <I>BackColor</I> property doesn't affect the 
<I>Print </I>command because the text is usually printed as if it had a transparent background. Most of the time, this situation 
doesn't cause any problems because you often print over a clean form's surface, and it 
accounts for better performance because only the text's pixels must be transferred, 
not the background color. But if you want to print a message and at the same time 
you want to erase a previous message in the same position, you can do it by setting 
the <I>FontTransparent</I> property to False. Otherwise, you'll end up with one message 
on top of another, making both unreadable.</p>

<p>Normally, each Print command resets the <I>x</I>-coordinate of the current 
graphic position to 0 and advances the <I>y</I>-coordinate so that the next string is 
displayed immediately below the previous one. You can learn where the next Print 
command will display its output by querying the form's 
<I>CurrentX</I> and <I>CurrentY</I><B> 
</B>properties. Under normal conditions, the point (0,0) represents the upper left corner in the 
client area (that is, the portion of the form inside its border and below its title bar). 
The <I>x</I>-coordinates increase from left to right, and the 
<I>y</I>-coordinates increase when you go from top to bottom. You can assign a new value to these properties to 
print anywhere on your form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show a message centered on the form (more or less).
CurrentX = ScaleWidth / 2
CurrentY = ScaleHeight / 2
Print &quot;I'm here!&quot;
</pre>
</td></tr>
</table></p>


<p>This code, however, doesn't really center the message on the form because 
only the initial printing point is centered while the rest of the string runs toward the 
right border. To precisely center a message on a screen, you must first determine how 
wide and tall it is, which you do using the form's 
<I>TextHeight</I> and <I>TextWidth</I> methods:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>msg = &quot;I'm here, in the center of the form.&quot;
CurrentX = (ScaleWidth _ TextWidth(msg)) / 2
CurrentY = (ScaleHeight - TextHeight(msg)) / 2
Print msg
</pre>
</td></tr>
</table></p>


<p>You often use the <I>TextWidth</I> and 
<I>TextHeight</I> methods to see whether a message can fit within a given area. This strategy is especially useful when you print to a 
form because the <I>Print</I> method doesn't support automatic wrapping for longer lines. 
To see how you can remedy this deficiency, add the following code to a blank form 
and then run the program and resize the form at will. Figure 2-10 illustrates how 
form resizing works.</p>

<p>
<A HREF="javascript:fullSize('F02ph10x.htm')"> <img src="F02ph10.JPG" width=404 height=214 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-10.</B> <i>Automatic wrapping for longer lines of text.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A routine that formats Print output 
Private Sub Form_Paint()
    Dim msg As String, pos As Long, spacePos As Long
    msg = &quot;You often use the TextWidth and TextHeight methods&quot; _
        &amp; &quot; to check if a message can fit within a given area. &quot; _
        &amp; vbCrLf &amp; &quot; This is especially necessary when you&quot; _
        &amp; &quot; print to a form, because the Print method doesn't&quot; _
        &amp; &quot; support automatic wrapping for long lines, and you&quot; _
        &amp; &quot; need to solve the problem through code.&quot;

    Cls
    Do While pos &lt; Len(msg)
        pos = pos + 1
        If Mid$(msg, pos, 2) = vbCrLf Then
            ' A CR-LF pair, print the string so far and reset variables.
            Print Left$(msg, pos - 1)
            msg = LTrim$(Mid$(msg, pos + 2))
            pos = 0: spacePos = 0
        ElseIf Mid$(msg, pos, 1) = &quot; &quot; Then
            ' A space, remember its position for later.
            spacePos = pos
        End If

        ' Check the message width so far.
        If TextWidth(Left$(msg, pos)) &gt; ScaleWidth Then
            ' The message is too long, so let's split it.
            ' If we just parsed a space, split it there.
            If spacePos Then pos = spacePos
            ' Print the message up to the split point.
            Print Left$(msg, pos - 1)
            ' Discard printed characters, and reset variables.
            msg = LTrim$(Mid$(msg, pos))
            pos = 0: spacePos = 0
        End If
    Loop
    ' Print residual characters, if any.
    If Len(msg) Then Print msg
End Sub

Private Sub Form_Resize()
    Refresh
End Sub
</pre>
</td></tr>
</table></p>


<p>The preceding code works with any font you're using. As an exercise, you 
can build a general routine that accepts any string and any form reference so that 
you can easily reuse it in your applications.</p>

<p>Another problem that you might need to solve is how to determine the 
most appropriate font size for a message so that it fits in a given area. Because you 
can't be sure which sizes are supported by the current font, you usually find the best 
font size using a <I>For&#8230;Next</I> loop. The following simple program creates a digital 
clock, which you can enlarge and shrink as you like. The actual clock update is 
performed by a hidden Timer control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Resize()
    Dim msg As String, size As Integer
    msg = Time$
    For size = 200 To 8 Step -2
        Font.Size = size
        If TextWidth(msg) &lt;= ScaleWidth And _
            TextHeight(msg) &lt;= ScaleHeight Then
                ' We've found a font size that is OK.
                Exit For
            End If
    Next
    ' Enable the timer.
    Timer1.Enabled = True
    Timer1.Interval = 1000
End Sub

Private Sub Timer1_Timer()
    ' Just print the current time using current font settings.
    Cls
    Print Time$
End Sub
</pre>
</td></tr>
</table></p>


<A NAME="61"><h2>Graphic Methods</h2></A>

<p>Visual Basic supplies developers with several graphic methods. You can draw 
individual points and lines as well as more complex geometric shapes, such as rectangles, 
circles, and ellipses. You have complete control over line color, width, and style, and 
you can even fill your shapes with a solid color or a pattern.</p>

<p>Undoubtedly, the simplest graphic method to use is 
<I>Cls</I>. It clears the form's surface, fills it with the background color defined by the 
<I>BackColor </I>property, and then moves the current graphic position to the (0,0) coordinates. If you assign a new 
value to the <I>BackColor</I> property, Visual Basic clears the background on its own so that 
you never need to issue a <I>Cls</I> method yourself after you change the form's background color.</p>

<A NAME="62"><h3>Drawing points</h3></A>

<p>A more useful method is <I>PSet</I>, which modifies the color of a single pixel on the 
form surface. In its basic syntax, you simply need to specify the 
<I>x</I> and <I>y</I> coordinates. A third, optional argument lets you specify the color of the pixel, if different from 
the <I>ForeColor</I> value:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ForeColor = vbRed
PSet (0, 0)                  ' A red pixel
PSet (10, 0), vbCyan         ' A cyan pixel to its right
</pre>
</td></tr>
</table></p>


<p>Like many other graphic methods, <I>PSet </I>supports relative positioning using 
the <I>Step </I>keyword; when you use this keyword, the two values within brackets are 
treated as offsets from the current graphic point (the position on screen that 
<I>CurrentX </I>and <I>CurrentY </I>currently point to). The point you draw with the 
<I>PSet </I>method becomes the current graphic position:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Set a starting position.
CurrentX = 1000: CurrentY = 500
' Draw 10 points aligned horizontally.
For i = 1 To 10
    PSet Step (8, 0)
Next
</pre>
</td></tr>
</table></p>


<p>The output from the <I>PSet</I> method is also affected by another form's 
property, <I>DrawWidth</I>. You can set this property to a value greater than 1 (the default) to 
draw larger points. Note that while all graphic measures are expressed in twips, this 
value is in pixels. When you use a value greater than 1, the coordinates passed to the 
<I>PSet</I> method are considered to be the center of the thicker point (which is actually a 
small circle). Try these few lines of code for a colorful effect:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For i = 1 To 1000
    ' Set a random point width.
    DrawWidth = Rnd * 10 + 1
    ' Draw a point at random coordinates and with random color.
    PSet (Rnd * ScaleWidth, Rnd * ScaleHeight), _
        RGB(Rnd * 255, Rnd * 255, Rnd * 255)
Next
' Be polite: restore the default value.
DrawWidth = 1
</pre>
</td></tr>
</table></p>


<p>The <I>PSet </I>method's counterpart is the 
<I>Point</I> method, which returns the RGB 
color value of a given pixel. To see this method in action, create a form with a Label1 
control on it, draw some graphics on it (the previous code snippet would be perfect), 
and add the following routine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_MouseMove (Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    Label1.Caption = &quot;(&quot; &amp; X &amp; &quot;,&quot; &amp; Y &amp; &quot;) = &quot; _
        &amp; Hex$(Point(X, Y))
End Sub
</pre>
</td></tr>
</table></p>


<p>Run the program, and move the mouse cursor over the colored spots to 
display their coordinates and color values.</p>

<A NAME="63"><h3>Drawing lines and rectangles</h3></A>

<p>The next graphic method that you might use in your Visual Basic application is 
the <I>Line</I> method. It's a powerful command, and its syntax variants let you draw 
straight lines, empty rectangles, and rectangles filled with solid colors. To draw a straight 
line, you need only to provide the coordinates of starting and ending points, plus 
an optional color value. (If you omit a color value, the current 
<I>ForeColor </I>value is used):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Draw a thick diagonal red &quot;X&quot; across the form.
' The Line method is affected by the current DrawWidth setting.
DrawWidth = 5
Line (0, 0) _ (ScaleWidth, ScaleHeight), vbRed
Line (ScaleWidth, 0) _ (0, ScaleHeight), vbRed
</pre>
</td></tr>
</table></p>


<p>Like the <I>PSet</I> method, the <I>Line</I> method supports the 
<I>Step</I> keyword to specify relative positioning. The 
<I>Step</I> keyword can be placed in front of either pair 
of coordinates, so you can freely mix absolute and relative positioning. If you omit 
the first argument, the line is drawn from the current graphic position:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Draw a triangle.
Line (1000, 2000)- Step (1000, 0)  ' Horizontal line
Line -Step (0, 1000)               ' Vertical line
Line -(1000, 2000)                 ' Close the triangle.
</pre>
</td></tr>
</table></p>


<p>The output of the <I>Line</I> method is affected by another form's property, 
<I>DrawStyle</I>. The default value for this property is 0 
(<I>vbSolid</I>), but you can also draw dotted 
lines in a variety of styles, as you can see in Figure 2-11. Table 2-2 summarizes these styles.</p>

<p>
<img src="F02ph11.GIF" width=390 height=349 border=0>
<p>
<!--caption--><B>Figure 2-11.</B> <i>The effects of various settings of the DrawStyle property.</i><!--/caption-->


<p><B>Table 2-2.</B> <i>Constants for the DrawStyle property.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Value</I></th>
<th><I>Description</I></th>
</tr>
<tr>
<td valign="top">vbSolid</td>
<td valign="top">0</td>
<td valign="top">Solid (default value)</td>
</tr>
<tr>
<td valign="top">vbDash</td>
<td valign="top">1</td>
<td valign="top">Dashed line</td>
</tr>
<tr>
<td valign="top">vbDot</td>
<td valign="top">2</td>
<td valign="top">Dotted line</td>
</tr>
<tr>
<td valign="top">vbDashDot</td>
<td valign="top">3</td>
<td valign="top">Line with alternating dashes and dots</td>
</tr>
<tr>
<td valign="top">vbDashDotDot</td>
<td valign="top">4</td>
<td valign="top">Line with alternating dashes and double dots</td>
</tr>
<tr>
<td valign="top">vbInvisible</td>
<td valign="top">5</td>
<td valign="top">Invisible line</td>
</tr>
<tr>
<td valign="top">vbInsideSolid</td>
<td valign="top">6</td>
<td valign="top">Inside solid</td>
</tr>
</table></p>


<p>Note that the <I>DrawStyle</I> property affects the graphic output only if 
<I>DrawWidth</I> is set to 1 pixel; in all other cases, the 
<I>DrawStyle</I> property is ignored and the line 
is always drawn in solid mode. Adding <I>B</I> as a fourth argument to the 
<I>Line</I> method allows you to draw rectangles; in this case, the two points are the coordinates of 
any two opposite corners:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A blue rectangle, 2000 twips wide and 1000 twips tall
Line (500, 500)- Step (2000, 1000), vbBlue, B
</pre>
</td></tr>
</table></p>


<p>Rectangles drawn in this way are affected by the current settings of the 
<I>DrawWidth</I> and <I>FillStyle</I> properties.</p>

<p>Finally, you can draw filled rectangles using the <I>BF</I> argument. The capability of creating empty and filled rectangles lets you create interesting effects. For example, you can draw your own 3-D yellow notes floating on your forms using three lines of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A gray rectangle provides the shadow.
Line (500, 500)-Step(2000, 1000), RGB(64, 64, 64), BF
' A white rectangle provides the canvas.
Line (450, 450)-Step(2000, 1000), vbYellow, BF
' Complete it with a black border.
Line (450, 450)-Step(2000, 1000), vbBlack, B
</pre>
</td></tr>
</table></p>

<p>Even if you can paint filled rectangles using the <I>BF</I> argument, Visual Basic offers more advanced filling capabilities. You can activate a solid filling style by setting the <I>FillStyle</I> property, the results of which you can see in Figure 2-12. Interestingly, Visual Basic offers a separate color property for the color to be used to fill regions, <I>FillColor</I>, which allows you to draw a rectangle's contour with one color and paint its interior with another color in a single operation. Here's how you can take advantage of this feature to recode the previous example with just two <I>Line</I> methods:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Line (500, 500)-Step(2000, 1000), RGB(64, 64, 64), BF
FillStyle = vbFSSolid   ' We want a filled rectangle.
FillColor = vbYellow    ' This is the paint color.
Line (450, 450)-Step(2000, 1000), vbBlack, B
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('F02ph12x.htm')"> <img src="F02ph12.JPG" width=404 height=246 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-12.</B> <i>The eight styles offered by the FillStyle property.</i><!--/caption-->
</p>

<p>The <I>FillStyle</I> property can be assigned one of several values, as you can see in Table 2-3.</p>

<p><B>Table 2-3.</B> <i>Constants for the FillStyle property.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Value</I></th>
<th><I>Description</I></th>
</tr>
<tr>
<td valign="top">vbFSSolid</td>
<td valign="top">0</td>
<td valign="top">Solid filling</td>
</tr>
<tr>
<td valign="top">vbFSTransparent</td>
<td valign="top">1</td>
<td valign="top">Transparent (default value)</td>
</tr>
<tr>
<td valign="top">vbHorizontalLine</td>
<td valign="top">2</td>
<td valign="top">Horizontal lines</td>
</tr>
<tr>
<td valign="top">vbVerticalLine</td>
<td valign="top">3</td>
<td valign="top">Vertical lines</td>
</tr>
<tr>
<td valign="top">vbUpwardDiagonal</td>
<td valign="top">4</td>
<td valign="top">Upward diagonal lines</td>
</tr>
<tr>
<td valign="top">vbDownwardDiagonal</td>
<td valign="top">5</td>
<td valign="top">Downward diagonal lines</td>
</tr>
<tr>
<td valign="top">vbCross</td>
<td valign="top">6</td>
<td valign="top">Vertical and horizontal crossing lines</td>
</tr>
<tr>
<td valign="top">vbDiagonalCross</td>
<td valign="top">7</td>
<td valign="top">Diagonal crossing lines</td>
</tr>
</table></p>

<A NAME="64"><h3>Drawing circles, ellipses, and arcs</h3></A>
<p>The last graphic method offered by Visual Basic is <I>Circle</I>, which is also the most complex of the group in that it enables you to draw circles, ellipses, arcs, and even pie slices. Drawing circles is the simplest action you can do with this method because you merely have to specify the circle's center and its radius:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A circle with a radius of 1000 twips, near the
' upper left corner of the form
Circle (1200, 1200), 1000
</pre>
</td></tr>
</table></p>

<p>The <I>Circle</I> method is affected by the current values of the <I>DrawWidth</I>, <I>DrawStyle</I>, <I>FillStyle</I>, and <I>FillColor</I> properties, which means that you can draw circles with thicker borders and fill them with a pattern. The circle's border is usually drawn using the current <I>ForeColor</I> value, but you can override it by passing a fourth argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A circle with a 3-pixel wide green border 
' filled with yellow solid color
DrawWidth = 3
FillStyle = vbFSSolid
FillColor = vbYellow
Circle (1200, 1200), 1000, vbGreen
</pre>
</td></tr>
</table></p>

<p>The preceding example draws a perfect circle on any monitor and at any screen resolution because Visual Basic automatically accounts for the different pixel density along the <I>x</I>- and <I>y</I>-axes. To draw an ellipse, you must skip two more optional arguments (which I'll explain later) and append an <I>aspect ratio</I> to the end of the command. The aspect ratio is the number you get when you divide the <I>y</I>-radius by the <I>x</I>-radius of the ellipse. To complicate matters, however, the value that you pass as the third argument of the method is always the larger of the two radii. So if you want to draw an ellipse inside a rectangular area, you must take additional precautions. This reusable routine lets you draw an ellipse using a simplified syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Ellipse(X As Single, Y As Single, RadiusX As Single, _
    RadiusY As Single)
    Dim ratio As Single, radius As Single
    ratio = RadiusY / RadiusX
    If ratio &lt; 1 Then
        radius = RadiusX
    Else
        radius = RadiusY
    End If
    Circle (X, Y), radius, , , , ratio
End Sub
</pre>
</td></tr>
</table></p>

<p>The <I>Circle</I> method also allows you to draw both circle and ellipse arcs, using two arguments, <I>start</I> and <I>end</I>. (These are the arguments we skipped a moment ago.) The values of these arguments are the starting and ending angles formed by imaginary lines that connect that arc's extreme points with the center of the figure. Such angles are measured in radians, in a counterclockwise direction. For example, you can draw one quadrant of a perfect circle in this way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Const PI = 3.14159265358979
Circle (ScaleWidth / 2, ScaleHeight / 2), 1500, vbBlack, 0, PI / 2
</pre>
</td></tr>
</table></p>

<p>Of course, you can add a <I>ratio </I>argument if you want to draw an ellipse arc. The <I>Circle</I> method can even draw pie slices, that is, arcs that are connected by a radius to the center of the circle or the ellipse. To draw such figures, you must specify a negative value for the <I>start </I>and <I>end </I>arguments. Figure 2-13, which shows a pie chart with an &quot;exploded&quot; portion, was drawn using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Draw a pie with an &quot;exploded&quot; portion.
' NOTE that you can't specify a Null &quot;negative&quot; value
'      but you can express it as -(PI * 2).
Const PI = 3.14159265358979
FillStyle = vbFSSolid
FillColor = vbBlue
Circle (ScaleWidth / 2 + 200, ScaleHeight / 2 - 200), _
    1500, vbBlack, -(PI * 2), -(PI / 2)
FillColor = vbCyan
Circle (ScaleWidth / 2, ScaleHeight / 2), _
    1500, vbBlack, -(PI / 2), -(PI * 2)
</pre>
</td></tr>
</table></p>

<p>
<img src="F02ph13.GIF" width=386 height=271 border=0>
<p>
<!--caption--><B>Figure 2-13.</B> <i>Drawing pie charts.</i><!--/caption-->


<A NAME="65"><h2>The <I>DrawMode</I> Property</h2></A>
<p>As if all the properties and methods you've seen so far weren't enough, you must take into account yet another property of a Form, <I>DrawMode</I>, when you're writing graphic-intensive applications. This property specifies how the figures you're drawing interact with the pixels that are already on the form's surface. By default, all the pixels in your lines, circles, and arcs simply replace whatever is on the form, but this isn't necessarily what you want all the time. In fact, the <I>DrawMode</I> property lets you vary the effects that you get when you blend the pixels coming from the figure being drawn with those already on the form's surface. (Table 2-4 shows you the values that achieve various effects.)</p>


<p><b>Table 2-4.</b> <i>Constants for the</i> DrawMode <i>property.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Value</I></th>
<th><I>Description</I></th>
<th><I>Bit-op (S=Screen, P=Pen)</I></th>
</tr>
<tr>
<td valign="top">vbBlackness</td>
<td valign="top">1</td>
<td valign="top">The screen color is set to all 0s. (The pen color isn't actually used.)</td>
<td valign="top">S = 0</td>
</tr>
<tr>
<td valign="top">vbNotMergePen</td>
<td valign="top">2</td>
<td valign="top">The OR operator is applied to the pen color and the screen color, and then the result is inverted (by applying the NOT operator).</td>
<td valign="top">S = Not (S Or P)</td>
</tr>
<tr>
<td valign="top">vbMaskNotPen</td>
<td valign="top">3</td>
<td valign="top">The pen color is inverted (using the NOT operator), and then the  AND operator is applied to the result and the screen color.</td>
<td valign="top">S = S And Not P</td>
</tr>
<tr>
<td valign="top">vbNotCopyPen</td>
<td valign="top">4</td>
<td valign="top">The pen color is inverted.</td>
<td valign="top">S = Not P</td>
</tr>
<tr>
<td valign="top">vbMaskPenNot</td>
<td valign="top">5</td>
<td valign="top">The screen color is inverted (using the NOT operator), and then the AND operator is applied to the result and the pen color.</td>
<td valign="top">S = Not S And P</td>
</tr>
<tr>
<td valign="top">vbInvert</td>
<td valign="top">6</td>
<td valign="top">Invert the screen color. (The pen color isn't actually used.)</td>
<td valign="top">S = Not S</td>
</tr>
<tr>
<td valign="top">vbXorPen</td>
<td valign="top">7</td>
<td valign="top">The XOR operator is applied to the pen color and the screen color.</td>
<td valign="top">S = S Xor P</td>
</tr>
<tr>
<td valign="top">vbNotMaskPen</td>
<td valign="top">8</td>
<td valign="top">The AND operator is applied to the pen color and the screen color, and then the result is inverted (using the NOT operator).</td>
<td valign="top">S = Not (S And P)</td>
</tr>
<tr>
<td valign="top">vbMaskPen</td>
<td valign="top">9</td>
<td valign="top">The AND operator is applied to the pen color and the color on the screen.</td>
<td valign="top">S = S And P</td>
</tr>
<tr>
<td valign="top">vbNotXorPen</td>
<td valign="top">10</td>
<td valign="top">The XOR operator is applied to the pen color and the screen color, and then the result is inverted (using the NOT operator).</td>
<td valign="top">S = Not (S Xor P)</td>
</tr>
<tr>
<td valign="top">vbNop</td>
<td valign="top">11</td>
<td valign="top">No operation (actually turns off drawing).</td>
<td valign="top">S = S</td>
</tr>
<tr>
<td valign="top">vbMergeNotPen</td>
<td valign="top">12</td>
<td valign="top">The pen color is inverted (by using the NOT operator), and then the OR operator is applied to the result and the screen color.</td>
<td valign="top">S = S Or Not P</td>
</tr>
<tr>
<td valign="top">vbCopyPen</td>
<td valign="top">13</td>
<td valign="top">Draw a pixel in the color specified by the <I>ForeColor </I>property (default).</td>
<td valign="top">S = P</td>
</tr>
<tr>
<td valign="top">vbMergePenNot</td>
<td valign="top">14</td>
<td valign="top">The screen color is inverted (using the NOT operator), and then the OR operator is applied to the result and the pen color.</td>
<td valign="top">S = Not S Or P</td>
</tr>
<tr>
<td valign="top">vbMergePen</td>
<td valign="top">15</td>
<td valign="top">The OR operator is applied to the pen color and the screen color.</td>
<td valign="top">S = S Or P</td>
</tr>
<tr>
<td valign="top">vbWhiteness</td>
<td valign="top">16</td>
<td valign="top">The screen color is set to all 1s. (The pen color isn't actually used.)</td>
<td valign="top">S = 
-1</td>
</tr>
</table></p>

<p>To understand what each drawing mode really does, you should remember that colors are ultimately represented simply by bits, so the operation of combining the pen color and the color already on the form's surface is nothing but a bit-wise operation on 0s and 1s. If you look at Table 2-4 from this perspective, the contents of the rightmost column make more sense, and you can use it to anticipate the results of your graphic commands. For example, if you draw a yellow point (corresponding to hex value &amp;HFFFF) over a cyan background color (&amp;HFFFF00), you can expect the following results:</p>

<p><table cellpadding=5 width="95%">
<tr>
<td valign="top"><I>vbCopyPen</I></td>
<td valign="top">Yellow (Screen color is ignored.)</td>
</tr>
<tr>
<td valign="top"><I>vbXorPen</I></td>
<td valign="top">Magenta (&amp;HFF00FF)</td>
</tr>
<tr>
<td valign="top"><I>vbMergePen</I></td>
<td valign="top">White (&amp;HFFFFFF)</td>
</tr>
<tr>
<td valign="top"><I>vbMaskPen</I></td>
<td valign="top">Green (&amp;H00FF00)</td>
</tr>
<tr>
<td valign="top"><I>vbNotMaskPen</i></td>
<td valign="top">Magenta (&amp;HFF00FF)</td>
</tr>
</table></p>

<p>Different draw modes can deliver the same result, especially if you're working with solid colors. (See the <I>vbXorPen </I>and <I>vbNotMaskPen </I>examples above.) I can almost hear you asking, &quot;Should we really worry about all these modes?&quot; The answer is no and yes. No, you don't usually need to worry about them if you're writing applications with trivial or no graphic output. Yes, you should at least know what Visual Basic has to offer you when it's time to do some advanced pixel manipulation.</p>

<p>One of the most useful things that you can do with the <I>DrawMode</I> property is <I>rubber banding,</I> the ability to draw and resize new shapes using the mouse without disturbing the underlying graphic. You use rubber banding techniques&#8212;without even knowing it&#8212;whenever you draw a shape in Microsoft Paint or any Windows paint program. Have you ever wondered what really happens when you drag one of the rectangle's corners using the mouse? Is Microsoft Paint actually erasing the rectangle and redrawing it in another position? How can you implement the same feature in your Visual Basic applications? The answer is much simpler than you might think and is based on the <I>DrawMode</I> property.</p>

<p>The trick is that if you apply the XOR operator twice to a value on the screen and the same pen value, after the second XOR command the original color on the screen is restored. (If you are familiar with bit-wise operations, this shouldn't surprise you; if you aren't, experiment with them until you are convinced that I am telling the truth.) Therefore, all you have to do is set <I>DrawMode</I> to the 7-vbXorPen value; then draw the rectangle (or line, circle, arc, and so on) once to show it and a second time to erase it. When the user eventually releases the mouse cursor, you set the <I>DrawMode</I> property to 13-vbCopyPen and draw the final rectangle on the form's surface. The following program lets you experiment with rubber banding: You can draw empty rectangles (with random line width and color) by dragging the left button and filled rectangles by dragging the right mouse button.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Form-level variables
Dim X1 As Single, X2 As Single
Dim Y1 As Single, Y2 As Single
' True if we are dragging a rectangle
Dim dragging As Boolean

Private Sub Form_Load()
    ' Rubber-banding works particularly well on a black background.
    BackColor = vbBlack
End Sub

Private Sub Form_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    If Button And 3 Then
        dragging = True
        ' Remember starting coordinates.
        X1 = X: Y1 = Y: X2 = X: Y2 = Y
        ' Select a random color and width.
        ForeColor = RGB(Rnd * 255, Rnd * 255, Rnd * 255)
        DrawWidth = Rnd * 3 + 1
        ' Draw the very first rectangle in Xor mode.
        DrawMode = vbXorPen
        Line (X1, Y1)-(X2, Y2), , B
        If Button = 2 Then
            ' Filled rectangles
            FillStyle = vbFSSolid
            FillColor = ForeColor
        End If
    End If
End Sub

Private Sub Form_MouseMove(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    If dragging Then
        ' Delete old rectangle (repeat the same command in Xor mode).
        Line (X1, Y1)-(X2, Y2), , B
        ' Redraw to new coordinates.
        X2 = X: Y2 = Y
        Line (X1, Y1)-(X2, Y2), , B
    End If
End Sub

Private Sub Form_MouseUp(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    If dragging Then
        dragging = False
        ' Draw the definitive rectangle.
        DrawMode = vbCopyPen
        Line (X1, Y1)-(X, Y), , B
        FillStyle = vbFSTransparent
    End If
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="66"><h2>The <I>ScaleMode</I> Property</h2></A>
<p>While the twip is the default unit of measurement for Visual Basic when placing and resizing objects on screen, it isn't the only one available. In fact, forms and some other controls that can work as containers&#8212;most notably, PictureBox controls&#8212;expose a <I>ScaleMode</I> property that can be set either at design time or run time with one of the values displayed in Table 2-5.</p>

<P><B>Table 2-5.</B> <i>Constants for the ScaleMode property.</i></P>

<p><table cellpadding=5 width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Value</I></th>
<th><I>Description</I></th>
</tr>
<tr>
<td valign="top">vbUser</td>
<td valign="top">0</td>
<td valign="top">User-defined scale mode</td>
</tr>
<tr>
<td valign="top">vbTwips</td>
<td valign="top">1</td>
<td valign="top">Twips (1440 twips per logical inch; 567 twips 
per logical centimeter)</td>
</tr>
<tr>
<td valign="top">vbPoints</td>
<td valign="top">2</td>
<td valign="top">Points (72 points per logical inch)</td>
</tr>
<tr>
<td valign="top">vbPixels</td>
<td valign="top">3</td>
<td valign="top">Pixels</td>
</tr>
<tr>
<td valign="top">vbCharacters</td>
<td valign="top">4</td>
<td valign="top">Characters (horizontal = 120 twips per unit; vertical = 240 twips per unit)</td>
</tr>
<tr>
<td valign="top">vbInches</td>
<td valign="top">5</td>
<td valign="top">Inches</td>
</tr>
<tr>
<td valign="top">vbMillimeters</td>
<td valign="top">6</td>
<td valign="top">Millimeters</td>
</tr>
<tr>
<td valign="top">vbCentimeters</td>
<td valign="top">7</td>
<td valign="top">Centimeters</td>
</tr>
<tr>
<td valign="top">vbHimetric</td>
<td valign="top">8</td>
<td valign="top">Himetric (1000 units = 1 centimeter)</td>
</tr>
</table></p>

<p>The form object exposes two methods that let you easily convert between different units of measurement; you use the <I>ScaleX</I> method for horizontal measurements and the <I>ScaleY</I> method for vertical measurements. Their syntax is identical: You pass the value to be converted (the source value), a constant from among those in Table 2-5 that specifies the unit used for the source value (the <I>fromscale </I>argument), and another constant that specifies which unit you want to convert it to (the <I>toscale </I>argument). If you omit the <I>fromscale </I>argument, vbHimetric is assumed; if you omit the <I>toscale </I>argument, the current value of the <I>ScaleMode </I>property is assumed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' How many twips per pixel along the x-axis?
Print ScaleX(1, vbPixels, vbTwips)

' Draw a 50x80 pixel rectangle in the upper left corner
' of the form, regardless of the current ScaleMode.
Line (0, 0)-(ScaleX(50, vbPixels), ScaleY(80, vbPixels)), _
    vbBlack, B
</pre>
</td></tr>
</table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The <I>ScaleX</I> and <I>ScaleY</I> methods offer the same functionality as the Screen object's <I>TwipsPerPixelX</I> and <I>TwipsPerPixelY</I> properties, work for other measurement units, and don't require that you write the actual conversion code. The only time you should continue to use the Screen's properties is when you are writing code in a BAS module (for example, a generic function or procedure) and you don't have any form reference at hand.
</blockquote></div></p>

<p>The <I>ScaleMode</I> property is closely related to four other properties. <I>ScaleLeft</I> and <I>ScaleTop</I> correspond to the (<I>x,y</I>) values of the upper left pixel in the client area of the form and are usually both set to 0. <I>ScaleWidth</I> and <I>ScaleHeight</I> correspond to the coordinates of the pixel in the bottom right corner in the client area. If you set a different <I>ScaleMode</I>, these two properties immediately reflect the new setting. For example, if you set <I>ScaleMode</I> to 3-vbPixels, you can then query <I>ScaleWidth</I> and <I>ScaleHeight</I> to learn the size of the client area in pixels. Keep in mind that, even if the current <I>ScaleMode</I> is 1-vbTwips, the <I>ScaleWidth</I> and <I>ScaleHeight </I>properties return values that differ from the form's <I>Width</I> and <I>Height</I> properties, respectively, because the latter ones account for the window's borders and title bar, which are outside the client area. If you know the relationship among these quantities, you can derive some useful information about your form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Run this code from inside a form module.
' Ensure that ScaleWidth and ScaleHeight return twips.
' (Next line is useless if you are using default settings.) 
ScaleMode = vbTwips
' Evaluate the border's width in pixels.
BorderWidth = (Width _ ScaleWidth) / Screen.TwipsPerPixelX / 2

' Evaluate the caption's height in pixels.
' (Assumes that the form has no menu bar)
CaptionHeight = (Height _ ScaleHeight) / _
    Screen.TwipsPerPixelY _ BorderWidth * 2
</pre>
</td></tr>
</table></p>

<p>You can assign the <I>ScaleMode </I>property any value that fits your requirements, but the values that are most frequently used are vbTwips and vbPixels. The latter is useful if you want to retrieve the coordinates of child controls in pixels, which is often necessary if you're performing some advanced graphic command that involves Windows API calls.</p>

<p>The vbUser setting is unique in that you don't usually assign it to the <I>ScaleMode</I> property. Instead, you define a custom coordinate system by setting <I>ScaleLeft</I>, <I>ScaleTop</I>, <I>ScaleWidth</I>, and <I>ScaleHeight</I> properties. When you do it, the <I>ScaleMode</I> property is automatically set to 0-vbUser by Visual Basic. You might need to create a custom coordinate system to simplify the code in an application and have Visual Basic perform all the needed conversions on your behalf. The following program plots a function on a form, using a custom coordinate system. (See the results in Figure 2-14.)</p>

<p>
<A HREF="javascript:fullSize('F02ph14x.htm')"> <img src="F02ph14.JPG" width=404 height=206 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-14.</B> <i>Plotting a third-degree polynomial function using a custom coordinate system.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The portion of X-Y plane to be plotted
Const XMIN = -5, XMAX = 5, YMIN = -100, YMAX = 100
Const XSTEP = 0.01

Private Sub Form_Resize()
    ' Set a custom graphic coordinate system so that
    ' the visible viewport corresponds to constants above.
    ScaleLeft = XMIN
    ScaleTop = YMAX
    ScaleWidth = XMAX - XMIN
    ScaleHeight = -(YMAX - YMIN)
    ' Force a Paint event.
    Refresh
End Sub

Private Sub Form_Paint()
    Dim x As Single, y As Single
    ' Start with a blank canvas.
    Cls
    ForeColor = vbBlack
    ' Explain what is being displayed.
    CurrentX = ScaleLeft
    CurrentY = ScaleTop
    Print &quot;f(x) = x ^ 3 - 2 * x ^ 2 + 10 * x + 5&quot;
    CurrentX = ScaleLeft
    Print &quot;X-interval: [&quot; &amp; XMIN &amp; &quot;,&quot; &amp; XMAX &amp; &quot;]&quot;
    CurrentX = ScaleLeft
    Print &quot;Y-range: [&quot; &amp; YMIN &amp; &quot;,&quot; &amp; YMAX &amp; &quot;]&quot;
    ' Draw x- and y-axes.
    Line (XMIN, 0)-(XMAX, 0)
    Line (0, YMIN)-(0, YMAX)
    ' Plot the math function.
    ForeColor = vbRed
    For x = XMIN To XMAX Step XSTEP
        y = x ^ 3 - 2 * x ^ 2 + 10 * x + 5
        PSet (x, y)
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>You should pay attention to several notable things about the preceding code:</p>

<UL>
<p><li>The <I>ScaleHeight</I> property is negative, which is perfectly legal; in fact, when showing a <I>y</I>-axis, you'll often have to set up negative values for this property because by default <I>y</I>-coordinates increase their value going from top to bottom, while you usually need exactly the opposite.</li></p>

<p><li>You can resize the form at will, and it will always display the same portion of the <I>x-y</I> plane, distorting it if necessary.</li></p>

<p><li>Once you have set a custom system in the <I>Resize</I> event procedure, you can reason in terms of <I>x-y</I> coordinates in your own coordinate system, which greatly simplifies the plotting code.</li></p>

<p><li>The <I>Cls</I> graphic method resets the <I>CurrentX </I>and <I>CurrentY</I> coordinates to (0,0), which in this case corresponds to the center of the screen, so you have to manually set <I>CurrentX</I> and <I>CurrentY</I> properties to print in the upper left corner.</li></p>

<p><li>The <I>Print</I> method always resets the <I>CurrentX</I> property to 0, so you have to set it each time you print a line of text.</li></p>
</UL>
 
<A NAME="67"><h2>Palette Support</h2></A>
<p>First, some theory. Most video cards are theoretically able to display 16 million distinct colors. (I say theoretically because we humans can't distinguish most colors from those nearest in the continuum.) Only relatively few <I>true-color </I>video cards are capable, however, of actually showing that many colors in a given instant on the screen, especially at higher screen definitions. (For the sake of simplicity, I omit a description of <I>hi-color </I>cards capable of 65,536 simultaneously displayed colors.) In all other cases, Windows has to resort to <I>palettes</I>.</p>

<p>A palette is a subset of 256 colors among those theoretically supported by the video card. If a video card works in the palette mode, it devotes 1 byte to each pixel on the screen (instead of the 3 bytes that would be necessary to hold 16 million different color values), thus saving a lot of memory and accelerating most graphic operations. Each of the possible 256 values points to another table, where the video card can find the actual RGB value for each color. Each pixel can have a well-defined color, but there can be no more than 256 distinct colors on the screen at a given moment.</p>

<p>Windows reserves for itself 16 colors and leaves the remaining ones available for use by applications. When the foreground application has to display an image, it uses the available palette entries and tries to match the colors in the image. If the image embeds more distinct colors than the number of available colors, the application has to find a decent compromise&#8212;for example, by using the same palette entry for two similar colors. In practice, this isn't a big issue, at least compared with what follows. A more serious problem with palettes, in fact, is that when an application has to display multiple images at the same time, it must arbitrate among different sets of colors. Which one has precedence? What happens to the other images?</p>

<p>Until Visual Basic 5, the solution available to Visual Basic developers wasn't actually a solution. Visual Basic 4 and previous versions simply gave the precedence to the image that was first in z-order&#8212;in other words, the form or the control that had the focus. All the other images on the screen were displayed using a palette that in most cases didn't fit their set of colors, and the results were often obscene. Starting with Visual Basic 5, we finally have a choice.</p>

<p>The key to this new capability is the form's <I>PaletteMode</I> property, which can be assigned&#8212;both at design time and run time&#8212;three different values: 0-vbPaletteModeHalftone, 1-vbPaletteModeUseZOrder, and 2-vbPaletteModeCustom. The <I>Halftone </I>palette is a special fixed palette that contains an assortment of &quot;average&quot; colors; it should provide a reasonable rendering for many images and, above all, should allow multiple images with different palettes to peacefully coexist on the form. (This is the default mode for Visual Basic 5 and 6 forms). The <I>ZOrder </I>mode is the only setting available to previous versions of the language. The Form or PictureBox that has the focus affects the palette used by the video card; it will be shown in the best way possible, but all others probably won't be shown to advantage. The third setting, <I>Custom</I> mode, lets you set up a custom palette. To do so, you assign a bitmap&#8212;at design time or at run time, using the <I>LoadPicture</I> function&#8212;to the <I>Palette</I> property. In this case, the palette associated with the image you provide becomes the palette used by the form.</p>

<p>This concludes the description of all the properties, methods, and events supported by the Form object. Much of this knowledge will be useful in the <a href="#A14">next chapter</a> too, where I describe the features of all the intrinsic Visual Basic controls.</p>

<a name="A14"></a><h2>5.3 Chapter 3 -- Intrinsic Controls</h2>

<A HREF="#A13">[Previous]</A> <A HREF="#A15">[Next]</A><P>


<font size="+3">Chapter 3</font>

<A NAME="68"><h1>Intrinsic Controls</h1></A>

<p>In Microsoft Visual Basic jargon, <I>intrinsic controls 
</I>(or <I>built-in </I>controls) are those controls visible in the Toolbox window when you launch the environment. 
This important group includes controls, such as Label, TFextbox, and 
CommandButton controls, that are used in nearly every application. As you know, Visual Basic can 
be extended using additional Microsoft ActiveX Controls (formerly known as OCX 
controls, or OLE custom controls) either provided in the Visual Basic package or 
available as commercial, shareware, or even freeware third-party products. Even if 
such external controls are often more powerful than built-in controls, intrinsic controls 
have a few advantages that you should always take into account:</p>
<UL>

<p><li> Support for intrinsic controls is included in the MSVBVM60.DLL, the 
runtime file that's distributed with every Visual Basic application. This 
means that if a program exclusively uses intrinsic controls, you don't need 
to distribute any additional OCX files, which greatly simplifies the 
installation process and reduces disk requirements.</li></p>

<p><li> In general, Visual Basic can create and display intrinsic controls faster 
than it can external ActiveX controls because the code for their 
management is already in the Visual Basic runtime module and doesn't have to 
be loaded when a form references an intrinsic control for the first time. 
Also, applications based on intrinsic controls usually perform faster on 
machines with less memory; no extra memory is needed by additional OCX modules.</li></p>

<p><li> Because programs based exclusively on intrinsic controls require 
fewer ancillary files, they can be downloaded faster through the Internet. 
Moreover, if end users previously installed any other Visual Basic 
application, Visual Basic runtime files are already installed on the target machine, 
which reduces download times to the minimum.</li></p>
</UL>
 
<p>For all these reasons, it's important to learn how to make the best of 
intrinsic controls. In this chapter, I focus on their most important properties, methods, 
and events, and I also show how to address some common programming issues 
using intrinsic controls exclusively.</p>


<a name="A15"></a><h3>5.3.1 TextBox Controls</h3>

<A HREF="#A14">[Previous]</A> <A HREF="#A16">[Next]</A><P>

<A NAME="69"><h1>TextBox Controls</h1></A>

<p>TextBox controls offer a natural way for users to enter a value in your program. 
For this reason, they tend to be the most frequently used controls in the majority 
of Windows applications. TextBox controls, which have a great many properties 
and events, are also among the most complex intrinsic controls. In this section, I 
guide you through the most useful properties of TextBox controls and show how to 
solve some of the problems that you're likely to encounter.</p>

<p>After you place a TextBox control on a form, you must set a few basic 
properties. The first thing I do as soon as I create a new TextBox control is clear its 
<I>Text</I>property. If this is a multiline field, I also set the 
<I>MultiLine</I>property to True.</p>

<p>You can set the <I>Alignment</I> property of TextBox controls to left align, right 
align, or center the contents of the control. Right-aligned TextBox controls are 
especially useful when you're displaying numeric values. But you should be aware of the 
following quirk: while this property always works correctly when the 
<I>Multiline</I> property is set to True, it works with single-line controls only under Microsoft Windows 
98, Microsoft Windows NT 4 with Service Pack 3, or later versions. Under previous 
versions of Windows 9<I>x</I> or Windows NT, no error is raised but single-line TextBox 
controls ignore the <I>Alignment</I> property and always align their contents to the left.</p>

<p>You can prevent the user from changing the contents of a TextBox control 
by setting its <I>Locked</I>property to True. You usually do this if the control contains the 
result of a calculation or displays a field taken from a database opened in read-only 
mode. In most cases, you can achieve the same result using a Label control with a 
border and white background, but a locked TextBox control also permits your users to 
copy the value to the Clipboard and scroll through it if it's too large for the field's width.</p>

<p>If you're dealing with a numeric field, you probably want to set a limit on 
the number of characters that the user can enter in the field. You can do it very 
easily using the <I>MaxLength </I>property. A 0 value (the default) means that you can enter 
any number of characters; any positive value 
<I>N</I> enforces a limit to the length of the 
field's contents to be <I>N</I> characters long.</p>

<p>If you're creating password fields, you should set the 
<I>PasswordChar</I> property to a character string, typically an asterisk. In this case, your program can read and 
modify the contents of this TextBox control as usual, but users see only a row of asterisks.</p>

<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
Password-protected TextBox controls effectively disable the 
Ctrl+X and Ctrl+C keyboard shortcuts, so malicious users can't steal a password 
entered by another user. If, however, your application includes an Edit menu 
with all the usual clipboard commands, it's up to you to disable the Copy and Cut 
commands when the focus is on a password-protected field.
</blockquote></div></P>

<p>You can set other properties for a better appearance of the control&#8212;the 
<I>Font</I> property, for example. In addition, you can set the 
<I>ToolTipText</I> property to help users understand what the TextBox control is for. You can also make borderless 
TextBox controls by setting their 
<I>BorderStyle</I> property to 0-None, but controls like these 
don't appear frequently in Windows applications. In general, you can't do much else 
with a TextBox control at design time. The most interesting things can be done 
only through code.</P>

<A NAME="70"><h2>Run-Time Properties</h2></A>

<p>The <I>Text</I> property is the one you'll reference most often in code, and 
conveniently it's the default property for the TextBox control. Three other frequently used 
properties are these:</P>
<UL>

<p><li> The <I>SelStart </I>property sets or returns the position of the blinking 
<I>caret</I> (the insertion point where the text you type appears). Note that the 
blinking cursor inside TextBox and other controls is named 
<I>caret</I>, to distinguish it from the <I>cursor 
</I>(which is implicitly the mouse cursor). When the caret 
is at the beginning of the contents of the TextBox control, 
<I>SelStart</I> returns 0; when it's at the end of the string typed by the user, 
<I>SelStart</I> returns the value <I>Len(Text)</I>. You can modify the 
<I>SelStart </I>property to programmatically move the caret.</li></p>

<p><li> The <I>SelLength </I>property returns the number of characters in the portion 
of text that has been highlighted by the user, or it returns 0 if there's 
no highlighted text. You can assign a nonzero value to this property to 
programmatically select text from code. Interestingly, you can assign to 
this property a value larger than the current text's length without raising a 
run-time error.</li></p>

<p><li> The <I>SelText</I> property sets or returns the portion of the text that's 
currently selected, or it returns an empty string if no text is highlighted. Use it 
to directly retrieve the highlighted text without having to query 
<I>Text</I>, <I>SelStart</I>, and <I>SelLength</I> properties. What's even more interesting is that you 
can assign a new value to this property, thus replacing the current 
selection with your own. If no text is currently selected, your string is simply 
inserted at the current caret position.</li></p>
</UL>
 
<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
When you want to append text to a TextBox control, you should use 
the following code (instead of using the concatenation operator) to reduce 
flickering and improve performance:

<P><TABLE><TR><TD>
<PRE>
Text1.SelStart = Len(Text1.Text)
Text1.SelText = StringToBeAdded
</PRE></TD></TR></TABLE></P>
</blockquote></div></P>

<p>One of the typical operations you could find yourself performing with 
these properties is selecting the entire contents of a TextBox control. You often do it 
when the caret enters the field so that the user can quickly override the existing value 
with a new one, or start editing it by pressing any arrow key:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_GotFocus()
    Text1.SelStart = 0 
    ' A very high value always does the trick.
    Text1.SelLength = 9999
End Sub
</pre>
</td></tr>
</table>
</P>

<p>Always set the <I>SelStart</I> property first and then the 
<I>SelLength</I> or <I>SelText</I> properties. When you assign a new value to the 
<I>SelStart</I> property, the other two are automatically reset to 0 and an empty string respectively, thus overriding your 
previous settings.</P>

<A NAME="71"><h2>Trapping Keyboard Activity</h2></A>

<p>TextBox controls support <I>KeyDown</I>, 
<I>KeyPress</I>, and <I>KeyUp</I> standard events, 
which <a href="#A9">Chapter 2</a> covered. One thing that you will often do is prevent the user from 
entering invalid keys. A typical example of where this safeguard is needed is a 
numeric field, for which you need to filter out all nondigit keys:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyPress(KeyAscii As Integer)
    Select Case KeyAscii
        Case Is &lt; 32               ' Control keys are OK.
        Case 48 To 57              ' This is a digit.
        Case Else                  ' Reject any other key.
            KeyAscii = 0
    End Select
End Sub
</pre>
</td></tr>
</table>
</P>

<p>You should never reject keys whose ANSI code is less than 32, a group 
that includes important keys such as Backspace, Escape, Tab, and Enter. Also note that 
a few control keys will make your TextBox beep if it doesn't know what to do 
with them&#8212;for example, a single-line TextBox control doesn't know what to do with 
an Enter key.</P>


<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>Don't assume that the 
<I>KeyPress</I> event will trap all control keys 
under all conditions. For example, the 
<I>KeyPress</I> event can process the Enter key 
only if there's no CommandButton control on the form whose 
<I>Default</I> property is set to True. If the form has a default push button, the effect of pressing the 
Enter key is clicking on that button. Similarly, no Escape key goes through this 
event if there's a Cancel button on the form. Finally, the Tab control key is trapped 
by a <I>KeyPress</I> event only if there isn't any other control on the form whose 
<I>TabStop </I>property is True.
</blockquote></div></P>

<p>You can use the <I>KeyDown</I> event procedure to allow users to increase 
and decrease the current value using Up and Down arrow keys, as you see here:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyDown(KeyCode As Integer, Shift As Integer)
    Select Case KeyCode
        Case vbKeyUp
            Text1.Text = CDbl(Text1.Text) + 1
        Case vbKeyDown
            Text1.Text = CDbl(Text1.Text)  -1
    End Select
End Sub
</pre>
</td></tr>
</table>
</P>

<p><div class="note"><blockquote><b>NOTE</b><hr>
There's a bug in the implementation of TextBox ready-only 
controls. When the <I>Locked</I> property is set to True, the Ctrl+C key combination 
doesn't correctly copy the selected text to the Clipboard, and you must manually 
implement this capability by writing code in the 
<I>KeyPress</I> event procedure.
</blockquote></div></P>

<A NAME="72"><h2>Validation Routines for Numbers</h2></A>

<p>Although trapping invalid keys in the 
<I>KeyPress</I> or <I>KeyDown</I> event procedures 
seems a great idea at first, when you throw your application to inexperienced users you 
soon realize that there are many ways for them to enter invalid data. Depending on 
what you do with this data, your application can come to an abrupt end with a 
run-time error or&#8212;much worse&#8212;it can appear to work correctly while it delivers bogus 
results. What you really need is a bullet-proof method to trap invalid values.</P>

<p>Before I offer you a decent solution to the problem, let me explain why 
you can't rely solely on trapping invalid keys for your validation chores. What if the 
user pastes an invalid value from the clipboard? Well, you might say, let's trap the 
Ctrl+V and Shift+Ins key combinations to prevent the user from doing that! 
Unfortunately, Visual Basic's TextBox controls offer a default edit menu that lets users perform 
any clipboard operation by simply right-clicking on them. Fortunately, there's a 
way around this problem: Instead of trapping a key 
<I>before </I>it gets to the TextBox control, you trap its effect in the 
<I>Change</I> event and reject it if it doesn't pass your test. 
But this makes the structure of the code a little more complex than you might anticipate:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Form-level variables
Dim saveText As String
Dim saveSelStart As Long

Private Sub Text1_GotFocus()
    ' Save values when the control gets the focus.
    saveText = Text1.Text
    saveSelStart = Text1.SelStart
End Sub

Private Sub Text1_Change()
    ' Avoid nested calls.
    Static nestedCall As Boolean
    If nestedCall Then Exit Sub

    ' Test the control's value here.
    If IsNumeric(Text1.Text) Then
        ' If value is OK, save values.
        saveText = Text1.Text
        saveSelStart = Text1.SelStart
    Else
        ' Prepare to handle a nested call. 
        nestedCall = True
        Text1.Text = saveText
        nestedCall = False
        Text1.SelStart = saveSelStart
    End If
End Sub

Private Sub Text1_KeyUp(KeyCode As Integer, Shift As Integer)
    saveSelStart = Text1.SelStart
End Sub
Private Sub Text1_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    saveSelStart = Text1.SelStart
End Sub
Private Sub Text1_MouseMove(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    saveSelStart = Text1.SelStart
End Sub
</pre>
</td></tr>
</table>
</P>

<p>If the control's value doesn't pass your tests in the 
<I>Chang</I>e event procedure, you must restore its previous valid value; this action recursively fires a 
<I>Change</I> event, and you must prepare yourself to neutralize this nested call. You might wonder 
why you also need to trap the <I>KeyUp</I>, 
<I>MouseDown</I>, and <I>MouseMove</I> events: The 
reason is that you always need to keep track of the last valid position for the insertion 
point because the end user could move it using arrow keys or the mouse.</P>
<P>The preceding code snippet uses the 
<I>IsNumeric</I> function to trap invalid data. You should be aware that this function isn't robust enough for most 
real-world applications. For example, the 
<I>IsNumeric</I> function incorrectly considers these 
strings as valid numbers:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>123,,,123
345-
$1234     ' What if it isn't a currency field?
2.4E10    ' What if I don't want to support scientific notation?
</pre>
</td></tr>
</table>
</P>

<p>To cope with this issue, I have prepared an alternative function, which you 
can modify for your particular purposes. (For instance, you can add support for a 
currency symbol or the comma as the decimal separator.) Note that this function 
always returns True when it's passed a null string, so you might need to perform 
additional tests if the user isn't allowed to leave the field blank:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function CheckNumeric(text As String, DecValue As Boolean) As Boolean
    Dim i As Integer
    For i = 1 To Len(text)
        Select Case Mid$(text, i, 1)
            Case &quot;0&quot; To &quot;9&quot;
            Case &quot;-&quot;, &quot;+&quot;
                ' Minus/plus signs are only allowed as leading chars.
                If i &gt; 1 Then Exit Function
            Case &quot;.&quot;
                ' Exit if decimal values not allowed.
                If Not DecValue Then Exit Function
                ' Only one decimal separator is allowed.
                If InStr(text, &quot;.&quot;) &lt; i Then Exit Function
            Case Else
                ' Reject all other characters.
                Exit Function
        End Select
    Next
    CheckNumeric = True
End Function
</pre>
</td></tr>
</table>
</P>

<p>If your TextBox controls are expected to contain other types of data, you 
might be tempted to reuse the same validation framework I showed you 
previously&#8212;including all the code in the 
<I>GotFocus</I>, <I>Change</I>, <I>KeyUp</I>, 
<I>MouseDown</I>, and <I>MouseMove </I>event procedures&#8212;and replace only the call to 
<I>IsNumeric</I> with a call to your custom validation routine. Things aren't as simple as they appear at first, however. 
Say that you have a date field: Can you use the 
<I>IsDate</I> function to validate it from within the 
<I>Change</I> event? The answer is, of course, no. In fact, as you enter the first digit 
of your date value, <I>IsDate</I> returns False and the routine therefore prevents you 
from entering the remaining characters, and so preventing you from entering 
<I>any</I> value.</P>
<P>This example explains why a <I>key-level</I> validation isn't always the best 
answer to your validation needs. For this reason, most Visual Basic programmers prefer 
to rely on <I>field-level </I>validation and test the values only when the user moves the 
input focus to another field in the form. I explain field-level validation in the next section.</P>

<A NAME="73"><H2>The <I>CausesValidation</I> Property and the <I>Validate</I> Event</H2></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Visual Basic 6 has finally come up with a solution for most of the validation 
issues that have afflicted Visual Basic developers for years. As you'll see in a moment, 
the Visual Basic 6 approach is simple and clean; it really astonishes me that it took 
six language versions to deliver such a lifesaver. The keys to the new validation 
features are the <I>Validate</I> event and the 
<I>CausesValidation</I> property. They work together 
as follows: When the input focus leaves a control, Visual Basic checks the 
<I>CausesValidation</I> property of the control that is about to receive the focus. If this 
property is True, Visual Basic fires the 
<I>Validate</I> event in the control that's about to lose 
the focus, thus giving the programmer a chance to validate its contents and, if 
necessary, cancel the focus shift.</P>

<p>Let's try a practical example. Imagine that you have five controls on a form: 
a required field (a TextBox control, txtRequired, that can't contain an empty string), 
a numeric field, txtNumeric, that expects a value in the range 1 through 1000, and 
three push buttons: OK, Cancel, and Help. (See Figure 3-1.) You don't want to 
perform validation if the user presses the Cancel or Help buttons, so you set their 
<I>CausesValidation</I> properties to False. The default value for this property is True, so you 
don't have to modify it for the other controls. Run the sample program on the 
companion CD, type something in the required TextBox, and then move to the second 
field. Because the second field's 
<I>CausesValidation</I> property is True, Visual Basic fires 
a <I>Validate</I> event in the first TextBox control:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtRequired_Validate(Cancel As Boolean)
    ' Check that field is not empty.
    If txtRequired.Text = &quot;&quot; Then
        MsgBox &quot;Please enter something here&quot;, vbExclamation
        Cancel = True
    End If
End Sub
</pre>
</td></tr>
</table>
</P>

<p>If the <I>Cancel</I> parameter is set to True, Visual Basic cancels the user's action 
and takes the input focus back on the txtRequired control: No other 
<I>GotFocus</I> and <I>LostFocus</I> events are generated. On the other hand, if you typed something in the 
required field, the focus will now be on the second field (the numeric text box). Try 
clicking on the Help or Cancel buttons: No 
<I>Validate</I> event will fire this time because you 
set the <I>CausesValidation</I> property for each of these controls to False. Instead, click 
on the OK button to execute the <I>Validate</I> event of the numeric field, where you can 
check it for invalid characters and valid range.</P>

<p>
<A HREF="javascript:fullSize('F03ph01x.htm')"> <img src="F03ph01.JPG" width=404 height=263 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-1.</B> <i>A demonstration program that lets you experiment with the new Visual Basic Validate features.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtNumeric_Validate(Cancel As Boolean)
    If Not IsNumeric(txtNumeric.Text) Then
        Cancel = True
    ElseIf CDbl(txtNumeric.Text) &lt; 1 Or CDbl(txtNumeric.Text) &gt; 1000 Then
        Cancel = True
    End If
    If Cancel Then
        MsgBox &quot;Please enter a number in range [1-1000]&quot;, vbExclamation
    End If
End Sub
</pre>
</td></tr>
</table>
</P>

<p>In some circumstances, you might want to programmatically validate the 
control that has the focus without waiting for the user to move the input focus. You 
can do it with the form's 
<I>ValidateControls</I> method, which forces the 
<I>Validate </I>event of the control that has the input focus. Typically, you do it when the user closes the form:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    ' You can't close this form without validating the current field.
    If UnloadMode = vbFormControlMenu Then
        On Error Resume Next
        ValidateControls
        If Err = 380 Then
            ' The current field failed validation.
            Cancel = True
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</P>

<p>Checking the <I>UnloadMode</I> parameter is important; otherwise, your 
application will mistakenly execute a 
<I>ValidateControls</I> method when the user clicks on the 
Cancel button. Note that <I>ValidateControls</I> returns an error 380 if Cancel was set in the 
<I>Validate</I> event procedure of the control that had the focus.</P>

<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>Visual Basic 6's validation scheme has two flaws, though. If 
your form has a CommandButton whose <I>Default 
</I>property is set to True, pressing the Enter key while the input focus is on another control results in a click 
on the CommandButton control but doesn't fire a 
<I>Validate </I>event, even if the <I>CausesValidation 
</I>property of the CommandButton control is set to True. The 
only way to solve this problem is to invoke the 
<I>ValidateControls </I>method from within the default CommandButton control's 
<I>Click </I>event procedure.
<P>The second flaw is that the <I>Validate</I> event doesn't fire when you're 
moving the focus from a control whose 
<I>CausesValidation</I> property is False, even if the control that receives the focus has its 
<I>CausesValidation</I> property set to True.</P>
</BLOCKQUOTE></DIV></P>

<P>The new Visual Basic 6 validation mechanism is simple and can be 
implemented with little effort. But it isn't the magic answer to all your validation needs. In fact, 
this technique can only enforce <I>field-level 
</I>validation; it does nothing for <I>record-level 
</I>validation. In other words, it ensures that one particular field is correct, not that all 
fields in the form contain valid data. To see what I mean, run the demonstration 
program, enter a string in the first field, and press Alt+F4 to close the form. Your code 
won't raise an error, even if the second field doesn't contain a valid number! 
Fortunately, it doesn't take much to create a generic routine that forces each control on the 
form to validate itself:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    ' You can't close this form without validating all the fields on it.
    If UnloadMode = vbFormControlMenu Then
        On Error Resume Next
        Dim ctrl As Control
        ' Give the focus to each control on the form, and then
        ' validate it.
        For Each ctrl In Controls
            Err.Clear
            ctrl.SetFocus
            If Err = 0 Then
                ' Don't validate controls that can't receive input focus.
                ValidateControls
                If Err = 380 Then
                    ' Validation failed, refuse to close.
                    Cancel = True: Exit Sub
                End If
            End If
        Next
    End If
End Sub
</pre>
</td></tr>
</table>
</P>

<p>The <I>CausesValidation</I> property and the 
<I>Validate</I> event are shared by all the intrinsic controls that are able to get the focus as well as by most external 
ActiveX controls, even those not specifically written for Visual Basic. This is possible 
because they are <I>extender features,</I> provided by the Visual Basic runtime to all the 
controls placed on a form's surface.</P>

<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>One Visual Basic operator has great potential when it comes time to 
validate complex strings but is neglected by most Visual Basic developers. Let's 
say you have a product code that consists of two uppercase characters followed 
by exactly three digits. You might think that you need some complex string 
functions to validate such a string until you try the 
<I>Like</I> operator, as follows:<P>
If &quot;AX123&quot; Like &quot;[A-Z][A-Z]###&quot; Then Print &quot;OK&quot;
</P><P>See <a href="#A30">Chapter 5</a> for more information about the <I>Like</I> operator.</P>
</BLOCKQUOTE></DIV></P>



<A NAME="74"><h2>Auto-Tabbing Fields</h2></A>

<p>Users aren't usually delighted to spend all their time at the keyboard. Your job as 
a programmer is to make their jobs easier, and so you should strive to streamline 
their everyday work as much as possible. One way to apply this concept is to provide 
them with <I>auto-tabbing </I>fields, which are fields that automatically advance users to the 
next field in the Tab order as soon as they enter a valid value. Most often, 
auto-tabbing fields are those TextBox controls whose 
<I>MaxLength</I> property has been assigned a non-null value. Implementing such an auto-tabbing field in Visual Basic is straightforward:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_Change()
    If Len(Text1.Text) = Text1.MaxLength Then SendKeys &quot;{Tab}&quot;
End Sub
</pre>
</td></tr>
</table>
</P>

<p>The trick, as you see, is to have your program provide the Tab key on 
behalf of your user. In some cases, this simple approach doesn't work&#8212;for example, 
when you paste a long string into the field. You might want to write code that works 
around this and other shortcomings. Auto-tabbing is a nice feature but not vital to the 
application, so whether you write a workaround or not isn't a real problem in most cases.</P>

<A NAME="75"><h2>Formatting Text</h2></A>

<p>Many business applications let you enter data in one format and then display it 
in another. For example, numeric values can be formatted with thousand separators 
and a fixed number of decimal digits. Currency values might have a $ symbol (or 
whatever your national currency symbol is) automatically inserted. Phone numbers 
can be formatted with dashes to split into groups of digits. Credit-card numbers can 
be made more readable with embedded spaces. Dates can be shown in 
<I>long-date</I> format (&quot;September 10, 1999&quot;). And so on.</P>

<P>The <I>LostFocus</I> event is an ideal occasion to format the contents of a 
TextBox control as soon as the input focus leaves it. In most cases, you can perform all 
your formatting chores using the <I>Format</I> function. For example, you can add 
thousand separators to a numeric value in the txtNumber control using this code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtNumber_LostFocus()
    On Error Resume Next
    txtNumber.Text = Format(CDbl(txtNumber.Text), _
        &quot;#,###,###,##0.######&quot;)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>When the field regains the focus, you'll want to get rid of those thousand 
separators. You can do it easily using the 
<I>CDbl</I> function:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtNumber_GotFocus()
    ' On Error is necessary to account for empty fields.
    On Error Resume Next
    txtNumber.Text = CDbl(txtNumber.Text)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>In some cases, however, formatting and unformatting a value isn't that 
simple. For example, you can format a Currency value to add parentheses around 
negative numbers, but there's no built-in Visual Basic function able to return a string 
formatted in that way to its original condition. Fear not, because nothing prevents you 
from creating your own formatting and unformatting routines. I have built two 
general-purpose routines for you to consider.</P>
<P>The <I>FilterString</I> routine filters out all unwanted characters in a string:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function FilterString(Text As String, validChars As String) As String
    Dim i As Long, result As String
    For i = 1 To Len(Text)
        If InStr(validChars, Mid$(Text, i, 1)) Then
            result = result &amp; Mid$(Text, i, 1)
        End If
    Next
    FilterString = result
End Function
</pre>
</td></tr>
</table>
</P>


<p><I>FilterNumber </I>builds on 
<I>FilterString</I> to strip down all formatting characters in 
a number and can also trim trailing decimal zeros:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function FilterNumber(Text As String, TrimZeros As Boolean) As String
    Dim decSep As String, i As Long, result As String
    ' Retrieve the decimal separator symbol.
    decSep = Format$(0.1, &quot;.&quot;)
    ' Use FilterString for most of the work.
    result = FilterString(Text, decSep &amp; &quot;-0123456789&quot;)
    ' Do the following only if there is a decimal part and the
    ' user requested that nonsignificant digits be trimmed.
    If TrimZeros And InStr(Text, decSep) &gt; 0 Then
        For i = Len(result) To 1 Step -1
            Select Case Mid$(result, i, 1)
                Case decSep
                    result = Left$(result, i - 1)
                    Exit For
                Case &quot;0&quot;
                    result = Left$(result, i - 1)
                Case Else
                    Exit For
            End Select
        Next
    End If
    FilterNumber = result
End Function
</pre>
</td></tr>
</table>
</P>


<p>The feature I like most in <I>FilterNumber</I> is that it's 
<I>locale-independent.</I> It works equally well on both sides of the Atlantic ocean (and on other continents, as 
well.) Instead of hard-coding the decimal separator character in the code, the routine 
determines it on the fly, using the Visual Basic for Applications (VBA) 
<I>Format</I> function. Start thinking internationally now, and you won't have a nervous breakdown 
when you have to localize your applications in German, French, and Japanese.</P>

<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>The 
<I>Format</I> function lets you retrieve many locale-dependent 
characters and separators.

<p><table><tr><td><PRE>
Format$(0.1, &quot;.&quot;)                           ' Decimal separator
Format$(1, &quot;,&quot;)                             ' Thousand separator
Mid$(Format(#1/1/99#, &quot;short date&quot;), 2, 1)  ' Date separator
</pre></td></tr></table>
</P>
<p>You can also determine whether the system uses dates in &quot;mm/dd/yy&quot;
(U.S.) format or &quot;dd/mm/yy&quot; (European) format, using this code:</P>
<p><table><tr><td><PRE>
If Left$(Format$(&quot;12/31/1999&quot;, &quot;short date&quot;), 2) = 12 Then
    ' mm/dd/yy format

Else
    ' dd/mm/yyyy format

End If
</pre></td></tr></table>
</P>
<P>There's no direct way to determine the currency symbol, but you can 
derive it by analyzing the result of this function:</P>
<p><table><tr><td><PRE>
Format$(0, &quot;currency&quot;)                      ' Returns &quot;$0.00&quot; in US
</pre></td></tr></table>
</P>
<P>It isn't difficult to write a routine that internally uses the information I've 
just given you to extract the currency symbol as well as its default position 
(before or after the number) and the default number of decimal digits in currency values. Remember, in some countries the currency symbol is actually a string of two or more characters.</P>
</BLOCKQUOTE></DIV></P>

<P>To illustrate these concepts in action, I've built a simple demonstration 
program that shows how you can format numbers, currency values, dates, phone 
numbers, and credit-card numbers when exiting a field, and how you can remove that 
formatting from the result when the input focus reenters the TextBox control. Figure 
3-2 shows the formatted results.</P>

<p>
<A HREF="javascript:fullSize('F03PH02x.htm')"> <img src="F03PH02.JPG" width=404 height=441 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-2.</B> <i>Formatting and unformatting the contents of TextBox controls makes for more professional-looking applications. </i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtNumber_GotFocus()
    ' Filter out nondigit chars and trailing zeros.
    On Error Resume Next
    txtNumber.Text = FilterNumber(txtNumber.Text, True)
End Sub
Private Sub txtNumber_LostFocus()
    ' Format as a number, grouping thousand digits.
    On Error Resume Next
    txtNumber.Text = Format(CDbl(txtNumber.Text), _
        &quot;#,###,###,##0.######&quot;)
End Sub

Private Sub txtCurrency_GotFocus()
    ' Filter out nondigit chars and trailing zeros.
    ' Restore standard text color.
    On Error Resume Next
    txtCurrency.Text = FilterNumber(txtCurrency.Text, True)
    txtCurrency.ForeColor = vbWindowText
End Sub
Private Sub txtCurrency_LostFocus()
    On Error Resume Next
    ' Show negative values as red text.
    If CDbl(txtCurrency.Text) &lt; 0 Then txtCurrency.ForeColor = vbRed
    ' Format currency, but don't use parentheses for negative numbers.
    ' (FormatCurrency is a new VB6 string function.)
    txtCurrency.Text = FormatCurrency(txtCurrency.Text, , , vbFalse)
End Sub

Private Sub txtDate_GotFocus()
    ' Prepare to edit in short-date format.
    On Error Resume Next
    txtDate.Text = Format$(CDate(txtDate.Text), &quot;short date&quot;)
End Sub
Private Sub txtDate_LostFocus()
    ' Convert to long-date format upon exit.
    On Error Resume Next
    txtDate.Text = Format$(CDate(txtDate.Text), &quot;d MMMM yyyy&quot;)
End Sub

Private Sub txtPhone_GotFocus()
    ' Trim embedded dashes.
    txtPhone.Text = FilterString(txtPhone.Text, &quot;0123456789&quot;)
End Sub
Private Sub txtPhone_LostFocus()
    ' Add dashes if necessary.
    txtPhone.Text = FormatPhoneNumber(txtPhone.Text)
End Sub

Private Sub txtCreditCard_GotFocus()
    ' Trim embedded spaces.
    txtCreditCard.Text = FilterNumber(txtCreditCard.Text, True)
End Sub
Private Sub txtCreditCard_LostFocus()
    ' Add spaces if necessary.
    txtCreditCard.Text = FormatCreditCard(txtCreditCard.Text)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Instead of inserting the code that formats phone numbers and credit-card 
numbers right in the <I>LostFocus </I>event procedures, I built two distinct routines, which 
can be more easily reused in other applications, as shown in the code 	below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function FormatPhoneNumber(Text As String) As String
    Dim tmp As String
    If Text &lt;&gt; &quot;&quot; Then
        ' First get rid of all embedded dashes, if any.
        tmp = FilterString(Text, &quot;0123456789&quot;)
        ' Then reinsert them in the correct position.
        If Len(tmp) &lt;= 7 Then
            FormatPhoneNumber = Format$(tmp, &quot;!@@@-@@@@&quot;)
        Else
            FormatPhoneNumber = Format$(tmp, &quot;!@@@-@@@-@@@@&quot;)
        End If
    End If
End Function

Function FormatCreditCard(Text As String) As String
    Dim tmp As String
    If Text &lt;&gt; &quot;&quot; Then
        ' First get rid of all embedded spaces, if any.
        tmp = FilterNumber(Text, False)
        ' Then reinsert them in the correct position.
        FormatCreditCard = Format$(tmp, &quot;!@@@@ @@@@ @@@@ @@@@&quot;)
    End If
End Function
</pre>
</td></tr>
</table>
</P>


<p>Unfortunately, there isn't any way to create locale-independent routines that 
can format any phone number anywhere in the world. But by grouping all your 
formatting routines in one module, you can considerably speed up your work if and 
when it's time to convert your code for another locale. <a href="#A30">Chapter 5</a> covers the 
<I>Format</I> function in greater detail.</p>

<A NAME="76"><h2>Multiline TextBox Controls</h2></A>

<p>You create multiline TextBox controls by setting the 
<I>MultiLine</I> property to True and the 
<I>ScrollBars</I> property to 2-Vertical or 3-Both. A vertical scroll bar causes the 
contents of the control to automatically wrap when a line is too long for the 
control's width, so this setting is most useful when you're creating memo fields or simple 
word processor-like programs. If you have both a vertical and a horizontal scroll bar, 
the TextBox control behaves more like a programmer's editor, and longer lines 
simply extend beyond the right border. I've never found a decent use for the other 
settings of the <I>ScrollBars</I> property (0-None and 1-Horizontal) in a multiline TextBox 
control. Visual Basic ignores the 
<I>ScrollBars</I> property if <I>MultiLine</I> is False.</p>
<p>Both these properties are read-only at run time, which means that you 
can't alternate between a regular and a multiline text box, or between a word 
processor-like multiline field (<I>ScrollBars</I> = 2-Vertical) and an editorlike field 
(<I>ScrollBars</I> = 3-Both). To tell the whole truth, Visual Basic's support for multiline TextBox controls 
leaves much to be desired. You can do very little with such controls at run time, except 
to retrieve and set their <I>Text</I> properties. When you read the contents of a 
multiline TextBox control, it's up to you to determine where each line of text starts and 
ends. You do this with a loop that searches for carriage return (CR) and line feed (LF) 
pairs, or even more easily using the new <I>Split 
</I>string function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the lines of text in Text1, labeling them with their line numbers.
Dim lines() As String, i As Integer
lines() = Split(Text1.Text, vbCrLf)
For i = 0 To UBound(lines)
    Print (i + 1) &amp; &quot;: &quot; &amp; lines(i)
Next
</pre>
</td></tr>
</table>
</P>


<p>The support offered by Visual Basic for multiline TextBox controls ends 
here. The language doesn't offer any means for learning such vital information as at 
which point each line of text wraps, which are the first visible line and the first 
visible column, which line and column the caret is on, and so on. Moreover, you have 
no means of programmatically scrolling through a multiline text box. 
The solutions to these problems require Microsoft Windows API programming, which I'll explain 
in the <a href="#A129">Appendix</a>. In my opinion, however, Visual Basic should offer these features 
as built-in properties and methods.</p>

<p>You should account for two minor issues when including one or more 
multiline TextBox controls on your forms. When you enter code in a word processor or 
an editor, you expect that the Enter key will add a newline character (more precisely, 
a CR-LF character pair) and that the Tab key will insert a tab character and move 
the caret accordingly. Visual Basic supports these keys, but because both of them 
have special meaning to Windows the support is limited: The Enter key adds a CR-LF 
pair only if there isn't a default push button on the form, and the Tab key inserts a 
tab character only if there aren't other controls on the form whose 
<I>TabStop </I>property is set to True. In many circumstances, these requirements can't be met, and some 
of your users will find your user interface annoying. If you can't avoid this problem, 
at least add a reminder to your users that they can add new lines using the 
Ctrl+Enter key combination and insert tab characters using the Ctrl+Tab key combination. 
Another possible approach is to set the 
<I>TabStop</I> property to False for all the controls 
in the form in the multiline TextBox's <I>GotFocus 
</I>event and to restore the original values in the 
<I>LostFocus</I> event procedure.</p>


<a name="A16"></a><h3>5.3.2 Label and Frame Controls</h3>

<A HREF="#A15">[Previous]</A> <A HREF="#A17">[Next]</A><P>

<A NAME="77"><h1>Label and Frame Controls</h1></A>

<p>Label and Frame controls have a few features in common, so it makes sense to 
explain them together. First they're mostly &quot;decorative&quot; controls that contribute to 
the user interface but are seldom used as programmable objects. In other words, you 
often place them on the form and arrange their properties as your user interface 
needs dictate, but you rarely write code to serve their events, generally, or manipulate 
their properties at run time.</p>

<A NAME="78"><h2>Label Controls</h2></A>

<p>Most people use Label controls to provide a descriptive caption and possibly 
an associated hot key for other controls, such as TextBox, ListBox, and ComboBox, 
that don't expose the <I>Caption</I> property. In most cases, you just place a Label control 
where you need it, set its <I>Caption</I> property to a suitable string (embedding an 
ampersand character in front of the hot key you want to assign), and you're done. 
<I>Caption</I> is the default property for Label controls. Be careful to set the Label's 
<I>TabIndex</I> property so that it's 1 minus the 
<I>TabIndex</I> property of the companion control. </p>
<p>Other useful properties are <I>BorderStyle</I>(if you want the Label control to appear inside a 3D border) and 
<I>Alignment </I>(if you want to align the caption to the right 
or center it on the control). In most cases, the alignment depends on how the 
Label control relates to its companion control: for example, if the Label control is 
placed to the left of its companion field, you might want to set its 
<I>Alignment</I> property to 1-Right Justify. The value 2-Center is especially useful for stand-alone Label 
controls. (See Figure 3-3.)</p>

<p>
<img src="F03ph03.GIF" width=364 height=224 border="0">
<p>
<!--caption--><B>Figure 3-3.</B> <i>Different settings for the Alignment property of Label controls.</i><!--/caption-->



<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>You can insert a literal &amp; character in a Label control's 
<I>Caption</I> property by doubling it. For example, to see Research &amp; Development you have to 
type <I>&amp;Research &amp;&amp; Development</I>. Note that if you have multiple but isolated &amp;s, 
the one that selects the hot key is the last one and all others are ignored. This 
tip applies to all the controls that expose a 
<I>Caption</I> property. (The &amp; has no special meaning in forms' Caption properties, however.)
</blockquote></div></P>

<p>If the caption string is a long one, you might want to set the Label's 
<I>WordWrap</I> property to True so that it will extend for multiple lines instead of being 
truncated by the right border of the control. Alternatively, you might decide to set the 
<I>AutoSize</I> property to True and let the control automatically resize itself to accommodate 
longer caption strings.</P>

<p>You sometimes need to modify the default value of a Label's 
<I>BackStyle</I> property. Label controls usually cover what's already on the form's surface (other 
lightweight controls, output from graphic methods, and so on) because their 
background is considered to be opaque. If you want to show a character string somewhere 
on the form but at the same time you don't want to obscure underlying objects, set 
the <I>BackStyle</I> property to 0-Transparent.</P>

<p>If you're using the Label control to display data read from elsewhere&#8212;for 
example, a database field or a text file&#8212;you should set its 
<I>UseMnemonics</I> property to False. In this case, &amp; characters have no special meaning to the control, and so you 
indirectly turn off the control's hot key capability. I mention this property because in 
older versions of Visual Basic, you had to manually double each &amp; character to make 
the ampersand appear in text. I don't think all developers are aware that you can 
now treat ampersands like regular characters.</P>

<p>As I said before, you don't usually write code in Label control event 
procedures. This control exposes only a subset of the events supported by other controls. 
For example, because Label controls can never get the input focus, they don't 
support <I>GotFocus</I>, <I>LostFocus</I>, or any keyboard-related events. In practice, you can take 
advantage only of their mouse events: <I>Click</I>, 
<I>DblClick</I>, <I>MouseDown</I>, 
<I>MouseMove</I>, and <I>MouseUp</I>. If you're using a Label control to display data read from a database, 
you might sometimes find it useful to write code in its 
<I>Change</I> event. A Label control doesn't expose a specific event that tells programmers when users press its hot keys.</P>

<p>You can do some interesting tricks with Label controls. For example, you 
can use them to provide rectangular hot spots for images loaded onto the form. To see 
what I mean, have a look at Figure 3-4. To create that 
context-sensitive ToolTip, I loaded the image on the form using the form's 
<I>Picture</I> property and then I placed a Label control over the Microsoft BackOffice logo, setting 
its <I>Caption</I> property to an empty string and the 
<I>BackStyle</I> property to 0-Transparent. These properties make the Label invisible, but it correctly shows its ToolTip 
when necessary. And because it still receives all mouse events, you can use its 
<I>Click</I> event to react to users' actions.</P>

<p>
<A HREF="javascript:fullSize('F03ph04x.htm')"> <img src="F03ph04.JPG" width=404 height=278 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-4.</B> <i>Create hot spots the easy way with invisible Label controls.</i><!--/caption-->
</p>

<A NAME="79"><h2>Frame Controls</h2></A>

<p>Frame controls are similar to Label controls in that they can serve as captions for 
those controls that don't have their own. Moreover, Frame controls can also (and often 
do) behave as containers and host other controls. In most cases, you only need to 
drop a Frame control on a form and set its 
<I>Caption</I> property. If you want to create a borderless frame, you can set its 
<I>BorderStyle</I> property to 0-None.</P>

<p>Controls that are contained in the Frame control are said to be 
<I>child controls</I>. Moving a control at design time 
<I>over </I>a Frame control&#8212;or over any other 
container, for that matter&#8212;doesn't automatically make that control a child of the Frame 
control. After you create a Frame control, you can create a child control by selecting 
the child control's icon in the Toolbox and drawing a new instance 
<I>inside </I>the Frame's border. Alternatively, to make an existing control a child of a Frame control, you 
must select the control, press Ctrl+X to cut it to the Clipboard, select the Frame 
control, and press Ctrl+V to paste the control inside the Frame. If you don't follow this 
procedure and you simply move the control over the Frame, the two controls 
remain completely independent of each other, even if the other control appears in front 
of the Frame control.</P>

<p>Frame controls, like all container controls, have two interesting features. If 
you move a Frame control, all the child controls go with it. If you make a container 
control disabled or invisible, all its child controls also become disabled or invisible. 
You can exploit these features to quickly change the state of a group of related controls.</P>


<a name="A17"></a><h3>5.3.3 CommandButton, CheckBox, and OptionButton Controls</h3>

<A HREF="#A16">[Previous]</A> <A HREF="#A18">[Next]</A><P>

<A NAME="80"><H1>CommandButton, CheckBox, and OptionButton Controls</H1></A>
<p>When compared to TextBox controls, these controls are really simple. Not only 
do they expose relatively few properties, they also support a limited number of 
events, and you don't usually write much code to manage them.</P>

<A NAME="81"><h2>CommandButton Controls</h2></A>

<p>Using CommandButton controls is trivial. In most cases, you just draw the 
control on the form's surface, set its 
<I>Caption</I> property to a suitable string (adding an 
&amp; character to associate a hot key with the control if you so choose), and you're 
finished, at least with user-interface issues. To make the button functional, you write code 
in its <I>Click</I> event procedure, as in this fragment:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Command1_Click()
    ' Save data, then unload the current form.
    Call SaveDataToDisk
    Unload Me
End Sub
</pre>
</td></tr>
</table>
</P>


<p>You can use two other properties at design time to modify the behavior of 
a CommandButton control. You can set the 
<I>Default</I> property to True if it's the 
default push button for the form (the button that receives a click when the user presses 
the Enter key&#8212;usually the OK or Save button). Similarly, you can set the 
<I>Cancel</I> property to True if you want to associate the button with the Escape key.</P>

<p>The only relevant CommandButton's run-time property is 
<I>Value</I>, which sets or returns the state of the control (True if pressed, False otherwise). 
<I>Value</I> is also the default property for this type of control. In most cases, you don't need to query 
this property because if you're inside a button's 
<I>Click</I> event you can be sure that the button is being activated. The 
<I>Value</I> property is useful only for 
programmatically clicking a button:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This fires the button's Click event.
Command1.Value = True
</pre>
</td></tr>
</table>
</P>


<p>The CommandButton control supports the usual set of keyboard and 
mouse events (<I>KeyDown</I>, <I>KeyPress</I>, 
<I>KeyUp</I>, <I>MouseDown</I>, <I>MouseMove</I>, 
<I>MouseUp</I>, but not the <I>DblClick</I> event) and also the 
<I>GotFocu</I>s and <I>LostFocus</I> events, but you'll rarely 
have to write code in the corresponding event procedures.</P>

<A NAME="82"><h2>CheckBox Controls</h2></A>

<p>CheckBox controls are useful when you want to offer your users a yes or no, true 
or false choice. Anytime you click on this control, it toggles between the yes state 
and the no state. This control can also be 
<I>grayed</I> when the state of the CheckBox is unavailable, but you must manage that state through code.</P>
<P>When you place a CheckBox control on a form, all you have to do, usually, 
is set its <I>Caption</I> property to a descriptive string. You might sometimes want to 
move the little check box to the right of its caption, which you do by setting the 
<I>Alignment</I> property to 1-Right Justify, but in most cases the default setting is OK. If you want 
to display the control in a checked state, you set its 
<I>Value</I> property to 1-Checked right in the Properties window, and you set a grayed state with 2-Grayed.</P>
<P>The only important event for CheckBox controls is the 
<I>Click</I> event, which fires when either the user or the code changes the state of the control. In many cases, 
you don't need to write code to handle this event. Instead, you just query the 
control's <I>Value</I> property when your code needs to process user choices. You usually write 
code in a CheckBox control's <I>Click</I> event when it affects the state of other controls. 
For example, if the user clears a check box, you might need to disable one or 
more controls on the form and reenable them when the user clicks on the check box 
again. This is how you usually do it (here I grouped all the relevant controls in one 
frame named Frame1):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Check1_Click()
    Frame1.Enabled = (Check1.Value = vbChecked)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Note that <I>Value</I> is the default property for CheckBox controls, so you can 
omit it in code. I suggest that you not do that, however, because it would reduce 
the readability of your code.</P>

<A NAME="83"><h2>OptionButton Controls</h2></A>

<p>OptionButton controls are also known as <I>radio 
buttons</I> because of their shape. You always use OptionButton controls in a group of two or more because their 
purpose is to offer a number of mutually exclusive choices. Anytime you click on a button in the group, it switches to a selected state and all the other controls in the group become unselected.</P>

<p>Preliminary operations for an OptionButton control are similar to those 
already described for CheckBox controls. You set an OptionButton control's 
<I>Caption</I> property to a meaningful string, and if you want you can change its 
<I>Alignment </I>property to make the control right aligned. If the control is the one in its group that's in the 
selected state, you also set its <I>Value</I>property to True. (The OptionButton's 
<I>Value</I> property is a Boolean value because only two states are possible.) 
<I>Value</I> is the default property for this control.</P>

<p>At run time, you typically query the control's 
<I>Value</I> property to learn which button in its group has been selected. Let's say you have three OptionButton 
controls, named <I>optWeekly</I>, 
<I>optMonthly</I>, and <I>optYearly</I>. You can test which one has 
been selected by the user as follows:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If optWeekly.Value Then
    ' User prefers weekly frequency.
ElseIf optMonthly.Value Then
    ' User prefers monthly frequency.
ElseIf optYearly.Value Then
    ' User prefers yearly frequency.
End If
</pre>
</td></tr>
</table>
</P>


<p>Strictly speaking, you can avoid the test for the last OptionButton control in 
its group because all choices are supposed to be mutually exclusive. But the 
approach I just showed you increases the code's readability.</P>

<p>A group of OptionButton controls is often hosted in a Frame control. This 
is necessary when there are other groups of OptionButton controls on the form. As 
far as Visual Basic is concerned, <I>all </I>the OptionButton controls on a form's surface 
belong to the same group of mutually exclusive selections, even if the controls are 
placed at the opposite corners of the window. The only way to tell Visual Basic which 
controls belong to which group is by gathering them inside a Frame control. 
Actually, you can group your controls within any control that can work as a 
container&#8212;PictureBox, for example&#8212;but Frame controls are often the most reasonable choice.</P>

<A NAME="84"><h2>Going Graphical</h2></A>

<p>CheckBox, OptionButton, and CommandButton controls have been with Visual 
Basic since version 1, and their basic set of properties have remained unchanged for 
years. Visual Basic 5, however, introduced a new, interesting graphic mode, which 
transforms these old-fashioned controls into more modern user-interface gadgets that are 
more likely to catch your users' attention, as you can see in Figure 3-5. Since the properties involved are exactly the same for all three controls, I'll 
describe them together.</P>

<p>
<A HREF="javascript:fullSize('F03ph05x.htm')"> <img src="F03ph05.JPG" width=404 height=216 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-5.</B> <i>CheckBox, OptionButton, and CommandButton controls come with a graphic flavor.</i><!--/caption-->
</p>

<P>If you want to create a graphical control, you begin by setting its 
<I>Style</I> property to 1-Graphical; the appearance of the control changes, and a border is 
drawn around it. (This is more evident with CheckBox and OptionButton controls.) 
Then you choose a suitable image by clicking on the 
<I>Picture</I> property and navigating through your collection of icons and bitmaps. (You have a collection of icons 
and bitmaps, don't you?) In most cases, this is all you need to do to create 
graphical buttons. If you care about the details, you can select a second icon for the down 
state and assign it to the <I>DownPicture</I><B> 
</B>property.You can also select a different icon for 
the disabled state and assign it to the 
<I>DisabledPicture</I> property. You can set these 
properties at run time, even though this is strictly necessary only when you create the 
user interface dynamically (for instance, a user-defined toolbar with his or her 
favorite commands):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Command1.Picture = LoadPicture(&quot;c:\vb6\myicon.ico&quot;)
</pre>
</td></tr>
</table>
</P>


<p>You might need to consider two additional properties when you're 
assigning images. The <I>MaskColor</I> property defines which color in the bitmap is to be considered the transparent color. Any pixels in the loaded picture that match this color won't be transferred; in their place, the regular button background color will be used. (The default value for this property is &amp;HC0C0C0, light gray. The <I>MaskColor </I>property is active only if you also set the <I>UseMaskColor</I> to True, however&#8212;otherwise, it's ignored. These properties are useful only for bitmaps because icons (ICO files) and metafiles (WMF and EMF files) already include information about transparency. Note that you should always assign an RGB color to the <I>MaskColor</I> property (as opposed to a system color) because system colors depend on the end user's settings, and your button might not appear on other systems as it appears on yours.</P>

<p>Apart from the graphical look, CheckBox, OptionButton, and 
CommandButton controls using the Style=1-Graphical setting behave exactly like their textual 
counterparts. If you have a series of graphical radio buttons, only one of them stays 
down when pressed. When you press a graphical CheckBox control once, it goes into 
the down state, which is really the checked state. You press the button again to make 
it go in the up, or the clear, state. It's that simple.</P>


<a name="A18"></a><h3>5.3.4 ListBox and ComboBox Controls</h3>

<A HREF="#A17">[Previous]</A> <A HREF="#A19">[Next]</A><P>

<A NAME="85"><h1>ListBox and ComboBox Controls</h1></A>

<p>ListBox and ComboBox controls share many properties, methods, and events. 
ListBox controls are somewhat more powerful, so let's start with them. Explaining 
ComboBox controls afterward will be a walk in the park.</P>

<A NAME="86"><h2>ListBox Controls</h2></A>

<p>Once you have dropped a ListBox control on a form's surface, you might need 
to assign a few properties. For example, you set the 
<I>Sorted</I> attribute to True to create ListBox controls that automatically sort their items in alphabetical order. By acting 
on the <I>Columns</I> property, you create a different type of list box, with several 
columns and a horizontal scroll bar, as you can see in Figure 3-6, instead of the default 
list box with a single column and a vertical scroll bar along its right border. You can 
make assignments for both these properties only at design time, and you can't change 
the style of the ListBox control while the program is running.</P>

<p>
<A HREF="javascript:fullSize('F03ph06x.htm')"> <img src="F03ph06.JPG" width=404 height=292 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-6.</B> <i>Effects of different settings for the Column property.</i><!--/caption-->
</p>

<p>The <I>IntegralHeight</I> property is seldom modified, but it deserves some 
explanation because it indirectly gets in the way during regular programming. By 
default, Visual Basic automatically adjusts the height of ListBox controls so that they 
display entire rows; no item is shown only partially. The exact height assigned to the 
control depends on several factors, including current font attributes. This behavior 
is usually OK, and you normally don't have to worry about this issue. But if you 
want to resize the control to align it with other controls on the form or with the 
form's border, this feature might prevent you from doing such an adjustment. In this 
case, you should set the <I>IntegralHeight</I> property to False in the Properties window: 
Visual Basic won't enforce a particular height and you're free to resize the control as 
you prefer. Unfortunately, you can't modify this property at run time.</p>
<p>If you know at design time which items must appear in the ListBox control, 
you can save some code and enter the items right in the Properties window, in the 
List property mini-editor, as you can see in Figure 3-7. 
But if you're going to enter more than four or five items, you'd probably better add them 
via code at run time.</P>

<p>
<img src="F03ph07.GIF" width=263 height=428 border="0">
<p>
<!--caption--><B>Figure 3-7.</B> <i>Entering items at design time.(Press Ctrl+Enter to move to the next line.)</i><!--/caption-->

 

<p>Both ListBox and ComboBox controls expose the 
<I>AddItem</I> method, which lets you add items when the program is executing. You usually use this method in 
the <I>Form_Load</I> event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    List1.AddItem &quot;First&quot;
    List1.AddItem &quot;Second&quot;
    List1.AddItem &quot;Third&quot;
End Sub
</pre>
</td></tr>
</table>
</P>


<p>In real-world applications, you rarely load individual items in this way. 
Most often your data is already stored in an array or in a database, and you have to 
scan the source of your data with a 
<I>For&#8230;Next</I> loop, as in the following code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' MyData is an array of strings.
For i = LBound(MyData) To UBound(MyData)
    List1.AddItem MyData(i)
Next
</pre>
</td></tr>
</table>
</P>


<p><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
If you want to load many items in a list box but don't want to create an 
array, you can resort to Visual Basic's 
<I>Choose</I> function, as follows:
<p><table><tr><td><PRE>
For i = 1 To 5
    List1.AddItem Choose(i, &quot;America&quot;, &quot;Europe&quot;, &quot;Asia&quot;, _

        &quot;Africa&quot;, &quot;Australia&quot;)&quot;

Next
</pre></td></tr></table>
</P>
<P>Some special cases don't even require you to list individual items:</P>
<p><table><tr><td><PRE>
' The names of the months (locale-aware)
For i = 1 To 12

    List1.AddItem MonthName(i)
Next

' The names of the days of the week (locale-aware)
For i = 1 To 7
    List1.AddItem WeekDayName(i)
Next
</pre></td></tr></table>
</P>
<p><I>MonthName</I> and <I>WeekDayName</I> are new Visual Basic string functions, described in <a href="#A30">Chapter 5</a>.</p>
</BLOCKQUOTE></DIV></P>

<P>If you want to load dozens or hundreds of items, a better approach is to 
store them in a text file and have your program read the file when the form loads. 
This way you can later change the contents of your ListBox controls without 
recompiling the source code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Dim item As String 
    On Error Goto Error_Handler
    Open &quot;listbox.dat&quot; For Input As #1
    Do Until EOF(1)
        Line Input #1, item
        List1.AddItem item
    Loop
    Close #1
    Exit Sub
Error_Handler:
    MsgBox &quot;Unable to load Listbox data&quot;
End Sub       
</pre>
</td></tr>
</table>
</P>


<p>Sometimes you need to add an item in a given position, which you do by 
passing a second argument to the <I>AddItem</I> method. (Note that indexes are zero-based.)</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add at the very beginning of the list.
List1.AddItem &quot;Zero&quot;, 0
</pre>
</td></tr>
</table>
</P>


<p>This argument has precedence over the 
<I>Sorted</I> attribute, so you can actually insert some items out of order even in sorted ListBox controls. Removing items is 
easy with the <I>RemoveItem</I> or 
<I>Clear</I> methods:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Remove the first item in the list.
List1.RemoveItem 0
' Quickly remove all items (no need for a For...Next loop).
List1.Clear
</pre>
</td></tr>
</table>
</P>


<p>The most obvious operation to be performed at run time on a filled 
ListBox control is to determine which item has been selected by the user. The 
<I>ListIndex</I> property returns the index of the selected item (zero-based), while the 
<I>Text</I> property returns the actual string stored in the ListBox. The 
<I>ListIndex </I>property returns -1 if the user hasn't selected any element yet, so you should test for this condition first:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If List1.ListIndex = -1 Then
    MsgBox &quot;No items selected&quot;
Else
    MsgBox &quot;User selected &quot; &amp; List1.Text &amp; &quot; (#&quot; &amp; List1.ListIndex &amp; &quot;)&quot;
End If
</pre>
</td></tr>
</table>
</P>


<p>You can also assign a value to the 
<I>ListIndex</I> property to programmatically 
select an item, or set it to -1 to deselect all items:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select the third item in the list.
List1.ListIndex = 2
</pre>
</td></tr>
</table>
</P>


<p>The <I>ListCount</I> property returns the number of items in the control. You can 
use it with the <I>List</I> property to enumerate them:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For i = 0 To List1.ListCount -1
    Print &quot;Item #&quot; &amp; i &amp; &quot; = &quot; &amp; List1.List(i)
Next
</pre>
</td></tr>
</table>
</P>


<A NAME="87"><h3>Reacting to user actions</h3></A>

<p>If your form doesn't immediately react to a user's selections on the ListBox 
control, you don't have to write any code to handle its events. But this is true only for 
trivial Visual Basic applications. In most cases, you'll have to respond to the 
<I>Click</I> event, which occurs whenever a new element has been selected (with the mouse, with 
the keyboard, or programmatically):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub List1_Click()
    Debug.Print &quot;User selected item #&quot; &amp; List1.ListIndex
Next
</pre>
</td></tr>
</table>
</P>


<p>The logic behind your user interface might require that you monitor the 
<I>DblClick</I> event as well. As a general rule, double-clicking on a ListBox control's item 
should have the same effect as selecting the item and then clicking on a push button 
(often the default push button on the form). Take, for example, the mutually 
exclusive ListBox controls shown in Figure 3-8, a type of user interface that you see in 
many Windows applications. Implementing this structure in Visual Basic is straightforward:</P>

<p>
<A HREF="javascript:fullSize('F03ph08x.htm')"> <img src="F03ph08.JPG" width=404 height=195 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-8.</B> <i>A pair of mutually exclusive ListBox controls. You can move items around using the buttons in the middle or by double-clicking them.</i><!--/caption-->
</p>

 

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdMove_Click()
    ' Move one item from left to right.
    If lstLeft.ListIndex &gt;= 0 Then
        lstRight.AddItem lstLeft.Text
        lstLeft.RemoveItem lstLeft.ListIndex
    End If
End Sub

Private Sub cmdMoveAll_Click()
    ' Move all items from left to right.
    Do While lstLeft.ListCount
        lstRight.AddItem lstLeft.List(0)
        lstLeft.RemoveItem 0
    Loop
End Sub

Private Sub cmdBack_Click()
    ' Move one item from right to left.
    If lstRight.ListIndex &gt;= 0 Then
        lstLeft.AddItem lstRight.Text
        lstRight.RemoveItem lstRight.ListIndex
    End If
End Sub

Private Sub cmdBackAll_Click()
    ' Move all items from right to left.
    Do While lstRight.ListCount
        lstLeft.AddItem lstRight.List(0)
        lstRight.RemoveItem 0
    Loop
End Sub

Private Sub lstLeft_DblClick()
    ' Simulate a click on the Move button.
    cmdMove.Value = True
End Sub

Private Sub lstRight_DblClick()
    ' Simulate a click on the Back button.
    cmdBack.Value = True
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The <I>Scroll</I> event comes in handy when you need to synchronize a ListBox 
control with another control, often another list box; in such cases, you usually want 
to scroll the two controls together, so you need to know when either one is 
scrolled. The <I>Scroll</I> event is often used in conjunction with the 
<I>TopIndex</I> property, which sets or returns the index of the first visible item in the list area. Using the 
<I>Scroll</I> event together with the 
<I>TopIndex</I> property, you can achieve really interesting visual 
effects, such as the one displayed in Figure 3-9. The trick is that the leftmost ListBox 
control is partially covered by the other control. Its companion scroll bar is never seen 
by users, who are led to believe that they're acting on a single control. For the best 
effect, you need to write code that keeps the two controls always in sync, and you 
achieve that by trapping <I>Click</I>, 
<I>MouseDown</I>, <I>MouseMove</I>, and 
<I>Scroll</I> events. The following code synchronizes two lists, 
<I>lstN</I> and <I>lstSquare</I>:</P>

<p>
<img src="F03ph09.GIF" width=199 height=337 border="0">
<p>
<!--caption--><B>Figure 3-9.</B> <i>You don't need a grid control to simulate a simple table; two partially overlapping ListBox controls will suffice.</i><!--/caption-->


<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub lstN_Click()
    ' Synchronize list boxes.
    lstSquare.TopIndex = lstN.TopIndex
    lstSquare.ListIndex = lstN.ListIndex
End Sub
Private Sub lstSquare_Click()
    ' Synchronize list boxes.
    lstN.TopIndex = lstSquare.TopIndex
    lstN.ListIndex = lstSquare.ListIndex
End Sub

Private Sub lstN_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    Call lstN_Click
End Sub
Private Sub lstSquare_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    Call lstSquare_Click
End Sub

Private Sub lstN_MouseMove(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    Call lstN_Click
End Sub
Private Sub lstSquare_MouseMove(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    Call lstSquare_Click
End Sub

Private Sub lstN_Scroll()
    lstSquare.TopIndex = lstN.TopIndex
End Sub
Private Sub lstSquare_Scroll()
    lstN.TopIndex = lstSquare.TopIndex
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="88"><h3>The <I>ItemData </I>property</h3></A>

<p>The information you place in a ListBox control is rarely independent from the 
rest of the application. For example, the customer's name that you see on screen is 
often related to a corresponding CustomerID number, a product name is associated 
with its description, and so on. The problem is that once you load a value into the 
ListBox control you somehow disrupt such relationships; the code in event procedures 
sees only <I>ListIndex</I> and <I>List</I> properties. How can you retrieve the CustomerID value 
that was originally associated with the name that the user has just clicked on? The 
answer to this question is provided by the 
<I>ItemData</I> property, which lets you associate a 
32bit integer value with each item loaded in the ListBox control, as in the code below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add an item to the end of the list.
lstCust.AddItem CustomerName
' Remember the matching CustomerID.
lstCust.ItemData(lstCust.ListCount  -1) = CustomerId
</pre>
</td></tr>
</table>
</P>


<p>Note that you must pass an index to the <I>ItemData 
</I>property: Because the 
item you have just added is now the last one in the ListBox control, its index 
is 
<I>ListCount-1</I>. Unfortunately, this simple approach doesn't work with sorted 
ListBox controls, which can place new items anywhere in the list. In this case, you use 
the <I>NewIndex</I> property to find out where an item has been inserted:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add an item to the end of the list.
lstCust.AddItem CustomerName
' Remember the matching ID. (This also works with Sorted list boxes.)
lstCust.ItemData(lstCust.NewIndex) = CustomerId
</pre>
</td></tr>
</table>
</P>


<p>In real-world applications, associating a 32-bit integer value with an item in 
a ListBox control is often inadequate, and you usually need to store more 
complex information. In this case, you use the 
<I>ItemData</I> value as an index into another 
structure, for example, an array of strings or an array of records. Let's say you have a 
list of product names and descriptions:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Type ProductUDT
    Name As String
    Description As String
    Price As Currency
End Type
Dim Products() As ProductUDT, i As Long

Private Sub Form_Load()
    ' Load product list from database into Products.
    ' ... (code omitted)
    ' Load product names into a sorted ListBox.
    For i = LBound(Products) To UBound(Products)
        lstProducts.AddItem Products(i).Name
        ' Remember where this product comes from.
        lstProducts.ItemData(lstProducts.NewIndex) = i
    Next
End Sub

Private Sub lstProducts_Click()
    ' Show the description and price of the item
    ' currently selected, using two companion labels.
    i = lstProducts.ItemData(lstProducts.ListIndex)
    lblDescription.Caption = Products(i).Description
    lblPrice.Caption = Products(i).Price
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="89"><h3>Multiple-selection ListBox controls</h3></A>

<p>The ListBox control is even more flexible than I've shown so far because it lets 
users select multiple items at the same time. To enable this feature, you assign 
the <I>MultiSelect</I> property the values 1-Simple or 2-Extended. In the former case, you 
can select and deselect individual items only by using the Spacebar or the mouse. 
In extended selection, you can also use the Shift key to select ranges of items. 
Most popular Windows programs use extended selection exclusively, so you shouldn't 
use the value 1-Simple unless you have a good reason to do so. The 
<I>MultiSelect</I> property can't be changed when the program is running, so this is a design-time decision.</P>
<P>Working with a multiple selection ListBox control isn't different from 
interacting with a regular ListBox in the sense that you still use the 
<I>ListIndex</I>,<I> ListCount</I>, <I>List</I>, and 
<I>ItemData</I> properties. In this case, the most important piece of information is 
held in the <I>SelCount</I> and <I>Selected</I> properties. The 
<I>SelCount</I> property simply returns the number of items that are currently selected. You usually test it within a 
<I>Click</I> event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub lstProducts_Click()
    ' The OK button should be enabled only if the
    ' user has selected at least one product.
    cmdOK.Enabled = (lstProducts.SelCount &gt; 0)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>You retrieve the items that are currently selected using the 
<I>Selected</I> property. For example, this routine prints all selected items:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print a list of selected products.
Dim i As Long
For i = 0 To lstProducts.ListCount -1
    If lstProducts.Selected(i) Then Print lstProducts.List(i)
Next
</pre>
</td></tr>
</table>
</P>


<p>The <I>Select</I> property can be written to, which is sometimes necessary to 
clear the current selection:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For i = 0 To lstProducts.ListCount -1
    lstProducts.Selected(i) = False
Next
</pre>
</td></tr>
</table>
</P>


<p>Visual Basic 5 introduced a new variant of multiple selection ListBox 
controls, which let users select items by flagging a check box, as you see in Figure 3-10. To enable this capability, you set the ListBox control's 
<I>Style </I>property to 1-Checkbox at design time. (You can't change it at run time.) ListBox 
controls with check boxes are always multiselect, and the actual value of the 
<I>MultiSelect </I>property is ignored. These ListBox controls let the user select and deselect one 
item at a time, so it's often convenient to provide the user with two buttons&#8212;Select 
All and Clear All (and sometimes Invert Selection too).</P>

<p>
<A HREF="javascript:fullSize('F03ph10x.htm')"> <img src="F03ph10.JPG" width=404 height=281 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-10.</B> <i>Two variants for multiple selection ListBox controls.</i><!--/caption-->
</p>

<p>Apart from their appearance, there's nothing special about ListBox controls 
set as Style = 1-Checkbox, in that you can set and query the selected state of items 
through the <I>Selected</I> property. However, selecting and deselecting multiple items through 
code doesn't happen as quickly as you might believe. For example, this is the code 
for handling the <I>Click</I> event of the Select All button:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdSelectAll_Click()
    Dim i As Long, saveIndex As Long, saveTop As Long
    ' Save current state.
    saveIndex = List2.ListIndex
    saveTop = List2.TopIndex
    ' Make the list box invisible to avoid flickering.
    List2.Visible = False
    ' Change the select state for all items.
    For i = 0 To List2.ListCount - 1
        List2.Selected(i) = True
    Next
    ' Restore original state, and make the list box visible again.
    List2.TopIndex = saveTop
    List2.ListIndex = saveIndex
    List2.Visible = True
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The code for the Clear All and Invert All buttons is similar, except for the 
statement inside the <I>For&#8230;Next</I> loop. This approach is necessary because writing to 
the <I>Selected</I> property also affects the 
<I>ListIndex</I> property and causes a lot of 
flickering. Saving the current state in two temporary variables solves the former problem, 
while making the control temporarily invisible solves the latter.</P>

<p>Interestingly, making the control invisible doesn't actually hide it, not 
immediately at least. If you operate on a control and want to avoid flickering or other 
disturbing visual effects, make it invisible, do your stuff, and then make it visible 
again before the procedure ends. If the procedure doesn't include any 
<I>DoEvents</I> or <I>Refresh</I> statement, the screen isn't updated and the user will never notice that the control 
has been made temporarily invisible. To see how the code would work without 
resorting to this technique, add a <I>DoEvents</I> or a 
<I>Refresh</I> statement to the preceding code, immediately before the 
<I>For&#8230;Next</I> loop.</P>

<p>ListBox controls with Style = 1-Checkbox offer an additional event, 
<I>ItemCheck</I>, that fires when the user selects or deselects the check box. You can use this 
event to refuse to select or deselect a given item:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub List2_ItemCheck(Item As Integer)
    ' Refuse to deselect the first item.
    If Item = 0 And List2.Selected(0) = False Then
        List2.Selected(0) = True
        MsgBox &quot;You can't deselect the first item&quot;, vbExclamation
    End If
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="90"><h2>ComboBox Controls</h2></A>

<p>ComboBox controls are very similar to ListBox controls, so much of what I 
have explained so far applies to them as well. More precisely, you can create 
ComboBox controls that automatically sort their items using the 
<I>Sorted</I> property, you can add items at design time using the 
<I>List</I> item in the Properties window, and you can set a 
ComboBox control's <I>IntegralHeight</I> property as your user interface dictates. Most 
run-time methods are common to both kinds of controls too, including 
<I>AddItem</I>, <I>RemoveItem</I>, and 
<I>Clear</I>, as are the <I>ListCount</I>,<I> 
ListIndex</I>, <I>List</I>, <I>ItemData</I>,<I> 
TopIndex</I>, and <I>NewIndex</I> properties and the 
<I>Click</I>, <I>DblClick</I>, and <I>Scroll</I> events. ComboBox controls don't 
support multiple columns and multiple selections, so you don't have to deal with 
the <I>Column</I>,<I> MultiSelect</I>,<I> 
Select</I>, and <I>SelCount</I> properties and the 
<I>ItemCheck</I> event.</P>
<P>The ComboBox control is a sort of mixture between a ListBox and a 
TextBox control in that it also includes several properties and events that are more typical 
of the latter, such as the <I>SelStart</I>,<I> 
SelLength</I>,<I> SelText</I>, and<I> Locked</I> properties and 
the <I>KeyDown</I>, <I>KeyPress</I>, and 
<I>KeyUp</I> events. I've already explained many things that 
you can do with these properties and won't repeat myself here. Suffice it to say 
that you can apply to ComboBox controls most of the techniques that are valid for 
TextBox controls, including automatic formatting and deformatting of data in 
<I>GotFocus</I> and <I>LostFocus</I> event procedures and validation in 
<I>Validate</I> event procedures.</P>
<P>The most characteristic ComboBox control property is 
<I>Style</I>, which lets you pick one among the three styles available, as you can see in Figure 3-11. When you set Style = 0-DropDown Combo, what you get is the classic 
combo; you can enter a value in the edit area or select one from the drop-down list. The 
setting <I>Style</I> = 1-Simple Combo is similar, but the list area is always visible so that in this 
case you really have a compounded TextBox plus ListBox control. By default, Visual 
Basic creates a control that's only tall enough to show the edit area, and you must 
resize it to make the list portion visible. Finally, 
<I>Style</I> = 2-Dropdown List suppresses the edit area and gives you only a drop-down list to choose from.</P>

<p>
<img src="F03ph11.GIF" width=277 height=299 border="0">
<p>
<!--caption--><B>Figure 3-11.</B> <i>Three different styles for ComboBox controls. The drop-down list variant doesn't allow direct editing of the  contents.</i><!--/caption-->


<P>When you have a ComboBox control with <I>Style</I> = 0-Dropdown Combo 
or 2-Dropdown List, you can learn when the user is opening the list portion by 
trapping the <I>DropDown</I> event. For example, you can fill the list area just one instant 
before the user sees it (a sort of just-in-time data loading):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Combo1_DropDown()
    Dim i As Integer
    ' Do it only once.
    If Combo1.ListCount = 0 Then
        For i = 1 To 100
            Combo3.AddItem &quot;Item #&quot; &amp; i
        Next
    End If
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The ComboBox control supports the <I>Click</I> and 
<I>DblClick</I> events, but they relate only to the list portion of the control. More precisely, you get a 
<I>Click</I> event when the user selects an item from the list, and you get a 
<I>DblClick</I> event only when an item in the list is double-clicked. The latter can occur only when 
<I>Style</I> = 1-Simple Combo, though, and you'll never get this event for other types of ComboBox controls.</P>

<p><div class="note"><blockquote><b>NOTE</b><hr>
For reasons that, honestly, are beyond my imagination, 
<I>MouseDown</I>, <I>MouseUp</I>, and 
<I>MouseMove</I> events aren't supported by the ComboBox 
intrinsic controls. Don't ask me why. Ask Microsoft.
</blockquote></div></P>

<p>ComboBox controls with <I>Style</I> = 1-Simple Combo possess an intriguing 
feature, called <I>extended matching</I>. As you type a string, Visual Basic scrolls the list 
portion so that the first visible item in the list area matches the characters in the edit area. </P>

<p>Drop-down list controls pose special problems in programming. For 
example, they never raise <I>Change</I> and keyboard-related events. Moreover, you can't 
reference all the properties that are related to activity in the edit area, such as 
<I>SelStart</I>,<I> SelLength</I>, and 
<I>SelText</I>. (You get error 380&#8212;&quot;Invalid property value.&quot;) The 
<I>Text </I>property can be read and can also be written to, provided that the value you assign is among the 
items in the list. (Visual Basic performs a case-insensitive search.) If you try to assign a 
string that isn't in the list, you get a run-time error 
(383&#8212;&quot;<I>Text</I> property is read-only&quot;), 
which isn't really appropriate because the 
<I>Text</I> property can sometimes be assigned).</P>


<a name="A19"></a><h3>5.3.5 PictureBox and Image Controls</h3>

<A HREF="#A18">[Previous]</A> <A HREF="#A20">[Next]</A><P>

<A NAME="91"><h1>PictureBox and Image Controls</h1></A>

<p>Both PictureBox and Image controls let you display an image, so let's compare 
them and see when it makes sense to choose one or the other.</P>

<A NAME="92"><h2>The PictureBox Control</h2></A>

<p>PictureBox controls are among the most powerful and complex items in the Visual 
Basic Toolbox window. In a sense, these controls are more similar to forms than to 
other controls. For example, PictureBox controls support all the properties related to 
graphic output, including<I> AutoRedraw</I>,<I> 
ClipControls</I>,<I> HasDC</I>,<I> 
FontTransparent</I>, <I>CurrentX</I>,<I> 
CurrentY</I>, and all the <I>Draw</I>xxxx, 
<I>Fill</I>xxxx,<I> </I>and <I>Scale</I>xxxx<I> 
</I>properties. PictureBox controls also support all graphic methods, such as 
<I>Cls</I>, <I>PSet</I>, <I>Point</I>, <I>Line</I>, and 
<I>Circle</I> and conversion methods, such as 
<I>ScaleX</I>, <I>ScaleY</I>, <I>TextWidth</I>, and 
<I>TextHeight</I>. In other words, all the techniques that I described for forms can also be used for PictureBox 
controls (and therefore won't be covered again in this section).</P>

<A NAME="93"><h3>Loading images</h3></A>

<p>Once you place a PictureBox on a form, you might want to load an image in it, 
which you do by setting the <I>Picture</I> property in the Properties window. You can load 
images in many different graphic formats, including bitmaps (BMP), device 
independent bitmaps (DIB), metafiles (WMF), enhanced metafiles (EMF), GIF and 
JPEG compressed files, and icons (ICO and CUR). You can decide whether a control 
should display a border, resetting the 
<I>BorderStyle </I>to 0-None if necessary. Another 
property that comes handy in this phase is 
<I>AutoSize</I>: Set it to True and let the control 
automatically resize itself to fit the assigned image.</P>

<p>You might want to set the <I>Align </I>property of a PictureBox control to 
something other than the 0-None value. By doing that, you attach the control to one of the 
four form borders and have Visual Basic automatically move and resize the 
PictureBox control when the form is resized. PictureBox controls expose a 
<I>Resize </I>event, so you can trap it if you need to move and resize its child controls too.</P>
<P>You can do more interesting things at run time. To begin with, you can 
programmatically load any image in the control using the 
<I>LoadPicture</I> function:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Picture1.Picture = LoadPicture(&quot;c:\windows\setup.bmp&quot;)
</pre>
</td></tr>
</table>
</P>


<p>and you can clear the current image using either one of the following statements:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' These are equivalent.
Picture1.Picture = LoadPicture(&quot;&quot;)
Set Picture1.Picture = Nothing
</pre>
</td></tr>
</table>
</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The <I>LoadPicture</I> function has been extended in Visual Basic 6 to support 
icon files containing multiple icons. The new syntax is the following:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>LoadPicture(filename, [size], [colordepth], [x], [y])
</pre>
</td></tr>
</table>
</P>


<p>where values in square brackets are optional. If 
<I>filename</I> is an icon file, you can select a particular icon using the 
<I>size </I>or <I>colordepth </I>arguments. Valid sizes are 
0-vbLPSmall, 1-vbLPLarge (system icons whose sizes depend on the video driver), 
2-vbLPSmallShell, 3-vbLPLargeShell (shell icons whose dimensions are affected by the 
<I>Caption Button</I> property as set in the Appearance tab in the screen's Properties dialog box), and 
4-vbLPCustom (size is determined by <I>x</I> and 
<I>y</I>). Valid color depths are 0-vbLPDefault (the icon in the file that best matches current screen settings), 
1-vbLPMonochrome, 2-vbLPVGAColor (16 colors), and 3-vbLPColor (256 colors).</P>

<p>You can copy an image from one PictureBox control to another by 
assigning the target control's <I>Picture</I> property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Picture2.Picture = Picture1.Picture
</pre>
</td></tr>
</table>
</P>


<A NAME="94"><h3>The <I>PaintPicture</I> method</h3></A>

<p>PictureBox controls are equipped with a very powerful method that enables 
the programmer to perform a wide variety of graphic effects, including zooming, 
scrolling, panning, tiling, flipping, and many fading effects: This is the 
<I>PaintPicture </I>method. (This method is also exposed by form objects, but it's most often used with 
PictureBox controls.) In a nutshell, this method performs a pixel-by-pixel copy from a 
source control to a destination control. The complete syntax of this method is complex 
and rather confusing:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DestPictBox.PaintPicture SrcPictBox.Picture, destX, destY, [destWidth], _
    [destHeight], [srcX], [srcY2], [srcWidth], [srcHeight], [Opcode])
</pre>
</td></tr>
</table>
</P>


<p>The only required arguments are the source PictureBox control's 
<I>Picture</I> property and the coordinates inside the destination control where the image must be 
copied. The <I>destX </I>/ <I>destY </I>arguments are expressed in the 
<I>ScaleMode</I> of the destination control; by varying 
them, you can make the image appear exactly where you want. 
For example, if the source PictureBox control contains a bitmap 3000 twips wide and 
2000 twips tall, you can center this image on the destination control with this command:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>picDest.PaintPicture picSource.Picture, (picDest.ScaleWidth - 3000) / 2, _
    (picDest.ScaleHeight - 2000) / 2
</pre>
</td></tr>
</table>
</P>


<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
In general, Visual Basic doesn't provide a way to determine the size of 
a bitmap loaded into a PictureBox control. But you can derive this information 
if you set the control's <I>AutoSize</I> property to True and then read the 
control's <I>ScaleWidth</I> and <I>ScaleHeight</I> properties. If you don't want to resize a 
visible control just to learn the dimensions of a bitmap, you can load it into an 
invisible control, or you can use this trick, based on the fact that the 
<I>Picture </I>property returns an StdPicture object, which in turn exposes the 
<I>Height </I>and <I>Width </I>properties:
<p><table><tr><td><pre>
' StdPicture's Width and Height properties are expressed in
' Himetric units. 
With Picture1
    width = CInt(.ScaleX(.Picture.Width, vbHimetric, vbPixels))
    height = CInt(.ScaleY(.Picture.Height, vbHimetric, _
        vbPixels))
End With
</pre></td></tr></table>
</P>
</blockquote></div></p>



<p>By the way, in all subsequent code examples I assume that the source 
PictureBox control's <I>ScaleWidth</I> and 
<I>ScaleHeight</I> properties match the actual bitmap's 
size. By default, the <I>PaintPicture</I> method copies the entire source bitmap. But you 
can copy just a portion of it, passing a value for 
<I>srcWidth</I> and <I>srcHeight</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Copy the upper left portion of the source image.
picDest.PaintPicture picSource.Picture, 0, 0, , , , , _
    picSource.ScaleWidth / 2, picSource.ScaleHeight / 2
</pre>
</td></tr>
</table>
</P>


<p>If you're copying just a portion of the source image, you probably want to 
pass a specific value for the <I>srcX </I>and <I>srcY 
</I>values as well, which correspond to the coordinates of the top-left corner of the area that will be copied from the source control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Copy the bottom-right portion of the source image
' in the corresponding corner in the destination. 
wi = picSource.ScaleWidth / 2
he = picSource.ScaleHeight / 2
picDest.PaintPicture picSource.Picture, wi, he, , , wi, he, wi, he
</pre>
</td></tr>
</table>
</P>


<p>You can use this method to tile a target PictureBox control (or form) 
with multiple copies of an image stored in another control:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Start with the leftmost column.
x = 0
Do While x &lt; picDest.ScaleWidth
    y = 0
    ' For each column, start at the top and work downward.
    Do While y &lt; picDest.ScaleHeight
        picDest.PaintPicture picSource.Picture, x, y, , , 0, 0
        ' Next row
        y = y + picSource.ScaleHeight
    Loop
    ' Next column
    x = x + picSource.ScaleWidth
Loop
</pre>
</td></tr>
</table>
</P>


<p>Another great feature of the 
<I>PaintPicture</I> method lets you resize the image 
while you transfer it, and you can even specify different zoom-in and zoom-out factors 
for the <I>x</I>- and <I>y</I>-axes independently. You just have to pass a value to the 
<I>destWidth </I>and <I>destHeight </I>arguments: If these values are greater than the source image's 
corresponding dimensions, you achieve a zoom-in effect, and if they are less you get a 
zoom-out effect. For example, see how you can double the size of the original image:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>picDest.PaintPicture picSource.Picture, 0, 0, _
    picSource.ScaleWidth * 2, picSource.ScaleHeight * 2
</pre>
</td></tr>
</table>
</P>


<p>As a special case of the syntax of the 
<I>PaintPicture</I> method, the source image can even be flipped along its 
<I>x</I>-axis, <I>y</I>-axis, or both by passing negative values 
for these arguments:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Flip horizontally.
picDest.PaintPicture picSource.Picture, _
    picSource.ScaleWidth, 0, -picSource.ScaleWidth
' Flip vertically.
picDest.PaintPicture picSource.Picture, 0, _
    picSource.ScaleHeight, , -picSource.ScaleHeight
' Flip the image on both axes.
picDest.PaintPicture picSource.Picture, picSource.ScaleWidth, _
    picSource.ScaleHeight, -picSource.ScaleWidth, -picSource.ScaleHeight
</pre>
</td></tr>
</table>
</P>


<p>As you might expect, you can combine all these effects together, 
magnifying, reducing, or flipping just a portion of the source image, and have the result 
appear in any point of the destination PictureBox control (or form). I have prepared a 
demonstration program (see Figure 3-12) that recaps what I have explained so far and also includes the complete source code for many interesting 
dissolve and tiling effects. You should find no problem in reusing all those routines in your 
own applications.</P>
<P>As if all these capabilities weren't enough, we haven't covered the last 
argument of the <I>PaintPicture</I> method yet. The 
<I>opcode </I>argument lets you specify which kind of Boolean operation must be performed on pixel bits as they're transferred from 
the source image to the destination. The values you can pass to this argument are 
the same that you assign to the <I>DrawMode </I>property. The default value is 
13-vbCopyPen, which simply copies the source pixels in the destination control. By playing with 
the other settings, you can achieve many interesting graphical effects, including 
simple animations. For more information about the 
<I>DrawMode</I> property, see <a href="#A9">Chapter 2</a>.</P>

<p>
<A HREF="javascript:fullSize('F03ph12x.htm')"> <img src="F03ph12.JPG" width=404 height=263 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-12.</B> <i>The PaintPicture demonstration program shows several graphic effects.</i><!--/caption-->
</p>

<A NAME="95"><h2>The Image Control</h2></A>

<p>Image controls are far less complex than PictureBox controls. They don't 
support graphical methods or the <I>AutoRedraw</I> and the 
<I>ClipControls</I> properties, and they can't work as containers, just to hint at their biggest limitations. Nevertheless, you 
should always strive to use Image controls instead of PictureBox controls because they 
load faster and consume less memory and system resources. Remember that Image 
controls are windowless objects that are actually managed by Visual Basic without 
creating a Windows object. (For an explanation of lightweight windowless controls, 
see <a href="#A9">Chapter 2</a>.) Image controls can load bitmaps and JPEG and GIF images.</P>

<p>When you're working with an Image control, you typically load a bitmap 
into its <I>Picture</I> property either at design time or at run time using the 
<I>LoadPicture</I> function. Image controls don't expose the 
<I>AutoSize</I> property because by default they 
resize to display the contained image (as it happens with PictureBox controls set at 
<I>AutoSize</I> = True). On the other hand, Image controls support a 
<I>Stretch</I> property that, if True, resizes the image (distorting it if necessary) to fit the control. In a sense, the 
<I>Stretch</I> property somewhat remedies the lack of the 
<I>PaintPicture</I> method for this control. In fact, you can zoom in to or reduce an image by loading it in an Image control 
and then setting its <I>Stretch</I> property to True to change its width and height:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Load a bitmap.
Image1.Stretch = False
Image1.Picture = LoadPicture(&quot;c:\windows\setup.bmp&quot;)
' Reduce it by a factor of two.
Image1.Stretch = True
Image1.Move 0, 0, Image1.Width / 2, Image1.Width / 2
</pre>
</td></tr>
</table>
</P>


<p>Image controls support all the usual mouse events. For this reason, many 
Visual Basic developers have used Image controls to simulate graphical buttons 
and toolbars. Now that Visual Basic natively supports these controls, you'd probably 
better use Image controls only for what they were originally intended.</P>


<a name="A20"></a><h3>5.3.6 Scrollbar Controls</h3>

<A HREF="#A19">[Previous]</A> <A HREF="#A21">[Next]</A><P>

<A NAME="96"><h1>Scrollbar Controls</h1></A>

<p>The HScrollBar and the VScrollBar controls are perfectly identical, apart from 
their different orientation. After you place an instance of such a control on a form, you 
have to worry about only a few properties: 
<I>Min</I> and <I>Max</I> represent the valid range of 
values, <I>SmallChange</I> is the variation in value you get when clicking on the scroll bar's 
arrows, and <I>LargeChange</I> is the variation you get when you click on either side 
of the scroll bar indicator. The default initial value for those two properties is 1, but 
you'll probably have to change <I>LargeChange</I> to a higher value. For example, if you 
have a scroll bar that lets you browse a portion of text, 
<I>SmallChange</I> should be 1 (you scroll one line at a time) and 
<I>LargeChange</I> should be set to match the number of 
visible text lines in the window.</P>

<p>The most important run-time property is 
<I>Value</I>, which always returns the relative position of the indicator on the scroll bar. By default, the 
<I>Min</I> value corresponds to the leftmost or upper end of the control:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the indicator near the top (or left) arrow.
VScroll1.Value = VScroll1.Min
' Move the indicator near the bottom (or right) arrow.
VScroll1.Value = VScroll1.Max
</pre>
</td></tr>
</table>
</P>


<p>While this setting is almost always OK for horizontal scroll bars, you 
might sometimes need to reverse the behavior of vertical scroll bars so that the zero is 
near the bottom of your form. This arrangement is often desirable if you want to use 
a vertical scroll bar as a sort of slider. You obtain this behavior by simply inverting 
the values in the <I>Min</I> and <I>Max </I>properties. (In other words, it's perfectly legal for 
<I>Min</I> to be greater than <I>Max</I>.)</P>

<p>There are two key events for scrollbar controls: the 
<I>Change</I> event fires when you click on the scroll bar arrows or when you drag the indicator; the 
<I>Scroll</I> event fires while you drag the indicator. The reason for these two distinct possibilities 
is mostly historical. First versions of Visual Basic supported only the 
<I>Change </I>event, and when developers realized that it wasn't possible to have continuous feedback 
when users dragged the indicator, Microsoft engineers added a new event instead of extending the <I>Change</I> event. In this way, old applications could be recompiled without unexpected changes in their behavior. At any rate, this means that you must often trap two distinct events:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show the current scroll bar's value. 
Private VScroll1_Change()
    Label1.Caption = VScroll1.Value
End Sub
Private VScroll1_Scroll()
    Label1.Caption = VScroll1.Value
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The example shown in Figure 3-13 uses three VScrollBar controls as sliders 
to control the individual RGB (red, green, blue) components of a color. The three 
scroll bars have their <I>Min</I> property set to 255 and their 
<I>Max </I>property set to 0, while their 
<I>SmallChange</I> is 1 and <I>LargeChange</I> is 16. This example is also a moderately 
useful program in itself because you can select a color and then copy its numeric value 
to the clipboard and paste it in your application's code as a decimal value, a 
hexadecimal value, or an RGB function.</P>

<p>
<img src="F03ph13.GIF" width=396 height=294 border="0">
<p>
<!--caption--><B>Figure 3-13.</B> <i>Use scrollbar controls to visually create colors.</i><!--/caption-->


<P>Scrollbar controls can receive the input focus, and in fact they support both 
the <I>TabIndex</I> and <I>TabStop</I> properties. If you don't want the user to accidentally 
move the input focus on a scrollbar control when he or she presses the Tab key, you 
must explicitly set its <I>TabStop</I> property to False. When a scrollbar control has the 
focus, you can move the indicator using the Left, Right, Up, Down, PgUp, PgDn, Home, 
and End keys. For example, you can take advantage of this behavior to create a 
read-only TextBox control with a numeric value that can be edited only through a tiny 
companion scroll bar. This scroll bar appears to the user as a sort of spin button, as 
you can see in Figure 3-14. To make the trick work, you need to 
write just a few lines of code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_GotFocus()
    ' Pass the focus to the scroll bar.
    VScroll1.SetFocus
End Sub
Private Sub VScroll1_Change()
    ' Scroll bar controls the text box value.
    Text1.Text = VScroll1.Value
End Sub
</pre>
</td></tr>
</table>
</P>


<p>
<img src="F03ph14.GIF" width=235 height=161 border="0">
</p><p>
<B>Figure 3-14.</B> <i>You don't need external ActiveX controls to create functional spin buttons.</i>
</p>

<P>Scrollbar controls are even more useful for building scrolling forms, like the 
one displayed in Figure 3-15. To be certain, scrolling forms aren't the 
most ergonomic type of user interface you can offer to your customers: If you have 
that many fields in a form, you should consider using a Tab control, child forms, or 
some other custom interface. Sometimes, however, you badly need scrollable forms, and 
in this situation you are on your own because Visual Basic forms don't support scrolling.</P>
<P>Fortunately, it doesn't take long to convert a regular form into a scrollable 
one. You need a couple of scrollbar controls, plus a PictureBox control that you use 
as the container for all the controls on the form, and a filler control&#8212;a 
CommandButton, for example&#8212;that you place in the bottom-right corner of the form when it 
displays the two scroll bars. The secret to creating scrollable forms is that you don't move 
all the child controls one by one. Instead, you place all the controls in the 
PictureBox control (named <I>picCanvas </I>in the following code), and you move it when the 
user acts on the scroll bar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub MoveCanvas()
    picCanvas.Move -HScroll1.Value, -VScroll1.Value
End Sub
</pre>
</td></tr>
</table>
</P>


<p>In other words, to uncover the portion of the form near the right border, 
you assign a negative value to the PictureBox's 
<I>Left</I> property, and to display the portion near the form's bottom border you set its 
<I>Top</I> property to a negative value. It's 
really that simple. You do this by calling the 
<I>MoveCanvas</I> procedure from within the scroll bars' 
<I>Change</I> and <I>Scroll</I> events. Of course, it's critical that you write code in 
the <I>Form_Resize</I> event, which makes a scroll bar appear and disappear as the form 
is resized, and that you assign consistent values to 
<I>Max </I>properties of the scrollbar controls:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' size of scrollbars in twips
Const SB_WIDTH = 300    ' width of vertical scrollbars
Const SB_HEIGHT = 300   ' height of horizontal scrollbars

Private Sub Form_Resize()
    ' Resize the scroll bars along the form.
    HScroll1.Move 0, ScaleHeight - SB_HEIGHT, ScaleWidth - SB_WIDTH
    VScroll1.Move ScaleWidth - SB_WIDTH, 0, SB_WIDTH, _
        ScaleHeight - SB_HEIGHT
    cmdFiller.Move ScaleWidth - SB_WIDTH, ScaleHeight - SB_HEIGHT, _
        SB_WIDTH, SB_HEIGHT

    ' Put these controls on top.
    HScroll1.ZOrder 
    VScroll1.ZOrder
    cmdFiller.ZOrder
    picCanvas.BorderStyle = 0

    ' A click on the arrow moves one pixel.
    HScroll1.SmallChange = ScaleX(1, vbPixels, vbTwips)
    VScroll1.SmallChange = ScaleY(1, vbPixels, vbTwips)
    ' A click on the scroll bar moves 16 pixels.
    HScroll1.LargeChange = HScroll1.SmallChange * 16
    VScroll1.LargeChange = VScroll1.SmallChange * 16

    ' If the form is larger than the picCanvas picture box,
    ' we don't need to show the corresponding scroll bar.
    If ScaleWidth &lt; picCanvas.Width + SB_WIDTH Then
        HScroll1.Visible = True
        HScroll1.Max = picCanvas.Width + SB_WIDTH - ScaleWidth
    Else
        HScroll1.Value = 0
        HScroll1.Visible = False
    End If
    If ScaleHeight &lt; picCanvas.Height + SB_HEIGHT Then
        VScroll1.Visible = True
        VScroll1.Max = picCanvas.Height + SB_HEIGHT - ScaleHeight
    Else
        VScroll1.Value = 0
        VScroll1.Visible = False
    End If
    ' Make the filler control visible only if necessary.
    cmdFiller.Visible = (HScroll1.Visible Or VScroll1.Visible)
    MoveCanvas
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Working with scrollable forms at design time isn't comfortable. I suggest 
that you work with a maximized form and with the PictureBox control sized as large 
as possible. When you're finished with the form interface, resize the PictureBox 
control to the smallest area that contains all the controls, and then reset the 
form's <I>WindowState</I> property to 0-Normal.</P>

<p>
<A HREF="javascript:fullSize('F03ph15x.htm')"> <img src="F03ph15.JPG" width=404 height=370 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-15.</B> <i>Scrollable forms.</i><!--/caption-->
</p>


<a name="A21"></a><h3>5.3.7 DriveListBox, DirListBox, and FileListBox Controls</h3>

<A HREF="#A20">[Previous]</A> <A HREF="#A22">[Next]</A><P>

<A NAME="97"><H1>DriveListBox, DirListBox, and FileListBox Controls</H1></A>
<p>In a nutshell, the DriveListBox control is a combobox-like control that's 
automatically filled with your drive's letters and volume labels. The DirListBox is a special list 
box that displays a directory tree. The FileListBox control is a special-purpose 
ListBox control that displays all the files in a given directory, optionally filtering them 
based on their names, extensions, and attributes.</P>
<P>These controls often work together on the same form; when the user selects 
a drive in a DriveListBox, the DirListBox control is updated to show the directory 
tree on that drive. When the user selects a path in the DirListBox control, the 
FileListBox control is filled with the list of files in that directory. These actions don't 
happen automatically, however&#8212;you must write code to get the job done.</P>
<P>After you place a DriveListBox and a DirListBox control on a form's surface, 
you usually don't have to set any of their properties; in fact, these controls don't 
expose any special property, not in the Properties window at least. The FileListBox 
control, on the other hand, exposes one property that you can set at design time&#8212;the 
<I>Pattern</I> property. This property indicates which files are to be shown in the list area: Its 
default value is <I>*.*</I> (all files), but you can enter whatever specification you need, 
and you can also enter multiple specifications using the semicolon as a separator. 
You can also set this property at run time, as in the following line of code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>File1.Pattern = &quot;*.txt;*.doc;*.rtf&quot;
</pre>
</td></tr>
</table>
</P>


<p>After these preliminary steps, you're ready to set in motion the chain of 
events. When the user selects a new drive in the DriveListBox control, it fires a 
<I>Change</I> event and returns the drive letter (and volume label) in its 
<I>Drive</I> property. You trap this event 
and set the DirListBox control's <I>Path</I><B> 
</B>property to point to the root directory of the selected drive:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Drive1_Change()
    ' The Drive property also returns the volume label, so trim it.
    Dir1.Path = Left$(Drive1.Drive, 1) &amp; &quot;:\&quot;
End Sub
</pre>
</td></tr>
</table>
</P>


<p>When the user double-clicks on a directory name, the DirListBox control 
raises a <I>Change</I> event; you trap this event to set the FileListBox's 
<I>Path</I> property accordingly:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Dir1_Change()
    File1.Path = Dir1.Path
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Finally, when the user clicks on a file in the FileListBox control, a 
<I>Click</I> event is fired (as if it were a regular ListBox control), and you can query its 
<I>Filename</I> property to learn which file has been selected. Note how you build the complete path:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Filename = File1.Path 
If Right$(Filename, 1) &lt;&gt; &quot;\&quot; Then Filename = Filename &amp; &quot;\&quot;
Filename = Filename &amp; File1.Filename
</pre>
</td></tr>
</table>
</P>


<p>The demonstration program shown in Figure 3-16 builds on these controls 
to provide a functional Image Preview utility. It also supports dynamic resizing of 
the controls when the form they're on is resized.</P>

<p>The DirListBox and FileListBox controls support most of the properties 
typical of the control they derive from&#8212;the ListBox control&#8212;including the 
<I>ListCount</I> and the <I>ListIndex</I> properties and the 
<I>Scroll</I> event. The FileListBox control supports 
multiple selection; hence you can set its <I>MultiSelect 
</I>property in the Properties window and query the 
<I>SelCount</I> and <I>Selected </I>properties at run time.</P>

<p>
<A HREF="javascript:fullSize('F03ph16x.htm')"> <img src="F03ph16.JPG" width=404 height=250 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-16.</B> <i>A minimal but completely functional Image Preview utility that also supports bitmap tiling.</i><!--/caption-->
</p>

<p>The FileListBox control also exposes a few custom Boolean properties, 
<I>Normal</I>,<I> Archive</I>,<I> Hidden</I>,<I> 
ReadOnly</I>, and <I>System</I>, which permit you to decide whether 
files with these attributes should be listed. (By default, the control doesn't display 
hidden and system files.) This control also supports a couple of custom events, 
<I>PathChange</I> and <I>PatternChange</I>, that fire when the corresponding property is changed 
through code. In most cases, you don't have to worry about them, and I won't provide 
examples of their usage.</P>
<P>The problem with the DriveListBox, DirListBox and FileListBox controls is 
that they're somewhat outdated and aren't used by most commercial applications 
any longer. Moreover, these controls are known to work incorrectly when listing files 
on network servers and sometimes even on local disk drives, especially when long 
file and directory names are used. For this reason, I discourage you from using them 
and suggest instead that you use the Common Dialog controls for your FileOpen 
and FileSave dialog boxes. But if you need to ask the user for the name of a 
directory rather than a file, you're out of luck because&#8212;while Windows does include such 
a system dialog box, named BrowseForFolders dialog&#8212;Visual Basic still doesn't 
offer a way to display it (unless you do some advanced API programming). 
Fortunately, Visual Basic 6 comes with a new control&#8212;the ImageCombo control&#8212;that lets 
you simulate the appearance of the DriveListBox control. It also offers you a 
powerful library&#8212;the FileSystemObject library&#8212;that completely frees you from using 
these three controls, if only as hidden controls that you use just for quickly retrieving 
information on the file system. For more information about the FileSystemObject 
library and the ImageCombo control, see Chapters <a href="#A30">5</a> and <a href="#A57">10</a>, respectively. Command 
dialogs are covered in <a href="#A74">Chapter 12</a>.</P>


<a name="A22"></a><h3>5.3.8 Other Controls</h3>

<A HREF="#A21">[Previous]</A> <A HREF="#A23">[Next]</A><P>

<A NAME="98"><h1>Other Controls</h1></A>

<p>We still have to briefly discuss a few other controls in the Toolbox.</P>

<A NAME="99"><h2>The Timer Control</h2></A>

<p>A Timer control is invisible at run time, and its purpose is to send a periodic 
pulse to the current application. You can trap this pulse by writing code in the Timer's 
<I>Timer</I> event procedure and take advantage of it to execute a task in the background 
or to monitor a user's actions. This control exposes only two meaningful 
properties: <I>Interval</I> and <I>Enabled</I>. 
<I>Interval </I>stands for the number of milliseconds between 
subsequent pulses (<I>Timer</I> events), while 
<I>Enabled</I> lets you activate or deactivate 
events. When you place the Timer control on a form, its 
<I>Interval</I> is 0, which means no events. Therefore, remember to set this property to a suitable value in the Properties 
window or in the <I>Form_Load</I> event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Timer1.Interval = 500    ' Fire two Timer events per second.
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Timer controls let you write interesting programs with just a few lines of 
code. The typical (and abused) example is a digital clock. Just to make things a bit 
more compelling, I added flashing colons:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Timer1_Timer()
    Dim strTime As String
    strTime = Time$
    If Mid$(lblClock.Caption, 3, 1) = &quot;:&quot; Then
        Mid$(strTime, 3, 1)= &quot; &quot;
        Mid$(strTime, 6, 1) = &quot; &quot;
    End If
    lblClock.Caption = strTime
End Sub
</pre>
</td></tr>
</table>
</P>


<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
You must be careful not to write a lot of code in the 
<I>Timer</I> event procedure because this code will be executed at every pulse and therefore 
can easily degrade your application's performance. Just as important, never 
execute a <I>DoEvents</I> statement inside a 
<I>Timer</I> event procedure because you might 
cause the procedure to be reentered, especially if the 
<I>Interval</I> property is set to a small value and there's a lot of code inside the procedure.
</blockquote></div></P>

<p>Timer controls are often useful for updating status information on a regular 
basis. For example, you might want to display on a status bar a short description of the 
control that currently has the input focus. You can achieve that by writing some code 
in the <I>GotFocus</I> event for all the controls on the form, but when you have dozens 
of controls this will require a lot of code (and time). Instead, at design time load a 
short description for each control in its 
<I>Tag</I> property, and then place a Timer control 
on the form with an <I>Interval</I> setting of 500. This isn't a time-critical task, so you can 
use an even larger value. Finally add two lines of code to the control's 
<I>Timer</I> event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Timer1_Timer()
    On Error Resume Next
    lblStatusBar.Caption = ActiveControl.Tag
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="100"><h2>The Line Control</h2></A>

<p>The Line control is a decorative control whose only purpose is let you draw one 
or more straight lines at design time, instead of displaying them using a 
<I>Line</I> graphical method at run time. This control exposes a few properties whose meaning 
should sound familiar to you by now: 
<I>BorderColor</I> (the color of the line), 
<I>BorderStyle</I>  (the same as a form's 
<I>DrawStyle </I>property), <I>BorderWidth<B> 
</B></I>(the same as a form's <I>DrawWidth</I> 
property), and <I>DrawMode</I>. While the Line control is handy, remember that using 
a <I>Line</I> method at run time is usually better in terms of performance.</P>

<A NAME="101"><h2>The Shape Control</h2></A>

<p>In a sense, the Shape control is an extension of the Line control. It can display 
six basic shapes: Rectangle, Square, Oval, Circle, Rounded Rectangle, and 
Rounded Square. It supports all the Line control's properties and a few more: 
<I>BorderStyle</I> 
(0-Transparent, 1-Solid), <I>FillColor</I>,<B> 
</B>and <I>FillStyle </I>(the same as a form's properties 
with the same names). The same performance considerations I pointed out for the 
Line control apply to the Shape control.</P>

<A NAME="102"><h2>The OLE Control</h2></A>

<p>When OLE first made its appearance, the concept of Object Linking and 
Embedding seemed to most developers nothing short of magic. The ability to embed a 
Microsoft Word Document or a Microsoft Excel worksheet (see Figure 3-17) within 
another Windows application seemed an exciting one, and Microsoft promptly released 
the OLE control&#8212;then called the OLE Container control&#8212;to help Visual Basic 
support this capability.</P>
<P>In the long run, however, the <I>Embedding</I> term in OLE has lost much of its 
appeal and importance, and nowadays programmers are more concerned and thrilled 
about Automation, a subset of OLE that lets them control other Windows applications 
from the outside, manipulating their object hierarchies through OLE. For this reason, I 
won't describe the OLE control: It's a rather complex object, and a thorough 
description of its many properties, methods, and events (and quirks) would take too much space.</P>

<p>
<A HREF="javascript:fullSize('F03ph17x.htm')"> <img src="F03ph17.JPG" width=404 height=274 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-17.</B> <i>Your Visual Basic application can host an Excel worksheet&#8212;and its menus too.</i><!--/caption-->
</p>


<a name="A23"></a><h3>5.3.9 Menus</h3>

<A HREF="#A22">[Previous]</A> <A HREF="#A24">[Next]</A><P>

<A NAME="103"><h1>Menus</h1></A>

<p>Menus are intrinsic controls, and as such they deserve a place in this chapter. On 
the other hand, menus behave differently from other controls. For example, you don't 
drop menu items on a form from the Toolbox; rather, you design them in the Menu 
Editor window, as you can see in Figure 3-18. You invoke this tool from the Menu Editor button on the standard toolbar or by pressing the Ctrl+E 
shortcut key. There's also a Menu Editor<I> </I>command in the Tools menu, but you 
probably won't use it often.</P>
<P>Basically, each menu item has a <I>Caption</I><B> 
</B>property (possibly with an embedded &amp; character to create an access key) and a 
<I>Name</I>. Each item also exposes three Boolean properties, 
<I>Enabled</I>, <I>Visible</I>, and <I>Checked</I>, which you can set both at 
design time and at run time. At design time, you can assign the menu item a shortcut 
key so that your end users don't have to go through the menu system each time they 
want to execute a frequent command. (Do you <I>really 
</I>like pulling down the Edit menu any time you need to clear some text or copy it to the Clipboard?) The assigned 
shortcut key can't be queried at run time, much less modified. Menu items support a few 
other properties, but I won't describe them until <a href="#A53">Chapter 9</a>.</P>
<P>Building a menu is a simple, albeit more tedious, job: You enter the item's 
<I>Caption</I> and <I>Name</I>, set other properties (or accept the default values for those 
properties), and press Enter to move to the next item. When you want to create a 
submenu, you press the Right Arrow button (or the Alt+R hot key). When you want to 
return to work on top-level menus&#8212;those items that appear in the menu bar when 
the application runs&#8212;you click the Left Arrow button (or press Alt+L). You can 
move items up and down in the hierarchy by clicking the corresponding buttons or the 
hot keys Alt+U and Alt+B, respectively.</P>
<P>You can create up to five levels of submenus (six including the menu bar), 
which are too many even for the most patient user. If you find yourself working with 
more than three menu levels, think about trashing your specifications and redesigning 
your application from the ground up.</P>

<p>You can insert a separator bar using the hypen (-) character for the 
<I>Caption</I> property. But even these separator items must be assigned a unique value for 
the <I>Name </I>property, which is a real nuisance. If you forget to enter a menu item's 
<I>Name</I>, the Menu Editor complains when you decide to close it. The convention used in 
this book is that all menu names begin with the three letters 
<I>mnu</I>.</P>

<p>
<img src="F03ph18.GIF" width=366 height=366 border="0">
<p>
<!--caption--><B>Figure 3-18.</B> <i>The Menu Editor window.</i><!--/caption-->


<P>One of the most annoying defects of the Menu Editor tool is that it doesn't 
permit you to reuse the menus you have already written in other applications. It would 
be great if you could open another instance of the Visual Basic IDE, copy one or 
more menu items to the clipboard, and then paste those menu items in the application 
under development. You can do that with controls and with pieces of code, but not 
with menus! The best thing you can do in Visual Basic is load the FRM file using an 
editor such as Notepad, find the portion in the file that corresponds to the menu 
you're interested in, load the FRM file you're developing (still in Notepad), and paste 
the code there. This isn't the easiest operation, and it's also moderately dangerous: If 
you paste the menu definition in the wrong place, you could make your FRM form 
completely unreadable. Therefore, always remember to make backup copies of your 
forms before trying this operation.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<P>Better news is that you <I>can </I>add a finished menu to a form in your 
application with just a few mouse clicks. All you have to do is activate the Add-In 
Manager from the Add-Ins menu, choose the <I>VB 6 Template 
Manager</I>, and tick the Loaded/Unloaded check box. After you do that, you'll find three new commands in the 
Tools menu: Add Code Snippet, Add Menu, and Add Control Set. Visual Basic 6 comes 
with a few menu templates, as you can see in Figure 3-19, that you might find useful 
as a starting point for building your own templates. To create your menu templates, 
you only have to create a form with the complete menu and all the related code and 
then store this form in the \Templates\Menus directory. (The complete path, 
typically c:\Program Files\Microsoft Visual Studio\VB98\Template, can be found in the 
Environment tab of the Options dialog box on the Tools menu. The Template 
Manager was already available with Visual Basic 5, but it had to be installed manually 
and relatively few programmers were aware of its existence.</P>

<p>
<A HREF="javascript:fullSize('F03ph19x.htm')"> <img src="F03ph19.JPG" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-19.</B> <I>The Template Manager in action.</I><!--/caption-->
</p>
<A NAME="104"><h2>Accessing Menus at Run Time</h2></A>

<p>Menu controls expose only one event, 
<I>Click</I>. As you expect, this event fires when the user clicks on the menu:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuFileExit_Click()
    Unload Me
End Sub
</pre>
</td></tr>
</table>
</P>


<p>You can manipulate menu items at run time through their 
<I>Checked</I>, <I>Visible</I>, and <I>Enabled 
</I>properties. For example, you can easily implement a menu item that 
acts as a switch and displays or hides a status bar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuViewStatus_Click()
    ' First, add or remove the check sign.
    mnuViewStatus.Checked = Not mnuViewStatus.Checked
    ' Then make the status bar visible or not.
    staStatusBar.Visible = mnuViewStatus.Checked
End Sub
</pre>
</td></tr>
</table>
</P>


<p>While menu items can be responsible for their own 
<I>Checked</I> status, you usually set their 
<I>Visible</I> and <I>Enabled</I> properties in another region of the code. You 
make a menu item invisible or disabled when you want to make the corresponding 
command unavailable to the user. You can choose from two different strategies to 
achieve this goal: You can set the menu properties as soon as something happens that 
affects that menu command, or you can set them one instant before the menu is 
dropped down. Let me explain these strategies with two examples.</P>

<p>Let's say that the Save command from the File menu should look disabled if 
your application has loaded a read-only file. In this case, the most obvious place in 
code to set the menu <I>Enabled</I> property to False is in the procedure that loads the file, 
as shown in the code below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub LoadDataFile(filename As String)
    ' Load the file in the program.
    ' ... (code omitted)...
    ' Enable or disable the menu enabled state according to the file's
    ' read-only attribute (no need for an If...Else block).
    mnuFileSave.Enabled = (GetAttr(filename) And vbReadOnly)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>This solution makes sense because the menu state doesn't change often. 
By comparison, the state of most of the commands in a typical Edit menu (Copy, 
Cut, Clear, Undo, and so on) depends on whether any text is currently selected in the 
active control. In this case, changing the menu state any time a condition changes 
(because the user selects or deselects text in the active control, for example) is a waste of 
time, and it also requires a lot of code. Therefore, it's preferable to set the state of 
those menu commands in the parent menu's 
<I>Click</I> event just before displaying the menu:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuEdit_Click()
    ' The user has clicked on the Edit menu,
    ' but the menu hasn't dropped down yet.
    On Error Resume Next
    ' Error handling is necessary because we don't know if 
    ' the Active control actually supports these properties.
    mnuEditCopy.Enabled = (ActiveControl.SelText &lt;&gt; &quot;&quot;)
    mnuEditCut.Enabled = (ActiveControl.SelText &lt;&gt; &quot;&quot;)
    mnuEditClear.Enabled = (ActiveControl.SelText &lt;&gt; &quot;&quot;)
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="105"><h2>Pop-Up Menus</h2></A>

<p>Visual Basic also supports pop-up menus, those context-sensitive menus that 
most commercial applications show when you right-click on an user interface object. 
In Visual Basic, you can display a pop-up menu by calling the form's 
<I>PopupMenu</I> method, typically from within the 
<I>MouseDown</I> event procedure of the object:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub List1_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    If Button And vbRightButton Then
        ' User right-clicked the list box.
        PopupMenu mnuListPopup
    End If
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The argument you pass to the <I>PopupMenu</I> method is the name of a menu 
that you have defined using the Menu Editor. This might be either a submenu that 
you can reach using the regular menu structure or a submenu that's intended to work 
only as a pop-up menu. In the latter case, you should create it as a top-level menu in 
the Menu Editor and then set its <I>Visible </I>attribute to False. If your program includes 
many pop-up menus, you might find it convenient to add one invisible top-level entry 
and then add all the pop-up menus below it. (In this case, you don't need to make 
each individual item invisible.) The complete syntax of the 
<I>PopupMenu</I> method is quite complex:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>PopupMenu Menu, [Flags], [X], [Y], [DefaultMenu]
</pre>
</td></tr>
</table>
</P>


<p>By default, pop-up menus appear left aligned on the mouse cursor, and 
even if you use a right-click to invoke the menu you can select a command only with 
the left button. You can change these defaults using the 
<I>Flags </I>argument. The following constants control the alignment: 0-vbPopupMenuLeftAlign (default), 
4-vbPopupMenuCenterAlign, and 8-vbPopupMenuRightAlign. The following constants 
determine which buttons are active during menu operations: 0-vbPopupMenuLeftButton 
(default) and 2-vbPopupMenuRightButton. For example, I always use the latter because I 
find it natural to select a command with the right button since it's already pressed 
when the menu appears:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>PopupMenu mnuListPopup, vbPopupMenuRightButton
</pre>
</td></tr>
</table>
</P>


<p>The <I>x </I>and <I>y </I>arguments, if specified, make the menu appear in a 
particular position on the form, rather than at mouse coordinates. The last optional 
argument is the name of the menu that's the default item for the pop-up menu. This item 
will be displayed in boldface. This argument has only a visual effect; 
If you want to offer a default menu item, you must write code in the 
<I>MouseDown</I> event procedure to trap double-clicks with the right 
button.</P>


<DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
You can take advantage of the 
<I>x </I>and <I>y</I> arguments in a <I>PopupMenu 
</I>method to make your program more Windows compliant, and show your pop-up 
menus over the control that has the focus when the user presses the Application 
key (the key beside the Windows key on the right side of a typical extended 
keyboard, such as the Microsoft Natural Keyboard). But remember that Visual  Basic 
doesn't define any key-code constant for this key. Here's how you must proceed:
<P><TABLE><tr><td>
<PRE>
Private Sub List1_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = 93 Then
        ' The system pop-up menu key has been pressed.
        ' Show a pop-up menu near the list box's center.
        PopupMenu mnuListPopup, , List1.Left + _
            List1.Width / 2, List1.Top + List1.Height / 2
    End If
End Sub
</PRE></td></tr></TABLE></P>
</blockquote></div></P>



<p>Visual Basic's implementation of pop-up menus has a serious flaw. All 
Visual Basic TextBox controls react to right-clicks by showing the standard Edit pop-up 
menu (with the usual commands, such as Undo, Copy, Cut, and so on). The problem is 
that if you invoke a <I>PopupMenu</I> method from within the TextBox control's 
<I>MouseDown</I> event, your custom pop-up menu will be displayed only after the standard one, 
which is obviously undesirable. You can solve it only by resorting to the unorthodox 
and undocumented technique shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    If Button And vbRightButton Then
        Text1.Enabled = False
        PopupMenu mnuMyPopup
        Text1.Enabled = True
    End If
End Sub
</pre>
</td></tr>
</table>
</P>


<p>This technique appeared for the first time in a Tech Tips supplement of 
the <I>Visual Basic Programmer's Journal</I>. VBPJ publishes two such supplements each 
year, in February and August, and they're always packed with useful tricks for Visual 
Basic developers of any level of expertise. You can download past issues from their <a href="http://www.dex.com" target="_window2"><I>http://www.dex.com</I></a> Web site.</p>


<a name="A24"></a><h3>5.3.10 Control Arrays</h3>

<A HREF="#A23">[Previous]</A> <A HREF="#A25">[Next]</A><P>

<A NAME="106"><h1>Control Arrays</h1></A>

<p>So far, we've dealt with individual controls, each one with a distinctive name and 
a distinct set of properties and events. In addition to these, Visual Basic embodies 
the concept of <I>control arrays</I>, in which multiple controls share the same set of 
event procedures even though each individual element in the array can have different 
values for its properties. A control array can be created only at design time, and at the 
very minimum at least one control must belong to it. You create a control array 
following one of these three methods:</p>
<UL>

<p><li> You create a control and then assign a numeric, non-negative value to 
its <I>Index</I> property; you have thus created a control array with just one element.</li></p>

<p><li> You create two controls of the same class and assign them an 
identical <I>Name</I> property. Visual Basic shows a dialog box warning you that 
there's already a control with that name and asks whether you want to create 
a control array. Click on the Yes button.</li></p>

<p><li> You select a control on the form, press Ctrl+C to copy it to the 
clipboard, and then press Ctrl+V to paste a new instance of the control, which has the same <I>Name </I>property as the original one. Visual Basic shows the warning mentioned in the previous bullet.</li></p>
</ul>

<p>Control arrays are one of the most interesting features of the Visual 
Basic environment, and they add a lot of flexibility to your programs:</p>

<ul>
<p><li> Controls that belong to the same control array share the same set of event procedures; this often dramatically reduces the amount of code you have to write to respond to a user's actions.</li></p>

<p><li> You can dynamically add new elements to a control array at run time; 
in other words, you can effectively create new controls that didn't exist 
at design time.</li></p>

<p><li> Elements of control arrays consume fewer resources than regular 
controls and tend to produce smaller executables. Besides, Visual Basic forms 
can host up to 256 different control <I>names,</I> but a control array counts as 
one against this number. In other words, control arrays let you 
effectively overcome this limit.</li></p>
</UL>
 
<p>The importance of using control arrays as a means of dynamically 
creating new controls at run time is somewhat reduced in Visual Basic 6, which has 
introduced a new and more powerful capability. Read about dynamic control 
creation in <a href="#A53">Chapter 9</a>.</p>
<p>Don't let the term <I>array</I> lead you to think 
<I>control array</I> is related to <I>VBA 
arrays</I>; they're completely different objects. Control arrays can only be one-dimensional. 
They don't need to be dimensioned: Each control you add automatically extends the 
array. The <I>Index</I> property identifies the position of each control in the control array 
it belongs to, but it's possible for a control array to have holes in the index 
sequence. The lowest possible value for the 
<I>Index</I> property is 0. You reference a control 
belonging to a control array as you would reference a standard array item:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Text1(0).Text = &quot;&quot;
</pre>
</td></tr>
</table>
</P>


<A NAME="107"><h2>Sharing Event Procedures</h2></A>

<p>Event procedures related to items in a control array are easily recognizable 
because they have an extra <I>Index</I> parameter, which precedes all other parameters. This 
extra parameter receives the index of the element that's raising the event, as you can 
see in this example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyPress(Index As Integer, KeyAscii As Integer)
    MsgBox &quot;A key has been pressed on Text1(&quot; &amp; Index &amp; &quot;) control&quot;
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The fact that multiple controls can share the same set of event procedures 
is often in itself a good reason to create a control array. For example, say that you 
want to change the background color of each of your TextBox controls to yellow when 
it receives the input focus and restore its background color to white when the user 
clicks on another field:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_GotFocus(Index As Integer)
    Text1(Index).BackColor = vbYellow
End Sub
Private Sub Text1_LostFocus(Index As Integer)
    Text1(Index).BackColor = vbWhite
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Control arrays are especially useful with groups of OptionButton controls 
because you can remember which element in the group has been activated by 
adding one line of code to their shared 
<I>Click</I> event. This saves code when the program 
needs to determine which button is the active one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A module-level variable
Dim optFrequencyIndex As Integer

Private Sub optFrequency_Click(Index As Integer)
    ' Remember the last button selected.
    optFrequencyIndex = Index
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="108"><h2>Creating Controls at Run Time</h2></A>

<p>Once you have created a control array at design time, even with just one item, 
it's straightforward to create new items at run time using the 
<I>Load</I> command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Suppose you created Text(0) at design time.
Load Text1(1)
' Move the new control where you need it, and resize it.
Text1(1).Move 1200, 2000, 800, 350
' Set other properties as required.
Text1(1).MaxLength = 10
...
' Finally make it visible.
Text1(1).Visible = True
</pre>
</td></tr>
</table>
</P>


<p>The <I>Load</I> command creates the new control with exactly the same set of 
properties that the first item of the 
array&#8212;<I>Text1(0</I>) in the preceding example&#8212;had at 
design time, including the position on the form. The only exception to this rule is that the 
<I>Visible</I> property for a control created in this way is always False because Visual Basic 
correctly expects that you want to move the new control to a different position before 
making it visible. Once you have dynamically added a control, it belongs to the control 
array and can be treated exactly like those controls created at design time.</p>
<p>You can remove controls from a control array using the 
<I>Unload</I> command, as in the following line of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Unload Text1(1)
</pre>
</td></tr>
</table>
</P>


<p>You can unload only controls that were added dynamically at run time; if 
you use the <I>Unload</I> command on an item of the array that had been created at 
design time, an error occurs. If you unload an item and then reload an item with the 
same index, you're actually creating a brand-new instance, which inherits its 
properties, size, and position from the first element in the array, as I explained previously.</p>

<A NAME="109"><h2>Iterating on the Items of a Control Array</h2></A>

<p>Control arrays often let you save many lines of code because you can execute 
the same statement, or group of statements, for every control in the array without 
having to duplicate the code for each distinct control. For example, you can clear 
the contents of all the items in an array of TextBox controls as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For i = txtFields.LBound To txtFields.UBound
    txtFields(i).Text = &quot;&quot;
Next
</pre>
</td></tr>
</table>
</P>


<p>Here you're using the <I>LBound </I>and 
<I>UBound</I> methods exposed by the 
<I>control array object,</I> which is an intermediate object used by Visual Basic to gather all 
the controls in the array. In general, you shouldn't use this approach to iterate over 
all the items in the array because if the array has holes in the Index sequence an 
error will be raised. A better way to loop over all the items of a control array is using 
the <I>For Each</I> statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim txt As TextBox
For Each txt In txtFields
    txt.Text = &quot;&quot;
Next
</pre>
</td></tr>
</table>
</P>


<p>A third method exposed by the control array object, 
<I>Count</I>, returns the number of elements it contains. It can be useful on several occasions (for example, 
when removing all the controls that were added dynamically at run time):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This code assumes that txtField(0) is the only control that was
' created at design time (you can't unload it at run time).
Do While txtFields.Count &gt; 1
    Unload txtFields(txtFields.UBound)
Loop
</pre>
</td></tr>
</table>
</P>


<A NAME="110"><h2>Arrays of Menu Items</h2></A>

<p>Control arrays are especially useful with menus because arrays offer a solution to 
the proliferation of menu <I>Click</I> events and, above all, permit you to create new 
menus at run time. An array of menu controls is conceptually similar to a regular control 
array, only you set the <I>Index</I> property to a numeric (non-negative) value in the Menu 
Editor instead of in the Properties window.</p>
<p>There are some limitations, though: All the items in an array of menu 
controls must be adjacent and must belong to the same menu level, and their 
<I>Index</I> properties must be in ascending order (even though holes in the sequence are 
allowed). This set of requirements severely hinders your ability to create new menu items 
at run time. In fact, you can create new menu items in well-defined positions of 
your menu hierarchy&#8212;namely, where you put a menu item with a nonzero 
<I>Index</I> value&#8212;but you can't create new submenus or new top-level menus.</p>

<p>Now that you have a thorough understanding of how Visual Basic's forms 
and controls work, you're ready to dive into the subtleties of the Visual Basic for 
Applications (VBA) language. The <a href="#A25">next chapter</a> is devoted to the many data types you can 
use in your programs. In <a href="#A30">Chapter 5</a>, I illustrate the many VBA functions and commands.</p>

<a name="A25"></a><h2>5.4 Chapter 4 -- Variables and Procedures</h2>

<A HREF="#A24">[Previous]</A> <A HREF="#A26">[Next]</A><P>


<font size="+3">Chapter 4</font>

<A NAME="111"><h1>Variables and Procedures</h1></A>
<p>Microsoft Visual Basic doesn't merely offer you a visual environment for creating 
your application's user interface in almost no time. It also includes a powerful 
programming language, Visual Basic for Applications (VBA), that lets you manipulate 
controls, files, databases, objects exposed by other applications, and so on. This 
chapter and the next one focus on many aspects of the VBA language, including a few 
under-documented features and several ways to improve performance. As usual, I 
assume that you're familiar with the basics of programming, so I won't spend too much 
time explaining what a variable is, the difference between integer and floating point 
types, and so on. This assumption lets me focus on the more interesting topics and the 
new features that have been introduced in Visual Basic 6.
</p>


<a name="A26"></a><h3>5.4.1 Scope and Lifetime of Variables</h3>

<A HREF="#A25">[Previous]</A> <A HREF="#A27">[Next]</A><P>

<A NAME="112"><h1>Scope and Lifetime of Variables</h1></A>
<p>Not all variables are born equal. Certain variables live for the entire life of the 
application, and others are created and destroyed a thousand times every second. A 
variable could be visible only from within a procedure or a module or could be 
in existence only during well-defined time windows over the lifetime of the 
application. To better define these concepts, I need to introduce two formal definitions.</p>

<UL>

<p><li> The <I>scope</I> (or <I>visibility</I>) of a variable is the portion of code from 
which that variable can be accessed. For example, a variable declared with 
the Public attribute in a BAS module is visible&#8212;and can therefore be read 
from and written to&#8212;from anywhere in the application, whereas if the 
variable is declared Private, it's visible only from within that BAS module.
</li></p>

<p><li> The <I>lifetime</I> of a variable is the time period during which that variable 
stays alive and uses memory. The lifetime of the Public variable described 
in the previous paragraph coincides with the application's life, but in 
general this isn't always the case. For instance, a local dynamic variable in 
a procedure is created each time Visual Basic executes that procedure 
and is destroyed when the procedure exits.
</li></p>
</ul>
 


<A NAME="113"><h2>Global Variables</h2></A>
<p>In Visual Basic jargon, global variables are those variables declared using the 
<I>Public </I>keyword in BAS modules. Conceptually, these variables are the simplest of the 
group because they survive for the life of the application and their scope is the entire 
application. (In other words, they can be read and modified from anywhere in 
the current program.) The following code snippet shows the declaration of a 
global variable:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a BAS module
Public InvoiceCount as Long    ' This is a global variable.
</pre>
</td></tr>
</table></p>

<p>Visual Basic 6 still supports the <I>Global</I> keyword for backward compatibility 
with Visual Basic 3 and previous versions, but Microsoft doesn't encourage its use.
</p>

<p>In general, it's a bad programming practice to use too many global 
variables. If possible, you should limit yourself to using module-level or local variables 
because they allow easier code reuse. If your modules and individual routines rely on 
global variables to communicate with each other, you can't reuse such code without 
also copying the definitions of the involved global variables. In practice, however, it's 
often impossible to build a nontrivial application without using global variables, so 
my suggestion is this: Use them sparingly and choose for them names that make 
their scope evident (for example, using a 
<I>g_</I> or <I>glo</I> prefix). Even more important, add 
clear comments stating which global variables are used or modified in each procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' NOTE: this procedure depends on the following global variables:
'     g_InvoiceCount  : number of invoices (read and modified)
'     g_UserName      : name of current user (read only)
Sub CreateNewInvoice()
    ...
End Sub
</pre>
</td></tr>
</table></p>

<p>An alternative approach, which I often find useful, is to define a 
special <I>GlobalUDT</I> structure that gathers all the global variables of the application and 
to declare one single global variable of type 
<I>GlobalUDT</I> in one BAS module:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a BAS module
Public Type GlobalUDT
    InvoiceCount As Long
    UserName As String
    ....
End Type
Public glo As GlobalUDT
</pre>
</td></tr>
</table></p>

<p>You can access these global variables using a very clear, unambiguous syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' From anywhere in the application
glo.InvoiceCount = glo.InvoiceCount + 1
</pre>
</td></tr>
</table></p>

<p>This technique has a number of advantages. First, the scope of the variable 
is evident by its name. Then if you don't remember the name of your variable, you 
can just type the three characters <I>glo</I>, and then type the dot and let Microsoft 
IntelliSense show you the list of all the components. In most cases, you just need to type a 
few characters and let Visual Basic complete the name for you. It's a tremendous 
time saver. The third advantage is that you can easily save all your global variables to 
a data file:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The same routine can save and load global data in GLO.
Sub SaveLoadGlobalData(filename As String, Save As Boolean)
    Dim filenum As Integer, isOpen As Boolean
    On Error Goto Error_Handler
    filenum = FreeFile
    Open filename For Binary As filenum
    isOpen = True
    If Save Then
        Put #filenum, , glo
    Else
        Get #filenum, , glo
    End If
Error_Handler:
    If isOpen Then Close #filenum
End Sub
</pre>
</td></tr>
</table></p>

<p>The beauty of this approach is that you can add and remove global 
variables&#8212;actually, components of the 
<I>GlobalUDT</I> structure&#8212;without modifying the 
<I>SaveLoadGlobalData</I> routine. (Of course, you can't correctly reload data stored with a 
different version of <I>GlobalUDT</I>.)
</p>

<A NAME="114"><h2>Module-Level Variables</h2></A>
<p>If you declare a variable using a 
<I>Private</I> or a <I>Dim</I> statement in the declaration 
section of a module&#8212;a standard BAS module, a form module, a class module, and 
so on&#8212;you're creating a private module-level variable. Such variables are visible 
only from within the module they belong to and can't be accessed from the outside. 
In general, these variables are useful for sharing data among procedures in the 
same module:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declarative section of any module
Private LoginTime As Date     ' A private module-level variable
Dim LoginPassword As String   ' Another private module-level variable
</pre>
</td></tr>
</table></p>

<p>You can also use the Public attribute for module-level variables, for all 
module types except BAS modules. (Public variables in BAS modules are global 
variables.) In this case, you're creating a strange beast: a Public module-level variable that can 
be accessed by all procedures in the module to share data and that also can be 
accessed from outside the module. In this case, however, it's more appropriate to describe 
such a variable as a <I>property</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declarative section of Form1 module
Public CustomerName As String          ' A Public property
</pre>
</td></tr>
</table></p>

<p>You can access a module property as a regular variable from inside the 
module and as a custom property from the outside:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' From outside Form1 module...
Form1.CustomerName = &quot;John Smith&quot;
</pre>
</td></tr>
</table></p>

<p>The lifetime of a module-level variable coincides with the lifetime of the 
module itself. Private variables in standard BAS modules live for the entire life of 
the application, even if they can be accessed only while Visual Basic is executing 
code in that module. Variables in form and class modules exist only when that module 
is loaded in memory. In other words, while a form is active (but not necessarily 
visible to the user) all its variables take some memory, and this memory is released only 
when the form is completely unloaded from memory. The next time the form is 
re-created, Visual Basic reallocates memory for all variables and resets them to their default 
values (0 for numeric values, &quot;&quot; for strings, Nothing for object variables).
</p>

<A NAME="115"><h2>Dynamic Local Variables</h2></A>
<p>Dynamic local variables are defined within a procedure; their scope is the 
procedure itself, and their lifetime coincides with that of the procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintInvoice()
    Dim text As String      ' This is a dynamic local variable.
    ...
End Sub
</pre>
</td></tr>
</table></p>

<p>Each time the procedure is executed, a local dynamic variable is re-created 
and initialized to its default value (0, an empty string, or Nothing). When the 
procedure is exited, the memory on the stack allocated by Visual Basic for the variable is 
released. Local variables make it possible to reuse code at the procedure level. If a 
procedure references only its parameters and its local variables (it relies on neither global 
nor module-level variables), it can be cut from one application and pasted into 
another without any dependency problem.
</p>

<A NAME="116"><h2>Static Local Variables</h2></A>
<p>Static local variables are a hybrid because they have the scope of local variables 
and the lifetime of module-level variables. Their value is preserved between calls to 
the procedure they belong to until their module is unloaded (or until the application 
ends, as is the case for procedures inside standard BAS modules). These variables 
are declared inside a procedure using the <I>Static 
</I>keyword:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintInvoice()
    Static InProgress As Boolean   ' This is a Static local variable.
    ...
End Sub
</pre>
</td></tr>
</table></p>

<p>Alternatively, you can declare the entire procedure to be Static, in which 
case all variables declared inside it are considered to be Static:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Static Sub PrintInvoice()
    Dim InProgress As Boolean      ' This is a Static local variable.
    ...
End Sub
</pre>
</td></tr>
</table></p>

<p>Static local variables are similar to private module-level variables, to the 
extent that you can move a <I>Static</I> declaration from inside a procedure to the declaration 
section of the module (you only need to convert 
<I>Static</I> to <I>Dim</I>, because <I>Static</I> isn't 
allowed outside procedures), and the procedure will continue to work as before. 
In general, you can't always do the opposite: Changing a module-level variable into 
a Static procedure-level variable works if that variable is referenced only inside that 
procedure. In a sense, a Static local variable is a module-level variable that doesn't 
need to be shared with other procedures. By keeping the variable declaration inside 
the procedure boundaries, you can reuse the procedure's code more easily.
</p>

<p>Static variables are often useful in preventing the procedure from being 
accidentally reentered. This is frequently necessary for event procedures, as when, 
for example, you don't want to process user clicks of the same button until the 
previous click has been served, as shown in the code below.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdSearch_Click()
    Static InProgress As Boolean
    ' Exit if there is a call in progress.
    If InProgress Then MsgBox &quot;Sorry, try again later&quot;: Exit Sub
    InProgress = True
    ' Do your search here.
      ...
    ' Then reenable calls before exiting.
    InProgress = False
End Sub
</pre>
</td></tr>
</table></p>


<a name="A27"></a><h3>5.4.2 Overview of Native Data Types</h3>

<A HREF="#A26">[Previous]</A> <A HREF="#A28">[Next]</A><P>

<A NAME="117"><h1>Overview of Native Data Types</h1></A>
<p>Visual Basic for Applications supports several native data types, including integer 
and floating point numbers, strings, date and time values, and so on. You can store 
data in a variable of the proper type, or you can use the Variant data type&#8212;the 
default type in VBA&#8212;which is a sort of jolly data type that's able to host any type of data.
</p>

<A NAME="118"><h2>The Integer Data Type</h2></A>
<p>Integer variables can hold integer values (whole numbers) included in the range 
from -32,768 through 32,767. These variables are also known as 16-bit integers 
because each value of this type takes 2 bytes of memory.
</p>

<p>Integer variables were probably the most used type of variables, at least 
until Visual Basic made its debut on 32-bit Microsoft Windows platforms. For all 
practical purposes, in a 32-bit environment you can use a Long value instead of an Integer 
value without a performance hit, at the same time reducing the probability of an 
overflow error when the value of your variable outgrows the valid range of Integers. One 
of the few occasions when Integers should be preferred to Longs is when you 
create very large arrays. In all other cases, I suggest you use Long values, unless you 
have good reasons not to do so (as when you're calling an external program or a DLL 
that expects an Integer).
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
You can indirectly specify that an undeclared variable is of type 
Integer by appending a <I>%</I> symbol to its name. However, this feature is 
supported by Visual Basic 6 only for compatibility with older Visual Basic and 
QuickBasic programs. All new applications should exclusively use variables declared in 
an explicit way. The same suggestion of course applies to other data types, 
including Long (&amp;), Single(!), Double(#), Currency(@), and String($).
</blockquote></div>
</p>

<p>All the integer constants in your code are implicitly of type Integer, unless 
their value is outside the range for this data type, in which case they are stored as Long.
</p>

<A NAME="119"><h2>The Long Data Type</h2></A>
<p>Long variables can hold integer values in the range from 
-2,147,483,648 through 2,147,483,647 and are also known as 32-bit integers because each value takes 4 
bytes of memory. As I mentioned previously, you're encouraged to use Longs in 
your applications as the preferred data type for integer values. Long variables are as 
fast as Integer variables, and in most cases they prevent the program from breaking 
when dealing with numbers larger than expected. One example is when you have to 
process strings longer than 32,767 characters: In this case, you must use a Long 
index instead of an Integer variable. Watch out for this quirk when you convert code 
written for older Visual Basic versions.
</p>

<p>As I explained previously, you are strongly advised not to declare Long 
variables with a trailing <I>&amp;</I> character in their names. However, it's common practice 
to append an <I>&amp;</I> symbol to those constants that would be stored as Integer but that 
you want the compiler to explicitly interpret as Long. Sometimes the difference can 
be important:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Result = value And &amp;HFFFF     ' here &amp;HFFFF means -1 
Result = value And &amp;HFFFF&amp;    ' here &amp;HFFFF&amp; means 65535
</pre>
</td></tr>
</table></p>

<p>If you don't want to concentrate on such microscopic details, just declare 
an explicit constant:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Const LOWWORD_MASK As Long = &amp;HFFFF&amp;
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
For historical reasons, Visual Basic lets you enforce a particular 
data type as the default data type using the 
Def<I>type</I> directive, so you might be tempted to use the 
<I>DefLng A-Z</I> directive at the beginning of each module to ensure that 
all undeclared variables are Long. My advice is: 
<I>don't do that!</I> Using Def<I>type</I> directives instead of carefully declaring all your variables is a dangerous 
practice. Moreover, Def<I>type</I> directives impair code reusability in that you can't safely 
cut and paste code from one module to another without also copying the directive.
</blockquote></div>
</p>

<A NAME="120"><h2>The Boolean Data Type</h2></A>
<p>Boolean variables are nothing but Integers that can hold only values 0 and -1, 
which stand for False and True, respectively. When you use a Boolean, you are 
actually wasting 15 out of 16 bits in the variable, because this information could be easily 
held in one single bit. That said, I suggest you use Boolean instead of Integer 
variables whenever it makes sense to do so because this increases the readability of your 
code. On a few occasions, I have also experienced a slight improvement in 
performance, but usually it's negligible and shouldn't be a decisive factor.
</p>

<A NAME="121"><h2>The Byte Data Type</h2></A>
<p>Byte variables can hold an integer numeric value in the range 0 through 255. 
They take only one byte (8 bits) each and are therefore the smallest data type allowed 
by Visual Basic. Visual Basic 4 introduced the Byte data type to ease the porting of 
16-bit applications to Windows 95 and Microsoft Windows NT. Specifically, while 
Visual Basic 4 for the 32-bit platform and later versions are source-code compatible 
with Visual Basic 3 and Visual Basic 4 for the 16-bit platform applications, they store 
their strings in Unicode instead of ANSI format. This difference raised a problem with 
strings passed to API functions because Visual Basic 3 programmers used to store binary 
data in strings for passing it to the operating system, but the Unicode-to-ANSI 
automatic conversion performed by Visual Basic makes it impossible to port this code to 
32-bit without any significant change.
</p>

<p>To make a long story short, the Byte data type was added to Visual Basic 
primarily to solve this problem. Apart from this advanced use, you should use Byte 
values only when you're dealing with arrays holding binary data. For individual values, 
an Integer or a Long variable is usually a better choice.
</p>

<A NAME="122"><h2>The Single Data Type</h2></A>
<p>Single variables can hold decimal values in the range from 
-3.402823E38 through -1.401298E-45 for negative values and 1.401298E-45 through 3.402823E38 for 
positive values. They take 4 bytes and are the simplest (and least precise) of the 
floating point data types allowed by Visual Basic.
</p>

<p>Contrary to what many programmers believe, Single variables aren't faster 
than Double variables, at least on the majority of Windows machines. The reason is 
that on most systems, all floating point operations are performed by the math 
coprocessor, and the time spent doing the calculations is independent of the original 
format of the number. This means that in most cases you should go with Double 
values because they offer a better precision, a wider range, fewer overflow problems, 
and no performance hit.
</p>

<p>The Single data type is a good choice when you're dealing with large arrays 
of floating point values, and you can be satisfied with its precision and valid range. 
Another good occasion to use the Single data type is when you're doing intensive 
graphical work on your forms and in PictureBox controls. In fact, all the properties 
and methods that deal with coordinates&#8212;including 
<I>CurrentX/Y</I>, <I>Line</I>, <I>Circle</I>, 
<I>ScaleWidth</I>, <I>ScaleHeight</I>, and so on&#8212;use values of type Single. So you might save Visual 
Basic some conversion work if you store your coordinate pairs in Single variables.
</p>

<A NAME="123"><h2>The Double Data Type</h2></A>
<p>Double variables can hold a floating point value in the range 
-1.79769313486232E308 through -4.94065645841247E-324 for negative values and 
4.9406564581247E-324 through 1.79769313486232E308 for positive values. They take 8 bytes and in 
most cases are the preferable choice when you're dealing with decimal values. A few 
built-in Visual Basic functions return Double values. For example, the 
<I>Val</I> function always returns a Double value, even if the string argument doesn't include a decimal 
point. For this reason, you might want to store the result from such functions in a 
Double variable, which saves Visual Basic an additional conversion at run time.
</p>

<A NAME="124"><h2>The String Data Type</h2></A>
<p>All 32-bit flavors of Visual Basic&#8212;Visual Basic 4 for 32-bit platforms, 5, and 
6&#8212;store strings of characters in Unicode format, while all previous versions used the 
ANSI format. The difference is that Unicode uses two bytes for each character, so 
theoretically a Unicode character can assume as many as 65,536 different values. This 
makes Unicode strings ideal for writing code that displays its messages in non-Latin 
alphabets, such as Chinese, Japanese, and Hebraic. If you don't localize your software 
in these alphabets, you'll probably look at Unicode strings mainly as a way to 
waste memory in your program, especially if you use many long strings. Note that 
Windows NT and some portions of Windows 95/98 use Unicode strings.
</p>

<p>Visual Basic manages two different types of strings: conventional 
variable-length strings and fixed-length strings. You declare them in different ways:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim VarLenStr As String
Dim FixedLenStr As String * 40
</pre>
</td></tr>
</table></p>

<p>The first, obvious difference is that in any given moment a variable-length 
string takes only the memory that it needs for its characters (actually, it takes 10 
additional bytes for holding other information about the string, including its length), 
whereas a fixed-length string always takes a fixed amount of memory (80 bytes, in the 
preceding example).
</p>

<p>If you are a performance-savvy programmer, you should remember that 
conventional strings are <I>usually </I>faster than fixed-length string. This happens because 
all VBA native string functions can deal only with variable-length strings. In a sense, 
a fixed-length string is something that VBA isn't even aware of: When you pass a 
fixed-length string to a VBA function, the compiler generates hidden statements that 
convert that argument into a temporary variable-length string.
</p>

<p>But even with all this overhead, fixed-length strings aren't always going to 
make your programs slower. For one, Visual Basic excels at allocating and releasing 
memory for fixed-length strings, so if your program spends a lot of time assigning new 
values to variables or creates large string arrays, fixed-length strings might prove 
even faster than conventional ones. Just to give you an example, on a 233-KHz 
system Visual Basic 6 takes about 9 seconds to load 100,000 30-character strings into 
a conventional string array, and 0.4 seconds to remove them. Both operations 
are completed almost instantaneously if performed on an array of fixed-length strings.
</p>

<p>String constants are enclosed within quotes, and you can embed quotes 
within the string by doubling them:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print &quot;&lt;My Name Is &quot;&quot;Tarzan&quot;&quot;&gt;&quot;     ' displays  &lt;My Name Is &quot;Tarzan&quot;&gt;
</pre>
</td></tr>
</table></p>

<p>Visual Basic additionally defines a number of intrinsic string constants, such 
as <I>vbTab</I> (the Tab character) or <I>vbCrLf 
</I>(the carriage return-line feed pair). Using 
these constants usually improves the readability of your code as well as its 
performance because you don't have to use a 
<I>Chr</I> function to create the strings.
</p>

<A NAME="125"><h2>The Currency Data Type</h2></A>
<p>Currency variables can hold decimal values in a 
fixed-point format, in the range from  -922,337,203,685,477.5808 through 922,337,203,685,477.5807. They differ 
from floating-point variables, such as Single and Double, in that they always include 
four decimal digits. You can think of a currency value as a big integer that's 8 bytes 
long and whose value is automatically scaled by a factor of 10,000 
when it's assigned to the variable and when it's read back and displayed to the user.
</p>

<p>Using a fixed-point value has its advantages over floating-point variables. 
For one, Currency values suffer less from the rounding problems that you often 
experience using Double values. When you're adding or subtracting values, 
however, Currency variables don't offer a performance advantage, and multiplying and 
dividing Currency values is about five times slower than doing the same for Double 
values. Keep this in mind if your application does a lot of math.
</p>

<A NAME="126"><h2>The Date Data Type</h2></A>
<p>Date variables can hold any date between January 1, 100, through December 31, 
9999, as well as any time value. They take 8 bytes, exactly like Double variables. This 
isn't a casual resemblance because internally these date/time values are stored as 
floating-point numbers, in which the integer part stores the date information and the 
decimal part stores the time information. (For example, 0.5 means 12 
A.M., 0.75 means 6 P.M., and so on.) Once you know how Date variables store their values, you 
can perform many meaningful math operations on them. For example, you can 
truncate date or time information using the 
<I>Int</I> function, as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MyVar = Now                    ' MyVar is a Date variable.
DateVar = Int(MyVar)           ' Extract date information.
TimeVar = MyVar - Int(MyVar)   ' Extract time information.
</pre>
</td></tr>
</table></p>

<p>You can also add and subtract dates, as you would do with numbers:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MyVar = MyVar + 7              ' Advance one week.
MyVar = MyVar - 365            ' Go back one (nonleap) year.
</pre>
</td></tr>
</table></p>

<p>VBA provides many functions for dealing with date and time information in 
more advanced ways, which I'll cover in <a href="#A30">Chapter 5</a>. You can also define a Date 
constant using the format <I>#mm/dd/yyyy#</I>, with or without a time portion:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MyVar = #9/5/1996 12.20 am#
</pre>
</td></tr>
</table></p>

<A NAME="127"><h2>The Object Data Type</h2></A>
<p>Visual Basic uses object variables to store reference objects. Note that here we 
are talking about storing a <I>reference </I>to an object, not storing an 
<I>object</I>. The difference is subtle but important, and I'll talk about it at length in <a href="#A37">Chapter 6</a>. There are 
several types of object variables, but they can be grouped in two broad categories: 
<I>generic </I>object variables and <I>specific 
</I>object variables. Here are a few examples:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Examples of generic object variables
Dim frm As Form            ' A reference to any form
Dim midfrm As MDIForm      ' A reference to any MDI form
Dim ctrl As Control        ' A reference to any control
Dim obj As Object          ' A reference to any object
' Examples of specific object variables
Dim inv As frmInvoice      ' A reference to a specific type of form
Dim txtSalary As TextBox   ' A reference to a specific type of control
Dim cust As CCustomer      ' A reference to an object defined by a
                           ' class module in the current project
Dim wrk As Excel.Worksheet ' A reference to an external object
</pre>
</td></tr>
</table></p>

<p>The most evident difference when dealing with object variables (as 
opposed to regular variables) is that you assign object references to them using the 
<I>Set</I> keyword, as in the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set frm = Form1
Set txtSalary = Text1
</pre>
</td></tr>
</table></p>

<p>After the assignment, you can use the object variable to access the 
original object's properties and methods:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>frm.Caption = &quot;Welcome to Visual Basic 6&quot;
txtSalary.Text = Format(99000, &quot;currency&quot;)
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>One of the most common errors that programmers make when 
dealing with object variables is omitting the 
<I>Set</I> command during assignments. What happens if you omit this keyword depends on the object involved. If it 
doesn't support a default property, Visual Basic raises a compile-time error (&quot;Invalid 
use of property&quot;); otherwise, the assignment succeeds, but the result won't be 
the one you expect:

<p>
<table>
<tr><td>
<pre>frm = Form1           ' A missing Set raises a compiler error.
txtSalary = Text1     ' A missing Set assigns Text1's Text property
                      ' to txtSalary's Text property.
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<p>Object variables can also be cleared so that they don't point to any 
particular object anymore. You do this by assigning them the special 
Nothing value:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set txtSalary = Nothing
</pre>
</td></tr>
</table></p>

<A NAME="128"><h2>The Variant Data Type</h2></A>
<p>Variant variables were introduced in Visual Basic 3, but their internal format 
changed in version 4, where their capabilities were greatly enhanced. The Variant format 
is defined by OLE, and so it's highly unlikely that it will be modified again in the 
future. Variant variables can hold any type of data described so far, and then 
some. Variables of this type take 16 bytes, in this format:
</p>

<p>
<A HREF="javascript:fullSize('G04ph01x.htm')"> <img src="G04ph01.JPG" width=404 height=46 border=0 ALT = "Click to view at full size."> </A>
</p>

<p>Bytes 0 and 1 hold an integer value that states which type of data is stored 
in bytes 8 through 15. Bytes 2 through 7 are unused (with only one exception, 
the Decimal subtype), and in most cases not all the bytes in the second half of the 
variable are used. For example, if a Variant holds an Integer value, the first two 
bytes contain the value 2-vbInteger, bytes 8 and 9 hold the actual 16-bit value, and all 
other bytes are unused.
</p>

<p>A Variant variable holds a value in its original format and doesn't enforce a 
metaformat that encompasses all the data types supported by Visual Basic. For 
example, when Visual Basic adds numbers held in two Variant variables, it checks their 
type and uses the most efficient math routine possible. And so, if you're adding two 
Variants that hold one Integer and one Long, Visual Basic promotes the Integer to 
Long and then invokes the routine for addition between Longs.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Automatic data coercion is always dangerous because you 
might not get the results that you expect. For example, if you use the 
+ operator on two Variants that hold numeric values, Visual Basic interprets the 
+ as the addition operator. If both values are strings, Visual Basic interprets the 
+ as the append operator. When one data type is a string and the other is a number, 
Visual Basic tries to convert the string to a number so that an addition can be 
performed; if this isn't possible, a &quot;Type Mismatch&quot; error is raised. If you want to be sure 
to execute an append operation regardless of the data types involved, use the 
&amp; operator. Finally note that you can't store fixed-length strings in Variant variables.
</blockquote></div>
</p>

<p>Variant is the default data type for Visual Basic. In other words, if you use 
a variable without declaring its type, as in the following line of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre> Dim MyVariable
</pre>
</td></tr>
</table></p>

<p>this will be a Variant variable, unless this line is preceded by a 
<I>Def</I>type<I> </I>directive that sets a different default data type. Likewise, if you use a variable without first 
declaring it (and you don't use a 
<I>Def</I>type<I> </I>directive), Visual Basic creates a Variant variable.
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
If I could give only one suggestion to novice Visual Basic 
programmers, it would be this: <I>Always </I>add an 
<I>Option Explicit</I> directive at the beginning of 
every module in your programs. Even better, enable the Require Variable 
Declaration option in the General tab of the Options dialog box from the Tools 
menu so that Visual Basic automatically adds this directive whenever you create a 
new module. I can't overestimate the importance of having Visual Basic check for 
you that you haven't accidentally misspelled a variable's name. Be aware that 
some template projects create modules that lack the 
<I>Option Explicit </I>directive.
</blockquote></div>
</p>

<p>The type of data actually stored in a Variant variable depends on the last 
assignment to it. You can test the type of the current contents of such a Variable 
using the <I>VarType</I> function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim v As Variant
v = True
Print VarType(v)     ' Prints &quot;11&quot;, that is vbBoolean
</pre>
</td></tr>
</table></p>

<p>Variant variables can also host special values that don't correspond to any 
data values described so far. The <I>Empty</I><B> 
</B>value is the state of a Variant variable when 
nothing has been assigned to it yet. You can test this special value using the 
<I>IsEmpty</I> function, or you can test the 
<I>VarType</I> function for the value 0-vbEmpty:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim v As Variant
Print IsEmpty(v)     ' Prints &quot;True&quot; (uninitialized variant).
v = &quot;any value&quot;      ' The variant isn't empty anymore.
v = Empty            ' Restore the Empty state using the Empty constant.
</pre>
</td></tr>
</table></p>

<p>The Null value is useful in database programming to mark fields that 
don't contain a value. You can explicitly assign the Null value to a Variant using the 
Null<I> </I>constant, test for a Null value using the 
<I>IsNull</I> function, or compare the return 
value of the <I>VarType</I> function with the value 1-vbNull:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>v = Null             ' Stores a Null value
Print IsNull(v)      ' Prints &quot;True&quot;
</pre>
</td></tr>
</table></p>

<p>Variant variables can also contain an Error value. This is useful, for example, 
if you want a routine to return a meaningful value if it succeeds or an error value if 
it doesn't. In this case, you declare a function that returns a Variant value: if no 
error occurs, you return the result. Otherwise, you use the 
<I>CVErr</I> function to create a Variant of subtype Error:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Reciprocal(n As Double) As Variant
    If n &lt;&gt; 0 Then
        Reciprocal = 1 / n
    Else
        Reciprocal = CVErr(11)    ' Division By Zero error code
    End If
End Function
</pre>
</td></tr>
</table></p>

<p>You can test the Error subtype using the 
<I>IsError</I> function or by comparing the return value of 
<I>VarType</I> with the value 10-vbError. Error codes must be in the 
range 0 through 65535. To convert the error code into an integer, you can use the 
<I>CLng</I> function. Here's the typical client code for a function that could return an error 
code in a Variant:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim res As Variant
res = Reciprocal(CDbl(Text1.Text))
If IsError(res) Then
    MsgBox &quot;Error #&quot; &amp; CLng(res)
Else
    MsgBox &quot;Result is &quot; &amp; res
End If
</pre>
</td></tr>
</table></p>

<p>I'm reporting this style of error trapping exclusively for the sake of 
completeness. My advice, in fact, is that you should never use this approach for error 
management; rather, you should rely on the Err object, which is able to convey 
more information about errors.
</p>

<p>Variant variables can also host object values. You must assign object values 
using the <I>Set</I> keyword; otherwise, the results are unpredictable, as this short code 
snippet demonstrates:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim v As Variant
Set v = Text1      ' A correct object assignment that uses Set
v.Text = &quot;abcde&quot;   ' This works, because V points to Text1.
v = Text1          ' Wrong object assignment, Set is omitted.
                   ' Actually, it assigns the value of default property
                   ' and is equivalent to v = Text1.Text
Print v            ' Displays &quot;abcde&quot;
v.Text = &quot;12345&quot;   ' Error 424: Object Required
</pre>
</td></tr>
</table></p>

<p>You can test whether a Variant holds an object using the 
<I>IsObject</I> function. Don't use 
<I>VarType</I> to test whether a Variant variable holds an object reference. In fact, 
if the object supports a default property, the 
<I>VarType</I> function returns the type of that property, not the 
<I>vbObject </I>constant.
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Starting with Visual Basic 6, Variant variables can also hold 
<I>user-defined type</I> (UDT) structures, and the 
<I>VarType</I> function can return the new value 
36vbUserDefinedType. But this capability is available only if the 
<I>Type</I> statement that defines the UDT structure appears with the Public scope attribute in a Public class module. 
You can't assign UDT structures to Variant variables within Standard EXE projects because they 
can't expose Public class modules.
</p>

<p>You can use other functions to test the type of the value stored in a 
Variant variable. The <I>IsNumeric</I> function returns True if the value can be successfully 
converted to a number using the <I>CDbl</I> function, even if the native format is 
different. (The Variant variable holds a string, for example.) The 
<I>IsDate</I> function checks whether the value can be successfully converted to a date using the 
<I>CDate</I> function. Finally, the 
<I>TypeName</I> function is similar to 
<I>VarType</I> but returns the current data type as 
a readable string:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>v = 123.45: Print TypeName(v)       ' Displays &quot;Double&quot;
Set v = Text1: Print TypeName(v)    ' Displays &quot;TextBox&quot;
</pre>
</td></tr>
</table></p>

<p>One last point: Variant variables can also hold arrays. For more information, 
read the section about arrays later in this chapter.
</p>

<A NAME="129"><h2>The Decimal Data Type</h2></A>
<p>Decimal is a floating-point data type with a higher precision than Double, but 
it has a smaller range. In fact, you can store values in the range plus or 
minus 79,228,162,514,264,337,593,543,950,335 with no decimal point, or plus or 
minus 7.9228162514264337593543950335 with 28 places to the right of the decimal 
point. The smallest nonzero number is plus or minus 
0.0000000000000000000000000001. Decimal is a singular case among the data types supported by Visual Basic in 
that you can't explicitly declare a variable using 
<I>As Decimal</I>. Instead, you assign a value to a Variant variable using the 
<I>CDec</I> conversion function, for example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim v As Variant
v = CDec(Text1.Text)
</pre>
</td></tr>
</table></p>

<p>Once you have assigned a Decimal value to a Variant, you can perform all 
the usual math operations. You don't need to ensure that both operands are of 
Decimal type because Visual Basic will do the necessary conversions for you. Decimal is 
an exception among Variant subtypes in that it exploits all the bytes in the 
Variant structure, that is, all 14 bytes that follow the subtype identifier. If you apply 
the <I>VarType</I> function to a Variant containing a Decimal value, you get the return 
value of <I>14-vbDecimal</I>.
</p>


<a name="A28"></a><h3>5.4.3 Aggregate Data Types</h3>

<A HREF="#A27">[Previous]</A> <A HREF="#A29">[Next]</A><P>

<A NAME="130"><h1>Aggregate Data Types</h1></A>
<p>The native data types we have examined so far have been simple. While useful 
in their own right, they can also serve as building blocks to form aggregate data 
types. In this section, we examine this concept more closely.
</p>

<A NAME="131"><h2>User-Defined Types</h2></A>
<p>A user-defined type (UDT) is a compound data structure that holds several 
variables of simpler data types. Before you can use a UDT variable, you must first define 
its structure, using a <I>Type</I> directive in the declaration section of a module:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Type EmployeeUDT
    Name As String
    DepartmentID As Long
    Salary As Currency
End Type
</pre>
</td></tr>
</table></p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>UDTs can be declared as Private or Public. Under Visual Basic 5 or 
previous versions, only UDTs declared in BAS modules can be Public. In Visual Basic 6, 
all modules except forms can include Public UDT definitions, provided that the 
project type isn't Standard EXE and that the class isn't Private. For more information, 
see <a href="#A100">Chapter 16</a>.
</p>

<p>Once you have defined a Type structure, you can create variables of that 
type as you would do with any Visual Basic native type. You can then access its 
individual items using the dot syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Emp As EmployeeUDT
Emp.Name = &quot;Roscoe Powell&quot;
Emp.DepartmentID = 123
</pre>
</td></tr>
</table></p>

<p>UDTs can contain both conventional and fixed-length strings. In the former 
case, the structure in memory holds just a pointer to the actual data, whereas in the 
latter case the strings' characters are stored in the same block as the other items of the  
UDT structure. This is reflected by the 
<I>LenB</I> function, which you can use on any 
UDT variable to learn the number of actual bytes used:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print LenB(Emp)     ' Prints 16: 4 for Name, regardless of its length +
                    ' 4 for DepartmentID (Long) + 8 for Salary (Currency)
</pre>
</td></tr>
</table></p>

<p>Type structures can also contain substructures, for example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Type LocationUDT
    Address As String
    City As String
    Zip As String
    State As String * 2
End Type
Private Type EmployeeUDT
    Name As String
    DepartmentID As Long
    Salary As Currency
    Location As LocationUDT
End Type
</pre>
</td></tr>
</table></p>

<p>When you access such nested structures, you can resort to the 
<I>With&#8230;End</I> <I>With</I> clause to produce more readable code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With Emp
    Print .Name
    Print .Salary 
    With .Location
        Print .Address
        Print .City &amp; &quot;  &quot; &amp; .Zip &amp; &quot;  &quot; &amp; .State
    End With
End Type
</pre>
</td></tr>
</table></p>

<p>When you're working with a complex UDT, assigning a value to all its 
individual components is often a nuisance. Fortunately, since VBA supports functions that 
return UDTs, you can write support procedures that considerably simplify the job:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Emp = InitEmployee(&quot;Roscoe Powell&quot;, 123, 80000)
...
Function InitEmployee(Name As String, DepartmentID As Long, _
    Salary As Currency) As EmployeeUDT
    InitEmployee.Name = Name 
    InitEmployee.DepartmentID = DepartmentID
    InitEmployee.Salary = Salary
End Function
</pre>
</td></tr>
</table></p>

<p>Visual Basic lets you copy one UDT to another UDT with the same 
structure using a regular assignment, as in the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim emp1 As EmployeeUDT, emp2 As EmployeeUDT
...
emp2 = emp1
</pre>
</td></tr>
</table></p>

<A NAME="132"><h2>Arrays</h2></A>
<p>Arrays are ordered sets of homogeneous items. Visual Basic supports arrays 
made up of elementary data types. You can build one-dimensional arrays, 
two-dimensional arrays, and so on, up to 60 dimensions. (I never met a programmer who bumped 
into this limit in a real application, though.)
</p>

<A NAME="133"><h3>Static and dynamic arrays</h3></A>
<p>Basically, you can create either <I>static</I> or 
<I>dynamic</I> arrays. Static arrays must include a fixed number of items, and this number must be known at compile time so 
that the compiler can set aside the necessary amount of memory. You create a static 
array using a <I>Dim</I> statement with a constant argument:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is a static array. 
Dim Names(100) As String
</pre>
</td></tr>
</table></p>

<p>Visual Basic starts indexing the array with 0. Therefore, the preceding 
array actually holds 101 items.
</p>

<p>Most programs don't use static arrays because programmers rarely know 
at compile time how many items you need and also because static arrays can't be 
resized during execution. Both these issues are solved by dynamic arrays. You declare 
and create dynamic arrays in two distinct steps. In general, you 
<I>declare </I>the array to 
account for its visibility (for example, at the beginning of a module if you 
want 
to make it visible by all the procedures of the module) using a 
<I>Dim</I> command with an empty pair of brackets. Then you 
<I>create </I>the array when you actually need it, 
using a <I>ReDim</I> statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' An array defined in a BAS module (with Private scope)
Dim Customers() As String
...
Sub Main()
    ' Here you create the array.
    ReDim Customer(1000) As String
End Sub
</pre>
</td></tr>
</table></p>

<p>If you're creating an array that's local to a procedure, you can do 
everything with a single <I>ReDim</I> statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintReport()
    ' This array is visible only to the procedure.
    ReDim Customers(1000) As String
    ' ...
End Sub
</pre>
</td></tr>
</table></p>

<p>If you don't specify the lower index of an array, Visual Basic assumes it to 
be 0, unless an <I>Option Base 1</I> statement is placed at the beginning of the module. 
My suggestion is this: Never use an Option Base statement because it makes code 
reuse more difficult. (You can't cut and paste routines without worrying about the 
current Option Base.) If you want to explicitly use a lower index different from 0, use 
this syntax instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ReDim Customers(1 To 1000) As String
</pre>
</td></tr>
</table></p>

<p>Dynamic arrays can be re-created at will, each time with a different number 
of items. When you re-create a dynamic array, its contents are reset to 0 (or to an 
empty string) and you lose the data it contains. If you want to resize an array without 
losing its contents, use the <I>ReDim 
Preserve</I> command:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ReDim Preserve Customers(2000) As String
</pre>
</td></tr>
</table></p>

<p>When you're resizing an array, you can't change the number of its 
dimensions nor the type of the values it contains. Moreover, when you're using 
<I>ReDim Preserve</I> on a multidimensional array, you can resize only its last dimension:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ReDim Cells(1 To 100, 10) As Integer
...
ReDim Preserve Cells(1 To 100, 20) As Integer    ' This works.
ReDim Preserve Cells(1 To 200, 20) As Integer    ' This doesn't.
</pre>
</td></tr>
</table></p>

<p>Finally, you can destroy an array using the <I>Erase 
</I>statement. If the array is dynamic, Visual Basic releases the memory allocated for its elements (and you can't 
read or write them any longer); if the array is static, its elements are set to 0 or to empty strings.
</p>

<p>You can use the <I>LBound</I> and 
<I>UBound</I> functions to retrieve the lower and 
upper indices. If the array has two or more dimensions, you need to pass a 
second argument to these functions to specify the dimension you need:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print LBound(Cells, 1)   ' Displays 1, lower index of 1st dimension
Print LBound(Cells)      ' Same as above
Print UBound(Cells, 2)   ' Displays 20, upper index of 2nd dimension
' Evaluate total number of elements.
NumEls = (UBound(Cells) _ LBound(Cells) + 1) * _
    (UBound(Cells, 2) _ LBound(Cells, 2) + 1)
</pre>
</td></tr>
</table></p>

<A NAME="134"><h3>Arrays within UDTs</h3></A>
<p>UDT structures can include both static and dynamic arrays. Here's a sample 
structure that contains both types:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Type MyUDT
    StaticArr(100) As Long
    DynamicArr() As Long
End Type
...
Dim udt As MyUDT
' You must DIMension the dynamic array before using it.
ReDim udt.DynamicArr(100) As Long
' You don't have to do that with static arrays.
udt.StaticArr(1) = 1234
</pre>
</td></tr>
</table></p>

<p>The memory needed by a static array is allocated within the UDT 
structure; for example, the <I>StaticArr</I> array in the preceding code snippet takes exactly 
400 bytes. Conversely, a dynamic array in a UDT takes only 4 bytes, which form a 
pointer to the memory area where the actual data is stored. Dynamic arrays are 
advantageous when each individual UDT variable might host a different number of 
array items. As with all dynamic arrays, if you don't dimension a dynamic array within 
a UDT before accessing its items, you get an error 9&#8212;&quot;Subscript out of range.&quot;
</p>

<A NAME="135"><h3>Arrays and variants</h3></A>
<p>Visual Basic lets you store arrays in Variant variables and then access the array 
items using the Variant variable as if it were an array:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ReDim Names(100) As String, var As Variant
' Initialize the Names array (omitted).
var = Names()        ' Copy the array into the Variant.
Print var(1)         ' Access array items through the Variant.
</pre>
</td></tr>
</table></p>

<p>You can even create an array of Variant elements on the fly using the 
<I>Array</I> function and store it in a Variant variable:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Arrays returned by the Array() function are zero-based.
Factorials = Array(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800)
</pre>
</td></tr>
</table></p>

<p>Likewise, you can pass an array to a procedure that expects a 
<I>Variant</I> parameter and then access the elements of the array through that parameter:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A polymorphic function that sums the values in any array
Function ArraySum(arr As Variant) As Variant
    Dim i As Long, result As Variant
    For i = LBound(arr) To UBound(arr)
        result = result + arr(i)
    Next
    ArraySum = result
End Function
</pre>
</td></tr>
</table></p>

<p>The most interesting feature of the preceding routine is that it works 
correctly with <I>any </I>type of numeric one-dimensional array. It even works with String 
arrays, but in that case you get the concatenation of all items, not their sum. This 
procedure is extremely powerful and reduces the amount of code you have to write to deal 
with different kinds of arrays. But you should be aware that accessing array items 
through a <I>Variant</I> parameter noticeably slows down the execution. If you need the best 
performance, write specific routines that process specific types of arrays.
</p>

<p>You can also pass a multidimensional array to a routine that expects a 
<I>Variant</I> parameter. In this case, you can still access the array elements through the 
Variants, but if you don't know at compile time how many dimensions the array has, 
your routine has to determine that number before proceeding. You can get this value 
using a trial-and-error approach:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This routine returns the number of dimensions of the array
' passed as an argument, or 0 if it isn't an array.
Function NumberOfDims(arr As Variant) As Integer
    Dim dummy as Long
    On Error Resume Next
    Do
        dummy = UBound(arr, NumberOfDims + 1)
        If Err Then Exit Do
        NumberOfDims = NumberOfDims + 1
    Loop
End Function
</pre>
</td></tr>
</table></p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
It's perfectly legal to use the function name inside a function's code as if 
it were a local variable, as the previous code snippet does. Often this 
technique lets you save a local variable and a final assignment before exiting the 
routine, which indirectly makes your code run slightly faster.
</blockquote></div>
</p>

<p>Here's a modified <I>ArraySum</I> routine that uses 
<I>NumberOfDims</I> and works with both one- and two-dimensional arrays:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function ArraySum2(arr As Variant) As Variant
    Dim i As Long, j As Long, result As Variant
    ' First check whether we can really work with this array.
    Select Case NumberOfDims(arr)
        Case 1       ' One-dimensional array
            For i = LBound(arr) To UBound(arr)
                result = result + arr(i)
            Next
        Case 2       ' Two-dimensional array
            For i = LBound(arr) To UBound(arr)
                For j = LBound(arr, 2) To UBound(arr, 2)
                    result = result + arr(i, j)
                Next
            Next
        Case Else   ' Not an array, or too many dimensions
            Err.Raise 1001, , &quot;Not an array or more than two dimensions&quot;
    End Select
    ArraySum2 = result
End Function
</pre>
</td></tr>
</table></p>

<p>Often, if a Variant contains an array, you don't know the basic type of that 
array in advance. The <I>VarType</I> function returns the sum of the 
<I>vbArray</I> constant (decimal 8192), plus the 
<I>VarType</I> of the data included in the array. This lets you test that 
the array passed to a routine is of a given type:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If VarType(arr) = (vbArray + vbInteger) Then 
    ' Array of integers
ElseIf VarType(arr) = (vbArray + vbLong) Then
    ' Array of Longs
ElseIf VarType(arr) And vbArray Then
    ' An array of another type (just tests a bit)
End If
</pre>
</td></tr>
</table></p>

<p>You can also test whether a Variant holds an array using the 
<I>IsArray</I> function. When a Variant variable holds an array, the 
<I>TypeName</I> function appends a pair of empty parentheses to its result:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print TypeName(arr)      ' Displays &quot;Integer()&quot;
</pre>
</td></tr>
</table></p>

<p>As I've explained, you can either assign an array to a Variant variable or 
you can pass an array as a Variant parameter of a procedure. While the two 
operations look very similar, they're substantially different. To execute an assignment, Visual 
Basic makes a physical copy of the array. As a result, the Variant variable doesn't point 
to the original data but to the copy; from this point on, all the manipulations you 
do through the Variant variable don't affect the original array. Conversely, if you call 
a procedure and pass an array as a Variant parameter, no data is physically copied 
and the Variant simply works as an <I>alias </I>of the array. You can reorder array items or 
modify their values, and your changes are immediately reflected in the original array.
</p>

<A NAME="136"><h3>Assigning and returning arrays</h3></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Visual Basic 6 adds two important features to arrays. First, you can perform 
assignments between arrays. Second, you can write procedures that return arrays. You 
can assign arrays only of the same type and only if the target is a dynamic array. 
(The latter condition is necessary because Visual Basic might need to resize the target array.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ReDim a(10, 10) As Integer
Dim b() As Integer
' Fill the a array with data  (omitted).
b() = a()        ' This works!
</pre>
</td></tr>
</table></p>

<p>It's no surprise that native assignment commands are always faster than 
the corresponding <I>For&#8230;Next</I> loops that copy one item at a time. The actual 
increment in speed heavily depends on the data type of the arrays and can vary from 20 
percent to 10 times faster. A native assignment between arrays also works if the 
source array is held in a Variant. Under Visual Basic 4 and 5, you could store an array in 
a Variant, but you couldn't do the opposite&#8212;that is, retrieve an array stored in a 
Variant variable and store it back in an array of a specific type. This flaw has been fixed 
in Visual Basic 6:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim v As Variant, s(100) As String, t() As String
' Fill the s() array   (omitted).
v = s()        ' Assign to a Variant.
t() = v        ' Assign from a Variant to a dynamic string array.
</pre>
</td></tr>
</table></p>

<p>You often use the capacity to assign arrays to build functions that return 
arrays. Notice that pair of brackets at the end of the first line in the following procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function InitArray(first As Long, Last As Long) As Long()
    ReDim result(first To Last) As Long
    Dim i As Long
    For i = first To Last
        result(i) = i
    Next
    InitArray = result
End Function
</pre>
</td></tr>
</table></p>

<p>The new capability of returning arrays lets you write highly versatile array 
routines. Visual Basic 6 itself includes a few new string functions&#8212;namely 
<I>Join</I>, <I>Split</I>, and <I>Filter</I>&#8212;that rely on it. (You'll find more about these new string functions 
in <a href="#A30">Chapter 5</a>). Here are two examples of what you can do with this intriguing feature:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns a portion of a Long array
' Note: fails if FIRST or LAST are not valid
Function SubArray(arr() As Long, first As Long, last As Long, _
    newFirstIndex As Long) As Long()
    Dim i As Long
    ReDim result(newFirstIndex To last _ first + newFirstIndex) As Long
    For i = first To last 
        result(newFirstIndex + i - first) = arr(i)
    Next
    SubArray = result
End Function

' Returns an array with all the selected items in a ListBox
Function SelectedListItems(lst As ListBox) As String()
    Dim i As Long, j As Long
    ReDim result(0 To lst.SelCount) As String
    For i = 0 To lst.ListCount - 1
        If lst.Selected(i) Then
            j = j + 1
            result(j) = lst.List(i)
        End If
    Next
    SelectedListItems = result
End Function
</pre>
</td></tr>
</table></p>

<A NAME="137"><h3>Byte<I> </I>arrays</h3></A>
<p>Byte arrays are somewhat special because Visual Basic lets you directly assign 
strings to them. In this case, Visual Basic performs a direct memory copy of the contents 
of the string. Because all Visual Basic 5 and 6 strings are Unicode strings (two bytes 
per character), the target array is redimensioned to account for the actual string 
length in bytes (which you can determine using the 
<I>LenB</I> function). If the string 
contains only characters whose code is in the range 0 through 255 (the case if you work 
with Latin alphabets), every other byte in the array will be 0:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim b() As Byte, Text As String
Text = &quot;123&quot;
b() = Text      ' Now b() contains six items: 49 0 50 0 51 0
</pre>
</td></tr>
</table></p>

<p> It's also possible to perform the opposite operation:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Text = b()
</pre>
</td></tr>
</table></p>

<p>This special treatment reserved for Byte arrays is meant to ease the 
conversion from old Visual Basic 3 applications that use strings to hold binary data, as I 
explained in &quot;<A HREF="#121">The Byte Data Type</A>&quot; section, earlier in this chapter. You can exploit this 
feature to create blindingly fast string routines when you have to process each individual 
character in a string. For example, see how quickly you can count all the spaces in a string:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' NOTE: this function might not work with non-Latin alphabets.
Function CountSpaces(Text As String) As Long
    Dim b() As Byte, i As Long
    b() = Text
    For i = 0 To UBound(b) Step 2
        ' Consider only even-numbered items.
        ' Save time and code using the function name as a local variable.
        If b(i) = 32 Then CountSpaces = CountSpaces + 1
    Next
End Function
</pre>
</td></tr>
</table></p>

<p>The preceding routine is about three times faster than a regular routine, 
which uses <I>Asc</I> and <I>Mid$</I> functions to process all the characters in the argument, and 
even faster if you turn on the Remove Array Bounds Check compiler optimization. The 
only drawback of this technique is that it isn't Unicode-friendly because it considers 
only the least significant byte in each 2-byte character. If you plan to convert your 
application to some language that relies on Unicode&#8212;Japanese, for example&#8212;you 
should stay clear of this optimization technique.
</p>

<A NAME="138"><h3>Inserting and deleting items</h3></A>
<p>Some of the most common operations you perform on arrays are inserting and 
deleting items, shifting all the remaining elements toward higher indices to make 
room or toward lower indices to fill the &quot;hole&quot; a deletion has left. You usually do this 
with a <I>For&#8230;Next</I> loop, and you can even write generic array procedures that work 
with any type of array (with the usual restrictions about arrays of UDTs and 
fixed-length strings that can't be passed to a Variant parameter):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub InsertArrayItem(arr As Variant, index As Long, newValue As Variant)
    Dim i As Long
    For i = UBound(arr) - 1 To index Step -1
        arr(i + 1) = arr(i)
    Next
    arr(index) = newValue
End Sub

Sub DeleteArrayItem(arr As Variant, index As Long)
    Dim i As Long
    For i = index To UBound(arr) - 1
        arr(i) = arr(i + 1)
    Next
    ' VB will convert this to 0 or to an empty string.
    arr(UBound(arr)) = Empty
End Sub
</pre>
</td></tr>
</table></p>

<p>If your application works intensively with arrays, you might find that an 
approach based on <I>For&#8230;Next</I> loops is too slow. In some cases, you can 
considerably speed up these operations by using the 
<I>RtlMoveMemory</I> API function, which many Visual Basic programmers know under its popular alias name, 
<a href="footnotes.htm#ch04_01"><I>CopyMemory</I>.<SUP>1</SUP></a> This function lets you move a block of bytes from one memory address to another 
memory address and works correctly even if the two areas partially overlap. Here's the 
code that inserts a new item in an array of Longs:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Sub CopyMemory Lib &quot;kernel32&quot; Alias &quot;RtlMoveMemory&quot; _
    (dest As Any, source As Any, ByVal numBytes As Long)

Sub InsertArrayItemLong(arr() As Long, index As Long, newValue As Long)
    ' We let VB evaluate the size of each item using LenB().
    If index &lt; UBound(arr) Then
        CopyMemory arr(index + 1), arr(index), _
            (UBound(arr) _ index) * LenB(arr(index))
    End If
    arr(index) = newValue
End Sub

Sub DeleteArrayItemLong(arr() As Long, index As Long)
    If index &lt; UBound(arr) Then
 CopyMemory arr(index), arr(index + 1), _
            (UBound(arr) _ index) * LenB(arr(index))
    End If
    arr(index) = Empty
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
The prerequisite for using the 
<I>CopyMemory</I> API function is that data must be stored in contiguous memory locations, so you absolutely can't use 
it to insert or remove elements in String and Object arrays, nor in arrays of 
UDTs that contain conventional strings, object references, or dynamic arrays. 
(Fixed-length strings and static arrays in UDTs are OK, though.)
</blockquote></div>
</p>

<p>Note that while you can't use the preceding routines for arrays other than 
Long arrays, the statements in the procedure body can be recycled for another data 
type without any change, thanks to the use of the 
<I>LenB</I> function. Therefore, you can derive new array functions that work for other data types by simply modifying 
the procedure's name and its parameter list. For example, you can create a new 
function that deletes an item in a Double array by editing just the first line of code 
(shown in boldface):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre><B>Sub DeleteArrayItemDouble(arr() As Double, index As Long)</B>
    ' All the other statements here are the same as in DeleteArrayItemLong
    ' ...
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="139"><h3>Sorting</h3></A>
<p>Sorting is an operation that you often perform on arrays. As you probably know, 
there are dozens of different sort algorithms, each one with its strengths and 
weaknesses. I found that the <I>Shell Sort</I> algorithm works well in most cases, and I've prepared 
a generic routine that sorts any one-dimensional array of a data type compatible 
with the Variant type, either in ascending or descending order:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ShellSortAny(arr As Variant, numEls As Long, descending As Boolean)
    Dim index As Long, index2 As Long, firstItem As Long
    Dim distance As Long, value As Variant
    ' Exit if it is not an array.
    If VarType(arr) &lt; vbArray Then Exit Sub
    firstItem = LBound(arr)
    ' Find the best value for distance.
    Do
        distance = distance * 3 + 1
    Loop Until distance &gt; numEls
    ' Sort the array.    
    Do
        distance = distance \ 3
        For index = distance + firstItem To numEls + firstItem - 1
            value = arr(index)
            index2 = index
            Do While (arr(index2 - distance) &gt; value) Xor descending
                arr(index2) = arr(index2 - distance)
                index2 = index2 - distance
                If index2 - distance &lt; firstItem Then Exit Do
            Loop
            arr(index2) = value
        Next
    Loop Until distance = 1
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="140"><h3>Arrays of arrays</h3></A>
<p>While you can create two-dimensional arrays in Visual Basic, their structure isn't 
really flexible for at least two reasons: All rows in the array must have the same number 
of elements, and you can use <I>ReDim Preserve</I> to change the number of columns but 
you can't add new rows. The first point is especially important because it often leads 
you to declare an array that's far too large for your needs, thus allocating a lot of 
memory that in most cases remains largely unused. You can solve both problems using a 
structure known as <I>an array of arrays</I>.</p>
<p>The technique is conceptually simple: Since you can store an array in a 
Variant variable, you can build an array of Variants, where each item holds an array. 
Each subarray&#8212;a row of this pseudo-array&#8212;can hold a different number of elements, 
and you don't need to use more memory than is strictly necessary.</p>

<p>
<A HREF="javascript:fullSize('G04ph02x.htm')"> <img src="G04ph02.JPG" width=404 height=204 border=0 ALT = "Click to view at full size."> </A>
</p>

<p>Here's an example, based on an imaginary PIM (Personal Information 
Manager) program. In this program, you need to keep track of a list of appointments for 
each day of the year. The simplest solution would be to use an array in which each 
row corresponds to a day in the year and each column to a possible appointment. 
(For the sake of simplicity, let's assume that each appointment's data can be held 
in a string.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ReDim apps(1 To 366, 1 To MAX_APPOINTMENTS) As String
</pre>
</td></tr>
</table></p>

<p>Of course, you now have the problem of setting a reasonable value for 
the MAX_APPOINTMENTS symbolic constant. It should be high enough to account 
for all possible appointments in a day but not too high because you might be wasting 
a lot of memory without any real reason. Let's see how the array of arrays 
technique can help us save memory without posing any artificial limit to your application:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A module-level variable
Dim apps(1 To 366) As Variant

' Add an appointment for a given day.
Sub AddNewAppointment(day As Integer, description As String)
    Dim arr As Variant
    If IsEmpty(apps(day)) Then
        ' This is the first appointment for this day.
        apps(day) = Array(description)
    Else
        ' Add the appointment to those already scheduled.
        arr = apps(day)
        ReDim Preserve arr(0 To UBound(arr) + 1) As Variant
        arr(UBound(arr)) = description
        apps(day) = arr
    End If
End Sub

' Extract all the appointments for a given day.
Sub ListAppointments(day As Integer, lst As ListBox)
    Dim i As Long
    For i = 0 To UBound(apps(1))
        lst.AddItem apps(1)(i)
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>In this example, I kept the code as simple as possible and used an array 
of Variant arrays. You could save even more memory if each row of this array were 
built using an array of a more specific data type (String, in this case). Note the special 
syntax used to address an item in an array of arrays:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change the description for the Nth appointment.
apps(day)(n) = newDescription
</pre>
</td></tr>
</table></p>

<p>Nothing keeps you from extending this concept further, introducing an 
array of arrays of arrays, and so on. If you're dealing with arrays in which each row 
can vary considerably in length, this approach is going to save you a lot of memory 
and, in most cases, improve your overall performance too. A key feature of an array 
of arrays is that you can process entire rows of your pseudo-array as if they were 
single entities. For example, you can swap them, replace them, add and delete them, 
and so on.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the January 1st appointments to January 2nd. 
apps(2) = apps(1)
apps(1) = Empty
</pre>
</td></tr>
</table></p>

<p>Finally, an important advantage of this technique is that you can add new 
rows without losing the current contents of the array. (Remember that you can use 
<I>ReDim Preserve</I> on regular arrays only to modify the number of columns, not the 
number of rows.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Extend the appointment book for another nonleap year.
ReDim Preserve apps(1 to UBound(apps) + 365) As Variant
</pre>
</td></tr>
</table></p>

<A NAME="141"><h2>Collections</h2></A>
<p>Collections are objects exposed by the VBA library. They can be used in Visual 
Basic applications to store groups of related data. In this sense, Collections are 
similar to arrays, but the similarities stop here because of these substantial differences:</p>

<UL>

<p><li> Collection objects don't need to be predimensioned for a given 
number of elements; you can add items to a Collection, and it will grow as needed.
</li></p>

<p><li> You can insert items in the middle of a Collection without worrying 
about making room for the new element; likewise, you can delete items 
without having to shift all other items to fill the hole. In both cases, the 
Collection object takes care of all these chores automatically.
</li></p>

<p><li> You can store nonhomogeneous data in a Collection, whereas arrays 
can host only data of the type set at compile time (with the exception of 
Variant arrays). In general, you can store in a Collection any value that you 
could store in a Variant variable (that is, everything except fixed-length 
strings and possibly UDTs).
</li></p>

<p><li> A Collection offers a way to associate a key with each item so that 
later you can quickly retrieve that item even if you don't know where it's 
stored in the Collection. You can also read items by their numerical index in 
the collection, as you would do with regular arrays.
</li></p>

<p><li> In contrast to the situation for arrays, once you have added an item to 
a Collection you can read the item but not modify it. The only way to 
modify a value in a Collection is to delete the old value and add the new one.
</li></p>
</ul>
 


<p>With all these advantages, you might wonder why collections haven't 
supplanted arrays in the hearts of Visual Basic developers. The main reason is that 
Collections are slow, or at least they're noticeably slower than arrays. To give you an idea, filling an array of 10,000 Long elements is about 100 times faster than filling a 
Collection of the same size. Take this into account when you're deciding which data 
structure best solves your problem.
</p>

<p>The first thing you must do before using a Collection is create it. Like all 
objects, a Collection should be declared and then created, as in the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim EmployeeNames As Collection
Set EmployeeNames = New Collection
</pre>
</td></tr>
</table></p>

<p>Or you can declare an auto-instancing collection with one single line of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim EmployeeNames As New Collection
</pre>
</td></tr>
</table></p>

<p>You can add items to a Collection object by using its 
<I>Add</I> method; this method expects the value you're adding and a string key that will be associated with that value:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>EmployeeNames.Add &quot;John Smith&quot;, &quot;Marketing&quot;
</pre>
</td></tr>
</table></p>

<p>where <I>value </I>can be virtually anything that can be stored in a Variant. The 
<I>Add </I>method usually appends the new value to the collection, but you can decide where 
exactly you want to store it using either the <I>before 
</I>argument or the <I>after </I>argument:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Insert this value before the first item in the collection.
EmployeeNames.Add &quot;Anne Lipton&quot;, &quot;Sales&quot;
' Insert this new value after the element added previously.
EmployeeNames.Add value2, &quot;Robert Douglas&quot;, ,&quot;Sales&quot;
</pre>
</td></tr>
</table></p>

<p>Unless you have a good reason to store the new value somewhere other 
than at the end of the Collection, I suggest that you not use the 
<I>before </I>or <I>after </I>arguments because they slow down the 
<I>Add</I> method. The string key is optional. If you 
specify it and there's another item with the same key, the 
<I>Add</I> method will raise an error 457&#8212;&quot;This key is already associated with an element of this collection.&quot; (Keys are 
compared in a case-insensitive way.)
</p>

<p>Once you have added one or more values, you can retrieve them using the 
<I>Item</I> method; this method is the default member of the Collection class, so you can 
omit it if you want. Items can be read using their numeric indices (as you do with 
arrays) or their string keys:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' All the following statements print &quot;Anne Lipton&quot;.
Print EmployeeNames.Item(&quot;Sales&quot;)     
Print EmployeeNames.Item(1)
Print EmployeeNames(&quot;Sales&quot;)
Print EmployeeNames(1)
</pre>
</td></tr>
</table></p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
If you want to write faster programs, always access a Collection's 
items using their string keys rather than their numeric indices. As counterintuitive 
as it may appear, using string keys is almost always faster than using 
numeric indices, especially if the Collection has thousands of elements and the one 
you're interested in isn't near the beginning of it.
</blockquote></div>
</p>

<p>If you pass a numeric index that's either negative or greater than the 
number of items currently in the collection, you get an error code 9&#8212;&quot;Subscript out of 
range&quot; (exactly as if you were acting on a standard array); if you pass a nonexistent 
string key, you get error code 5&#8212;&quot;Invalid procedure call or argument.&quot; Curiously, 
the Collection object doesn't offer a native method to test whether an item actually 
exists. The only way to learn whether an element is already in a Collection is by 
setting up an error handler and testing for the existence of that element. Here's a 
function that does the trick, and you can reuse it with any Collection:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function ItemExists(col As Collection, Key As String) As Boolean
    Dim dummy As Variant
    On Error Resume Next
    dummy = col.Item(Key)
    ItemExists = (Err &lt;&gt; 5)
End Function
</pre>
</td></tr>
</table></p>

<p>The <I>Count</I> method returns the number of items in the collection:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Retrieve the last item in the EmployeeNames collection.
' Note that collections are one-based.
Print EmployeeNames.Item(EmployeeNames.Count)
</pre>
</td></tr>
</table></p>

<p>You can remove items from a Collection object using the 
<I>Remove</I> method; this method accepts either a numeric index or a string key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Remove the Marketing Boss.
EmployeeNames.Remove &quot;Marketing&quot;
</pre>
</td></tr>
</table></p>

<p>If the key doesn't exist, the Collection object raises an error 
5&#8212;&quot;Invalid procedure call or argument.&quot; Collections don't offer a native way to remove all the 
items in a single operation, so you're forced to write a loop. Here's a general function 
that does it for you:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub RemoveAllItems(col As Collection)
    Do While col.Count
        col.Remove 1
    Loop
End Sub
</pre>
</td></tr>
</table>
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>A faster way to remove all the items in a Collection is to destroy the 
Collection object itself by setting it to Nothing or to another fresh, new instance:

<p><table><tr><td>

<pre>' Both these lines destroy the current contents
' of the Collection.
Set EmployeeNames = Nothing
Set EmployeeNames = New Collection
</pre>
</td></tr></table></p>

<p>
This approach works only if there isn't any other object variable pointing to 
the Collection object, however. If you aren't sure of this, the only safe way to 
remove all items is the loop I showed you previously.</p>
</blockquote></div></p>

<p>Finally, as I mentioned before, Collections don't allow you to modify the 
value of an item. If you want to change the value of an item, you must first delete it 
and then add a new item. Here's generic routine that uses this technique:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' INDEX can be either a numeric or a string value.
Sub ReplaceItem(col As Collection, index As Variant, newValue As Variant)
    ' First remove that item (exits with error if it doesn't exist).
    col.Remove index
    ' Then add it again.
    If VarType(index) = vbString Then
        ' Add a new item with the same string key.
        col.Add newValue, index
    Else
        ' Add a new item in the same position (without any key).
        col.Add newValue, , index
    End If
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="142"><h3>Iterating on Collection objects</h3></A>
<p>Since you can address items using their numeric indices, you can loop on all the 
elements of a Collection object using a regular 
<I>For&#8230;Next</I> loop:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Load the contents of a Collection into a ListBox control.
Dim i As Long
For i = 1 To EmployeeNames.Count
    List1.AddItem EmployeeNames(i)
Next
</pre>
</td></tr>
</table></p>

<p>While this code works, Collection objects offer another, better way to 
perform the same task, based on the <I>For 
Each&#8230;Next</I> loop:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim var As Variant
For Each var in EmployeeNames
    List1.AddItem var
Next
</pre>
</td></tr>
</table></p>

<p>Notice that the loop's controlling variable 
(<I>var</I>, in this example) must be of type Variant so that it can host any value that had been added to the Collection. The 
only exception to this rule is when you're sure that the Collection contains only a 
given class of objects (forms, controls, or user-defined objects), in which case you can 
use a controlling variable of that specific type:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' If the Customers collection includes only references
' to individual Customer objects
Dim cust As Customer
For Each cust In Customers
    List1.AddItem cust.Name
Next
</pre>
</td></tr>
</table></p>

<p>Using a controlling variable of a specific object type usually offers better 
performance than a generic Variant or Object variable. Iterating on the elements of 
a collection using a <I>For Each&#8230;Next</I> loop is generally faster than a regular 
<I>For&#8230;Next</I> loop because the latter forces you to refer to individual elements using their 
numeric indices, which is a relatively slow operation.
</p>

<A NAME="143"><h3>Working with Collection objects</h3></A>
<p>Collections are very flexible structures and are useful in many cases for solving 
simple but recurring programming jobs. The very nature of Collection objects suggests 
that you use them whenever you need to associate a key with a value for a faster 
retrieval. The following routine builds on the fact that Collections accept only unique keys 
to filter out all duplicated entries in an array of any Variant-compatible type:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Filter out all duplicate entries in any Variant-compatible array.
' On entry, NUMELS should be set to the number of items to be examined.
' On exit, NUMELS holds the number of nonduplicate items.
Sub FilterDuplicates(arr As Variant, numEls As Long)
    Dim col As New Collection, i As Long, j As Long
    On Error Resume Next
    j = LBound(arr) - 1
    For i = LBound(arr) To numEls
        ' Add a dummy zero value, but use the array's value as the key.
        col.Add 0, CStr(arr(i))
        If Err = 0 Then
            j = j + 1
            If i &lt;&gt; j Then arr(j) = arr(i)
        Else
            Err.Clear
        End If
    Next
    ' Clear all remaining items.
    For i = j + 1 To numEls: arr(i) = Empty: Next
    numEls = j
End Sub
</pre>
</td></tr>
</table></p>

<p>In some cases, you might feel limited by the fact that Collection objects 
can't hold UDT values, so you don't know what to do when you need to store 
multiple values associated with the same key. One solution is to use objects instead of 
UDTs, but employing this technique is often overkill because you rarely want to add a 
class module to your project just to store multiple values in a Collection. A much 
better solution is to build arrays on the fly and store them as items in the 
Collection. A practical example is shown below.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Store Employees data in a Collection.
Dim Employees As New Collection
' Each item is made up of (Name, Dept, Salary).
Employees.Add Array(&quot;John&quot;, &quot;Marketing&quot;, 80000), &quot;John&quot;
Employees.Add Array(&quot;Anne&quot;, &quot;Sales&quot;, 75000), &quot;Anne&quot;
Employees.Add Array(&quot;Robert&quot;, &quot;Administration&quot;, 70000), &quot;Robert&quot;
...

' List all employees' names.
Dim var As Variant
For Each var in Employees
    Print var(0)       ' Item 0 is the employee's name.
Next
' Where does Anne work?
Print Employees(&quot;Anne&quot;)(1)
' How much does Robert earn?
Print Employees(&quot;Robert&quot;)(2)
</pre>
</td></tr>
</table></p>

<p>Of course, you can make these compound structures as complex as you 
need to. For example, each Employees element might hold a Collection of other pieces 
of information, such as how many hours each employee has worked for a 
given 
customer:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Employees As New Collection, Customers As Collection
' Each item is made up of (Name, Dept, Salary, Customers).
Set Customers = New Collection
Customers.Add 10, &quot;Tech Eight, Inc&quot;
Customers.Add 22, &quot;HT Computers&quot;
Employees.Add Array(&quot;John&quot;, &quot;Marketing&quot;, 80000, Customers), &quot;John&quot;
' Start with a fresh collection each time.
Set Customers = New Collection
Customers.Add 9, &quot;Tech Eight, Inc&quot;
Customers.Add 44, &quot;Motors Unlimited&quot;
Employees.Add Array(&quot;Anne&quot;, &quot;Sales&quot;, 75000, Customers), &quot;Anne&quot;
' etc.  ....
</pre>
</td></tr>
</table></p>

<p>This complex structure lets you quickly and elegantly solve a number of 
problems and answer a few interesting questions:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Is John working with customer &quot;HT Computers&quot;?
Dim hours As Long, var As Variant
On Error Resume Next
hours = Employees(&quot;John&quot;)(3)(&quot;HT Computers&quot;)
' HOURS holds zero if the above statement failed.

' How many hours has Anne worked for external customers?
hours = 0 
For Each var In Employees(&quot;Anne&quot;)(3)
    hours = hours + var
Next

' How many hours have been devoted to customer &quot;Tech Eight, Inc&quot;?
On Error Resume Next
hours = 0
For Each var In Employees
    hours = hours + var(3)(&quot;Tech Eight, Inc&quot;)
Next
</pre>
</td></tr>
</table></p>

<p>As you can see, collections are highly flexible data structures. I suggest that 
you explore their capabilities in depth, and I'd bet that you'll find yourselves using 
them more often than you anticipated.
</p>

<A NAME="144"><h2>Dictionary Objects</h2></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Dictionary objects are new to the Visual Basic language. Technically speaking, 
however, they don't belong to Visual Basic as Collections do, nor do they belong to 
the VBA language. Rather, they're exposed by an external library, the Microsoft 
Scripting Library. In fact, to use these objects you must add a reference to the 
SCRRUN.DLL library (which appears under the name Microsoft Scripting Runtime, as you can 
see in Figure 4-1). Once you do that, you can press F2 to invoke the Object Browser 
and explore Dictionary's methods and properties.</p>
<p>Dictionary objects are very similar to Collection objects. Actually, they 
were originally created to provide VBScript programmers with a Collection-like object. 
The Dictionary object isn't exclusive to Visual Basic 6; the Scripting Library can be freely downloaded from 
<I><a href="http://msdn.microsoft.com/scripting/" target="_window2">http://msdn.microsoft.com/scripting/</a></I> and used with 
any Automation-compliant programming language, including Visual Basic 5. Visual 
Basic 6 installs this library as part of its setup procedure, so you don't have to 
download and register it separately.
</p>

<p>
<A HREF="javascript:fullSize('F04ph01x.htm')"> <img src="F04ph01.JPG" width=404 height=321 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 4-1.</B> <i>Add a reference to the Microsoft Scripting Runtime library in the References dialog box in order to use the Dictionary object.</i><!--/caption-->
</p>


<p>You'll see in a moment how closely akin Dictionary objects are to 
Collection objects, so it's easy to illustrate their features by comparing these two. You create 
a Dictionary object as you do any object, for example using an auto-instancing variable:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim dict As New Scripting.Dictionary
</pre>
</td></tr>
</table></p>

<p>In all cases, note that the <I>Scripting</I> prefix is optional, but I suggest you use 
it in case your References dialog box includes other external libraries that happen 
to expose a Dictionary object. Using the complete 
<I>libraryname.classname</I> syntax when declaring object variables is an intelligent way to avoid bugs in the future.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>The VBScript-oriented nature of Dictionary objects has 
somewhat resisted the migration to Visual Basic. All the examples in the Visual Basic 
6 manuals are taken as is from VBScript documentation and therefore use 
a <I>CreateObject</I> function to create the Dictionary. (VBScript doesn't support the 
<I>New</I> operator.) Besides, all examples store references to Dictionary objects in 
Variant variables. (VBScript doesn't support specific object variables.)

<p><table><tr><td>
<pre>' This is what VB6 docs report.
Dim dict         ' Variant is VB's default data type.
Set dict = CreateObject(&quot;Scripting.Library&quot;)
</pre>
</td></tr></table>
</p>
<p>While this code works, you should absolutely avoid it for two 
reasons: <I>CreateObject</I> is about twice as slow as 
<I>New</I>, and above all, using a generic Variant variable instead of a more specific variable of type Dictionary adds 
overhead any time you access the object's properties and methods because you are 
actually doing late binding instead of early binding. My informal benchmarks show 
that a specific variable speeds up the code to 30 times faster, and it also delivers 
more robust applications because all syntactical errors are trapped by the compiler.
</p>
</blockquote></div></p>
<p>
You add an item to a Dictionary object using its 
<I>Add</I> method, as you do with Collection objects. But the order of the two arguments is reversed (first the key 
and then the item's value), and you can't omit the key or specify the 
<I>before </I>or <I>after </I>arguments:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>dict.Add &quot;key&quot;, value
</pre>
</td></tr>
</table></p>

<p>If the Dictionary object contains a value associated with the same string key, 
an error 457 is raised (the same as that raised by Collection objects). Dictionary 
objects support the <I>Item</I> member, but there are important differences from Collection objects in the way the <I>Item</I> member is implemented. For Dictionary objects, 
<I>Item</I> is a read-write property, not a method, and you can reference an element only by 
using a key (which can be a string or a number), but not through its numeric index in the 
Dictionary. In other words, you can reference an item only by its key, not by its position:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print dict(&quot;key&quot;)             ' Print the current value,
dict(&quot;key&quot;) = newValue        ' and then modify it.
Print dict(1)                 ' Displays an empty string because
                              ' there's no item with this key.
</pre>
</td></tr>
</table></p>

<p>There's also a third important difference: If the key isn't found in the 
Dictionary, no error is raised. If your code was trying to read that item, the Dictionary 
returns an Empty value; if it was assigning a value, another item is added to the 
Dictionary. In other words, you can add new items without using the 
<I>Add</I> method:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print dict(&quot;key2&quot;)            ' Returns Empty.
dict(key2) = &quot;new value&quot;      ' Adds a new element, and
                              ' no error is raised.
</pre>
</td></tr>
</table></p>

<p>In this respect, Dictionary objects are more akin to PERL associative arrays 
than to Visual Basic's Collection objects. Like Collections, Dictionaries support the 
<I>Count</I> property, but you can't use it to set up 
<I>For&#8230;Next</I> loops.
</p>

<p>You can remove Dictionary items using the 
<I>Remove</I> method:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>dict.Remove &quot;key&quot;           ' Numeric indices aren't supported.
</pre>
</td></tr>
</table></p>

<p>If the key isn't found in the Dictionary, an error 32811 is raised. (The 
corresponding message isn't very helpful about the real cause: &quot;Method 'Remove' of 
object 'IDictionary' failed&quot;). As is 
<I>not</I> the case for Collections, you can remove all items 
in a Dictionary object in one shot by using the 
<I>RemoveAll</I> method:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>dict.RemoveAll          ' No need for a loop.
</pre>
</td></tr>
</table></p>

<p>Dictionary objects are also more flexible than Collection objects in that you 
can modify the key associated with an element by using the 
<I>Key</I> property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>dict.Key(&quot;key&quot;) = &quot;new key&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Key</I> property is write-only, but this isn't a real limitation: It wouldn't 
make any sense to <I>read </I>the value of a key, since you can reference it only by using 
the current key value. Dictionary objects expose an 
<I>Exists</I> method that lets you test whether an element actually exists. You need this method because otherwise 
you couldn't discern between nonexistent and Empty values:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If dict.Exists(&quot;John&quot;) Then Print &quot;Item &quot;&quot;John&quot;&quot; exists&quot;
</pre>
</td></tr>
</table></p>

<p>Dictionary objects also expose two methods, 
<I>Items</I> and <I>Keys</I>, which quickly retrieve all values and keys into an array in one single operation:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim itemValues() As Variant, itemKeys() As Variant, i As Long
itemValues = dict.Items    ' Retrieve all values.
itemKeys = dict.Keys       ' Retrieve all keys.
' Put keys and values into a single list.
For i = 0 To UBound(itemValues)
    List1.AddItem itemKeys(i) &amp; &quot; = &quot; &amp; itemValues(i)
Next
</pre>
</td></tr>
</table></p>

<p>The <I>Items </I>and <I>Keys </I>methods are also the only ways to access the elements 
of a Dictionary object because you can't use either the 
<I>For&#8230;Next </I>loop (because numeric indices are actually interpreted as keys) or the 
<I>For Each&#8230;Next </I>loop. If you don't want to explicitly load items and keys into Variant arrays, however, you can take the 
following shortcut, based on the fact that Variant arrays do support enumeration 
through the <I>For Each&#8230;Next </I>loop:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim key As Variant
For Each key In dict.Keys
    List1.AddItem key &amp; &quot; = &quot; &amp; dict(key)
Next
</pre>
</td></tr>
</table></p>

<p>Interestingly, <I>Keys</I> is also the default method for the Dictionary object, 
so you can omit it in the preceding code snippet and you end up with a code 
syntax that makes it appear as if the Dictionary object supported enumeration through 
the <I>For Each&#8230;Next </I>loop:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For Each key In dict
    List1.AddItem key &amp; &quot; = &quot; &amp; dict(key)
Next
</pre>
</td></tr>
</table></p>

<p>The last property of the Dictionary object is the 
<I>CompareMode</I> property, which states how a Dictionary object compares keys. It can be assigned three values: 
0-BinaryCompare (case-sensitive comparisons, the default setting), 
1-TextCompare (case-insensitive comparisons), and 2-DatabaseCompare (not supported under 
Visual Basic). You can assign this property only when the Dictionary object is empty.
</p>

<A NAME="145"><h3>Dictionary vs. Collection objects</h3></A>
<p>After this overview, it should be clear that Dictionary objects are more flexible 
than Collection objects. Their only missing feature is the ability to address items by 
their numeric indices (which, on the other hand, is one of the slowest operations you 
can perform on Collection objects). Unless you need this capability, the choice seems 
clear: Use Dictionary objects whenever you need their flexibility. But remember that 
you will need to distribute another ancillary file with your application.
</p>

<p>Microsoft hasn't revealed how Collection and Dictionary objects are 
implemented internally, but it seems to me that the Dictionary object is based on a 
more efficient algorithm than the Collection object. My informal benchmarks show that 
creating a 10,000-item Dictionary is about 7 times faster than adding the same 
number of items to an empty Collection object. Reading these items back is about 3 to 4 
times faster. This gap decreases when you create larger structures (only 2.5 times faster 
with 100,000 items), but in general a Dictionary object can be considered faster than 
a Collection object. The actual speed difference might depend on how keys are 
distributed, available memory, and other factors. I suggest that you do some 
benchmarks with your own actual data before opting for one solution or another.
</p>


<a name="A29"></a><h3>5.4.4 Procedures</h3>

<A HREF="#A28">[Previous]</A> <A HREF="#A30">[Next]</A><P>

<A NAME="146"><h1>Procedures</h1></A>
<p>Visual Basic modules are made of a declaration section&#8212;in which you declare 
types, constants, and variables used in the module&#8212;plus a collection of procedures. 
These can be of type Sub or Function, depending on whether they return a value to the 
caller. They can also be Property procedures, but we won't discuss those until <a href="#A37">Chapter 6</a>. Each procedure has a unique name, a scope, a list of expected arguments, 
and&#8212;if it's a function&#8212;a return value.
</p>

<A NAME="147"><h2>Scope</h2></A>
<p>The scope of a procedure can be Private, Public, or Friend. A 
Private procedure can be invoked only from within the module in which it's defined. A 
Public procedure can be invoked from outside the module. If the module is itself Public (a module 
whose <I>Instancing</I> property isn't 1-Private, contained in a project whose type isn't 
Standard EXE), the procedure can be called from outside the current program through 
COM. Since Public is the default scope attribute for procedures, you can always omit it:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Public function that provides access to a control on a form.
Function GetTotal() As Currency
    GetTotal = CCur(txtTotal.Text)
End Function
</pre>
</td></tr>
</table></p>

<p>If the scope isn't Public, you must specify it explicitly:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' All event procedures are Private. 
Private Sub Form_Load()
    txtTotal.Text = &quot;&quot;
End Sub
</pre>
</td></tr>
</table></p>

<p>The scope of a Friend procedure is halfway between Private and Public: 
Such a procedure can be called from anywhere in the current project, but not from 
outside it. This difference becomes important only if you're within a project of a type 
other than Standard EXE, one that therefore exposes its classes to other applications in 
the form of COM components. I'll talk about COM components in depth in <a href="#A100">Chapter 16</a>, but here we need to anticipate some key concepts.
</p>

<p>To understand how a Friend procedure can be useful, imagine the 
following scenario: You have a Public class module that shows a dialog box and asks the 
user for his or her name and password. It also exposes a 
<I>GetPassword</I> function so that another module in the project can validate the password and enable or disable 
specific functions for that particular user. Should you declare this function as Private? 
No, because it could be invoked from another module. Should the function 
be Public? No, because that would enable a malicious programmer to query your class 
module from outside the project and steal users' passwords. (For the sake of simplicity, 
let's assume that getting a reference to your class isn't a problem.) In this case, the 
best choice is to make the function a Friend.</p>

<p>
<A HREF="javascript:fullSize('G04ph03x.htm')"> <img src="G04ph03.JPG" width=404 height=305 border=0 ALT = "Click to view at full size."> </A>
</p>

<p>If you're within a Standard EXE project, or within a Private class in any type 
of project, Friend and Public attributes are equivalent because the procedure can't 
be called from the outside anyway.
</p>

<A NAME="148"><h2>Parameter Lists and Return Values</h2></A>
<p>Both Sub and Function procedures can accept arguments. Functions also return 
a value. Setting a reasonable list of expected parameters and a return value is the 
key to making your procedure more useful. You can pass a procedure any simple 
data type supported by Visual Basic, including Integer, Boolean, Long, Byte, Single, 
Double, Currency, Date, String, and Variant. You can also declare your parameter an 
Object, a Collection, a class defined in your program, or external to it (for example, a 
Dictionary object). Finally you can pass an array of any of the previously mentioned 
types. The same is true for the return type too, which can be of any simple type 
supported by Visual Basic, including arrays&#8212;a new Visual Basic 6 feature.
</p>

<p>You should be aware that an <I>argument </I>is the value passed to a 
procedure, whereas a <I>parameter </I>is the value received by it. Both words refer to the same 
actual value, and the most appropriate term depends on the direction from which 
you're looking at the value: the caller code sees arguments, and the called procedure 
sees parameters. In this section, the words <I>argument 
</I>and <I>parameter </I>are used somewhat interchangeably except where ambiguity would arise.
</p>

<A NAME="149"><h3>Passing by value or by reference</h3></A>
<p>An argument can be passed by value (using the 
<I>ByVal</I> keyword) or by reference 
(using the <I>ByRef</I> keyword or by omitting any qualifier). Arguments passed by reference 
can be modified by the called procedure, and the modified value can be read back 
by the caller. Conversely, changes to arguments passed by value are never 
propagated back to the caller. The rule you should stick to 
is<I> always pass by reference</I> <I>those arguments that must be modified by the procedure, and pass by value all 
the</I> <I>others.</I> This approach minimizes the risk of accidentally modifying the value of a 
variable passed to the method. Let me explain this concept with an example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Z is incorrectly declared ByRef.
Sub DrawPoint(ByVal X As Long, ByVal Y As Long, Z As Long)
    ' Keep arguments positive.
    If X &lt; 0 Then X = 0
    If Y &lt; 0 Then Y = 0
    If Z &lt; 0 Then Z = 0      ' Probable cause of bugs !!!
    ' ...
End Sub
</pre>
</td></tr>
</table></p>

<p>This procedure modifies its parameters to make them fit their valid range; if 
a parameter is passed using <I>ByRef</I>, as Z is in the previous example, these changes 
are propagated to the calling code. This type of bug can be undetected for some 
time, especially if in most cases you call the procedure using constants or expressions. 
The fact that your code works in these situations can convince you that the procedure 
is correct and lull you into a false sense of security:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This works. (Argument is a constant.)
DrawPoint 10, 20, 40           
' This works too. (Argument is an expression.)
DrawPoint x * 2, y * 2, z * 2  
' This works but modifies Z if it's negative.
DrawPoint x, y, z
</pre>
</td></tr>
</table></p>

<p>Declaring a parameter using <I>ByVal</I> offers another benefit: you can call the 
procedure passing a variable or an expression of any type and let Visual Basic do 
the data type conversion for you. Conversely, if a parameter is declared 
<I>ByRef</I> and you pass a variable, their types must match:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Assuming that x,y,z aren't Long variables 
' (for example, they are either Single or Double)
DrawPoint x, y, 100   ' This works, Visual Basic does the conversion.
DrawPoint x, y, z     ' This doesn't. (ByRef argument type mismatch.)
</pre>
</td></tr>
</table></p>

<p>There is one exception to the above rule, though: If a procedure exposes a 
<I>ByRef</I> Variant parameter, you can pass really anything to it. You  can exploit this feature 
to write procedures that aren't specific to a particular data type, as you can see in 
the code below.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Swap values of any type.
Sub Swap(first As Variant, second As Variant)
    Dim temp As Variant
    temp = first: first = second: second = temp
End Sub
</pre>
</td></tr>
</table></p>

<p>There's another, subtler reason for using the 
<I>ByVal </I>keyword whenever possible. When a procedure can access the same memory location by means of two or 
more different names&#8212;for instance, a global variable or a module-level variable that's 
also passed as an argument&#8212;that variable is said to be 
<I>aliased </I>within that procedure. The problem with aliased variables is that they prevent the Visual Basic compiler 
from generating optimized code that holds variables' values inside CPU registers when 
it would otherwise be possible to do so. When all variables are passed to 
procedures and methods by value, it isn't possible for the routine to modify a global value 
through one of its parameters, and the compiler can produce better code. If you're sure 
that all the procedures in your program adhere to this restriction, the native 
compiler can safely optimize your code. To inform Visual Basic that there aren't any 
aliased variables in your program, open the Project-Properties dialog box, switch to the 
Compile tab, click on the Advanced Optimizations button, and tick the Assume No 
Aliasing check box in the dialog box that appears, as you can see in Figure 4-2.
</p>

<p>
<A HREF="javascript:fullSize('F04ph02x.htm')"> <img src="F04ph02.JPG" width=404 height=267 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 4-2.</B> <i>The Advanced Optimizations dialog box.</i><!--/caption-->
</p>

<A NAME="150"><h3>Passing user-defined types</h3></A>
<p>You might have noticed that I didn't mention UDT structures among the data 
types that can be passed to a procedure or returned from a function. In fact, you can't 
always pass such structures as an argument to a procedure. Consider these cases:
</p>

<UL>

<p><li> If a UDT structure is declared as Private to a module, it can be passed 
and returned only by Private procedures inside that module.
</li></p>

<p><li> If the UDT structure is defined as Public in a standard BAS module, it 
can be used as an argument for Private and Friend procedures defined in 
any type of module in the current project. It can also be used as an 
argument in Public procedures defined in any BAS module of the application, 
but not in other types of modules (including forms).
</li></p>


<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p><li> If you want to write a Public procedure that accepts a UDT argument 
in a module other than a BAS module, you must place a Public Type 
definition in a Public class module&#8212;that is, a module whose 
<I>Instancing</I> property is different from 1-Private. (You can't therefore place the 
declaration in form modules, because they are always Private.) Since you must 
define the UDT structure in a Public class, you can do that only within 
project types other than Standard EXE projects.
</li></p>
</ul>
 


<p>You can't even declare a Public UDT structure in a class module that isn't 
Public itself. This prevents you from declaring a Public UDT in a Standard EXE 
project in any modules except standard BAS modules.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>If you're creating a Microsoft ActiveX EXE project, you should 
be aware that you can exchange UDT values across processes only if you 
have DCOM98 (on Windows 9x systems) or Service Pack 4 (on Windows NT 4.0 
systems). If you don't, when Visual Basic tries to pass a UDT value to another 
process an error 458 is raised (&quot;Variable uses an Automation Type not 
supported in Visual Basic&quot;). You need these operating system updates on both your 
own and your users' machines.

<p>Note that this isn't an issue when working with an ActiveX DLL 
project because it shares the same address space as its caller, so UDTs can be 
passed without the intervention of COM.
</p>
</blockquote></div>
</p>

<A NAME="151"><h3>Passing Private types</h3></A>
<p>There are restrictions when passing Private objects to a procedure, where a 
<I>private object</I> is defined in your application but not visible outside it. Private objects are 
those defined by classes whose <I>Instancing</I> property is set to 1-Private, or objects 
exposed by the Visual Basic library, including forms, controls, and objects such as App, 
Clipboard, Screen, and Printer. In general, you can neither include such private 
objects among the arguments of a procedure nor use them as the return value of a 
function if the procedure can be called from another application through COM. This 
restriction makes perfect sense. COM arbitrates the exchange of information between 
the application that provides the object and the programs that use it. COM is able to 
deal with all the basic data types supported by Visual Basic and with all the Public 
objects defined by any program in the Windows environment. On the other hand, 
COM is unable to pass information in a format that is defined within a program, such as 
a Private class, as you can see in the code snippet below.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Visual Basic won't compile the following lines
' if this procedure is located in a Public class.
Public Sub ClearField(frm As Form) 
...
End Sub
</pre>
</td></tr>
</table></p>

<p>This restriction isn't enforced if the method is declared as Private or 
Friend because such a method can't be invoked from another application through COM 
and can be called only by another module of the current application. In this case, 
there's no point in limiting the data types that can be passed to the method, and in fact 
the Visual Basic compiler doesn't complain if a Private data type appears among 
the arguments or if it is the return value of a method.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is compiled without problems, even within a Public class.
Friend Sub ClearField(frm As Form) 
...
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
There's an easy workaround for the limitation on passing Private 
objects to a procedure, though. Just declare the argument or the return 
value using As Object or As Variant: in this case, the compiler can't know 
which object will be actually passed at run time and won't flag the line as an error. 
While this technique works, you should at least be aware that Microsoft strongly 
discourages it and has publicly stated that it might not work in future versions 
of the language. Forewarned is forearmed.
</blockquote></div>
</p>

<A NAME="152"><h3>The <I>Optional</I> keyword</h3></A>
<p>Visual Basic 4 introduced the ability to include optional parameters in the 
parameter list of procedures and methods. Optional parameters must always come after 
regular (required) parameters. Visual Basic 4 supports only optional parameters of 
Variant type and permits testing for whether a parameter is actually passed by means 
of the <I>IsMissing</I> function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A public method of a form.
Sub PrintData1(text As String, Optional color As Variant)
    If IsMissing(color) Then color = vbWhite
    ForeColor = color
    Print text
End Sub
</pre>
</td></tr>
</table></p>

<p>Be very careful when you use the 
<I>IsMissing</I> function because if you assign a value to a missing parameter, this function returns False from that point on. 
Study this code excerpt, and see why it doesn't work as expected:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintData2(text As String, Optional color As Variant)
    Dim saveColor As Long
    If IsMissing(color) Then 
        Form1.FontTransparent = False
        color = vbWhite
    End If
    Form1.ForeColor = color
    Form1.Print text
    If IsMissing(color) Then 
        ' Next statement will be never executed!
        Form1.FontTransparent = False
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>Visual Basic 5 has added the ability to use optional arguments of any 
type&#8212;not just Variant&#8212;and to set their default values right in the parameter list. The 
<I>PrintData1</I> routine can be rewritten more concisely under Visual Basic 5 and 6 as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintData3(text As String, Optional color As Long = vbWhite)
    Form1.ForeColor = color
    Form1.Print text
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>If an optional argument is of a type other than Variant, the 
<I>IsMissing</I> function always returns False. This behavior can cause many subtle errors, 
as in the following code:

<p><table><tr><td>
<pre>Sub PrintData4(text As String, Optional color As Long)
    If IsMissing(color) Then
        ' The next line will never be executed!
        Form1.FontTransparent = False
    End If
    ' ...
End Sub
</pre>
</td></tr></table>
</p>

</blockquote></div></p>

<p>When a non-Variant optional parameter isn't initialized to a specific default 
value in the parameter list, the procedure receives a zero value, an empty string, or 
Nothing, depending on the type of the parameter. The only data types that can't be 
used with the Optional keyword are UDT structures.
</p>

<p>Optional arguments are very handy for writing flexible procedures, but 
contrary to what some programmers believe, they don't produce more efficient code. 
The (wrong) assumption is: Since the calling code doesn't have to push the missing 
values on the stack, fewer CPU statements are executed and the program runs 
faster. Unfortunately, this isn't true. When an optional argument is omitted, Visual Basic 
actually pushes a special &quot;missing&quot; value on the stack. So there's no real speed 
advantage in omitting an optional argument.
</p>

<p>The &quot;missing&quot; magic value used by Visual Basic compiler is Error 
value &amp;H80020004. The <I>IsMissing</I> function does nothing but test the Variant and return 
True if it contains this value. Incidentally, this explains why the 
<I>IsMissing</I> function always returns False with any data type different from Variant: Only a Variant variable 
can hold an Error value. You can't directly create this special value because the 
<I>CVErr</I> function accepts only values in the range 0 through 65,535. But you can use the 
following trick:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Always call this function without any argument.
Function MissingValue(Optional DontPassThis As Variant) As Variant
    MissingValue = DontPassThis
End Function
</pre>
</td></tr>
</table></p>

<A NAME="153"><h3>Named arguments</h3></A>
<p>While Optional arguments are a great addition to the VBA language, they surely 
tend to reduce the readability of your code. Take this statement as an example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Err.Raise 999, , , &quot;Value out range&quot;
</pre>
</td></tr>
</table></p>

<p>It appears as if the programmer is raising a custom error; unfortunately, 
there are too many commas, and the <I>Value out of 
range</I> string falls in the <I>HelpFile</I> 
field. How many developers can spot this kind of error just by browsing their source 
code? Fortunately, you can reduce this adverse effect of optional parameters by using 
named arguments when calling the procedure. Here's how you can correctly rewrite 
the previous statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Err.Raise Number:=999, Description:=&quot;Value out of range&quot;
</pre>
</td></tr>
</table></p>

<p>Named arguments let you alter the order in which arguments appear in the 
line that invokes the procedure, but they don't allow you to omit an argument that 
isn't optional. All the procedures that you create in Visual Basic automatically 
support named arguments. For instance, if you have the following routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Init(Optional Name As String, Optional DeptID As Integer, _
    Optional Salary As Currency)
    ' ...
End Sub
</pre>
</td></tr>
</table></p>

<p>you can call it as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Init Name:=&quot;Roscoe Powell&quot;, Salary:=80000
</pre>
</td></tr>
</table></p>

<A NAME="154"><h3>The <I>ParamArray</I> keyword</h3></A>
<p>You can implement a routine that accepts any number of arguments using 
the <I>ParamArray</I> keyword:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Sum(ParamArray args() As Variant) As Double
    Dim i As Integer
    ' All ParamArrays are zero-based.
    For i = 0 To UBound(args)
        Sum = Sum + args(i)
    Next
End Function
</pre>
</td></tr>
</table></p>

<p>You call the <I>Sum</I> function as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print Sum(10, 30, 20)  ' Displays &quot;60&quot;
</pre>
</td></tr>
</table></p>

<p>A few simple rules dictate how the 
<I>ParamArray</I> keyword should be used:</p>

<UL>

<p><li> There can be only one <I>ParamArray</I> keyword, and it must be at the 
end of the parameter list.
</li></p>

<p><li> The array declared by the 
<I>ParamArray</I> keyword can only be of the Variant type.
</li></p>

<p><li> No <I>Optional</I> parameter can precede the 
<I>ParamArray</I> keyword.
</li></p>
</ul>
 


<p>The <I>ParamArray</I> keyword can be an invaluable aid in creating truly 
generic functions. For instance, you can build a function that returns the maximum of 
any number of values:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Max(first As Variant, ParamArray args() As Variant) As Variant
    Dim i As Integer
    Max = first
    For i = 0 To UBound(args)
        If args(i) &gt; Max Then Max = args(i)
    Next
End Function
</pre>
</td></tr>
</table></p>

<p>Note that there's one required argument in the previous procedure because 
it doesn't make sense to evaluate the maximum of 0 values. Even though it isn't 
documented, you can use the <I>IsMissing</I> function on the 
<I>args() </I>parameter. Thus, you have two ways to exit the function if no optional values were passed to the routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The documented way
If LBound(args) &gt; UBound(args) Then Exit Function
' The undocumented way is more concise and readable
If IsMissing(args) Then Exit Function
</pre>
</td></tr>
</table></p>

<p>The <I>ParamArray</I> keyword can be coupled with the ability to return arrays. 
For example, while the <I>Array</I> function lets you build Variant arrays on the fly, VBA 
doesn't offer a similar function for building other 
types of arrays. Here's how you can remedy this problem:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function ArrayLong(ParamArray args() As Variant) As Long()
    Dim numEls As Long, i As Long
    numEls = UBound(args) _ LBound(args) + 1
    If numEls &lt;= 0 Then Err.Raise 5     ' Invalid procedure call
    ReDim result(0 To numEls - 1) As Long
    For i = 0 To numEls _ 1
        result(i) = args(i)
    Next
    ArrayLong = result
End Function
</pre>
</td></tr>
</table></p>

<p>One last note about the <I>ParamArray</I> keyword: If you want to get the best 
performances, stay clear of it. It forces you to use Variant parameters, which are 
the slowest data type supported by Visual Basic. If you need to use optional 
arguments, use non-Variant Optional parameters, which are much faster.
</p>

<A NAME="155"><h2>Error Handling</h2></A>
<p>Error handling is an important feature of the Visual Basic language and is closely 
related to the structure of your procedures. Visual Basic offers three statements 
that give you control over what happens when an error occurs during the execution 
of your code:</p>

<UL>

<p><li> The <I>On Error Resume Next</I> statement tells Visual Basic to ignore any 
error. When an error actually occurs, Visual Basic proceeds with 
executing the next statement. You can test the error code using the 
<I>Err</I> function, or you can ignore it completely.
</li></p>

<p><li> The <I>On Error Goto 
</I>&lt;<I>label</I>&gt;<B><I> </I></B>statement tells Visual Basic that any error 
will cause a jump to the named label, which must be located in the 
same procedure in which this statement appears. You can use the same 
label name in different procedures because a label's scope is the procedure, 
not the module.
</li></p>

<p><li> The <I>On Error Goto 0</I> statement tells Visual Basic to cancel the effect of 
any active <I>On Error Resume Next</I> or <I>On Error 
Goto</I> &lt;<I>label</I>&gt; statement. When an error occurs, Visual Basic behaves as if error trapping is disabled.
</li></p>
</ul>
 


<p>Selecting one form of error trapping or another depends on your 
programming style and the requirements of the specific routine, so no rule can be provided 
that's valid in every case. All the <I>On Error 
</I>statements clear the current error code.
</p>

<A NAME="156"><h3>The <I>On Error Goto &lt;label&gt; </I>statement</h3></A>
<p>When you're dealing with files, the <I>On Error 
Goto</I> &lt;<I>label</I>&gt; statement is often a 
better choice because in this case there are so many things that can go wrong, and you 
don't want to test the <I>Err</I> code after every statement. The same concept applies to 
intensive math routines that are subject to multiple errors, such as division by 0, 
overflow, and illegal arguments in function calls. In most cases, when an error occurs in 
these routines, the best you can do is exit right away and report the error to the calling code.
</p>

<p>On the other hand, there are many cases when the &quot;error&quot; isn't a fatal 
error. Suppose that you want your user to insert a given disk in drive A, but you want 
to give him or her another chance if the disk isn't the one you were expecting 
instead of aborting the whole procedure when the user inserts a wrong disk. Here's a 
reusable procedure that lets you check whether a drive contains a disk with a given 
label and prompts the user to insert a disk if the drive is empty:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function CheckDisk(ByVal Drive As String, VolumeLabel As String)_
    As Boolean
    Dim saveDir As String, answer As Integer
    On Error GoTo Error_Handler
    Drive = Left$(Drive, 1)
    ' Save the current drive for restoring later.
    saveDir = CurDir$
    ' Next statement is likely to fire an error.
    ' Check the drive specified in the parameter.
    ChDrive Drive
    ' Return True if the label matches, False otherwise.
    CheckDisk = (StrComp(Dir$(Drive &amp; &quot;:\*.*&quot;, vbVolume), _
        VolumeLabel, vbTextCompare) = 0)
    ' Restore the original current drive.
    ChDrive saveDir
    Exit Function
Error_Handler:
    ' If error is Device Unavailable or Disk Not Ready, and it's a disk,
    ' give the user the chance to insert the diskette in the drive.
    If (Err = 68 Or Err = 71) And InStr(1, &quot;AB&quot;, Drive, _
        vbTextCompare) Then
        answer = MsgBox(&quot;Please enter a diskette in drive &quot; &amp; Drive, _
            vbExclamation + vbRetryCancel)
        ' Retry the ChDir statement, or exit returning False.
        If answer = vbRetry Then Resume
    Else
        ' In all other cases, return the error to the calling program.
        Err.Raise Err.Number, Err.Source, Err.Description
    End If
End Function
</pre>
</td></tr>
</table></p>

<p>You can exit from an error routine in at least five ways:</p>

<UL>

<p><li> You can execute a <I>Resume</I> statement to retry the line of code that 
caused the error.
</li></p>

<p><li> You can execute a <I>Resume Next</I><B> 
</B>statement to resume execution in the procedure body at the line immediately after the one that caused the error.
</li></p>

<p><li> You can execute a <I>Resume 
</I>&lt;<I>line</I>&gt; statement to resume execution at a 
given line in the procedure body; 
&lt;<I>line</I>&gt;<I> </I>can be a line number or label name.
</li></p>

<p><li> You can report the error to the calling routine by executing an 
<I>Err.Raise</I> method.
</li></p>

<p><li> You can exit the procedure by executing an 
<I>Exit Sub</I> or <I>Exit Function</I> statement or by letting the execution flow into the <I>End Sub</I> or <I>End Function</I> directive. In both cases, the calling procedure receives a zero error code.
</li></p>
</ul>
 


<A NAME="157"><h3>The <I>On Error Resume Next</I> statement</h3></A>
<p>The <I>On Error Resume Next</I> statement is most useful when you don't expect 
many errors or when you don't need to trap all of them. In some cases, you can use 
this approach when the exception can be safely ignored, as in the following example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Hide all controls in Form1.
Dim ctrl As Control
' Not all controls support the Visible property (Timers don't).
On Error Resume Next
For Each ctrl In Form1.Controls
    Ctrl.Visible = False
Next
</pre>
</td></tr>
</table></p>

<p>If you want to test an error condition, you must do it immediately after 
each statement that could cause an error. Or you can test the 
<I>Err</I> function at the end of a group of statements. In fact, if any statement raises an error, Visual Basic doesn't 
reset the <I>Err</I> value until the programmer does it explicitly with an 
<I>Err.Clear</I> method.
</p>

<p>If an error occurs while there's an active <I>On Error Resume 
Next</I> statement, the execution continues with the next statement in the procedure, 
<I>whichever the next statement is</I>. This feature permits you to test attributes of controls and objects in 
ways that would be impossible otherwise:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Hide all visible controls on Form1, and then restore
' their visibility.
Dim ctrl As Control, visibleControls As New Collection
On Error Resume Next
For Each ctrl In Form1.Controls
    If ctrl.Visible = False Then
        ' This control doesn't support the Visible property
        ' or it is already hidden: in either case, don't do anything.
    Else
        ' Remember that this is a visible control, and then hide it.
        visibleControls.Add ctrl
        ctrl.Visible = False
    End If
Next
' Do whatever you need to do (omitted), and
' then correctly restore the original controls' Visible property.
For Each ctrl In visibleControls
    ctrl.Visible = True
Next
</pre>
</td></tr>
</table></p>

<p>This unorthodox way to use <I>On Error Resume 
Next</I> is a powerful weapon in the hands of expert Visual Basic programmers, but it tends to obscure the logic 
behind your code. My suggestion is to resort to this technique only if it's impossible 
or impractical to follow other approaches, and&#8212;above 
all&#8212;to add exhaustive comments to your code so that it's clear exactly what you're doing and why.
</p>

<p>When a procedure that contains an <I>On Error Resume Next 
</I>statement exits, the calling code sees the code of the last error that occurred inside the procedure. 
Compare this behavior with procedures containing an 
<I>On Error Goto &lt;label&gt; </I>statement, which always clears the error code when the control returns to the calling code.
</p>

<A NAME="158"><h3>Unhandled errors</h3></A>
<p>So far, we've seen what happens when an error fires in a procedure that is 
protected with an <I>On Error Resume Next</I> or 
<I>On Error Goto</I> &lt;line&gt;<I> </I>statement. When either 
one of these statements is currently active (when it hasn't been cancelled by a 
subsequent <I>On Error Goto 0</I> statement), the procedure is said to have an 
<I>active error handler</I>. However, not all procedures are so well written, and in many cases you must 
consider exactly what happens when Visual Basic fires an error that you aren't 
prepared to deal with. (These are also known as 
<I>unanticipated errors.</I>)</p>

<UL>

<p><li> If the procedure has been called by another procedure, Visual Basic 
immediately terminates the current procedure and reports the error to 
the calling procedure, at the line that called the now-terminated 
procedure. If the calling procedure has an active error handler, it deals with the 
error locally (as if the error actually occurred there); otherwise, it 
exits immediately and reports the error to the procedure that called it, and 
so on until Visual Basic finds a pending procedure on the procedure 
stack that has an active error handler.
</li></p>

<p><li> If no procedure on the procedure stack has an active error handler, 
Visual Basic has no code to notify of the error, so it immediately stops 
the program with an error. If you are within the IDE, you can now spot 
the original statement that produced the error so that you can modify the 
code right away and restart the program. If the error occurred in a 
compiled EXE program, the application terminates with a fatal error.
</li></p>

<p><li> It's important to remember that all event procedures&#8212;such as 
<I>Form_Load</I> or <I>Command1_Click</I>&#8212;aren't generally called by code in your 
application; instead, they're called by the Visual Basic runtime file. So if an error 
occurs in those event procedures, there's no code to which to delegate the 
error and the application always terminates with a fatal error. Keep this in 
mind when distributing your <I>On Error</I> statements, and never omit them in 
event procedures unless you're 100 percent sure that they can never raise an error.
</li></p>
</ul>
 


<p><div class="note"><blockquote><b>NOTE</b><hr>
Any error that occurs while processing the code in an error handler 
is treated by Visual Basic as an unanticipated error and is subject to all the 
rules you've seen so far. This explains why you can execute an 
<I>Err.Raise</I> method within an error handling routine and be sure that the error will be passed to 
the calling procedure.
</blockquote></div>
</p>

<p>Here's an example that summarizes what I have said so far. Just add a 
<I>Command1</I> button to a form, and then enter the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Command1_Click()
    ' Comment next line to see what happens when an event
    ' procedure isn't protected against unanticipated errors.
    On Error GoTo Error_Handler
    Print EvalExpression(1)
    Print EvalExpression(0)
    Print EvalExpression(-1)
    Exit Sub
Error_Handler:
    Print &quot;Result unavailable&quot;
    Resume Next
End Sub

Function EvalExpression(n As Double) As Double
    On Error GoTo Error_Handler
    EvalExpression = 1 + SquareRootReciprocal(n)
    Exit Function
Error_Handler:
    If Err = 11 Then
        ' If Division by zero, return -1 (no need to Resume).
        EvalExpression = -1
    Else
        ' Notify the caller that an error occurred.
        Err.Raise Err.Number, Err.Source, Err.Description
    End If
End Function

Function SquareRootReciprocal(n As Double) As Double
    ' This might cause a Division By Zero error (Err = 11) or
    ' an Invalid Procedure Call or Argument (Err = 5).
    SquareRootReciprocal = 1 / Sqr(n)
End Function
</pre>
</td></tr>
</table></p>

<p>Run the program, and click on the button. You should see this output:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>2
-1
Result Unavailable
</pre>
</td></tr>
</table></p>

<p>Then comment out the <I>On Error</I> statement in the 
<I>Command1_Click</I> procedure to watch what happens when an event procedure isn't completely protected by an error handler.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Not all run-time errors are trappable. The most notable 
exception is error 28&#8212;&quot;Out of stack space.&quot; When this error occurs, the application 
always comes to a fatal end. But since all 32-bit Visual Basic applications have 
about 1 MB of available stack space, the probability that you incur this error is 
quite small. When this happens, odds are that you are performing some wild 
recursion: In other words, you're caught in a sequence of procedures that call 
themselves in an endless loop. This is a typical logic programming error that should 
usually be fixed before you compile the program, so I don't consider the inability to 
trap the &quot;Out of stack space&quot; error at run time a serious problem.
</blockquote></div>
</p>

<A NAME="159"><h3>The Err object</h3></A>
<p>Visual Basic automatically associates several useful pieces of information with any 
error that it fires, and it gives you the ability to do the same when you raise a custom 
error. This capability is provided through the Err object, which exposes six 
properties and two methods. The most important property is 
<I>Number</I>, the numeric error code. This is the default property for this object, so you can use either 
<I>Err</I> or <I>Err.Number</I> in your code, which permits backward compatibility to be maintained with 
older versions of Visual Basic, and even QuickBasic.
</p>

<p>The <I>Source</I> property is automatically filled with a string that states where 
the error occurred. If an error occurs in a standard or form module, Visual Basic sets 
this property to the name of the project (for example, 
<I>Project1</I>); if an error occurs in a class module, Visual Basic sets this property to the complete name of the class 
(for example, <I>Project1.Class1</I>). You can test this property to understand whether the 
error is internal or external to your application, and you can modify it before you 
notify the calling code of the error.
</p>

<p>The <I>Description</I> property is also automatically filled with a string that 
describes the error that just occurred (for example, &quot;Division by Zero&quot;). In most cases, this 
string is more descriptive than the mere error code number. You can modify it in code 
before notifying the caller about the error. The 
<I>HelpFile</I> and <I>HelpContext</I><B> 
</B>properties are filled by Visual Basic with information about which page in a help file contains an 
additional description of the error, how to handle it, and so on. Each native Visual 
Basic error corresponds to a page in Visual Basic's own help file. If you write libraries 
for other developers, you should devise a custom error numbering scheme and 
associate each custom error code with a page in a help file that you provide to your 
customers. This is rarely needed with business applications. Finally, the 
<I>LastDllError</I> is a read-only property that is set by Visual Basic when an error occurs during 
the processing of an API routine and isn't useful in any other case.
</p>

<p>The <I>Raise</I> method raises an error and optionally assigns a value to all the 
properties seen above. Its syntax is the following:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Err.Raise Number, [Source], [Description], [HelpFile], [HelpContext])
</pre>
</td></tr>
</table></p>

<p>All arguments are optional except the first one. For more readable code, 
use named arguments, as in this line:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Err.Raise Number:=1001, Description:=&quot;Customer Not Found&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Clear</I> method resets all the properties in one operation.
</p>

<p>Visual Basic's Err object is compatible with the COM mechanism of 
notifying error codes and information among different processes. The importance of this 
feature will become apparent in <a href="#A100">Chapter 16</a>.
</p>

<A NAME="160"><h3>Error handling inside the Visual Basic IDE</h3></A>
<p>So far, I've described what happens when an error occurs in a compiled 
application. When the code is executed inside the IDE, however, Visual Basic behaves in a 
slightly different way in an attempt to simplify your debugging chores. More precisely, 
the IDE can behave differently according to the settings found in the General tab of 
the Options dialog box from the Tools menu, which you can see in Figure 4-3. Here 
are the possibilities:</p>

<UL>

<p><li> Break On All Errors: All errors stop execution as soon as they occur; 
this setting enables the programmer to see exactly which errors are 
raised before they're reported to the calling code.
</li></p>

<p><li> Break In Class Module: All errors in class modules stop execution as 
soon as they occur and before they're returned to the calling code. Class 
modules might need this special treatment because the calling code could 
be located in another process if the class is Public. This is the default 
setting for handling errors in the IDE.
</li></p>

<p><li> Break On Unhandled Errors: Errors stop execution only if they 
aren't handled anywhere in the program. This setting exactly mimics what 
happens in a compiled application, but during the test phase it might 
hide what really goes on inside your code. For this reason, you should 
choose this mode only if you know for sure that all errors are processed 
correctly. If you set this mode in an application that works like a COM 
component and provides classes to the outside, no error will ever be trapped in 
the application's code because such applications always have a caller to 
transmit the error to.
</li></p>
</ul>
 


<p>The settings in the Options dialog box shown in Figure 4-3 are the 
default settings for the Visual Basic environment and are persistent throughout your 
sessions. If you want to change the error-handling mode of the current environment 
without affecting the general setting, right-click inside the code window and select one of 
the commands in the Toggle submenu, shown in Figure 4-4. This approach is 
usually faster and lets you work with multiple instances of the IDE, each one with a 
different error-handling mode.
</p>

<p>
<img src="F04ph03x.gif" width=418 height=354 border=0>
</p><p>
<!--caption--><B>Figure 4-3.</B> <i>The General tab in the Options dialog box.</i><!--/caption-->
</p>

<p>
<img src="F04ph04.GIF" width=338 height=332 border="0">
<p>
<!--caption--><B>Figure 4-4.</B> <i>The Toggle pop-up menu in the Code Editor.</i><!--/caption-->


<p>You've finally reached the end of this chapter devoted to Visual Basic data types, 
and you're now aware of a few subtleties that aren't clearly documented in the 
language manuals. Now you're ready to inspect the many functions that VBA gives you 
to process these data types.
</p>

<a name="A30"></a><h2>5.5 Chapter 5 -- The Visual Basic for Applications and Visual Basic Libraries</h2>

<A HREF="#A29">[Previous]</A> <A HREF="#A31">[Next]</A><P>


<font size="+3">Chapter 5</font>

<A NAME="161"><h1>The Visual Basic for Applications and Visual Basic Libraries</h1></A>
<p>Broadly speaking, Microsoft Visual Basic can be considered the sum of the Visual 
Basic for Applications library, plus a group of objects exposed by the Visual Basic 
library and the Visual Basic runtime. In this chapter, I focus on the VBA language, 
with an overview of its functions and commands, and some advanced or less 
obvious techniques that you can apply to it. You can browse most of the objects covered in this 
chapter by using the Object Browser utility and selecting the VBA library. In the last part 
of the chapter, I introduce a few important system objects, such as App and 
Clipboard, which are located in the VB library.</p>


<a name="A31"></a><h3>5.5.1 Control Flow</h3>

<A HREF="#A30">[Previous]</A> <A HREF="#A32">[Next]</A><P>

<A NAME="162"><h1>Control Flow</h1></A>
<p>All programming languages must provide one or more ways to execute some 
statements out of the sequence in which they appear in the program listing. Apart 
from calls to Sub and Function procedures, you can gather all the basic control flow 
statements in two groups: <I>branch</I> statements and 
<I>loop</I> statements.</p>

<A NAME="163"><h2>Branch Statements</h2></A>
<p>The main branch statement is the <I>If...Else...Else If...End 
If</I> block. Visual Basic supports several flavors of this statement, including single-line and multiline versions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Single line version, without Else clause
If x &gt; 0 Then y = x
' Single line version, with Else clause
If x &gt; 0 Then y = x Else y = 0
' Single line, but with multiple statements separated by colons
If x &gt; 0 Then y = x: x = 0 Else y = 0 

' Multiline version of the above code (more readable)
If x &gt; 0 Then
    y = x
    x = 0 
Else
    y = 0 
End If

' An example of If..ElseIf..Else block
If x &gt; 0 Then
    y = x
ElseIf x &lt; 0 Then
    y = x * x
Else              ' X is surely 0, no need to actually test it.
    x = -1
End If
</pre>
</td></tr>
</table></p>

<p>You should be aware that any nonzero value after the 
<I>If</I> keyword is considered to be True and therefore fires the execution of the 
<I>Then</I> block:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The following lines are equivalent.
If value &lt;&gt; 0 Then Print &quot;Non Zero&quot;
If value Then Print &quot;Non Zero&quot;
</pre>
</td></tr>
</table></p>

<p>Even if this latter notation lets you save some typing, you shouldn't believe 
that it also makes your program faster, at least not necessarily. Benchmarks show that 
if the variable being tested is of type Boolean, Integer, or Long, this shortened 
notation doesn't make your program run faster. With other numeric types, 
however, you can expect some modest speed increment, about 20 percent or less. If you 
feel comfortable with this technique, go ahead and use it, but be aware that in many 
cases the speed improvement isn't worth the decreased readability.</p>

<p>Many advanced optimization techniques become possible when you 
combine multiple conditions using AND and 
OR operators. The following examples show how you can often write more concise and efficient code by rewriting a 
Boolean expression:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' If two numbers are both zero, you can apply the OR operator
' to their bits and you still have zero.
If x = 0 And y = 0 Then ...
If (x Or y) = 0 Then ...

' If either value is &lt;&gt;0, you can apply the OR operator
' to their bits and you surely have a nonzero value.
If x &lt;&gt; 0 Or y &lt;&gt; 0 Then ...
If (x Or y) Then ...

' If two integer numbers have opposite signs, applying the XOR 
' operator to them yields a result that has the sign
'  bit set. (In other words, it is a negative value.)
If (x &lt; 0 And y &gt;= 0) Or (x &gt;= 0 And y &lt; 0) Then ...
If (x Xor y) &lt; 0 Then ...
</pre>
</td></tr>
</table></p>

<p>It's easy to get carried away when you're working with Boolean operators 
and inadvertently introduce subtle bugs into your code. For example, you might 
believe that the following two lines of code are equivalent, but they aren't. (To 
understand why, just think how numbers are represented in binary.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Not equivalent: just try with x=3 and y=4, whose binary
' representations are 0011 and 0100 respectively.
If x &lt;&gt; 0 And y &lt;&gt; 0 Then ...
If (x And y) Then ...
' Anyway, you can partially optimize the first line as follows:
If (x &lt;&gt; 0) And y Then ...
</pre>
</td></tr>
</table></p>

<p>Another frequent source of ambiguity is the 
NOT operator, which toggles all the bits in a number. In Visual Basic, this operator returns False only if its 
argument is True (-1), so you should never use it with anything except the Boolean result 
of a comparison or with a Boolean variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If Not (x = y) Then ...  ' The same as x&lt;&gt;y
If Not x Then ...        ' The same as x&lt;&gt;-1, don't use instead of x=0
</pre>
</td></tr>
</table></p>

<p>For more information, see the section &quot;<A HREF="#169">Boolean and Bit-Wise Operators</A>&quot; 
later in this chapter.</p>

<p>One detail that surprises many programmers coming to Visual Basic from 
other languages is that the <I>If</I> statement doesn't support the so-called 
<I>short-circuit evaluation</I>. In other words, Visual Basic always evaluates the whole expression in the 
<I>If</I> clause, even if it has enough information to determine that it is False or True, as 
in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' If x&lt;=0, it makes no sense to evaluate Sqr(y)&gt;x
' because the entire expression is guaranteed to be False.
If x &gt; 0 And Sqr(y) &lt; z Then z = 0

' If x=0, it makes no sense to evaluate x*y&gt;100.
' because the entire expression is guaranteed to be True.
If x = 0 Or x * y &gt; 100 Then z = 0
</pre>
</td></tr>
</table></p>

<p>Even though Visual Basic isn't smart enough to optimize the expression 
automatically, it doesn't mean that you can't do it manually. You can rewrite the first 
<I>If</I> statement above as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If x &gt; 0 Then If Sqr(y) &lt; z Then z = 0 
</pre>
</td></tr>
</table></p>

<p>You can rewrite the second <I>If</I> statement above as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If x = 0 Then
    z = 0 
ElseIf x * y &gt; 100 Then
    z = 0
End If
</pre>
</td></tr>
</table></p>

<p>The <I>Select Case</I> statement is less versatile than the 
<I>If</I> block in that it can test only one expression against a list of values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case Mid$(Text, i, 1)
    Case &quot;0&quot; To &quot;9&quot;
        ' It's a digit.
    Case &quot;A&quot; To &quot;Z&quot;, &quot;a&quot; To &quot;z&quot;
        ' It's a letter.
    Case &quot;.&quot;, &quot;,&quot;, &quot; &quot;, &quot;;&quot;, &quot;:&quot;, &quot;?&quot;
        ' It's a punctuation symbol or a space.
    Case Else
        ' It's something else. 
End Select
</pre>
</td></tr>
</table></p>

<p>The most effective optimization technique with the 
<I>Select Case</I> block is to move the most frequent cases toward the top of the block. For instance, in the 
previous example you might decide to test whether the character is a letter before 
testing whether it's a digit. This change will slightly speed up your code if you're 
scanning regular text that's expected to contain more words than numbers.</p>

<p>Surprisingly, the <I>Select Case</I> block has an interesting feature that's missing 
in the more flexible <I>If</I> statement&#8212;namely, the ability to perform short circuit 
evaluation, sort of. In fact, <I>Case</I> subexpressions are evaluated only until they return 
True, after which all the remaining expressions on the same line are skipped. For 
example, in the <I>Case</I> clause that tests for punctuation symbols in the preceding code 
snippet, if the character is a dot all the other tests on that line are never executed. You 
can exploit this interesting feature to rewrite (and optimize) some complex 
<I>If </I>statements composed of multiple Boolean subexpressions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' This series of subexpressions connected by the AND operator:
If x &gt; 0 And Sqr(y) &gt; x And Log(x) &lt; z Then z = 0
' can be rewritten as:
Select Case False
    Case x &gt; 0, Sqr(y) &gt; x, Log(x) &lt; z
        ' Do nothing if any of the above meets the condition,
        ' that is, is False.
    Case Else
        ' This is executed only if all the above are True.
        z = 0 
End Select

' This series of subexpressions connected by the OR operator:
If x = 0 Or y &lt; x ^ 2 Or x * y = 100 Then z = 0 
' can be rewritten as:
Select Case True
    Case x = 0, y &lt; x ^ 2, x * y = 100
        ' This is executed as soon as one of the above is found
        ' to be True.
        z = 0 
End Select 
</pre>
</td></tr>
</table></p>

<p>As it is for similarly unorthodox optimization techniques, my suggestion is 
to thoroughly comment your code, explaining what you're doing and always 
including the original <I>If</I> statement as a remark. This technique is highly effective for 
speeding up portions of your code, but you should never forget that optimization isn't all 
that important if you're going to forget what you did or if your code looks obscure 
to colleagues who have to maintain it.</p>

<p>Then comes the <I>GoTo</I> statement, deemed to be the main cause of tons of 
spaghetti code that plagues many applications. I must admit, however, that my 
attitude toward this four-letter keyword isn't so negative. In fact, I still prefer one single 
<I>GoTo </I>statement to a chain of <I>Exit Do</I> or 
<I>Exit</I> <I>For</I> statements for getting out of a series 
of nested loops. I suggest this: Use the 
<I>GoTo</I> statement as an exception to the 
regular flow of execution, and always use significant label names and meaningful 
remarks all over the code to explain what you're doing.</p>

<p>The <I>GoSub&#133;Return</I> keyword pair is a little bit better than 
<I>GoTo</I> because it's more structured. In some cases, using 
<I>GoSub</I> to call a piece of code inside the 
current procedure is better than calling an external 
<I>Sub</I> or <I>Function.</I> You can neither pass arguments nor receive return values; but, on the other hand, the called 
code shares all the parameters and local variables with your current procedure, so in 
most cases you don't need to pass anything. You should be aware, however, that 
when you compile to native code, the <I>GoSub</I> keyword is about 6 to 7 times 
<I>slower </I>than a call to an external procedure in the same module, so always benchmark the two 
approaches if you're writing time-critical code.</p>

<A NAME="164"><h2>Loop Statements</h2></A>
<p>The most frequently used looping structure in Visual Basic is undoubtedly 
the <I>For...Next</I> loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
For counter = startvalue To endvalue [Step increment]
    ' Statements to be executed in the loop...
Next
</pre>
</td></tr>
</table></p>

<p>You need to specify the <I>Step</I> clause only if 
<I>increment </I>is not equal to 1. You can exit the loop using an 
<I>Exit For</I> statement, but unfortunately Visual Basic doesn't 
provide any sort of &quot;Repeat&quot; command that lets you skip the remaining part of the 
current iteration and restart the loop. The best you can do is use (nested) 
<I>If </I>statements or, if you don't want to make the logic too complex, use a plain 
<I>GoTo</I> keyword that points to the end of the loop. In fact, this is one of the few occasions when a 
single <I>GoTo</I> statement can make your code 
<I>more </I>readable and maintainable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
For counter = 1 To 100
    ' Do your stuff here ...
    ' if you want to skip over what follows, just GoTo NextLoop.
    If Err Then Goto NextLoop
    ' more code that you don't want to enclose within nested IF blocks
    ' ...
NextLoop:
Next
</pre>
</td></tr>
</table></p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
Always use an Integer or Long variable as the controlling variable of 
a <I>For...Next</I> loop because they're faster than a Single or a Double controlling 
variable, by a factor of 10 or more. If you need to increment a floating-point 
quantity, the most efficient technique is explained in the next example.
</blockquote></div></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
A compelling reason to stay clear of floating-point variables 
as controlling variables in <I>For...Next</I> loops is that, because of rounding errors, 
you can't be completely sure that a floating-point variable is incremented 
correctly when the increment is a fractional quantity, and you might end up with fewer 
or more iterations than expected:

<p><table><tr><td>
<pre>
Dim d As Single, count As Long
For d = 0 To 1 Step 0.1
    count = count + 1
Next
Print count         ' Displays &quot;10&quot; but should be &quot;11&quot;
</pre>
</td></tr>
</table></p>
</blockquote></div></p>

<p>When you want to be absolutely sure that a loop is executed a given 
number of times, use an integer controlling variable and explicitly increment the 
floating-point variable within the loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim d As Single, count As Long
' Scale start and end values by a factor of 10 
' so that you can use integers to control the loop.
For count = 0 To 10
    ' Do what you want with the D variable, and then increment it
    ' to be ready for the next iteration of the loop.
    d = d + 0.1
Next
</pre>
</td></tr>
</table></p>

<p>I covered the <I>For Each...Next</I> loop already in <a href="#A25">Chapter 4</a>, and I won't repeat 
its description here. I just want to show you a neat trick that's based on this type of 
loop and the <I>Array</I> function. This technique permits you to execute a block of 
statements with different values for a controlling variable, which don't need to be in sequence:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Test if Number can be divided by any of the first 10 prime numbers.
Dim var As Variant, NotPrime As Boolean
For Each var In Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
    If (Number Mod var) = 0 Then NotPrime = True: Exit For
Next
</pre>
</td></tr>
</table></p>

<p>The values don't even have to be numeric:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Test if SourceString contains the strings &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, etc.
Dim var2 As Variant, MatchFound As Boolean
For Each var2 In Array(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)
    If InStr(1, SourceString, var2, vbTextCompare) Then
        MatchFound = True: Exit For
    End If
Next
</pre>
</td></tr>
</table></p>

<p>The <I>Do...Loop</I> structure is more flexible than the 
<I>For...Next</I> loop in that you can place the termination test either at the beginning or the end of the loop. (In the 
latter case, the loop is always executed at least once.) You can use either the 
<I>While</I> clause (repeat while the test condition is True) or the 
<I>Until </I>clause (repeat while the test condition is False). You can exit a 
<I>Do</I> loop at any moment by executing an <I>Exit 
Do</I> statement, but&#8212;as with 
<I>For...Next</I> loops&#8212;VBA doesn't offer a keyword that skips 
over the remaining statements in the loop and immediately restarts the loop.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Example of a Do loop with test condition at the top.
' This loop is never executed if x &lt;= 0.
Do While x &gt; 0
    y = y + 1
    x = x \ 2
Loop

' Example of a Do loop with test condition at the bottom.
' This loop is always executed at least once, even if x &lt;= 0.
Do 
    y = y + 1
    x = x \ 2
Loop Until x &lt;= 0

' Endless loop: requires an Exit Do statement to get out.
Do
     ...
Loop
</pre>
</td></tr>
</table></p>

<p>The <I>While...Wend</I> loop is conceptually similar to the 
<I>Do While...Loop</I>. But you can test the condition only at the beginning of the loop, you don't have an 
<I>Until</I> clause, and you don't even have an 
<I>Exit While</I> command. For these reasons, most 
programmers prefer the more flexible 
<I>Do...Loop</I> structure, and in fact you won't see a 
single <I>While...Wend</I> loop in this entire book.</p>

<A NAME="165"><h2>Other Functions</h2></A>
<p>A few VBA functions are closely related to control flow, even if by themselves 
they don't alter the execution flow. The 
<I>IIf</I> function, for example, can often replace 
an <I>If...Else...End If</I> block, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' These lines are equivalent.
If x &gt; 0 Then y = 10 Else y = 20
y = IIf(x &gt; 0, 10, 20) 
</pre>
</td></tr>
</table></p>

<p>The <I>Choose</I> function lets you select a value in a group; you can use it to 
distinguish among three or more cases. So, instead of this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The classic three-choices selection
If x &gt; y Then
    Print &quot;X greater than Y&quot;
ElseIf x &lt; y Then
    Print &quot;X less than Y&quot;
Else
    Print &quot;X equals Y&quot;
End If
</pre>
</td></tr>
</table></p>

<p>you can use this shorter version:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Shortened form, based on Sgn() and Choose() functions.
' Note how you keep the result of Sgn() in the range 1-3.
Print &quot;X &quot; &amp; Choose(Sgn(x _ y) + 2, &quot;less than&quot;, &quot;equals&quot;, _
    &quot;greater than&quot;) &amp; &quot; Y&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Switch</I> function accepts a list of 
<I>(condition, value) </I>pairs and returns the 
first <I>value </I>that corresponds to a <I>condition 
</I>that evaluates as True. See, for example, how you can use this function to replace this 
<I>Select Case</I> block:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case x
    Case Is &lt;= 10: y = 1
    Case 11 To 100: y = 2
    Case 101 To 1000: y = 3
    Case Else: y = 4
End Select
</pre>
</td></tr>
</table></p>

<p>Same effect in just one line.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The last &quot;True&quot; expression replaces the &quot;Else&quot; clause.
y = Switch(x &lt;= 10, 1, x &lt;= 100, 2, x &lt;= 1000, 3, True, 4)
</pre>
</td></tr>
</table></p>

<p>You should remember two things when you're using this function: First, if 
none of the expressions returns a True value, the 
<I>Switch</I> function returns Null. Second, all the expressions are always evaluated, even though only one value is returned. 
For these reasons, you might get unexpected errors or undesired side effects. (For 
example, if one expression raises an overflow or division-by-zero error.)</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
While the <I>IIf</I>, <I>Choose</I>, and <I>Switch</I> functions are sometimes 
useful for reducing the amount of code you have to write, you should be aware 
that they're always slower than the <I>If</I> or 
<I>Select Case</I> structure that they're meant to replace. For this reason, you should never use them in time-critical loops.
</blockquote></div></p>


<a name="A32"></a><h3>5.5.2 Working with Numbers</h3>

<A HREF="#A31">[Previous]</A> <A HREF="#A33">[Next]</A><P>

<A NAME="166"><h1>Working with Numbers</h1></A>
<p>Visual Basic offers a rich assortment of math operators and functions. Most of 
these operators are <I>polymorphic</I> in the sense that they work equally well with 
arguments of any type, including Integer, Long, Single, Double, Date, and Currency. 
Depending on the particular operator or function, the Visual Basic compiler can decide 
to convert the operands to a more suitable data type. However, this is the 
language's job, and you don't have to worry because everything is done automatically for you. </p>

<A NAME="167"><h2>Math Operators</h2></A>
<p>As you know, Visual Basic supports all four math operators. When combining 
two values of different types, Visual Basic automatically applies the 
<I>data coercion </I>and converts the simpler type to the more comprehensive one (for example, Integer 
to Long or Single to Double). Interestingly, the division operator 
(/) always converts both its operands to Double, which can cause some unexpected overhead. If 
you're dividing an Integer or Long number by another Integer or Long number and you 
aren't interested in the decimal part of the quotient, you should use the integer 
division operator (\), which executes faster:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim a As Long, b As Long, result As Long
result = a / b          ' Floating point division
result = a \ b          ' This is about 4 times faster.
</pre>
</td></tr>
</table></p>

<p>Visual Basic also supports the exponentiation operator (^), which raises 
a number to an exponent. In this case, the result is always of type Double, even if 
you're raising an integer number to an integer exponent. In general, the ^ operator is 
relatively slow, and for small integer exponents you might decide to use a chain 
of multiplication operations instead:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim x As Double, result As Double 
x = 1.2345
result = x ^ 3
result = x * x * x      ' This is about 20 times faster.
</pre>
</td></tr>
</table></p>

<p>The MOD operator extracts the remainder of a division between integer 
values. It's often used to test whether a number is an exact multiple of another number. 
This operator is very efficient but has a limitation: It converts its operands to Long 
and therefore can't be used with arbitrarily large values. It also truncates any decimal 
part. Here's a function that works with any Double value:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function FPMod(ByVal Number As Double, ByVal divisor As Double) As Double
    ' Note: this differs from MOD when Number is negative.
    FPMod = Number - Int(Number / divisor) * divisor
End Function
</pre>
</td></tr>
</table></p>

<p>Several other functions are often useful when you're working with numbers:</p>

<UL>
<p><li><I>Abs </I>returns the absolute value of its argument.</li></p>

<p><li><I>Sgn </I>returns -1, 0, or +1 if the argument is negative, zero, or positive, respectively.</li></p>

<p><li><I>Sqr</I> returns the square root of a number.</li></p>

<p><li><I>Exp</I> raises <I>e</I> (the base of natural logarithms) to the power passed in the argument.</li></p>

<p><li><I>Log </I>returns the natural logarithm of its argument. You can evaluate a decimal logarithm using the following function:</li></p>
 
<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Log10(Number As Double) As Double 
    Log10 = Log(Number) / 2.30258509299405

End Function
</pre>
</td></tr>
</table></p>
</UL>

<A NAME="168"><h2>Comparison Operators</h2></A>
<p>Visual Basic supports six comparison operators, which can be applied to both 
numeric and string operands:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
=   &lt;   &lt;=   &gt;   &gt;=   &lt;&gt;
</pre>
</td></tr>
</table></p>

<p>These operators are often used in <I>If</I> blocks, but you should keep in mind 
that they aren't conceptually different from any other math operators, in the sense that 
they accept two operands and deliver a result. Such a result can be False (0) or 
True (-1). You can sometimes exploit this fact to write more concise code, as in the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The following lines are equivalent.
If x &gt; y Then x = x _ 1
x = x + (x &gt; y)
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You should always be careful when using the = operator on 
Single and Double values because Visual Basic often introduces small rounding 
errors when operating on floating-point numbers. For example, look at this code:

<p><table><tr><td>
<pre>
Dim d As Double, i As Integer

For i = 1 To 10: d = d + 0.1: Next

Print d, (d = 1)        ' Displays &quot;1  False&quot; !!!
</pre>
</td></tr>
</table></p>

<p>The preceding result seems absurd because the variable appears to contain 
the correct value, but the test (<I>d </I>=<I> 
1</I>) returns False. You shouldn't rely on what 
Visual Basic shows you in a <I>Print </I>statement because it always rounds decimal 
numbers. In fact, the actual value of the <I>d 
</I>variable is slightly less than 1, the 
exact difference being 1.11022302462516E-16 (a number with 15 zeros after the 
decimal separator), but this is enough to make the equality test fail. Therefore, 
my recommendation is that you never use the = on floating-point numbers. 
Here's a better approach:</p>

<p><table><tr><td>
<pre>
' &quot;equal&quot; up to 10th decimal digit
Function AlmostEqual(x, y) As Boolean
    AlmostEqual = (Abs(x - y) &lt;= 0.0000000001)

End Function
</pre>
</td></tr>
</table></p>
</blockquote></div></p>

<A NAME="169"><h2>Boolean and Bit-Wise Operators</h2></A>
<p>Visual Basic for Applications supports a few Boolean operators, which are 
especially useful for combining multiple Boolean subexpressions. The operators used 
most frequently are AND, OR, XOR, and NOT. For example, the following code 
uses Boolean operators to determine the signs of two variables:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If (x &gt; 0) And (y &gt; 0) Then
    ' Both X and Y are positive.
ElseIf (x = 0) Or (y = 0) Then
    ' Either X or Y (or both) are zero.
ElseIf (x &gt; 0) Xor (y &gt; 0) Then
    ' Either X or Y (but not both of them) are positive.
ElseIf Not (x &gt; 0) Then
    ' X is not positive.
End If
</pre>
</td></tr>
</table></p>

<p>Remember that these operators are actually <I>bit-wise 
</I>operators, in that they act on each individual bit of their operands. In practice, this can make a difference if 
the operands aren't Boolean values (that is, they have a value different from 
-1 and 0). You can use the AND operator to test one or more bits of a number:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If (number And 1) Then Print &quot;Bit 0 is set (number is an odd value)&quot;
If (number And 6) = 6 Then Print &quot;Both bits 1 and 2 are set&quot;
If (number And 6) Then Print &quot;Either bits 1 and 2, or both, are set&quot;
</pre>
</td></tr>
</table></p>

<p>You usually use the OR operator to set one or more bits:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
number = number Or 4          ' Set bit 2. 
number = number Or (8 + 1)    ' Set bits 3 and 0.
</pre>
</td></tr>
</table></p>

<p>To reset one or more bits, you combine the AND and 
NOT operators:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Number = number And Not 4     ' Reset bit 2.
</pre>
</td></tr>
</table></p>

<p>Finally you use the XOR operator to flip the state of one or more bits:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Number = number Xor 2         ' Flip the state of bit 1.
</pre>
</td></tr>
</table></p>

<p>If you don't know at compile time which bit should be set, reset, or 
flipped, you can use the exponentiation operator, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Number = Number Or (2 ^ N)    ' Set Nth bit (N in range 0-30).
</pre>
</td></tr>
</table></p>

<p>This approach has two defects: It raises an overflow error if 
<I>N = 31</I>, and it's highly inefficient because it relies on a floating-point operation. You can solve both 
problems with the following function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Power2(ByVal exponent As Long) As Long
    Static result(0 To 31) As Long, i As Integer
    ' Evaluate all powers of 2 only once.
    If result(0) = 0 Then
        result(0) = 1
        For i = 1 To 30
            result(i) = result(i - 1) * 2
        Next
        result(31) = &amp;H80000000        ' This is a special value. 
    End If
    Power2 = result(exponent)
End Function
</pre>
</td></tr>
</table>
</p>

<A NAME="170"><h2>Rounding and Truncating</h2></A>
<p>The <I>Int</I> function truncates a number to the integer value equal or lower than its 
argument. This is different from just saying &quot;truncates the decimal part of a 
number.&quot; The difference becomes apparent if the argument is negative:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Int(1.2)             ' Displays &quot;1&quot;
Print Int(-1.2)            ' Displays &quot;-2&quot;
</pre>
</td></tr>
</table></p>

<p> The function that actually truncates the decimal part of a number is 
<I>Fix</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Fix(1.2)             ' Displays &quot;1&quot;
Print Fix(-1.2)            ' Displays &quot;-1&quot;
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>Visual Basic 6 introduces a new math function, 
<I>Round</I>, which lets you round a decimal number to the number of digits you want (or to the nearest integer, if 
the second argument is omitted):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Round(1.45)          ' Displays &quot;1&quot;
Print Round(1.55)          ' Displays &quot;2&quot;
Print Round(1.23456, 4)    ' Displays &quot;1.2346&quot;
</pre>
</td></tr>
</table></p>

<p><I>Round</I> has an undocumented quirk: When the fractional part is exactly 0.5, 
it rounds up if the integer portion is an odd number and rounds down if it's even:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Round(1.5), Round(2.5)   ' Both display &quot;2&quot;.
</pre>
</td></tr>
</table></p>

<p>This behavior is necessary so that you can avoid introducing errors when 
you're doing statistical evaluations, and it shouldn't be considered a bug.</p>

<p>When rounding, you sometimes need to determine the nearest integer 
higher or equal to the argument, but Visual Basic lacks such a function. You can remedy 
this problem with this short routine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Ceiling(number As Double) As Long
    Ceiling = -Int(-number)
End Function
</pre>
</td></tr>
</table>
</p>

<A NAME="171"><h2>Converting Among Different Numeric Bases</h2></A>
<p>VBA supports numeric constants in decimal, hexadecimal, and octal systems:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
value = &amp;H1234       ' The value 4660 as a hexadecimal constant
value = &amp;O11064      ' The same value as octal constant
</pre>
</td></tr>
</table></p>

<p>You can convert any hexadecimal or octal string into its decimal value 
using the <I>Val</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' If Text1 holds a hexadecimal value
value = Val(&quot;&amp;H&quot; &amp; Text1.Text)
</pre>
</td></tr>
</table></p>

<p>You do the opposite conversion&#8212;from decimal to hexadecimal or 
octal&#8212;using the <I>Hex</I> and <I>Oct 
</I>functions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text1.Text = Hex$(value)
</pre>
</td></tr>
</table></p>

<p>Oddly, Visual Basic doesn't include a function that converts to and from 
binary numbers, which are by far more common than octal values. You can achieve 
these conversions using a pair of functions, which build on the 
<I>Power2</I> function seen in the section &quot;<A HREF="#169">Boolean and Bit-Wise Operators</A>&quot; earlier in this chapter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Convert from decimal to binary.
Function Bin(ByVal value As Long) As String
    Dim result As String, exponent As Integer
    ' This is faster than creating the string by appending chars.
    result = String$(32, &quot;0&quot;)
    Do
        If value And Power2(exponent) Then
            ' We found a bit that is set, clear it.
            Mid$(result, 32 - exponent, 1) = &quot;1&quot;
            value = value Xor Power2(exponent)
        End If
        exponent = exponent + 1
    Loop While value
    Bin = Mid$(result, 33 - exponent)  ' Drop leading zeros.
End Function

' Convert from binary to decimal.
Function BinToDec(value As String) As Long
    Dim result As Long, i As Integer, exponent As Integer
    For i = Len(value) To 1 Step -1
        Select Case Asc(Mid$(value, i, 1))
            Case 48      ' &quot;0&quot;, do nothing.
            Case 49      ' &quot;1&quot;, add the corresponding power of 2.
                result = result + Power2(exponent)
            Case Else
                Err.Raise 5  ' Invalid procedure call or argument
        End Select
        exponent = exponent + 1
    Next
    BinToDec = result
End Function
</pre>
</td></tr>
</table>
</p>

<A NAME="172"><h2>Format Options for Numbers</h2></A>
<p>All versions of the VBA language include the 
<I>Format</I> function, which is a powerful tool that meets most of your formatting requirements. Its syntax is rather complex:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
result = Format(Expression, [Format], _
    [FirstDayOfWeek As VbDayOfWeek = vbSunday], _
    [FirstWeekOfYear As VbFirstWeekOfYear = vbFirstJan1]) 
</pre>
</td></tr>
</table></p>

<p>Fortunately, the first two arguments are sufficient for all your tasks unless 
you're formatting dates, which I'll talk about later in this chapter. Right now I'll 
summarize the <I>Format </I>function's many capabilities when formatting numeric values, although 
I suggest that you have a look at Visual Basic documentation for more details.</p>

<p>When formatting numbers, the <I>Format</I> function supports both 
<I>named formats</I> and <I>custom formats</I>. 
Named<I> </I>formats include the following strings: 
<I>General Number</I> (no special formatting, use the scientific notation if needed), 
<I>Currency</I> (currency symbol, thousand separator and two decimal digits), 
<I>Fixed</I> (two decimal digits), <I>Standard</I> (thousand separator and two decimal digits), 
<I>Percent</I> (a percentage, with the <I>%</I> symbol appended), 
<I>Scientific</I> (scientific notation), 
<I>Yes/No</I>, <I>True/False</I>, <I>On/Off</I> 
(False or Off if 0, True or On otherwise). 
<I>Format</I> is a <I>locale-aware </I>function and 
automatically uses the currency symbol, the thousand separator, and the decimal 
separator that are appropriate to the current locale.</p>

<p>If a named format doesn't do the job, you can create your own custom 
format using a format string made up of special characters. (For a detailed list and 
the meaning of such formatting characters, see the Visual Basic documentation.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Decimal and thousand separators. (Format rounds its result.)
Print Format(1234.567, &quot;#,##0.00&quot;)   ' &quot;1,234.57&quot;
' Percentage values
Print Format(0.234, &quot;#.#%&quot;)          ' &quot;23.4%&quot;
' Scientific notation
Print Format(12345.67, &quot;#.###E+&quot;)    ' &quot;1.235E+4&quot;
Print Format(12345.67, &quot;#.###E-&quot;)    ' &quot;1.235E4&quot;
</pre>
</td></tr>
</table></p>

<p>A great feature of the <I>Format</I> function is its ability to apply different 
format strings if the number is positive, negative, 0, or Null. You use the semicolon as 
the delimiter of the section in the custom format string. (You can specify one, two, 
three, or four different sections.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Two decimal digits for positive numbers, enclose negative numbers within
' a pair of parentheses, use a blank for zero, and &quot;N/A&quot; for Null values.
Print Format(number, &quot;##,###.00;(##,###.00); ;N/A&quot;)
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>Visual Basic 6 has introduced three new formatting functions for 
numbers&#8212;namely <I>FormatNumber</I>, 
<I>FormatPercent</I>, and <I>FormatCurrency</I>&#8212;that have 
been borrowed from VBScript. (Three more 
functions&#8212;<I>FormatDate</I>, <I>MonthName</I>, 
and <I>WeekdayName</I>&#8212;are explained in the section &quot;Working with Dates,&quot; later in 
this chapter.) These new functions duplicate the capabilities of the more powerful, 
all-in-one <I>Format </I>workhorse, but their syntax is more intuitive, as you can see in 
the code below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
result = FormatNumber(expr, [DecDigits], [InclLeadingDigit], _
    [UseParens], [GroupDigits] )
result = FormatPercent(expr, [DecDigits], [InclLeadingDigit], _
    [UseParens], [GroupDigits] )
result = FormatCurrency(expr, [DecDigits], [InclLeadingDigit], _
    [UseParens], [,GroupDigits] )
</pre>
</td></tr>
</table></p>

<p>In all cases, <I>DecDigits </I>is the number of decimal digits you want (2 is the 
default); <I>InclLeadingDigit </I>tells whether numbers in the range 
[-1,1] are displayed with a leading 0; <I>UseParens 
</I>specifies whether negative numbers are enclosed in 
parentheses; <I>GroupDigits </I>tells whether a thousand separator should be used. The last 
three optional arguments can each be one of the following values: 0-vbFalse, 
-1-vbTrue, or -2-vbUseDefault (the default setting for the user's locale). If you omit a 
value, vbUseDefault is assumed by default.</p>

<A NAME="173"><h2>Random Numbers</h2></A>
<p>At times, you need to generate one or more random values. Among the types 
of software for which you need to do this, games come to mind, but this ability is 
also useful in business applications that include simulations. Visual Basic offers only 
one statement and one function for generating random values. You initialize the seed 
of the internal random number generators using the 
<I>Randomize</I> statement. You can pass it a number that will be used as a seed; otherwise, Visual Basic automatically 
uses the value returned by the <I>Timer</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Randomize 10
</pre>
</td></tr>
</table></p>

<p>The <I>Rnd</I> function returns a random value each time you call it. The 
returned value is always less than 1 and greater than or equal to 0, so you need to scale 
the result to get a number in the range you want:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Simple computerized dice
Randomize
For i = 1 To 10
    Print Int(Rnd * 6) + 1
Next
</pre>
</td></tr>
</table></p>

<p>At times, you might want to repeat the same sequence of random 
numbers, especially when debugging your code. It might seem that you can obtain this 
behavior by calling the <I>Randomize</I> statement with the same seed, but this isn't so. Instead, 
as counterintuitive as it may seem, to repeat the same random sequence you call 
the <I>Rnd</I> function with a negative argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
dummy = Rnd(-1)            ' Initialize the seed. (No Randomize is needed!)
For i = 1 To 10            ' This loop will always deliver the same
    Print Int(Rnd * 6) + 1 ' sequence of random numbers.
Next
</pre>
</td></tr>
</table></p>

<p>You can also reread the random number that you have just generated by 
passing 0 as an argument to <I>Rnd</I>.</p>

<p>A common task when you're dealing with random numbers is the 
generation of a casual permutation of the numbers in a given range: for example, this might 
be useful for shuffling a deck of cards in a game. Here's a simple and efficient 
routine that returns an array of all Long numbers in the range of 
<I>first </I>and <I>last</I>, in random order:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function RandomArray(first As Long, last As Long) As Long()
    Dim i As Long, j As Long, temp As Long
    ReDim result(first To last) As Long
    ' Initialize the array.
    For i = first To last: result(i) = i: Next
    ' Now shuffle it.
    For i = last To first Step -1
        ' Generate a random number in the proper range.
        j = Rnd * (last - first + 1) + first
        ' Swap the two items.
        temp = result(i): result(i) = result(j): result(j) = temp
    Next
    RandomArray = result
End Function
</pre>
</td></tr>
</table>
</p>


<a name="A33"></a><h3>5.5.3 Working with Strings</h3>

<A HREF="#A32">[Previous]</A> <A HREF="#A34">[Next]</A><P>

<A NAME="174"><h1>Working with Strings</h1></A>
<p>Visual Basic for Applications includes many powerful string functions, and it's 
sometimes difficult at first glance to determine which one meets your requirements. In 
this section, I briefly describe all the string functions at your disposal, offer some tips 
for selecting the most suitable one in some typical situations, and also provide some 
useful string functions that you can reuse in your applications.</p>

<A NAME="175"><h2>Basic String Operators and Functions</h2></A>
<p>The basic string operator &amp; performs a string concatenation. The result is a 
string consisting of all the characters of the first string followed by all the characters of 
the second string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print &quot;ABCDE&quot; &amp; &quot;1234&quot;       ' Displays &quot;ABCDE1234&quot;
</pre>
</td></tr>
</table></p>

<p>Many programmers with roots in QuickBasic still use the + operator for 
performing string concatenation. This is a dangerous practice that impacts code readability 
and might introduce unexpected behaviors when either operand isn't a string.</p>

<p>The next bunch of popular string functions, shown below, includes <I>Left$</I>, <I>Right$,</I><B> 
</B>and <I>Mid$</I>, which extract a substring from the beginning, the 
end, or the middle of the source string.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text = &quot;123456789&quot;
Print Left$(text, 3)         ' Displays &quot;123&quot;
Print Right$(text, 2)        ' Displays &quot;89&quot;
Print Mid$(text, 3, 4)       ' Displays &quot;3456&quot;
</pre>
</td></tr>
</table></p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
The VBA documentation consistently omits the trailing 
<I>$</I> character in all string functions and invites you to use the new 
<I>$</I>-less functions. <I>Don't do it!</I> A 
<I>$</I>-less function returns a Variant that contains the string result, which means 
in most cases the Variant must be reconverted to a string before it can be reused 
in expressions or assigned to a String variable. This is a time-consuming 
process that gives you nothing in return. Informal benchmarks show that, for 
example, the <I>Left$</I> function is up to twice as fast as its 
<I>$</I>-less counterpart. A similar reasoning applies to other functions that exist in both forms, including 
<I>LCase</I>, <I>UCase</I>, <I>LTrim</I>, 
<I>RTrim</I>, <I>Trim</I>, <I>Chr</I>, 
<I>Format</I>, <I>Space</I>, and <I>String</I>.
</blockquote></div></p>

<p> <I>Mid$</I> can also work as a command in that it lets you modify one or 
more characters inside a string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text = &quot;123456789&quot;
Mid$(Text, 3, 4) = &quot;abcd&quot;    ' Now Text = &quot;12abcd789&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Len</I> function returns the current length of a string. It's often used to 
test whether a string contains any characters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Len(&quot;12345&quot;)          ' Displays &quot;5&quot;
If Len(Text) = 0 Then ...   ' Faster than comparison with an empty string.
</pre>
</td></tr>
</table></p>

<p>To discard unwanted trailing or leading blanks, you can use the 
<I>LTrim$</I>, <I>RTrim$</I>, and <I>Trim$</I> functions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text = &quot;  abcde  &quot;
Print LTrim$(Text)           ' Displays &quot;abcde  &quot;
Print RTrim$(Text)           ' Displays &quot;  abcde&quot;
Print Trim$(Text)            ' Displays &quot;abcde&quot;
</pre>
</td></tr>
</table></p>

<p>These functions are especially useful with fixed-length strings that are filled 
with extra spaces to account for their expected length. You can trim those extra 
spaces using the <I>RTrim$</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim Text As String * 10
Text = &quot;abcde&quot;               ' Text now contains &quot;abcde     &quot;.
Print Trim$(Text)            ' Displays &quot;abcde&quot;
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
When a fixed-length string is declared but hasn't been used yet, 
it contains Null characters, not spaces. This means that the 
<I>RTrim$</I> function can't trim such a string:

<p><table><tr><td>
<pre>
Dim Text As String * 10
Print Len(Trim$(Text))       ' Displays &quot;10&quot;, no trimming has occurred.
</pre>
</td></tr>
</table></p>

<p>You can avoid this problem by simply assigning an empty string to all the 
fixed-length strings in your application soon after their declaration and before using 
them.</p>
</blockquote></div></p>

<p>The <I>Asc</I> function returns the character code of the first letter in a string. 
Functionally, it's similar to extracting the first character using the 
<I>Left$</I> function, but <I>Asc</I> is considerably faster:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If Asc(Text) = 32 Then        ' Test whether the fist char is a space.
If Left$(Text, 1) = &quot; &quot; Then  ' Same effect, but 2 to 3 times slower
</pre>
</td></tr>
</table></p>

<p>When you're using the <I>Asc</I> function, you should ensure that the string isn't 
empty because in that case the function raises an error. In a sense, 
<I>Chr$</I> is the opposite of <I>Asc</I> in that it transforms a numeric code into the corresponding character:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Chr$(65)                ' Displays &quot;A&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Space$</I> and <I>String$</I><B> 
</B>functions are very similar. The former returns a 
string of spaces of the length you want, and the latter returns a string that consists of 
the character specified in the second parameter repeated as many times as you 
indicated in the first parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Space$(5)               ' Displays &quot;     &quot; (five spaces)
Print String$(5, &quot; &quot;)         ' Same effect
Print String$(5, 32)          ' Same effect, using the char code
Print String$(50, &quot;.&quot;)        ' A row of 50 dots
</pre>
</td></tr>
</table></p>

<p>Finally the <I>StrComp</I> function lets you compare strings in a case-insensitive 
fashion and returns -1, 0, or 1 if the first argument is less than, equal to, or greater 
than the second argument. The third argument specifies whether the comparison 
should be performed in a case-insensitive way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case StrComp(first, second, vbTextCompare)
    Case 0
        ' first = second   (e.g. &quot;VISUAL BASIC&quot; vs. &quot;Visual Basic&quot;)
    Case -1
        ' first &lt; second   (e.g. &quot;C++&quot; vs. &quot;Visual Basic&quot;)
    Case 1
        ' first &gt; second   (e.g. &quot;Visual Basic&quot; vs. &quot;Delphi&quot;)
End Select
</pre>
</td></tr>
</table></p>

<p>The <I>StrComp</I> function is sometimes convenient even for case-sensitive 
comparisons because you don't need two separate tests to decide whether a string is less 
than, equal to, or greater than another one.</p>

<A NAME="176"><h2>Conversion Functions</h2></A>
<p>The most frequently used functions for converting strings are 
<I>UCase$</I> and <I>LCase$</I>, which transform their arguments to uppercase and lowercase, respectively:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text = &quot;New York, USA&quot;
Print UCase$(Text)                 ' &quot;NEW YORK, USA&quot;
Print LCase$(Text)                 ' &quot;new york, usa&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>StrConv</I> function encompasses the functionality of the first two and 
adds more capabilities. You can use it to convert to uppercase, lowercase, and 
propercase (where the first letter of each word is uppercase, and all the others are lowercase):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print StrConv(Text, vbUpperCase)   ' &quot;NEW YORK, USA&quot;
Print StrConv(Text, vbLowerCase)   ' &quot;new york, usa&quot;
Print StrConv(Text, vbProperCase)  ' &quot;New York, Usa&quot;
</pre>
</td></tr>
</table></p>

<p>(Valid word separators are spaces, Null characters, carriage returns, and line 
feeds.) The function can also perform ANSI-to-Unicode conversion and back, using 
the <I>vbUnicode</I> and <I>vbFromUnicode</I> symbolic constants. You'll rarely use these 
functions in your regular Visual Basic applications.</p>

<p>The <I>Val</I> function converts a string into its decimal representation. (See also 
the section &quot;<A HREF="#171">Converting Among Different Numeric Bases</A>,&quot; earlier in this chapter). 
Visual Basic also includes functions that can convert from a string to a numeric value, 
such as <I>CInt</I>,<I> CLng</I>,<I> CSng</I>,<I> 
CDbl</I>,<I> CCur</I>,<I> </I>and<I> CDate</I>. The main difference between them 
and the <I>Val</I> function is that they're locale aware. For example, they correctly 
recognize the comma as the decimal separator in countries where this is the case and 
ignore any thousand separator characters. Conversely, the 
<I>Val</I> function recognizes only the decimal point and stops parsing its argument when it finds any invalid 
characters (including a currency symbol or a comma used for grouping thousand digits).</p>

<p>The <I>Str$</I> function converts a number into its string representation. The 
main difference between <I>Str$</I> and 
<I>CStr</I> is that the former adds a leading space if the 
argument is positive, whereas the latter does not.</p>

<A NAME="177"><h2>Find and Replace Substrings</h2></A>
<p>The <I>InStr </I>function searches for a substring in another string, either in 
case-sensitive or case-insensitive mode. You can't omit the starting index if you want to pass 
the argument that specifies which kind of search you want to perform:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print InStr(&quot;abcde ABCDE&quot;, &quot;ABC&quot;)     ' Displays &quot;7&quot; (case sensitive)
Print InStr(8, &quot;abcde ABCDE&quot;, &quot;ABC&quot;)  ' Displays &quot;0&quot; (start index &gt; 1)
Print InStr(1, &quot;abcde ABCDE&quot;, &quot;ABC&quot;, vbTextCompare)
                                      ' Displays &quot;1&quot; (case insensitive)
</pre>
</td></tr>
</table></p>

<p>The <I>InStr</I> function is very handy for building other powerful string 
functions that are missing in the VBA language. For example, this is a function that 
searches for the first occurrence of a character among those included in a search table. It's 
useful for extracting words that can be delimited by many different punctuation characters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function InstrTbl(source As String, searchTable As String, _
    Optional start As Long = 1, _
    Optional Compare As VbCompareMethod = vbBinaryCompare) As Long
    Dim i As Long
    For i = start To Len(source)
        If InStr(1, searchTable, Mid$(source, i, 1), Compare) Then
            InstrTbl = i
            Exit For
        End If
    Next
End Function
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p> Visual Basic 6 lets you perform backward searches, using the new 
<I>InStrRev</I> function. Its syntax is similar to the original 
<I>InStr</I> function, but the order of its arguments is different:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
found = InStrRev(Source, Search, [Start], [CompareMethod])
</pre>
</td></tr>
</table></p>

<p>Here are a few examples. Note that if you omit the 
<I>start </I>argument, the search starts at the end of the string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print InStrRev(&quot;abcde ABCDE&quot;, &quot;abc&quot;)    ' Displays &quot;1&quot; (case sensitive)
Print InStrRev(&quot;abcde ABCDE&quot;, &quot;abc&quot;, ,vbTextCompare )  
                                        ' Displays &quot;7&quot; (case insensitive)
Print InStrRev(&quot;abcde ABCDE&quot;, &quot;ABC&quot;, 4, vbTextCompare )
                            ' Displays &quot;1&quot; (case insensitive, start&lt;&gt;0)
</pre>
</td></tr>
</table></p>

<p>Visual Basic also includes a handy string operator, the 
<I>Like </I>operator, which is often a life saver when you're parsing a string and performing complex searches. 
The syntax of this operator is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
result <B>=</B> string Like pattern
</pre>
</td></tr>
</table></p>

<p>where <I>string </I>is the string being parsed and 
<I>pattern </I>is a string made up of special characters that define the search condition. The most frequently used special 
characters are <I>?</I> (any single character), 
<I>*</I> (zero or more characters), and <I>#</I> (any single 
digit). Here are a few examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The Like operator is affected by the current Option Compare setting.
Option Compare Text                 ' Enforce case-insensitive comparisons.
' Check that a string consists of &quot;AB&quot; followed by three digits.
If value Like &quot;AB###&quot; Then ...      ' e.g. &quot;AB123&quot; or &quot;ab987&quot;
' Check that a string starts with &quot;ABC&quot; and ends with &quot;XYZ&quot;.
If value Like &quot;ABC*XYZ&quot; Then ...    ' e.g. &quot;ABCDEFGHI-VWXYZ&quot;
' Check that starts with &quot;1&quot;, ends with &quot;X&quot;, and includes 5 chars.
If value Like &quot;1???X&quot; Then ...      ' e.g. &quot;1234X&quot; or &quot;1uvwx&quot;
</pre>
</td></tr>
</table></p>

<p>You can also specify which characters you want to include (or exclude) in 
the search by inserting a list enclosed in square brackets:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' One of the letters &quot;A&quot;,&quot;B&quot;,&quot;C&quot; followed by three digits
If value Like &quot;[A-C]###&quot; Then ...           ' e.g. &quot;A123&quot; or &quot;c456&quot;
' Three letters, the first one must be a vowel
If value Like &quot;[AEIOU][A-Z][A-Z]&quot; Then...  ' e.g. &quot;IVB&quot; or &quot;OOP&quot;
' At least three characters, the first one can't be a digit.
' Note: a leading &quot;!&quot; symbol excludes a range.
If value Like &quot;[!0-9]??*&quot; Then ...  ' e.g. &quot;K12BC&quot; or &quot;ABHIL&quot;
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p> Visual Basic 6 introduces the new 
<I>Replace</I> function, which quickly finds 
and replaces substrings. The syntax of this function isn't straightforward because 
the function includes several optional arguments:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Text = Replace(Source, Find, Replace, [Start], [Count], [CompareMethod])
</pre>
</td></tr>
</table></p>

<p>The simplest form searches substrings in case-sensitive mode and replaces 
all occurrences:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Replace(&quot;abc ABC abc&quot;, &quot;ab&quot;, &quot;123&quot;)         ' &quot;123c ABC 123c&quot;
</pre>
</td></tr>
</table></p>

<p>By acting on the other arguments, you can start your search from a 
different position, limit the number of substitutions, and perform a case-insensitive search. 
Note that a value for <I>start </I>greater than 1 actually trims the source argument before 
starting the search:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Replace(&quot;abc ABC abc&quot;, &quot;ab&quot;, &quot;123&quot;, 5, 1)                ' &quot;ABC 123c&quot;
Print Replace(&quot;abc ABC abc&quot;, &quot;ab&quot;, &quot;123&quot;, 5, 1, vbTextCompare) ' &quot;123C abc&quot;
</pre>
</td></tr>
</table></p>

<p>You can also use the <I>Replace </I>function in a somewhat unorthodox way to 
count the number of occurrences of a substring inside another string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function InstrCount(Source As String, Search As String) As Long
    ' You get the number of substrings by subtracting the length of the 
    ' original string from the length of the string that you obtain by 
    ' replacing the substring with another string that is one char longer.
    InstrCount = Len(Replace(Source, Search, Search &amp; &quot;*&quot;)) - Len(Source)
End Function
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>The new <I>StrReverse</I> function quickly reverses the order of characters in a 
string. This function is rarely useful in itself, but it adds value to other 
string-processing functions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Replace only the LAST occurrence of a substring.
Function ReplaceLast(Source As String, Search As String, _
    ReplaceStr As String) As String
        ReplaceLast = StrReverse(Replace(StrReverse(Source), _
            StrReverse(Search), StrReverse(ReplaceStr), , 1))
End Function
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>You can use the new <I>Split</I> function to find all the delimited items in a string. 
Its syntax is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
arr() = Split(Source, [Delimiter], [Limit], [CompareMethod])
</pre>
</td></tr>
</table></p>

<p>where <I>delimiter </I>is the character used to delimit individual items. You can pass 
a positive value for the <I>limit </I>argument if you don't want more items than a given 
value, and you can pass the <I>vbTextCompare</I> value to the last argument to perform 
case-insensitive searches. Since the default delimiter character is the space, you can 
easily extract all the words in a sentence using this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim words() As String
words() = Split(&quot;Microsoft Visual Basic 6&quot;)
' words() is now a zero-based array with four elements.
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>The <I>Join</I> function is complementary to the 
<I>Split</I> function in that it accepts an array of strings and one delimiter character and rebuilds the original string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Continuing the preceding example ...
' The delimiter argument is optional here, because it defaults to &quot; &quot;.
Print Join(words, &quot; &quot;)       ' Displays &quot;Microsoft Visual Basic 6&quot;
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>Note that the delimiter argument in both the 
<I>Split </I>and <I>Join </I>functions can be longer than just one character.</p>

<p>Another welcome addition to the VBA language is the 
<I>Filter</I> function, which quickly scans an array searching for a substring and returns another array that 
contains only the items that include (or don't include) the searched substring. The 
syntax for the <I>Filter</I> function is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
arr() = Filter(Source(), Search, [Include], [CompareMethod])
</pre>
</td></tr>
</table></p>

<p>If the <I>Include </I>argument is True or omitted, the result array contains all the 
items in <I>source</I> that contain the <I>search 
</I>substring; if it's False, the result array contains 
only the items that don't contain it. As usual, the 
<I>CompareMethod </I>argument specifies whether the search is case sensitive:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
ReDim s(2) As String
s(0) = &quot;First&quot;: s(1) = &quot;Second&quot;: s(2) = &quot;Third&quot;
Dim res() As String
res = Filter(s, &quot;i&quot;, True, vbTextCompare)
' Print the result array  (&quot;First&quot; and &quot;Third&quot;).
For i = 0 To UBound(res): Print res(i): Next
</pre>
</td></tr>
</table></p>

<p>If no items in the source array meet the search requirements, the 
<I>Filter</I> function delivers a special array that returns _1 when passed to the 
<I>UBound</I> function.</p>

<A NAME="178"><h2>Format Options for Strings</h2></A>
<p>You can also use the <I>Format</I> function to format strings. In this case, you can 
specify only a custom format (no named formats are available for string data) and you 
have a limited choice of special characters, but you can get a lot of flexibility anyway. 
You can specify two sections, one for non-empty string values and one for empty 
string values as shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' By default, placeholders are filled from right to left.
' &quot;@&quot; stands for a character or a space, &quot;&amp;&quot; is a character or nothing.
Print Format(&quot;abcde&quot;, &quot;@@@@@@@&quot;)                          ' &quot;  abcde&quot;
' You can exploit this feature to right align numbers in reports.
Print Format(Format(1234.567, &quot;Currency&quot;), &quot;@@@@@@@@@@@&quot;) ' &quot;  $1,234.57&quot;
' &quot;!&quot; forces left to right fill of placeholders.
Print Format(&quot;abcde&quot;, &quot;!@@@@@@@&quot;)                         ' &quot;abcde  &quot;
' &quot;&gt;&quot; forces to uppercase, &quot;&lt;&quot; forces to lowercase.
Print Format(&quot;abcde&quot;, &quot;&gt;&amp; &amp; &amp; &amp; &amp;&quot;)                       ' &quot;A B C D E&quot;
' This is a good way to format phone numbers or credit-card numbers.
Print Format(&quot;6152127865&quot;, &quot;&amp;&amp;&amp;-&amp;&amp;&amp;-&amp;&amp;&amp;&amp;&quot;)                ' &quot;615-212-7865&quot;
' Use a second section to format empty strings.
' &quot;\&quot; is the escape character.
Print Format(&quot;&quot;, &quot;!@@@@@@@;\n\o\n\e&quot;)                     ' &quot;none&quot;
</pre>
</td></tr>
</table>
</p>


<a name="A34"></a><h3>5.5.4 Working with Dates and Times</h3>

<A HREF="#A33">[Previous]</A> <A HREF="#A35">[Next]</A><P>

<A NAME="179"><h1>Working with Dates and Times</h1></A>
<p>Not only does Visual Basic let you store date and time information in the specific 
Date data type, it also provides a lot of date- and time-related functions. These 
functions are very important in all business applications and deserve an in-depth look.</p>

<A NAME="180"><h2>Getting and Setting the Current Date and Time</h2></A>
<p>Strictly speaking, <I>Date</I> and 
<I>Time</I> aren't functions: They're properties. In fact, you 
can use them to either retrieve the current date and time (as Date values) or assign 
new values to them to modify the system settings:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Date &amp; &quot; &quot; &amp; Time         ' Displays &quot;8/14/98 8:35:48 P.M.&quot;.
' Set a new system date using any valid date format.
Date = &quot;10/14/98&quot;
Date = &quot;October 14, 1998&quot;
</pre>
</td></tr>
</table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
To help you compare the outcome of all date and time functions, all 
the examples in this section assume that they're executed at the date and time 
shown in the preceding code snippet: August 14, 1998, 8:35:48 
p.m.
</blockquote></div></p>

<p>The outdated <I>Date$</I> and 
<I>Time$</I> properties can also be used for the same 
task. They're String properties, however, and therefore recognize only the 
<I>mm/dd/yy</I> or <I>mm/dd/yyyy</I> formats and the 
<I>hh:mm:ss</I> and <I>hh:mm</I> formats, respectively. For 
this reason, it's usually better to use the new 
<I>$</I>-less functions.</p>

<p>The <I>Now</I> function returns a Date value that contains the current date and time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Now                       ' Displays &quot;8/14/98 8:35:48 P.M.&quot;.
</pre>
</td></tr>
</table></p>

<p>But the time-honored <I>Timer</I> function returns the number of seconds elapsed 
from midnight and is more accurate than <I>Now</I> because the 
<I>Timer </I>function includes fractional parts of seconds. (The actual accuracy depends on the system.) This 
function is often used for benchmarking a portion of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
StartTime = Timer
' Insert the code to be benchmarked here.
Print Timer - StartTime
</pre>
</td></tr>
</table></p>

<p>The preceding code suffers from some inaccuracy: The 
<I>StartTime</I> variable might be assigned when the system tick is about to expire, so your routine could 
appear to take longer than it actually does. Here's a slightly better approach:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
StartTime = NextTimerTick
' Insert the code to be benchmarked here.
Print Timer _ StartTime

' Wait for the current timer tick to elapse.
Function NextTimerTick() As Single
    Dim t As Single
    t = Timer
    Do: Loop While t = Timer
    NextTimerTick = Timer
End Function
</pre>
</td></tr>
</table></p>

<p>If you're using the <I>Timer</I> function in production code, you should be aware 
that it's reset at midnight, so you always run the risk of introducing unlikely but 
potentially serious errors. Try to spot the bug in this routine, which adds a CPU-independent 
pause in your code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' WARNING: this procedure has a bug.
Sub BuggedPause(seconds As Integer)
    Dim start As Single
    start = Timer
    Do: Loop Until Timer _ start  &gt;= seconds
End Sub
</pre>
</td></tr>
</table></p>

<p>The bug manifests itself very rarely&#8212;for example, if the program asks for 
a 2-second pause at 11:59:59 p.m. Even if this probability is small, the effect of 
this minor bug is devastating and you'll have to press Ctrl+Alt+Del to kill your 
compiled application. Here's a way to work around this issue:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The correct version of the procedure
Sub Pause(seconds As Integer)
    Const SECS_INDAY = 24! * 60 * 60    ' Seconds per day
    Dim start As Single
    start = Timer
    Do: Loop Until (Timer + SECS_INDAY - start) Mod SECS_INDAY &gt;= seconds
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="181"><h2>Building and Extracting Date and Time Values</h2></A>
<p>There are many ways to assemble a Date value. For example, you can use a 
Date constant, such as the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
StartDate = #8/15/1998 9:20:57 PM#
</pre>
</td></tr>
</table></p>

<p>but more often you'll build a Date value using one of the many functions that 
VBA gives you. The <I>DateSerial</I> function builds a Date value from its 
year/month/day components; similarly, the 
<I>TimeSerial</I> function builds a Time value from its 
hour/minute/second components:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print DateSerial(1998, 8, 14)          ' Displays &quot;8/14/98&quot;
Print TimeSerial(12, 20, 30)           ' Displays &quot;12:20:30 P.M.&quot;
' Note that they don't raise errors with invalid arguments.
Print DateSerial(1998, 4, 31)          ' Displays &quot;5/1/98&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>DateSerial</I> function is also useful for determining indirectly whether a 
particular year is a leap year:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function IsLeapYear(year As Integer) As Boolean
    ' Are February 29 and March 1 different dates?
    IsLeapYear = DateSerial(year, 2, 29) &lt;&gt; DateSerial(year, 3, 1)
End Function
</pre>
</td></tr>
</table></p>

<p>The <I>DateValue</I> and 
<I>TimeValue</I> functions return the date or time portions of 
their argument, which can be a string or a Date expression:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The date a week from now
Print DateValue(Now + 7)            ' Displays &quot;8/21/98&quot;
</pre>
</td></tr>
</table></p>

<p>A bunch of VBA functions let you extract date and time information from a 
Date expression or variable. The <I>Day</I>, 
<I>Month</I>, and <I>Year</I> functions return date 
values, whereas the <I>Hour</I>,<I> Minute</I>,<B> 
</B>and <I>Second</I> functions return time values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Get information about today's date.
y = Year(Now): m = Month(Now): d = Day(Now)
' These functions also support any valid date format.
Print Year(&quot;8/15/1998 9:10:26 PM&quot;)    ' Displays &quot;1998&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Weekday</I> function returns a number in the range 1 through 7, which 
corresponds to the day of the week of a given Date argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Weekday(&quot;8/14/98&quot;)           ' Displays &quot;6&quot; (= vbFriday)
</pre>
</td></tr>
</table></p>

<p>The <I>Weekday</I> function returns 1 when the date is the first day of the week. 
This function is locale aware, which means that under different localizations of 
Microsoft Windows it could consider the first day of the week to be different from 
<I>vbSunday</I>. In most cases, this condition doesn't affect the structure of your code. But if you 
want to be sure that 1 means Sunday, 2 means Monday, and so on, you can force 
the function to return a consistent value under all Windows systems, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Weekday(Now, vbSunday)
</pre>
</td></tr>
</table></p>

<p>Although using the optional second argument forces the function to return 
the correct value, it doesn't change the system localization. If you next call the 
<I>Weekday</I> function without the second argument, it will still consider the first day of the 
week to be what it was before.</p>

<p>Finally you can extract any date and time information from a Date value 
or expression using the <I>DatePart</I> function, for which the syntax is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Result = DatePart(Interval, Date, [FirstDayOfWeek], [FirstWeekOfYear])
</pre>
</td></tr>
</table></p>

<p>You'll rarely need to resort to this function because you can do most of 
your calculations using the other functions I've shown you so far. In two cases, 
however, this function is really useful:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The quarter we are in
Print DatePart(&quot;q&quot;, Now)           ' Displays &quot;3&quot;
' The week number we are in (# of weeks since Jan 1st)
Print DatePart(&quot;ww&quot;, Now)          ' Displays &quot;33&quot;
</pre>
</td></tr>
</table></p>

<p> The first argument can be one of the String constants listed in Table 5.1. 
For more information about the two optional arguments, see the description of 
the <I>DateAdd</I> function in the next section.</p>

<p><B>Table 5-1.</B> <i>Possible values for the</i> interval <i>argument in</i> DatePart, DateAdd, <i>and</i> DateDiff <i>functions.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Setting</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">&quot;<I>yyyy&quot;</I></td>
<td valign="top">Year</td>
</tr>
<tr>
<td valign="top">&quot;<I>q&quot;</I></td>
<td valign="top">Quarter</td>
</tr>
<tr>
<td valign="top">&quot;<I>m&quot;</I></td>
<td valign="top">Month</td>
</tr>
<tr>
<td valign="top">&quot;<I>y&quot;</I></td>
<td valign="top">Day of the year (same as <I>d</I>)</td>
</tr>
<tr>
<td valign="top">&quot;<I>d&quot;</I></td>
<td valign="top">Day</td>
</tr>
<tr>
<td valign="top">&quot;<I>w&quot;</I></td>
<td valign="top">Weekday</td>
</tr>
<tr>
<td valign="top">&quot;<I>ww&quot;</I></td>
<td valign="top">Week</td>
</tr>
<tr>
<td valign="top">&quot;<I>h&quot;</I></td>
<td valign="top">Hour</td>
</tr>
<tr>
<td valign="top">&quot;<I>n&quot;</I></td>
<td valign="top">Minute</td>
</tr>
<tr>
<td valign="top">&quot;s&quot;</td>
<td valign="top">Second</td>
</tr>
</table></p>

<A NAME="182"><h2>Date Arithmetic</h2></A>
<p>In most cases, you don't need any special functions to perform date arithmetic. 
All you need to know is that the integer part in a Date variable holds the date 
information, and the fractional part holds the time information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' 2 days and 12 hours from now
Print Now + 2 + #12:00#        ' Displays &quot;8/17/98 8:35:48 A.M.&quot;
</pre>
</td></tr>
</table></p>

<p>For more sophisticated date math, you can use the 
<I>DateAdd</I> function, for which the syntax is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
NewDate = DateAdd(interval, number, date)
</pre>
</td></tr>
</table></p>

<p>The <I>interval </I>is a string that indicates a date or time unit (see Table 5-1), <I>number </I>is the number of units you are adding, and 
<I>date </I>is the starting date. You can use this function to add and subtract date and time values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The date three months from now
Print DateAdd(&quot;m&quot;, 3, Now)            ' Displays &quot;11/14/98 8:35:48 P.M.&quot;
' One year ago (automatically accounts for leap years)
Print DateAdd(&quot;yyyy&quot;, -1, Now)        ' Displays &quot;8/14/97 8:35:48 P.M.&quot;
' The number of months since Jan 30, 1998
Print DateDiff(&quot;m&quot;, #1/30/1998#, Now)       ' Displays &quot;7&quot;
' The number of days since Jan 30, 1998 _ you can use &quot;d&quot; or &quot;y&quot;.
Print DateDiff(&quot;y&quot;, #1/30/1998#, Now)       ' Displays &quot;196&quot;
' The number of entire weeks since Jan 30, 1998
Print DateDiff(&quot;w&quot;, #1/30/1998#, Now)       ' Displays &quot;28&quot;
' The number of weekends before 21st century - value &lt;0 means
' future dates.
' Note: use &quot;ww&quot; to return the number of Sundays in the date interval.
Print DateDiff(&quot;ww&quot;, #1/1/2000#, Now)       ' Displays &quot;-72&quot;
</pre>
</td></tr>
</table></p>

<p>When you have two dates and you want to evaluate the difference 
between them&#8212;that is, the time elapsed between one date and the next&#8212;you should use 
the <I>DateDiff</I> function, for which the syntax is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Result = DateDiff(interval, startdate, enddate _
    [, FirstDayOfWeek[, FirstWeekOfYear]])
</pre>
</td></tr>
</table></p>

<p>where<I> interval </I>has the meaning shown in Table 5-1, 
<I>FirstDayOfWeek </I>is an optional argument that you can use to specify which weekday should be considered as 
the first day of the week (you can use the constants 
<I>vbSunday</I>, <I>vbMonday</I>, and so on), and 
<I>FirstWeekOfYear </I>is another optional argument that lets you specify which 
week should be considered as the first week of the year. (See Table 5-2.)</p>

<p><B>Table 5-2.</B> <i>Possible values for the</i> FirstWeekOfYear <i>argument in the</i> DateDiff <i>function.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">vbUseSystem</td>
<td valign="top">0</td>
<td valign="top">Use the NLS API setting.</td>
</tr>
<tr>
<td valign="top">vbFirstJan1</td>
<td valign="top">1</td>
<td valign="top">The first week is the one that includes January 1. (This is the default value for this setting.)</td>
</tr>
<tr>
<td valign="top">vbFirstFourDays</td>
<td valign="top">2</td>
<td valign="top">The first week is the first one that has at least four days in the new year.</td>
</tr>
<tr>
<td valign="top">vbFirstFullWeek</td>
<td valign="top">3</td>
<td valign="top">This first week is the first one that's <I></I>completely contained in the new year.</td>
</tr>
</table></p>

<A NAME="183"><h2>Format Options for Date and Time Values</h2></A>
<p>The most important and flexible function for formatting date and time values is 
the <I>Format</I> function. This function gives you seven different, named formats for 
date and time:</p>

<UL>
<p><li> <I>General Date</I> (date and time in general format; only the date if the fractional part is 0; only the time if the integer part is 0)</li></p>

<p><li> <I>Long Date</I> (for example, <I>Friday, August 14, 1998,</I> but results vary depending on your locale)</li></p>

<p><li> <I>Medium Date</I> (for example, <I>14-Aug-98)</I></li></p>

<p><li> <I>Short Date</I> (for example, <I>8/14/98)</I></li></p>

<p><li> <I>Long Time</I> (for example, <I>8:35:48)</I></li></p>

<p><li> <I>Medium Time</I> (for example, <I>8:35 A.M.)</I></li></p>

<p><li> <I>Short Time</I> (for example, <I>8:35</I> in a 24 hour format)</li></p>
</UL>
 
<p>You also have a few special characters with which you can build your 
own custom date and time format strings, including one- and two-digit day and 
month numbers, complete or abbreviated month and weekday names, 
a.m/p.m. indicators, week and quarter numbers, and so on:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' mmm/ddd = abbreviated month/weekday,
' mmmm/dddd = complete month/weekday
Print Format(Now, &quot;mmm dd, yyyy (dddd)&quot;)  ' &quot;Aug 14, 1998 (Friday)&quot;
' hh/mm/ss always use two digits, h/m/s use one or two digits
Print Format(Now, &quot;hh:mm:ss&quot;)             ' &quot;20:35:48&quot;
Print Format(Now, &quot;h:mm AMPM&quot;)            ' &quot;8:35 P.M.&quot;
' y=day in the year, ww=week in the year, q=quarter in the year
' Note how a backslash can be used to specify literal characters.
Print Format(Now, &quot;mm/dd/yy (\d\a\y=y \w\e\e\k=ww \q\u\a\r\t\e\r=q)&quot;)
                      ' Displays &quot;08/14/98 (day=226 week=33 quarter=3)&quot;
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>Visual Basic 6 has introduced the new 
<I>FormatDateTime</I> function. It's far 
less flexible than the standard <I>Format</I> function and permits only a subset of the 
<I>Format</I> function's named formats. The only advantage of the 
<I>FormatDateTime</I> function is that it's also supported under VBScript and so can contribute to the ease of porting 
pieces of code from Visual Basic and VBA to VBScript and vice versa. Its syntax is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
result = FormatDateTime(Expression, [NamedFormat])
</pre>
</td></tr>
</table></p>

<p>where <I>NamedFormat </I>can be one of the following intrinsic constants: 
0-vbGeneralDate (the default), 1-vbLongDate, 2-vbShortDate, 3-vbLongTime, or 4-vbShortTime. 
Here are a few examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print FormatDateTime(Now)                 ' &quot;8/14/98 8:35:48 P.M.&quot;
Print FormatDateTime(Now, vbLongDate)     ' &quot;Saturday, August 15, 1998&quot;
Print FormatDateTime(Now, vbShortTime)    ' &quot;20:35&quot;
</pre>
</td></tr>
</table></p>

<p>Visual Basic 6 also includes two new functions related to date formatting. 
The <I>MonthName</I> function returns the complete or abbreviated name of a month, 
whereas the <I>WeekdayName</I> function returns the complete or abbreviated name of a 
weekday. Both are locale aware, so you can use them to list month and weekday 
names in the language the operating system has been 
configured for:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print MonthName(2)                           ' &quot;February&quot;
Print MonthName(2, True)                     ' &quot;Feb&quot;
Print WeekdayName(1, True)                   ' &quot;Sun&quot;
</pre>
</td></tr>
</table>
</p>


<a name="A35"></a><h3>5.5.5 Working with Files</h3>

<A HREF="#A34">[Previous]</A> <A HREF="#A36">[Next]</A><P>

<A NAME="184"><h1>Working with Files</h1></A>
<p>Visual Basic has always included many powerful commands for dealing with text 
and binary files. While Visual Basic 6 hasn't extended the set of built-in functions, it 
has nonetheless indirectly extended the potential of the language by adding a new 
and interesting FileSystemObject object that makes it very easy to deal with files 
and directories. In this section, I provide an overview of all the VBA functions and 
statements related to files, with many useful tips so that you can get as much as you 
can from them and stay away from the most recurrent problems.</p>

<A NAME="185"><h2>Handling Files</h2></A>
<p>In general, you can't do many things to a file without opening it. Visual Basic 
lets you delete a file (using the <I>Kill</I> command), move or rename it (using the 
<I>Name ... As</I> command), and copy it elsewhere (using the 
<I>FileCopy</I> command):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' All file operations should be protected against errors.
' None of these functions works on open files.
On Error Resume Next
' Rename a file--note that you must specify the path in the target,
' otherwise the file will be moved to the current directory.
Name &quot;c:\vb6\TempData.tmp&quot; As &quot;c:\vb6\TempData.$$$&quot;
' Move the file to another directory, possibly on another drive.
Name &quot;c:\vb6\TempData.$$$&quot; As &quot;d:\VS98\Temporary.Dat&quot;
' Make a copy of a file--note that you can change the name during the copy
' and that you can omit the filename portion of the target file.
FileCopy &quot;d:\VS98\Temporary.Dat&quot;, &quot;d:\temporary.$$$&quot;
' Delete one or more files--Kill also supports wildcards.
Kill &quot;d:\temporary.*&quot;
</pre>
</td></tr>
</table></p>

<p>You can read and modify the attributes of a file using the 
<I>GetAttr </I>function and the <I>SetAttr</I> command, respectively. The 
<I>GetAttr</I> function returns a bit-coded 
value, so you need to test its individual bits using intrinsic constants provided by 
VBA. Here's a reusable function that builds a descriptive string with all the attributes 
of the file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' This routine also works with open files
' and raises an error if the file doesn't exist.
Function GetAttrDescr(filename As String) As String
    Dim result As String, attr As Long
    attr = GetAttr(filename)
    ' GetAttr also works with directories.
    If attr And vbDirectory Then result = result &amp; &quot; Directory&quot;
    If attr And vbReadOnly Then result = result &amp; &quot; ReadOnly&quot;
    If attr And vbHidden Then result = result &amp; &quot; Hidden&quot;
    If attr And vbSystem Then result = result &amp; &quot; System&quot;
    If attr And vbArchive Then result = result &amp; &quot; Archive&quot;
    ' Discard the first (extra) space.
    GetAttrDescr = Mid$(result, 2)
End Function
</pre>
</td></tr>
</table></p>

<p>Similarly, you change the attributes of a file or a directory by passing the 
<I>SetAttr</I> command a combination of values, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Mark a file as Archive and Read-only.
filename = &quot;d:\VS98\Temporary.Dat&quot;
SetAttr filename, vbArchive + vbReadOnly
' Change a file from hidden to visible, and vice versa.
SetAttr filename, GetAttr(filename) Xor vbHidden
</pre>
</td></tr>
</table></p>

<p>You can't use the <I>SetAttr</I> function on open files, and of course you can't 
morph a file into a directory (or vice versa) by flipping the value of the 
<I>vbDirectory </I>bit. You can determine two more pieces of information about a file without opening it: 
its length in bytes and its date and time of creation, which you do with the 
<I>FileLen</I> and <I>FileDateTime</I><B> 
</B>functions, respectively.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print FileLen(&quot;d:\VS98\Temporary.Dat&quot;)         ' Returns a Long value
Print FileDateTime(&quot;d:\VS98\Temporary.Dat&quot;)    ' Returns a Date value
</pre>
</td></tr>
</table></p>

<p>You can use the <I>FileLen</I> function against open files too, but in this case 
you'll retrieve the length that was current before the file was opened.</p>

<A NAME="186"><h2>Handling Directories</h2></A>
<p>You can learn the name of the current directory using the 
<I>CurDir$</I> function (or its <I>$</I>-less equivalent, 
<I>CurDir</I>). When this function is passed a drive letter, it returns 
the current directory on that particular path. In this example, I assume that Microsoft 
Visual Studio was installed on drive D and that Microsoft Windows NT resides on drive 
C, but you'll probably get different results on your system:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Always use On Error--the current dir might be on a removed floppy disk.
On Error Resume Next
Print CurDir$                   ' Displays &quot;D:\VisStudio\VB98&quot;
' The current directory on drive C:
Print = CurDir$(&quot;c&quot;)            ' Displays &quot;C:\WinNT\System&quot;
</pre>
</td></tr>
</table></p>

<p>You can change both current drive and directory using the 
<I>ChDrive</I> and <I>ChDir</I> commands, respectively. If you execute a 
<I>ChDir</I> command on a drive that's not current, you're actually changing the current directory on that drive only, so you 
must use both commands to ensure you're changing the system's current directory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Make &quot;C:\Windows&quot; the current directory. 
On Error Resume Next
SaveCurDir = CurDir$
ChDrive &quot;C:&quot;: ChDir &quot;C:\Windows&quot;
' Do whatever you need to do...
' ....
' and then restore the original current directory.
ChDrive SaveCurDir: ChDir SaveCurDir
</pre>
</td></tr>
</table></p>

<p>You can also create and remove subdirectories using the 
<I>MkDir</I> and <I>RmDir</I> commands, respectively:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Create a new folder in the current directory, and then make it current.
On Error Resume Next
MkDir &quot;TempDir&quot;
ChDir CurDir$ &amp; &quot;\TempDir&quot;      ' (Assumes current dir is not the root)
' Do whatever you need to do...
' ....
' then restore the original directory and delete the temporary folder.
' You can't remove directories with files in them.
Kill &quot;*.*&quot;                      ' No need for absolute path.
ChDir &quot;..&quot;                      ' Move to the parent directory.
RmDir CurDir$ &amp; &quot;\TempDir&quot;      ' Remove the temporary directory.
</pre>
</td></tr>
</table></p>

<p>You can rename a directory using the 
<I>Name</I> command, but you can't move a directory elsewhere:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Assumes that &quot;TempDir&quot; is a subdirectory of the current directory
Name &quot;TempDir&quot; As &quot;TempXXX&quot;
</pre>
</td></tr>
</table>
</p>

<A NAME="187"><h2>Iterating Over All Files in a Directory</h2></A>
<p>The VBA's <I>Dir</I> function offers a primitive but effective way to iterate over all the 
files in a directory. You start by calling the 
<I>Dir</I> function with a <I>filespec </I>argument 
(which can include wildcards) and an optional argument that specifies the attributes of 
the files you're interested in. Then at each iteration, you call 
<I>Dir</I> without any argument until it returns an empty string. The following routine returns an array of 
filenames in a given directory and also demonstrates the correct way to set up the loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function GetFiles(filespec As String, Optional Attributes As _
    VbFileAttribute) As String()
    Dim result() As String
    Dim filename As String, count As Long, path2 As String
    Const ALLOC_CHUNK = 50
    ReDim result(0 To ALLOC_CHUNK) As String
    filename = Dir$(filespec, Attributes)
    Do While Len(filename)
        count = count + 1
        If count &gt; UBound(result) Then
            ' Resize the result array if necessary.
            ReDim Preserve result(0 To count + ALLOC_CHUNK) As String
        End If
        result(count) = filename
        ' Get ready for the next iteration.
        filename = Dir$
    Loop
    ' Trim the result array.
    ReDim Preserve result(0 To count) As String
    GetFiles = result
End Function
</pre>
</td></tr>
</table></p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
You can also use the 
<I>Dir$</I> function to indirectly test for the existence of 
a file or a directory, using the following functions:

<p><table><tr><td>
<pre>
Function FileExists(filename As String) As Boolean
    On Error Resume Next
    FileExists = (Dir$(filename) &lt;&gt; &quot;&quot;)
End Function
Function DirExists(path As String) As Boolean
    On Error Resume Next
    DirExists = (Dir$(path &amp; &quot;\nul&quot;) &lt;&gt; &quot;&quot;)
End Function
</pre>
</td></tr>
</table></p>

<p>While the code in <I>FileExists</I> is rather straightforward, you might be 
puzzled by <I>DirExists</I>: where does that 
&quot;<I>\nul</I>&quot; string come from? The explanation 
dates back to MS-DOS days and its special filenames 
&quot;<I>nul</I>&quot;, &quot;<I>con</I>&quot;, and so on. 
These names actually refer to special devices (the null device, the console device, 
and so on) that appear in any directory you search, provided that the directory 
actually exists. This approach works with any directory, whereas using 
<I>Dir$(</I>&quot;<I>*.*</I>&quot;<I>)</I> would fail when you're testing the existence of empty directories.</p>
</blockquote></div></p>

<p>The <I>GetFiles</I> routine can be used to load a bunch of filenames into a 
ComboBox control. This is particularly effective if you set the control's 
<I>Sorted</I> property to True:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim Files() As String, i As Long
' All files in C:\WINDOWS\SYSTEM directory, including system/hidden ones.
Files() = GetFiles(&quot;C:\windows\system\*.*&quot;, vbNormal + vbHidden _
    + vbSystem)
Print &quot;Found &quot; &amp; UBound(Files) &amp; &quot; files.&quot;
For i = 1 To UBound(Files)
    Combo1.AddItem Files(i)
Next
</pre>
</td></tr>
</table></p>

<p>If you include the <I>vbDirectory</I> bit in the 
<I>Attribute</I> argument, the <I>Dir$</I> function 
also returns the names of the directories in its results. You can use this feature to create 
a <I>GetDirectories</I> function that returns the names of all the subdirectories in a given path:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function GetDirectories(path As String, Optional Attributes As _
    VbFileAttribute, Optional IncludePath As Boolean) As String()
    Dim result() As String
    Dim dirname As String, count As Long, path2 As String
    Const ALLOC_CHUNK = 50
    ReDim result(ALLOC_CHUNK) As String
    ' Build the path name + backslash.
    path2 = path
    If Right$(path2, 1) &lt;&gt; &quot;\&quot; Then path2 = path2 &amp; &quot;\&quot;
    dirname = Dir$(path2 &amp; &quot;*.*&quot;, vbDirectory Or Attributes)
    Do While Len(dirname)
        If dirname = &quot;.&quot; Or dirname = &quot;..&quot; Then
            ' Exclude the &quot;.&quot; and &quot;..&quot; entries.
        ElseIf (GetAttr(path2 &amp; dirname) And vbDirectory) = 0 Then
            ' This is a regular file.
        Else
            ' This is a directory.
            count = count + 1
            If count &gt; UBound(result) Then
                ' Resize the result array if necessary.
                ReDim Preserve result(count + ALLOC_CHUNK) As String
            End If
            ' Include the path if requested.
            If IncludePath Then dirname = path2 &amp; dirname
            result(count) = dirname
        End If
        dirname = Dir$
    Loop
    ' Trim the result array.
    ReDim Preserve result(count) As String
    GetDirectories = result
End Function
</pre>
</td></tr>
</table></p>

<p>A common programming task is to process all files in a directory tree. 
Thanks to the routines I just listed and the ability to create recursive routines, this 
becomes (almost) child's play:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Load the names of all executable files in a directory tree into a ListBox.
' Note: this is a recursive routine.
Sub ListExecutableFiles(ByVal path As String, lst As ListBox)
    Dim names() As String, i As Long, j As Integer
    ' Ensure that there is a trailing backslash.
    If Right(path, 1) &lt;&gt; &quot;\&quot; Then path = path &amp; &quot;\&quot;
    ' Get the list of executable files.
    For j = 1 To 3
        ' At each iteration search for a different extension.
        names() = GetFiles(path &amp; &quot;*.&quot; &amp; Choose(j, &quot;exe&quot;, &quot;bat&quot;, &quot;com&quot;))
        ' Load partial results in the ListBox lst.
        For i = 1 To UBound(names)
            lst.AddItem path &amp; names(i)
        Next
    Next
    ' Get the list of subdirectories, including hidden ones,
    ' and call this routine recursively on all of them.
    names() = GetDirectories(path, vbHidden)
    For i = 1 To UBound(names)
        ListExecutableFiles path &amp; names(i), lst
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="188"><h2>Processing Text Files</h2></A>
<p>Text files are the simplest type of files to process. You open them using the 
<I>Open </I>statement with the <I>For Input</I>, 
<I>For Output</I>, or <I>For 
Appending</I> clause, and then start reading data from them or writing data to them. To open a file&#8212;either text or a 
binary file&#8212;you need a file number, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Error if file #1 is already open
Open &quot;readme.txt&quot; For Input As #1
</pre>
</td></tr>
</table></p>

<p>Within an individual application, you're usually able to assign unique file 
numbers to the different routines that deal with files. However, this approach 
severely hinders code reusability, so I suggest that you use the 
<I>FreeFile</I> function and query Visual Basic about the first available file number:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim fnum As Integer
fnum = FreeFile()
Open &quot;readme.txt&quot; For Input As #fnum
</pre>
</td></tr>
</table></p>

<p>After you open a text file for input, you usually read it one line of text at a 
time using the <I>Line Input</I> statement until the 
<I>EOF</I> (End-Of-File) function returns True. 
Any file routine must also take errors into account, both when it opens the file and 
when it reads its contents. But you can often do a better job if you use the 
<I>LOF</I> function to determine the length of the file and read all characters in one operation with 
the <I>Input$</I> function. Here's a reusable routine that uses this optimized approach:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function ReadTextFileContents(filename As String) As String
    Dim fnum As Integer, isOpen As Boolean
    On Error GoTo Error_Handler
    ' Get the next free file number.
    fnum = FreeFile()
    Open filename For Input As #fnum
    ' If execution flow got here, the file has been open without error.
    isOpen = True
    ' Read the entire contents in one single operation.
    ReadTextFileContents = Input(LOF(fnum), fnum)
    ' Intentionally flow into the error handler to close the file.
Error_Handler:
    ' Raise the error (if any), but first close the file.
    If isOpen Then Close #fnum
    If Err Then Err.Raise Err.Number, , Err.Description
End Function

' Load a text file into a TextBox control.
Text1.Text = ReadTextFileContents(&quot;c:\bootlog.txt&quot;)
</pre>
</td></tr>
</table></p>

<p>When you want to write data to a file, you open the file using the 
<I>For</I> <I>Output</I> clause if you want to replace the current contents or the 
<I>For Append</I> clause to simply append new data to the file. You usually send output to this output file with 
a series of <I>Print #</I> statements, but it's much faster if you gather your output in a 
string and print that instead. Here's a reusable function that does it all for you:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Sub WriteTextFileContents(Text As String, filename As String, _
    Optional AppendMode As Boolean)
    Dim fnum As Integer, isOpen As Boolean
    On Error GoTo Error_Handler
    ' Get the next free file number.
    fnum = FreeFile()
    If AppendMode Then
         Open filename For Append As #fnum
     Else
         Open filename For Output As #fnum
     End If
     ' If execution flow gets here, the file has been opened correctly.
     isOpen = True
     ' Print to the file in one single operation.
     Print #fnum, Text
     ' Intentionally flow into the error handler to close the file.
Error_Handler:
    ' Raise the error (if any), but first close the file.
    If isOpen Then Close #fnum
    If Err Then Err.Raise Err.Number, , Err.Description
End Sub
</pre>
</td></tr>
</table></p>

<p><img src="new.jpg" width=102 height=87 border=0></p>

<p>Even if Visual Basic 6 didn't add any function specifically intended to 
work with text files, its new <I>Split</I> function turns out to be extremely useful for text 
processing. Let's say that your text file contains items to be loaded into a ListBox 
or ComboBox control. You can't use the 
<I>ReadTextFileContents</I> routine that I showed you previously to load it directly in the control, but you can use it to make 
your code more concise:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Sub TextFileToListbox(lst As ListBox, filename As String)
    Dim items() As String, i As Long
    ' Read the file's contents, and split it into an array of strings.
    ' (Exit here if any error occurs.)
    items() = Split(ReadTextFileContents(filename), vbCrLf)
    ' Load all non-empty items into the ListBox.
    For i = LBound(items) To UBound(items)
        If Len(items(i)) &gt; 0 Then lst.AddItem items(i)
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="189"><h2>Processing Delimited Text Files</h2></A>
<p>Delimited text files contain multiple fields in each line of text. Even if no 
serious programmer would ever use delimited text files as the primary means to store 
an application's data, these files nevertheless play an important role because they 
offer a great way to exchange data between different database formats. For 
example, delimited text files are often the only viable way to import and export data to 
mainframe databases. Here's the structure of a simple semicolon-delimited text file. 
(Note that it's customary for the first line of the file to hold the field's names.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Name;Department;Salary
John Smith;Marketing;80000
Anne Lipton;Sales;75000
Robert Douglas;Administration;70000
</pre>
</td></tr>
</table></p>

<p>Taken together, the <I>Split</I> and the 
<I>Join</I> functions are especially useful for 
importing and exporting delimited text files. For example, see how easy it is to import 
the contents of a semicolon-delimited data file into an array of arrays:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The contents of a delimited text file as an array of strings arrays
' NOTE: requires the GetTextFileLines routine
Function ImportDelimitedFile(filename As String, _
    Optional delimiter As String = vbTab) As Variant()
    Dim lines() As String, i As Long
    ' Get all lines in the file.
    lines() = Split(ReadTextFileContents(filename), vbCrLf)
    ' To quickly delete all empty lines, load them with a special char.
    For i = 0 To UBound(lines)
        If Len(lines(i)) = 0 Then lines(i) = vbNullChar
    Next
    ' Then use the Filter function to delete these lines.
    lines() = Filter(lines(), vbNullChar, False)
    ' Create a string array out of each line of text
    ' and store it in a Variant element.
    ReDim values(0 To UBound(lines)) As Variant
    For i = 0 To UBound(lines)
        values(i) = Split(lines(i), delimiter)
    Next
    ImportDelimitedFile = values()
End Function

' An example of using the ImportDelimitedFile routine
Dim values() As Variant, i As Long
values() = ImportDelimitedFile(&quot;c:\datafile.txt&quot;, &quot;;&quot;)
' Values(0)(n) is the name of the Nth field.
' Values(i)(n) is the value of the Nth field on the ith record.
' For example, see how you can increment employees' salaries by 20%.
For i = 1 to UBound(values)
    values(i)(2) = values(i)(2) * 1.2
Next
</pre>
</td></tr>
</table></p>

<p>Using an array of arrays is a particularly good strategy because it makes it 
easy to add new records:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Add a new record.
ReDim Preserve values(0 To UBound(values) + 1) As Variant
values(UBound(values)) = Split(&quot;Roscoe Powell;Sales;80000&quot;, &quot;;&quot;)
</pre>
</td></tr>
</table></p>

<p>or delete existing ones:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Delete the Nth record
For i = n To UBound(values) - 1
    values(i) = values(i + 1)
Next
ReDim Preserve values(0 To UBound(values) _ 1) As Variant
</pre>
</td></tr>
</table></p>

<p>Writing an array of string arrays back to a delimited file is also a simple 
task, thanks to this reusable routine that builds on the 
<I>Join</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Write the contents of an array of string arrays to a delimited
' text file.
' NOTE: requires the WriteTextFileContents routine
Sub ExportDelimitedFile(values() As Variant, filename As String, _
    Optional delimiter As String = vbTab)
    Dim i As Long
    ' Rebuild the individual lines of text of the file.
    ReDim lines(0 To UBound(values)) As String
    For i = 0 To UBound(values)
        lines(i) = Join(values(i), delimiter)
    Next
    ' Create CRLFs among records, and write them.
    WriteTextFileContents Join(lines, vbCrLf), filename
End Sub

' Write the modified data back to the delimited file.
ExportDelimitedFile values(), &quot;C:\datafile.txt&quot;, &quot;;&quot;
</pre>
</td></tr>
</table></p>

<p>All the routines described in this section rely on the assumption that 
the delimited text file is small enough to be held in memory. While this might 
sound like a serious limitation, in practice text files are mostly used to create small 
archives or to move small quantities of data between different database formats. 
If you find that you're having problems because of the size of the array, you 
need to read and write it in chunks using multiple 
<I>Line Input #</I> and <I>Print # </I>statements. In most cases, you can deal with files up to 1 or 2 megabytes in 
size (or even more, depending on how much RAM memory you 
have) without any problem.</p>

<A NAME="190"><h2>Processing Binary Files</h2></A>
<p>To open a binary file, you use the <I>Open</I> statement with the 
<I>For Random</I> or <I>For</I><B> 
</B><I>Binary</I> options. Let me first explain the latter mode, which is the simpler of the 
two. In <I>Binary</I> mode, you write to file using the 
<I>Put</I> statement and read data back 
with the <I>Get</I> statement. Visual Basic determines how many bytes are written or read 
by looking at the structure of the variable you pass as the last argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim numEls As Long, text As String
numEls = 12345: text = &quot;A 16-char string&quot;
' Binary files are automatically created if necessary.
Open &quot;data.bin&quot; For Binary As #1
Put #1, , numEls            ' Put writes 4 bytes.
Put #1, , text              ' Put writes 16 bytes (ANSI format).
</pre>
</td></tr>
</table></p>

<p>When reading data back, you must repeat the same sequence of statements 
but it's up to you to correctly dimension variable length strings. You don't need to 
close and reopen a binary file because you can use the 
<I>Seek</I> statement to reposition the file pointer to a specific byte:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Seek #1, 1                  ' Back to the beginning (first byte is byte 1)
Get #1, , numEls            ' All Long values are 4 bytes.
text = Space$(16)           ' Prepare to read 16 bytes.
Get #1, , text              ' Do it.
</pre>
</td></tr>
</table></p>

<p>Alternatively, you can move the file pointer right before writing or reading 
data using a second argument, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Get #1, 1, numEls           ' Same as Seek + Get
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
When you open a binary file, Visual Basic automatically creates 
it if it doesn't exist. Therefore, you can't use an 
<I>On Error</I> statement to determine whether the file exists already. In this case, use the 
<I>Dir$</I> function to ascertain that the file actually exists before opening it.
</blockquote></div></p>

<p>You can quickly write an entire array to disk and read it back in one 
single operation; but because you must correctly dimension the array before reading it, 
you'll also have to prefix the data with the number of actual elements, in most cases:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Store a zero-based array of Double.
Put #1, 1, CLng(UBound(arr)) ' First store the UBound value.
Put #1, , arr()              ' Then store all items in one shot.
' read it back
Dim LastItem As Long 
Get #1, 1, LastItem          ' Read the number of items.
ReDim arr2(0 To LastItem) As Double
Get #1, , arr2()             ' Read the array in memory in one operation.
Close #1
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
If you read data back using a read sequence different from the 
original write sequence, you'll read wrong data into your variables. In some 
cases, this mistake might cause the Visual Basic environment to crash when trying 
to display the contents of those variables. For this reason, always 
double-check the order of write and read operations. When in doubt, save your work 
before running the code.
</blockquote></div></p>

<p>When you're reading from a binary file, you can't use the 
<I>EOF</I> function to find out when you're at the end of the data; instead, you should test the value 
returned by the <I>LOF</I> function (the length of the file in bytes) and use the 
<I>Seek</I> function to determine when you have read all the data in it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Do While Seek(1) &lt; LOF(1)
    ' Continue to read.
      ....
Loop
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
When storing strings to disk&#8212;either to text or binary 
files&#8212;Visual Basic automatically converts them from Unicode to ANSI, which saves a 
noticeable amount of disk space and lets you exchange data with 16-bit Visual 
Basic applications. If you're writing Unicode-aware programs for the 
international market, however, this behavior gets in the way and can cause loss of data 
because the string you're reading back from a file won't necessarily match the 
one you had stored previously. To fix a problem, you have to move the string into 
a <I>Byte</I> array and save that instead:

<p><table><tr><td>
<pre>
Dim v As Variant, s As String, b() As Byte
s = &quot;This is a string that you want to save in Unicode format&quot;
b() = s: v = b()     ' You need this double step.
Put #1, , v          ' Write that to disk.

' Read it back.
Get #1, 1, v: s = v  ' No need for intermediary Byte array here.
</pre>
</td></tr>
</table></p>
</blockquote></div></p>

<p>Opening a binary file using the <I>For 
Random</I> clause differs from what I have illustrated so far in a number of important respects:</p>

<UL>
<p><li> Data is written to and read from file as if it were a record of fixed 
length. Such a record length can be specified when you open the file (using 
the <I>Len</I> clause in the <I>Open</I> statement), or it's evaluated during individual 
<I>Put</I> and <I>Get</I> statements. If the actual data passed to a 
<I>Put</I> statement is shorter than the expected record length, Visual Basic pads it with random 
characters (more precisely, the current contents of the internal file buffer). 
If it's longer, an error occurs.</li></p>

<p><li> The argument for the <I>Seek</I> command, as well as the second argument 
for <I>Put</I> and <I>Get</I> statements, is meant to be the record number, not the 
absolute byte position in the binary file. The first record in a file is record 1.</li></p>

<p><li> You don't have to worry about storing and retrieving variable-length 
data, including strings and arrays, because the 
<I>Put</I> and <I>Get</I> statements correctly deal with those cases. But I strongly advise that you stay clear of 
UDTs that contain conventional (non-fixed-length) strings and dynamic 
arrays so that the length of the record doesn't depend on its actual contents.</li></p>
</UL>
 
<p>Strings stored to binary files opened with the 
<I>For Random</I> clause are prefixed by a 2-byte value that indicates the number of characters that follow. This means 
that you can't write a string that contains more than 32,767 characters, which is also 
the largest valid record size. To write a longer string, you should use the 
<I>For Binary</I> clause. </p>

<p>One final note: All the code examples seen so far assume that we're 
working in a single-user environment and don't account for issues such as the errors you 
get when opening a file already opened by another user, or the capability to lock all 
or a portion of a data file using the <I>Lock </I>statement (and later unlock it using the 
<I>Unlock </I>statement). For more information, see the Visual Basic documentation.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
If you don't want to get involved with lots of additional evaluations 
when writing and reading data in a binary file, you can follow a shorter path using 
an intermediate Variant variable. If you store a value of any type (other than 
object) into a Variant variable and then write the variable to a binary file, Visual 
Basic writes the type of the variable (that is, the 
<I>VarType</I> return value) and then the data. If the variable holds a string or an array, Visual Basic also stores 
enough information to read exactly the necessary number of bytes, freeing you from 
additional read statements:

<p><table><tr><td>
<pre>
Dim v As Variant, s(100) As String, i As Long
' Fill the s() array with data... (omitted)
Open &quot;c:\binary.dat&quot; For Binary As #1
v = s()              ' Store the array in a Variant variable,
Put #1, , v          ' and write that to disk.
v = Empty            ' Release memory.

' Read data back.
Dim v2 As Variant, s2() As String
Get #1, 1, v2        ' Read data in the Variant variable,
s2() = v2            ' and then move it to the real array.
v2 = Empty           ' Release memory. 
Close #1
</pre>
</td></tr>
</table></p>

<p>This approach also works with multidimensional arrays.</p>
</blockquote></div></p>

<A NAME="191"><h2>The FileSystemObject Hierarchy</h2></A>
<p><img src="new.jpg" width=102 height=87 border=0></p>

<p> Visual Basic 6 comes with a new library of file commands, which enables 
programmers to easily scan drives and directories, perform basic file operations 
(including copy, delete, move, and so on), and extract information not available through 
regular Visual Basic functions. But in my opinion, the best feature of the new 
commands is that you can do all that using a modern, coherent, object-oriented syntax, 
which makes your code much more readable. All this power is provided in the form of 
the external FileSystemObject hierarchy, embedded in the Microsoft Scripting Library, 
the library that also hosts the Dictionary object. (See <a href="#A25">Chapter 4</a> for instructions about 
installing and using this library.) The FileSystemObject hierarchy includes many 
complex objects (see Figure 5-1), and each object exposes many interesting 
properties and methods.</p>

<p>
<A HREF="javascript:fullSize('F05ph01x.htm')"> <img src="F05ph01.JPG" width=404 height=313 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 5-1.</B> <i>The FileSystemObject hierarchy.</i><!--/caption-->
</p>

<A NAME="192"><h3>The FileSystemObject root object</h3></A>
<p>At the root of the hierarchy is the FileSystemObject object itself. It exposes 
many methods and only one property, <I>Drives</I>, which returns the collection of all the 
drives in the system. The FileSystemObject object (abbreviated as FSO in the 
following text and code) is the only creatable object in the hierarchy&#8212;that is, it's the 
only object that can be declared using the 
<I>New</I> keyword. All the other objects are 
dependent objects that derive from this one and are exposed in the form of methods 
or properties. See how easy it is to fill an array with the list of all the ready drives 
in the system and their capacities:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim fso As New Scripting.FileSystemObject, dr As Scripting.Drive
On Error Resume Next        ' Needed for not-ready drives
For Each dr In fso.Drives
    Print dr.DriveLetter &amp; &quot; [&quot; &amp; dr.TotalSize &amp; &quot;]&quot;
Next
</pre>
</td></tr>
</table></p>

<p>Table 5-3 below summarizes the many methods exposed by 
the FSO object. A few of them are also available (often with different names and 
syntax) as methods of secondary Folder and File objects. Most of these methods add 
functionality to commands already present in Visual Basic. For example, you can 
delete non-empty folders (be <I>very </I>careful!) and copy and rename multiple files and 
directories with one single command. You can also easily extract portions of a 
filename without having to write special routines.</p>

<p><B>Table 5-3.</B> <i>All the methods of the FileSystemObject object.</i>  </p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Syntax</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top"><I>BuildPath (Path</I>,<I> Name)</I></td>
<td valign="top">Returns a complete filename, obtained by concatenating the path (relative or absolute) and name.</td>
</tr>
<tr>
<td valign="top"><I>CopyFile Source</I>, <I>Destination</I>,<I> [Overwrite]</I></td>
<td valign="top">Copies one or more files: <I>Source </I>can include wildcards, and <I>Destination </I>is considered to be a directory if it ends with a backslash. It overwrites existing files unless you set <I>Overwrite </I>to False.</td>
</tr>
<tr>
<td valign="top"><I>CopyFolder Source</I>, <I>Destination</I>, [<I>Overwrite</I>]</td>
<td valign="top">Same as <I>CopyFile</I>, but copies entire folders with their contents (subfolders and files). If <I>Destination </I>doesn't correspond to an existing directory, it's created (but not if <I>Source </I>contains wildcards).</td>
</tr>
<tr>
<td valign="top"><I>CreateFolder(Path) As Folder</I></td>
<td valign="top">Creates a new Folder object and returns it; raises an error if the folder already exists.</td>
</tr>
<tr>
<td valign="top"><I>CreateTextFile(FileName</I>,<I> [Overwrite]</I>, <I>[Unicode]) As TextStream</I></td>
<td valign="top">Creates a new TextFile object and returns it; set <I>Overwrite</I> = False to avoid overwriting an existing file; set <I>Unicode</I> = True to create a Unicode TextFile object.</td>
</tr>
<tr>
<td valign="top"><I>DeleteFile FileSpec</I>,<I> [Force]</I></td>
<td valign="top">Deletes one or more files. <I>FileSpec</I> can include wildcards; set <I>Force</I> = True to force the deletion of read-only files.</td>
</tr>
<tr>
<td valign="top"><I>DeleteFolder(FolderSpec</I>,<I> [Force])</I></td>
<td valign="top">Deletes one or more folders, together with their contents; set <I>Force</I> = True to force the deletion of read-only files.</td>
</tr>
<tr>
<td valign="top"><I>DriveExists(DriveName)</I></td>
<td valign="top">Returns True if a given logical drive exists.</td>
</tr>
<tr>
<td valign="top"><I>FileExists(FileName)</I></td>
<td valign="top">Returns True if a given file exists. (The path can be relative to the current directory.)</td>
</tr>
<tr>
<td valign="top"><I>FolderExists(FolderName)</I></td>
<td valign="top">Returns True if a given folder exists. (The path can be relative to the current directory.)</td>
</tr>
<tr>
<td valign="top"><I>GetAbsolutePathName(Path)</I></td>
<td valign="top">Converts a path relative to the current directory into an absolute path.</td>
</tr>
<tr>
<td valign="top"><I>GetBaseName(Filename)</I></td>
<td valign="top">Extract the base filename (without its path and extension); it doesn't check whether the file and/or the path actually exist.</td>
</tr>
<tr>
<td valign="top"><I>GetDrive(DriveName) As Drive</I></td>
<td valign="top">Returns the Drive object that corresponds to the letter or the UNC path passed as an argument. (It checks that the drive actually exists).</td>
</tr>
<tr>
<td valign="top"><I>GetDriveName(Path)</I></td>
<td valign="top">Extracts the drive from a path.</td>
</tr>
<tr>
<td valign="top"><I>GetExtensionName(FileName)</I></td>
<td valign="top">Extracts the extension string from a filename.</td>
</tr>
<tr>
<td valign="top"><I>GetFile(FileName)</I></td>
<td valign="top">Returns the File object corresponding to the name passed as the argument. (Can be absolute or relative to the current directory.)</td>
</tr>
<tr>
<td valign="top"><I>GetFileName(</I></td>
<td valign="top">Extract the filename (without its path but with its extension); it doesn't check whether the file and/or the path actually exist.</td>
</tr>
<tr>
<td valign="top"><I>GetFolder(FolderName) As Folder</I></td>
<td valign="top">Returns the Folder object corresponding to the path passed as the argument. (Can be absolute or relative to the current directory.)</td>
</tr>
<tr>
<td valign="top"><I>GetParentFolderName(Path)</I></td>
<td valign="top">Returns the name of the parent directory of the directory passed as the argument (or an empty string if the parent directory doesn't exist).</td>
</tr>
<tr>
<td valign="top"><I>GetSpecialFolder(SpecialFolder) As Folder</I></td>
<td valign="top">Returns a Folder object that corresponds to one of the special Windows directories. <I>SpecialFolder </I>can be 0-WindowsFolder, 1-SystemFolder, 2-TemporaryFolder.</td>
</tr>
<tr>
<td valign="top"><I>GetTempName()</I></td>
<td valign="top">Returns the name of a nonexistent file that can be used as a temporary file.</td>
</tr>
<tr>
<td valign="top"><I>MoveFile(Source</I>, <I>Destination)</I></td>
<td valign="top">Same as <I>CopyFile</I>, but it deletes the source file. It can also move among different drives, if this function is supported by the operating system.</td>
</tr>
<tr>
<td valign="top"><I>MoveFolder(Source</I>, <I>Destination)</I></td>
<td valign="top">Same as <I>MoveFile</I>, but works on directories instead.</td>
</tr>
<tr>
<td valign="top"><I>OpenTextFile(FileName</I>,<I> </I><I>[IOMode], [Create]</I>,<I> </I><I>[Format])As TextStream</I></td>
<td valign="top">Opens a text file and returns the corresponding TextStream object. <I>IOMode </I>can be one or a combination (use the OR operator) of the following constants: 1-ForReading, 2-ForWriting, 8-ForAppending; set Create to True if you want to create a new file; Format can be 0-TristateFalse (ANSI), -1-TristateTrue (Unicode) or -2-TristateUseDefault (determined by the system).</td>
</tr>
</table></p>

<A NAME="193"><h3>The Drive object</h3></A>
<p>This object exposes only properties (no methods), all of which are summarized 
in Table 5-4. All the properties are read-only, except 
the <I>VolumeName</I> property. This short code snippet determines the local drives that 
are ready and have at least 100 MB of free space on them:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim fso As New Scripting.FileSystemObject, dr As Scripting.Drive
For Each dr In fso.Drives
    If dr.IsReady Then
        If dr.DriveType = Fixed Or dr.DriveType = Removable Then
            ' 2 ^ 20 equals one megabyte.
            If dr.FreeSpace &gt; 100 * 2 ^ 20 Then
                Print dr.Path &amp; &quot; [&quot; &amp; dr.VolumeName &amp; &quot;] = &quot; _
                    &amp; dr.FreeSpace
            End If
        End If
    End If
Next
</pre>
</td></tr>
</table></p>

<p><B>Table 5-4.</B> <i>All the properties of the Drive object.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Syntax</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top"><I>AvailableSpace</I></td>
<td valign="top">The free space on the drive, in bytes; it usually coincides with the value returned by the <I>FreeSpace</I> property, unless the operating system supports disk quotas.</td>
</tr>
<tr>
<td valign="top"><I>DriveLetter</I></td>
<td valign="top">The letter associated with the drive or an empty string for network drives not associated with a letter.</td>
</tr>
<tr>
<td valign="top"><I>DriveType</I></td>
<td valign="top">A constant that indicates the type of the drive: 0-Unknown, 1-Removable, 2-Fixed, 3-Remote, 4-CDRom, 5-RamDisk.</td>
</tr>
<tr>
<td valign="top"><I>FileSystem</I></td>
<td valign="top">A string that describes the file system in use: FAT, NTFS, CDFS.</td>
</tr>
<tr>
<td valign="top"><I>FreeSpace</I></td>
<td valign="top">The free space on the drive. (See <I>AvailableSpace.</I>)</td>
</tr>
<tr>
<td valign="top"><I>IsReady</I></td>
<td valign="top">True if the drive is ready, False otherwise.</td>
</tr>
<tr>
<td valign="top"><I>Path</I></td>
<td valign="top">The path associated with the drive, without the backslash (for example, C:).</td>
</tr>
<tr>
<td valign="top"><I>RootFolder</I></td>
<td valign="top">The Folder object that corresponds to the root directory.</td>
</tr>
<tr>
<td valign="top"><I>SerialNumber</I></td>
<td valign="top">A Long number that corresponds to the serial disk number.</td>
</tr>
<tr>
<td valign="top"><I>ShareName</I></td>
<td valign="top">The network shared name for the drive or an empty string if it isn't a network drive.</td>
</tr>
<tr>
<td valign="top"><I>TotalSize</I></td>
<td valign="top">The total capacity of the drive, in bytes.</td>
</tr>
<tr>
<td valign="top"><I>VolumeName</I></td>
<td valign="top">The disk label (can be read and written).</td>
</tr>
</table></p>

<A NAME="194"><h3>The Folder object </h3></A>
<p>The Folder object represents an individual subdirectory. You can obtain a reference 
to such an object in different ways: by using the 
<I>GetFolder</I> or <I>GetSpecialFolder</I> 
methods of the FileSystemObject object, through the 
<I>RootFolder</I> property of a Drive object, through the 
<I>ParentFolder</I> property of a File object or another Folder object, or by 
iterating over the <I>SubFolders</I> collection of another Folder object. The Folder object 
exposes a number of interesting properties (see Table 5-5), but only the 
<I>Attribute</I> and <I>Name</I> properties can be written to. The most intriguing properties are probably the 
<I>SubFolders</I> and <I>Files</I> collections, which let you iterate through subdirectories and files using 
an elegant and concise syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Print the names of all first-level directories on all drives
' together with their short 8.3 names.
Dim fso As New Scripting.FileSystemObject
Dim dr As Scripting.Drive, fld As Scripting.Folder
On Error Resume Next
For Each dr In fso.Drives
    If dr.IsReady Then
        Print dr.RootFolder.Path       ' The root folder.
        For Each fld In dr.RootFolder.SubFolders
            Print fld.Path &amp; &quot; [&quot; &amp; fld.ShortName &amp; &quot;]&quot;
        Next
    End If
Next
</pre>
</td></tr>
</table></p>

<p><B>Table 5-5.</B> <i>All the properties of Folder and File objects.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Syntax</i></th>
<th><i>Description</i></th>
<th><i>Applies To</i></th>
</tr>
<tr>
<td valign="top"><I>Attributes</I></td>
<td valign="top">The attributes of the file or the folder, as a combination of the following constants: 0- Normal, 1-ReadOnly, 2-Hidden, 4-System, 8-Volume, 16-Directory, 32-Archive, 64-Alias, 2048-Compressed. The attributes Volume, Directory, Alias, and Compressed can't be modified.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>DateCreated</I></td>
<td valign="top">Creation date (a read-only Date value).</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>DateLastAccessed</I></td>
<td valign="top">The date of the last access (a read-only Date value).</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>DateLastModified</I></td>
<td valign="top">The date of the last modification (a read-only Date value).</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>Drive</I></td>
<td valign="top">The Drive object where the file or the folder is located.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>Files</I></td>
<td valign="top">The collection of all the contained File objects.</td>
<td valign="top">Folder only</td>
</tr>
<tr>
<td valign="top"><I>IsRootFolder</I></td>
<td valign="top">True if this is the root folder for its drive.</td>
<td valign="top">Folder only</td>
</tr>
<tr>
<td valign="top"><I>Name</I></td>
<td valign="top">The name of the folder or the file. Assign a new value to rename the object.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>ParentFolder</I></td>
<td valign="top">The parent Folder object.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>Path</I></td>
<td valign="top">The path of the Folder or the File. (This is the default property.)</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>ShortName</I></td>
<td valign="top">The name of the object in 8.3 MS-DOS format.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>ShortPath</I></td>
<td valign="top">The path of the object in 8.3 MS-DOS format.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>Size</I></td>
<td valign="top">The size in bytes of a File object; the sum of the size of all contained files and sub folders for a Folder object.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>SubFolders</I></td>
<td valign="top">The collection of all the subfolders contained in this folder, including system and hidden ones.</td>
<td valign="top">Folder only</td>
</tr>
<tr>
<td valign="top"><I>Type</I></td>
<td valign="top">A string description of the object. For example: <I>fso.GetFolder(&quot;C:\Recycled&quot;).Type</I> returns &quot;Recycle Bin&quot;; for File objects, this value depends on their extensions (for example, &quot;Text Document&quot; for a TXT extension).</td>
<td valign="top">Folder and File</td>
</tr>
</table></p>

<p>The Folder object also exposes a few methods, summarized in Table 5-6. 
Note that you can often achieve similar results using appropriate methods of 
the main FSO object. You can also create a new Folder using the 
<I>Add</I> method applied to the 
<I>SubFolders</I> collection, as shown in the following 
recursive routine, which duplicates the directory structure of one drive onto 
another drive without also copying the contained files:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Call this routine to initiate the copy process.
' NOTE: the destination folder is created if necessary.
Sub DuplicateDirTree(SourcePath As String, DestPath As String)
    Dim fso As New Scripting.FileSystemObject
    Dim sourceFld As Scripting.Folder, destFld As Scripting.Folder
    ' The source folder must exist.
    Set sourceFld = fso.GetFolder(SourcePath)
    ' The destination folder is created if necessary.
    If fso.FolderExists(DestPath) Then
        Set destFld = fso.GetFolder(DestPath)
    Else
        Set destFld = fso.CreateFolder(DestPath)
    End If
    ' Jump to the recursive routine to do the real job.
    DuplicateDirTreeSub sourceFld, destFld
End Sub

Private Sub DuplicateDirTreeSub(source As Folder, destination As Folder)
    Dim sourceFld As Scripting.Folder, destFld As Scripting.Folder
    For Each sourceFld In source.SubFolders
        ' Copy this subfolder into destination folder.
        Set destFld = destination.SubFolders.Add(sourceFld.Name)
        ' Then repeat the process recursively for all
        ' the subfolders of the folder just considered.
        DuplicateDirTreeSub sourceFld, destFld
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p><B>Table 5-6.</B> <i>All the methods of Folder and File objects.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Syntax</i></th>
<th><i>Description</i></th>
<th><i>Applies To</i></th>
</tr>
<tr>
<td valign="top"><I>Copy Destination, [OverWriteFiles]</I></td>
<td valign="top">Copy the current File or the Folder object to another path; this is similar to FSO's <I>CopyFolder </I>and <I>CopyFile</I> methods, which are also able to copy multiple objects in one operation.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>CreateTextFile(FileName, [Overwrite], [Unicode]) As TextStream</I></td>
<td valign="top">Creates a text file in the current Folder and returns the corresponding TextStream object. See the corresponding FSO's method for an explanation of the individual arguments.</td>
<td valign="top">Folder only</td>
</tr>
<tr>
<td valign="top"><I>Delete [Force]</I></td>
<td valign="top">Delete this File or this Folder object (with all its contained subfolders and files). Similar to FSO's <I>DeleteFile</I> and <I>DeleteFolder</I> methods.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>Move DestinationPath</I></td>
<td valign="top">Move this File or Folder object to another path; similar to FSO's <I>MoveFile</I> and <I>MoveFolder</I> methods.</td>
<td valign="top">Folder and File</td>
</tr>
<tr>
<td valign="top"><I>OpenAsTextStream([IOMode], [Format]) As TextStream</I></td>
<td valign="top">Open this File object as a text file and return the corresponding TextStream object.</td>
<td valign="top">File only</td>
</tr>
</table></p>

<A NAME="195"><h3>The File object</h3></A>
<p>The File object represents a single file on disk. You can obtain a reference to 
such an object in two ways: by using the 
<I>GetFile</I> method of the FSO object or by 
iterating over the <I>Files</I> collection of its parent Folder object. Despite their different 
natures, File and Folder objects have many properties and methods in common, so I 
won't repeat the descriptions that were given in Tables 5-5 and 5-6.</p>

<p>A limitation of the FSO hierarchy is that you have no direct way to filter 
filenames using wildcards, as you can do with the 
<I>Dir$</I> function. All you can do is iterate 
through the <I>Files</I> collection of a Folder object and test the file's name, extensions, or 
other attributes to see whether you are interested in it as shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' List all the DLL files in the C:\WINDOWS\SYSTEM directory.
Dim fso As New Scripting.FileSystemObject, fil As Scripting.File
For Each fil In fso.GetSpecialFolder(SystemFolder).Files
    If UCase$(fso.GetExtensionName(fil.Path)) = &quot;DLL&quot;  Then
        Print fil.Name
    End If
Next
</pre>
</td></tr>
</table></p>

<p>The FileSystemObject hierarchy doesn't permit many operations on files. 
More specifically, while you can list their properties (including many properties that 
are beyond the current capabilities of native VBA file functions), you can open files 
only in text mode, as I explain in the next section.</p>

<A NAME="196"><h3>The TextStream object</h3></A>
<p>The TextStream object represents a file opened in text mode. You can obtain a 
reference to such an object in the following ways: by using the 
<I>CreateTextFile</I> or the <I>OpenTextFile</I> method of the FSO object, by using the 
<I>CreateTextFile</I> method of a Folder object, or by using the 
<I>OpenAsTextStream</I> method of a File object. The 
TextStream object exposes a number of methods and read-only properties, all of 
which are described in Table 5-7. The 
TextStream<I> </I>object does offer some new features 
in addition to regular VBA file commands&#8212;for example, the ability to keep track of 
the current line and column while reading from or writing to the text file. This feature 
is exploited in this reusable routine that scans all the TXT files in a directory for a 
search string and returns an array of results (actually, an array of arrays) with all the 
files that contain that search string as well as the line number and the column number 
to indicate the position of the string within the file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' For each TXT file that contains the search string, the function
' returns a Variant element that contains a 3-item array that holds
' the filename, the line number, and the column number.
' NOTE: all searches are case insensitive.
Function SearchTextFiles(path As String, search As String) As Variant()
    Dim fso As New Scripting.FileSystemObject
    Dim fil As Scripting.File, ts As Scripting.TextStream
    Dim pos As Long, count As Long
    ReDim result(50) As Variant

    ' Search for all the TXT files in the directory.    
    For Each fil In fso.GetFolder(path).Files
        If UCase$(fso.GetExtensionName(fil.path)) = &quot;TXT&quot; Then
            ' Get the corresponding TextStream object.
            Set ts = fil.OpenAsTextStream(ForReading)
            ' Read its contents, search the string, close it.
            pos = InStr(1, ts.ReadAll, search, vbTextCompare)
            ts.Close

            If pos &gt; 0 Then
                ' If the string has been found, reopen the file
                ' to determine string position in terms of (line,column).
                Set ts = fil.OpenAsTextStream(ForReading)
                ' Skip all preceding characters to get where 
                ' the search string is.
                ts.Skip pos _ 1 
                ' Fill the result array, make room if necessary.
                count = count + 1
                If count &gt; UBound(result) Then
                    ReDim Preserve result(UBound(result) + 50) As Variant
                End If
                ' Each result item is a 3-element array.
                result(count) = Array(fil.path, ts.Line, ts.Column)
                ' Now we can close the TextStream.
                ts.Close
            End If
        End If
    Next

    ' Resize the result array to indicate number of matches.
    ReDim Preserve result(0 To count) As Variant
    SearchTextFiles = result
End Function

' An example that uses the above routine: search for a name in all
' the TXT files in E:\DOCS directory, show the results in 
' the lstResults ListBox, in the format &quot;filename [line, column]&quot;.
Dim v() As Variant, i As Long
v() = SearchTextFiles(&quot;E:\docs&quot;, &quot;Francesco Balena&quot;)
For i = 1 To UBound(v)
    lstResults.AddItem v(i)(0) &amp; &quot; [&quot; &amp; v(i)(1) &amp; &quot;,&quot; &amp; v(i)(2) &amp; &quot;]&quot;
Next
</pre>
</td></tr>
</table></p>

<p><B>Table 5-7.</B> <i>All the properties and methods of the TextStream object.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Property or Method</i></th>
<th><i>Syntax</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">Property</td>
<td valign="top"><I>AtEndOfLine</I></td>
<td valign="top">True if the file pointer is at the end of the current line.</td>
</tr>
<tr>
<td valign="top">Property</td>
<td valign="top"><I>AtEndOfFile</I></td>
<td valign="top">True if the file pointer is at the end of file (similar to VBA's <I>EOF</I> function).</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>Close</I></td>
<td valign="top">Closes the file (similar to VBA's <I>Close</I> statement).</td>
</tr>
<tr>
<td valign="top">Property</td>
<td valign="top"><I>Column</I></td>
<td valign="top">Current column number.</td>
</tr>
<tr>
<td valign="top">Property</td>
<td valign="top"><I>Line</I></td>
<td valign="top">Current line number.</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>Read(Characters)</I></td>
<td valign="top">Reads a specified number of characters and returns a string (similar to VBA's <I>Input$</I> function).</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>ReadAll()</I></td>
<td valign="top">Reads the entire file into a string (similar to VBA's <I>Input$</I> function when used with the <I>LOF</I> function).</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>ReadLine()</I></td>
<td valign="top">Reads the next line of text and returns a string (similar to VBA's <I>Line Input</I> statement).</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>Skip Characters</I></td>
<td valign="top">Skips over a specified number of characters.</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>SkipLine</I></td>
<td valign="top">Skips over a line of text.</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>Write Text</I></td>
<td valign="top">Writes a string of characters, without a trailing Newline character (similar to the <I>Print#</I> command with a trailing semicolon).</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>WriteBlankLines Lines</I></td>
<td valign="top">Writes the indicated number of blank lines (similar to one or more <I>Print#</I> commands without any argument).</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top"><I>WriteLine [Text]</I></td>
<td valign="top">Writes a string of characters, with a trailing Newline character (similar to the <I>Print#</I> command without a trailing semicolon).</td>
</tr>
</table></p>


<a name="A36"></a><h3>5.5.6 Interacting with Windows</h3>

<A HREF="#A35">[Previous]</A> <A HREF="#A37">[Next]</A><P>

<A NAME="197"><h1>Interacting with Windows </h1></A>
<p>So far, we've concentrated on self-contained applications that haven't come in 
contact with the outside world. But on many occasions, you'll need your 
application to interact with its environment, including other applications that run in parallel 
with yours. This section introduces the topic and describes some techniques for 
managing such interactions.</p>

<A NAME="198"><h2>The App Object</h2></A>
<p>The App object is provided by the Visual Basic library and represents the 
application being executed. The App object exposes a lot of properties and methods, 
many of which are somewhat advanced and will be explained later in the book.</p>

<p>The <I>EXEName</I> and the 
<I>Path</I> properties return the name and the path of 
the executable file (if running as a stand-alone EXE file) or the project name (if 
running inside the environment). These properties are often used together&#8212;for example, 
to locate an INI file that's stored in the same directory as the executable and that 
has the same base name:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
IniFile = App.Path &amp; IIf(Right$(App.Path, 1) &lt;&gt; &quot;\&quot;, &quot;\&quot;, &quot;&quot;) _
    &amp; App.EXEName &amp; &quot;.INI&quot;
Open IniFile For Input As #1
' and so on.
</pre>
</td></tr>
</table></p>

<p>Another common use for the <I>App.Path</I> property is to set the current 
directory to match the directory of the application so that all its ancillary files can be 
found without your having to specify their complete path:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Let the application's directory be the current directory.
On Error Resume Next
ChDrive App.Path: ChDir App.Path
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
The preceding snippet of code might fail under some 
conditions, in particular when the Visual Basic application is started from a remote 
network server. This happens because the 
<I>App.Path</I> property could return a UNC path (for example, 
<I>\\servername\dirname\...</I>) and the 
<I>ChDrive</I> command is unable to deal with such paths. For this reason, you should protect this code 
against unanticipated errors, and you should always provide your users with 
alternative ways to make the application point to its own directory (for example, by 
setting a key in the system Registry).
</blockquote></div></p>

<p>The <I>PrevInstance</I> property lets you determine whether there's another 
(compiled) instance of the application running in the system. This can be useful if you 
want to prevent the user from accidentally running two instances of your program:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Form_Load()
    If App.PrevInstance Then
        ' Another instance of this application is running.
        Dim saveCaption As String
        saveCaption = Caption
        ' Modify this form's caption so that it isn't traced by
        ' the AppActivate command.
        Caption = Caption &amp; Space$(5)
        On Error Resume Next
        AppActivate saveCaption
        ' Restore the Caption, in case AppActivate failed.
        Caption = saveCaption
        If Err = 0 Then Unload Me
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>A couple of properties can be both read and modified at run time. The 
<I>TaskVisible</I> Boolean property determines whether the application is visible in 
the task list. The <I>Title</I> property is the string that identifies the application in the Windows task 
list. Its initial value is the string you enter at design time in the Make tab of the Project 
Properties dialog box.</p>

<p>Other properties of the App object return values that you entered at design 
time in the General and Make tabs of the Project Properties dialog box. (See Figure 
5-2.) For example, the <I>HelpFile</I> property is the name of the associated help file, if you 
have any. The <I>UnattendedApp</I> and the 
<I>RetainedProject</I> properties report the state of 
the corresponding check boxes on the General tab of the dialog box (but their 
meaning will be made clear in Chapters <a href="#A100">16</a> and <a href="#A124">20</a>, respectively). Taken together, the 
<I>Major</I>, <I>Minor</I>,<I> </I>and 
<I>Revision</I> properties return information about the version of the 
running executable. The <I>Comments</I>,<I> 
CompanyName</I>,<I> FileDescription</I>,<I> 
LegalCopyright</I>, <I>LegalTrademarks</I>, and 
<I>ProductName</I> properties let you query at run time other values 
that have been entered in the Make tab of the Project Properties dialog box. They're 
useful mostly when you're creating informative About Box dialog boxes or splash screens.</p>

<p>
<A HREF="javascript:fullSize('F05ph02x.htm')"> <img src="F05ph02.JPG" width=404 height=178 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 5-2.</B> <i>The General and Make tabs of the Project Properties dialog box.</i><!--/caption-->
</p>

<A NAME="199"><h2>The Clipboard Object</h2></A>
<p>In the 32-bit world of Windows 9x and Windows NT, exchanging information 
with other applications through the system clipboard might seem a bit old-fashioned, but 
it is a fact that the clipboard remains one of the simplest and most effective ways for 
end users to quickly copy data among applications. Visual Basic lets you control the 
system clipboard using the Clipboard global object. Compared with other Visual Basic 
objects, this is a very simple one in that it exposes only six methods and no properties.</p>

<A NAME="200"><h3>Copying and pasting text</h3></A>
<p>To place a piece of text in the clipboard, you use the 
<I>SetText</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Clipboard.SetText Text, [Format]
</pre>
</td></tr>
</table></p>

<p>where <I>format</I> can be 1-vbCFText (plain text, the default), &amp;HBF01-vbCFRTF (text 
in RTF format), or &amp;HBF00-vbCFLink (DDE conversation information). This 
argument is necessary because the clipboard can store pieces of information in multiple 
formats. For example, if you have a RichTextBox control (a Microsoft ActiveX 
control described in <a href="#A74">Chapter 12</a>), you can store the selected text in either 
<I>vbCFText</I> or <I>vbCFRTF</I> format and let the user paste your text in whatever format fits the target control.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Clipboard.Clear
Clipboard.SetText RichTextBox1.SelText     ' vbCFText is the default.
Clipboard.SetText RichTextBox1.SelRTF, vbCFRTF
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
In some circumstances and with some external applications, 
placing text on the clipboard doesn't work correctly unless you first reset the 
Clipboard object using its <I>Clear</I> method, as shown in the preceding code snippet.
</blockquote></div></p>

<p>You retrieve the text currently in the clipboard using the 
<I>GetText</I> method. You can specify which format you want to retrieve using the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' For a regular TextBox control
Text1.SelText = Clipboard.GetText()       ' You can omit vbCFText.
' For a RichTextBox control
RichTextBox1.SelRTF = Clipboard.GetText(vbCFRTF)
</pre>
</td></tr>
</table></p>

<p>In general, you don't know whether the clipboard actually includes text in 
RTF format, so you should test its current contents using the 
<I>GetFormat</I> method, which takes a format as an argument and returns a Boolean value that indicates 
whether the clipboard format matches the format parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If Clipboard.GetFormat(vbCFRTF) Then
    ' The Clipboard contains data in RTF format.
End If
</pre>
</td></tr>
</table></p>

<p>The value of <I>format </I>can be 1-vbCFText (plain text), 2-vbCFBitmap (bitmap), 
3-vbCFMetafile (metafile), 8-vbCFDIB (Device Independent Bitmap), 
9-vbCFPalette (color palette), &amp;HBF01-vbCFRTF (text in RTF format), or &amp;HBF00-vbCFLink 
(DDE conversation information). This is the correct sequence for pasting text into 
a RichTextBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If Clipboard.GetFormat(vbCFRTF) Then
    RichTextBox1.SelRTF = Clipboard.GetText(vbCFRTF)
ElseIf Clipboard.GetFormat(vbCFText) Then
    RichTextBox1.SelText = Clipboard.GetText()
End If
</pre>
</td></tr>
</table>
</p>

<A NAME="201"><h3>Copying and pasting images</h3></A>
<p>When you work with PictureBox and Image controls, you can retrieve an image 
stored in the Clipboard using the 
<I>GetData</I> method, which also requires a format 
attribute (vbCFBitmap, vbCFMetafile, vbCFDIB, or vbCFPalette&#8212;although with Image 
controls, you can use only vbCFBitmap). The correct sequence is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim frmt As Variant
For Each frmt In Array(vbCFBitmap, vbCFMetafile, _
    vbCFDIB, vbCFPalette)
    If Clipboard.GetFormat(frmt) Then
        Set Picture1.Picture = Clipboard.GetData(frmt)
        Exit For
    End If
Next
</pre>
</td></tr>
</table></p>

<p>You can copy the current contents of a PictureBox or an Image control to 
the clipboard using the <I>SetData</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Clipboard.SetData Picture1.Picture
' You can also load an image from disk onto the clipboard.
Clipboard.SetData LoadPicture(&quot;c:\myimage.bmp&quot;)
</pre>
</td></tr>
</table>
</p>

<A NAME="202"><h3>A generic Edit menu</h3></A>
<p>In many Windows applications, all the clipboard commands are typically 
gathered in the Edit menu. The commands available to the user (and how your code 
processes them) depends on which control is the active control. Here you have 
two problems to solve: For a really user-friendly interface, you should disable all 
the menu items that don't apply to the active control and the current contents of 
the clipboard, and you must devise a cut-copy-paste strategy that works well in 
all situations.</p>

<p>When you have multiple controls on your forms, things become 
confusing quickly because you have to account for several potential problems. I have 
prepared a simple but complete demonstration program. (See Figure 5-3.) To let 
you easily reuse its code in your applications, all the references to controls are 
done through the form's <I>ActiveControl </I>property. Instead of testing the control type 
using a <I>TypeOf</I> or <I>TypeName</I> keyword, the code indirectly tests which properties 
are actually supported using the <I>On Error Resume 
Next</I> statement. (See the code in boldface in the following listing.) This approach lets you deal with any type 
of control, including third-party ActiveX controls, without having to modify the 
code when you add a new control to your Toolbox.</p>

<p>
<A HREF="javascript:fullSize('F05ph03x.htm')"> <img src="F05ph03.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 5-3.</B> <i>The Clipbord.vbp demonstration project shows how you can create a generic Edit menu that works with TextBox, RTF TextBox, and PictureBox controls.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Items in Edit menu belong to a control array. These are their indices.
Const MNU_EDITCUT = 2, MNU_EDITCOPY = 3
Const MNU_EDITPASTE = 4, MNU_EDITCLEAR = 6, MNU_EDITSELECTALL = 7

' Enable/disable items in the Edit menu.
Private Sub mnuEdit_Click()
    Dim supSelText As Boolean, supPicture As Boolean
<B>    ' Check which properties are supported by the active control.</B>
    <B>On Error Resume Next
    ' These expressions return False only if the property isn't supported.
    supSelText = Len(ActiveControl.SelText) Or True
    supPicture = (ActiveControl.Picture Is Nothing) Or True</B>

    If supSelText Then
        mnuEditItem(MNU_EDITCUT).Enabled = Len(ActiveControl.SelText)
        mnuEditItem(MNU_EDITPASTE).Enabled = Clipboard.GetFormat(vbCFText)
        mnuEditItem(MNU_EDITCLEAR).Enabled = Len(ActiveControl.SelText)
        mnuEditItem(MNU_EDITSELECTALL).Enabled = Len(ActiveControl.Text)

    ElseIf supPicture Then
        mnuEditItem(MNU_EDITCUT).Enabled = Not (ActiveControl.Picture _
            Is Nothing)
        mnuEditItem(MNU_EDITPASTE).Enabled = Clipboard.GetFormat( _
            vbCFBitmap) Or Clipboard.GetFormat(vbCFMetafile)
        mnuEditItem(MNU_EDITCLEAR).Enabled = _
            Not (ActiveControl.Picture Is Nothing)

    Else
        ' Neither a text- nor a picture-based control
        mnuEditItem(MNU_EDITCUT).Enabled = False
        mnuEditItem(MNU_EDITPASTE).Enabled = False
        mnuEditItem(MNU_EDITCLEAR).Enabled = False
        mnuEditItem(MNU_EDITSELECTALL).Enabled = False
    End If
    ' The Copy menu command always has the same state as the Cut command.
    mnuEditItem(MNU_EDITCOPY).Enabled = mnuEditItem(MNU_EDITCUT).Enabled
End Sub

' Actually perform copy-cut-paste commands.
Private Sub mnuEditItem_Click(Index As Integer)
    Dim supSelText As Boolean, supSelRTF As Boolean, supPicture As Boolean
<B>    ' Check which properties are supported by the active control.
    On Error Resume Next
    supSelText = Len(ActiveControl.SelText) &gt;= 0
    supSelRTF = Len(ActiveControl.SelRTF) &gt;= 0
    supPicture = (ActiveControl.Picture Is Nothing) Or True</B>
    Err.Clear
    Select Case Index
        Case MNU_EDITCUT
            If supSelRTF Then
                Clipboard.Clear
                Clipboard.SetText ActiveControl.SelRTF, vbCFRTF
                ActiveControl.SelRTF = &quot;&quot;
            ElseIf supSelText Then
                Clipboard.Clear
                Clipboard.SetText ActiveControl.SelText
                ActiveControl.SelText = &quot;&quot;
            Else
                Clipboard.SetData ActiveControl.Picture
                Set ActiveControl.Picture = Nothing
            End If

        Case MNU_EDITCOPY
            ' Similar to Cut, but the current selection isn't deleted.
            If supSelRTF Then
                Clipboard.Clear
                Clipboard.SetText ActiveControl.SelRTF, vbCFRTF
            ElseIf supSelText Then
                Clipboard.Clear
                Clipboard.SetText ActiveControl.SelText
            Else
                Clipboard.SetData ActiveControl.Picture
            End If

        Case MNU_EDITPASTE
            If supSelRTF And Clipboard.GetFormat(vbCFRTF) Then
                ' Paste RTF text if possible.
                ActiveControl.SelRTF = Clipboard.GetText(vbCFText)
            ElseIf supSelText Then
                ' Else, paste regular text.
                ActiveControl.SelText = Clipboard.GetText(vbCFText)
            ElseIf Clipboard.GetFormat(vbCFBitmap) Then
                ' First, try with bitmap data.
                Set ActiveControl.Picture = _
                    Clipboard.GetData(vbCFBitmap)
            Else
                ' Else, try with metafile data.
                Set ActiveControl.Picture = _
                    Clipboard.GetData(vbCFMetafile)
            End If

        Case MNU_EDITCLEAR
            If supSelText Then
                ActiveControl.SelText = &quot;&quot;
            Else
                Set ActiveControl.Picture = Nothing
            End If

        Case MNU_EDITSELECTALL
            If supSelText Then
                ActiveControl.SelStart = 0
                ActiveControl.SelLength = Len(ActiveControl.Text)
            End If
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="203"><h2>The Printer Object</h2></A>
<p>Many applications need to deliver their results on paper. Visual Basic provides 
you with a Printer object that exposes a number of properties and methods to finely 
control the appearance of your printer documents.</p>

<p>The Visual Basic library also exposes a Printers collection, which lets you 
collect information about all the printers installed on your system. Each item of 
this collection is a Printer object, and all its properties are read-only. In other words, 
you can read the characteristics of all the installed printers, but you can't modify 
them directly. If you want to modify a characteristic of a printer, you must first assign 
the item from the collection that represents your chosen printer to the Printer object 
and then change its properties.</p>

<A NAME="204"><h3>Retrieving information on installed printers</h3></A>
<p>The Printer object exposes many properties that allow you to determine the 
characteristics of an available printer and its driver. For example, the 
<I>DeviceName</I> property returns the name of the printer as it appears in the Control Panel, and the 
<I>DriverName </I>returns the name of the driver used by that peripheral. It's simple to fill a ListBox 
or a ComboBox control with this information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
For i = 0 To Printers.Count _ 1
    cboPrinters.AddItem Printers(i).DeviceName &amp; &quot; [&quot; &amp; _
        Printers(i).DriverName &amp; &quot;]&quot;
Next
</pre>
</td></tr>
</table></p>

<p>The <I>Port </I>property returns the port the printer is connected to (for 
example, LPT1:). The <I>ColorMode </I>property determines whether the printer can print in 
color. (It can be 1-vbPRCMMonochrome or 2-vbPRCMColor.) The 
<I>Orientation </I>property reflects the current orientation of the page. (It can be 1-vbPRORPortrait, 
2-vbPRORLandscape.) The <I>PrinterQuality </I>property returns the current resolution. (It can 
be 1-vbPRPQDraft, 2-vbPRPQLow, 3-vbPRPQMedium, or 4-vbPRPQHigh.)</p>

<p>Other properties include <I>PaperSize</I> (the size of the paper), 
<I>PaperBin </I>(the paper bin the paper is fed from), 
<I>Duplex </I>(the ability to print both sides of a sheet 
of paper), <I>Copies </I>(the number of copies to be printed), and 
<I>Zoom </I>(the zoom factor applied when printing). For more information about these properties, see the Visual Basic 
documentation. On the companion CD, you'll find a demonstration program (shown 
in Figure 5-4) that lets you enumerate all the printers in your system, browse their 
properties, and print a page on each of them.</p>

<p>
<A HREF="javascript:fullSize('F05ph04x.htm')"> <img src="F05ph04.JPG" width=404 height=229 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 5-4.</B> <i>Run this demonstration program to see the Printers collection and the Printer object in action.</i><!--/caption-->
</p>

<A NAME="205"><h3>Working with the current printer</h3></A>
<p>A modern application should give its users the ability to work with any printer 
among those installed on the system. In Visual Basic, you do this by assigning an 
element of the Printers collection that describes your chosen printer to the Printer 
object. For example, if you've filled a ComboBox control with the names of all installed 
printers, you can let users select one of them by clicking on a Make Current button:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdMakeCurrent_Click()
    Set Printer = Printers(cboPrinters.ListIndex)
End Sub
</pre>
</td></tr>
</table></p>

<p>In contrast to the restrictions you must observe for Printer objects stored in 
the Printers collection, whose properties are read-only, you can modify the 
properties of the Printer object. Theoretically, all the properties seen so far can be written 
to, with the only exceptions being 
<I>DeviceName</I>, <I>DriverName</I>,<I> </I>and 
<I>Port</I>. In practice, however, what happens when you assign a value to a property depends on the 
printer and the driver. For example, if the current printer is monochrome it doesn't 
make any sense to assign the 2-vbPRCMColor value to the 
<I>ColorMode </I>property. This assignment either can be ignored or it can raise an error, depending on the driver in 
use. In general, if a property isn't supported, it returns 0.</p>

<p>At times, you might need to understand which item in the Printers 
collection the Printer object corresponds to, for example, when you want to print 
temporarily using another printer and then restore the original printer. You can do this by 
comparing the <I>DeviceName </I>property of the Printer object with the value returned by 
each item in the Printers collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Determine the index of the Printer object in the Printers collection.
For i = 0 To Printers.Count _ 1
    If Printer.DeviceName = Printers(i).DeviceName Then
        PrinterIndex = i: Exit For
    End If
Next
' Prepare to output to the printer selected by the user.
Set Printer = Printers(cboPrinters.ListIndex)
' ...
' Restore the original printer.
Set Printer = Printers(PrinterIndex)
</pre>
</td></tr>
</table></p>

<p>Another way to let users print to the printer of their choice is to set the 
Printer's <I>TrackDefault </I>property to True. When you do that, the Printer object 
automatically refers to the printer selected in the Control Panel.</p>

<A NAME="206"><h3>Outputting data to the Printer object</h3></A>
<p>Sending output to the Printer object is trivial because this object supports all 
the graphic methods that are exposed by the Form and the PictureBox objects, 
including <I>Print</I>, <I>PSet</I>, <I>Line</I>, 
<I>Circle</I>,<I> </I>and <I>PaintPicture</I>. You can also control the 
appearance of the output using standard properties such as the Font object and the 
individual <I>Font</I>xxxx properties, the <I>CurrentX 
</I>and <I>CurrentY </I>properties, and the <I>ForeColor 
</I>property.</p>

<p>Three methods are peculiar to the Printer object. The 
<I>EndDoc </I>method informs the Printer object that all the data has been sent and that the actual printing 
operation can start. The <I>KillDoc </I>method terminates the current print job before 
sending anything to the printer device. Finally the 
<I>NewPage</I> method sends the current page to the printer (or the print spooler) and advances to the next page. It also resets 
the printing position at the upper left corner of the printable area in the page and 
increments the page number. The current page number can be retrieved using the 
<I>Page</I> property. Here's an example that prints a two-page document:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Printer.Print &quot;Page One&quot;
Printer.NewPage
Printer.Print &quot;Page Two&quot;
Printer.EndDoc
</pre>
</td></tr>
</table></p>

<p>The Printer object also supports the standard properties 
<I>ScaleLeft</I>, <I>ScaleTop</I>, 
<I>ScaleWidth</I>,<I> </I>and <I>ScaleHeight</I>, which are expressed in the measurement unit 
indicated by the <I>ScaleMode </I>property (usually in twips). By default, the 
<I>ScaleLeft</I> and <I>ScaleTop </I>properties return 0 and refer to the upper left corner of the printable area. 
The <I>ScaleWidth</I> and <I>ScaleHeight </I>properties return the coordinates of the lower right 
corner of the printable area.</p>

<A NAME="207"><h2>Running Other Applications</h2></A>
<p>Visual Basic lets you run other Windows applications using the 
<I>Shell</I> command, which has this syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
TaskId = Shell(PathName, [WindowStyle]) 
</pre>
</td></tr>
</table></p>

<p><I>PathName </I>can include a command line. 
<I>WindowStyle</I> is one of the following constants: 0-vbHide (window is hidden and focus is passed to it), 
1-vbNormalFocus (window has focus and is restored to its original size and position), 
2-vbMinimizedFocus (window is displayed as an icon with focus&#8212;this is the default value), 
3-vbMaximizedFocus (window is maximized and has the focus), 4-vbNormalNoFocus 
(window is restored but doesn't have the focus), or 6-vbMinimizedNoFocus (window is 
minimized and the focus doesn't leave the active window). See, for example, how you 
can run Notepad and load a file in it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' No need to provide a path if Notepad.Exe is on the system path.
Shell &quot;notepad c:\bootlog.txt&quot;, vbNormalFocus
</pre>
</td></tr>
</table></p>

<p>The <I>Shell</I> function runs the external program asynchronously. This means 
that the control immediately returns to your Visual Basic application, which can 
therefore continue to execute its own code. In most cases, this behavior is OK because 
it takes advantage of the multitasking nature of Windows. But at times you might 
need to wait for a shelled program to complete (for example, if you need to process its 
results) or simply to check whether it's still running. Visual Basic doesn't 
give you a native function to obtain this information, but you can use a few Windows API calls to do the 
job. I've prepared a multipurpose function that checks whether the shelled program is 
still executing, waits for the optional timeout you specified (omit the argument to 
wait forever), and then returns True if the program is still running:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' API declarations
Private Declare Function WaitForSingleObject Lib &quot;kernel32&quot; _
    (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
Private Declare Function OpenProcess Lib &quot;kernel32&quot; (ByVal dwAccess As _
    Long, ByVal fInherit As Integer, ByVal hObject As Long) As Long
Private Declare Function CloseHandle Lib &quot;kernel32&quot; _
    (ByVal hObject As Long) As Long

' Wait for a number of milliseconds, and return the running status of a 
' process. If argument is omitted, wait until the process terminates.
Function WaitForProcess(taskId As Long, Optional msecs As Long = -1) _
    As Boolean
    Dim procHandle As Long
    ' Get the process handle.
    procHandle = OpenProcess(&amp;H100000, True, taskId)
    ' Check for its signaled status; return to caller.
    WaitForProcess = WaitForSingleObject(procHandle, msecs) &lt;&gt; -1
    ' Close the handle.
    CloseHandle procHandle
End Function
</pre>
</td></tr>
</table></p>

<p>The argument passed to this routine is the return value of the 
<I>Shell</I> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Run Notepad, and wait until it is closed.
WaitForProcess Shell(&quot;notepad c:\bootlog.txt&quot;, vbNormalFocus)
</pre>
</td></tr>
</table></p>

<p>You have several ways to interact with a running program. In <a href="#A100">Chapter 16</a>, I 
show how you can control an application through COM, but not all the external 
applications can be controlled in this way. And even if they could, sometimes the 
results aren't worth the additional effort. In less demanding situations, you can get the 
job done using a simpler approach based on the 
<I>AppActivate</I> and <I>SendKeys</I> commands. The 
<I>AppActivate</I> command moves the input focus to the application that matches 
its first argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
AppActivate WindowTitle [,wait]
</pre>
</td></tr>
</table></p>

<p><I>WindowTitle </I>can be either a string or the return value of a 
<I>Shell</I> function; in the former case, Visual Basic compares the value with the titles of all the active 
windows in the system. If there isn't an exact match, Visual Basic repeats the search 
looking for a window whose title begins with the string passed as an argument. When 
you pass the <I>taskid </I>value returned by a 
<I>Shell</I> function, there's no second pass 
because <I>taskid</I> uniquely identifies a running process. If Visual Basic is unable to find 
the requested window, a run-time error occurs. <I>Wait 
</I>is an optional argument that indicates whether Visual Basic should wait until the current application has the input 
focus before passing it to the other program 
(<I>Wait</I> = True) or whether the command must execute immediately. 
(<I>Wait</I> = False, the default behavior.)</p>

<p>The <I>SendKeys</I> statement sends one or more keys to the application that 
currently has the input focus. This statement supports a rather complex syntax, which lets 
you specify control keys such as Ctrl, Alt, and Shift keys, arrow keys, function keys, 
and so on. (See the Visual Basic documentation for more information.) This code 
runs Notepad and then gives it the focus and pastes the current clipboard contents in 
its window:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
TaskId = Shell(&quot;Notepad&quot;, vbMaximizedFocus) 
AppActivate TaskId
SendKeys &quot;^V&quot;        ' ctrl-V
</pre>
</td></tr>
</table></p>

<p>You now have all you need to run an external program, interact with it, 
and find out, if you want, when it completes its execution. I've prepared a 
demonstration program that does this and lets you experiment with a few different settings. 
(See Figure 5-5.) Its complete source code is on the companion CD.</p>

<p>
<A HREF="javascript:fullSize('F05ph05x.htm')"> <img src="F05ph05.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 5-5.</B> <i>A demonstration program that illustrates how to use Shell, AppActivate, and SendKeys statements.</i><!--/caption-->
</p>

<A NAME="208"><h2>Showing Help</h2></A>
<p>A successful Windows application should always provide a guide to novice 
users, typically in the form of a help file. Visual Basic supports two different ways to 
display such user information, both using the pages of HLP files.</p>

<A NAME="209"><h3>Writing a help file</h3></A>
<p>In both cases, you must first create a help file. To do this, you need a word 
processor capable of generating files in RTF format (such as Microsoft Word) and a 
help compiler. On the Visual Basic 6 CD-ROM, you can find the Microsoft Help 
Workshop, shown in Figure 5-6, which lets you assemble all the docs and bitmaps you 
have prepared and compile them into an HLP file.</p>

<p>Writing a help file is a complex matter, well beyond the scope of this 
book. You can get information about this topic from the documentation installed with 
the Microsoft Help Workshop. In my opinion, however, the most effective approach 
to this issue is to rely on third-party shareware or commercial programs, such as 
Blue Sky Software's RoboHelp or WexTech's Doc-to-Help, which make the building of 
a help file a simple and visual process.</p>

<p>
<A HREF="javascript:fullSize('F05ph06x.htm')"> <img src="F05ph06.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 5-6.</B> <i>The Help Workshop utility is on the Visual Basic CD-ROM but must be installed separately.</i><!--/caption-->
</p>

<p>Once you have generated an HLP file, you can reference it in your Visual 
Basic application. You do that either at design time by typing the file's name in the 
General tab of the Project Properties dialog box or at run time by assigning a value 
to the <I>App.HelpFile </I>property. The latter approach is necessary when you aren't sure 
about where the help file will be installed. For instance, you can set this path in a 
directory under the main folder of your application:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' If this file reference is incorrect, Visual Basic raises an error
' when you later try to access this file.
App.HelpFile = App.Path &amp; &quot;\Help\MyApplication.Hlp&quot;
</pre>
</td></tr>
</table>
</p>

<A NAME="210"><h3>Standard Windows help</h3></A>
<p>The first way to offer context-sensitive help is based on the F1 key. This type of 
help uses the <I>HelpContextID </I>property, which is supported by all Visual Basic visible 
objects, including forms, intrinsic controls, and external ActiveX controls. You can also 
enter an application-wide help context ID at design time, in the Project Properties dialog 
box. (The App object doesn't expose an equivalent property at run 
time, though.)</p>

<p>When the user presses F1, Visual Basic checks whether the 
<I>HelpContextID</I> property of the control that has the focus has a nonzero value: in this case, it 
displays the help page associated with that ID. Otherwise, Visual Basic checks 
whether the parent form has a nonzero 
<I>HelpContextID</I> property, and in that case displays 
the corresponding help page. If both the control's and the form's 
<I>HelpContextID</I> properties are 0, Visual Basic displays the page that corresponds to the project's 
help context ID.</p>

<A NAME="211"><h3>What's This help</h3></A>
<p>Visual Basic also supports an additional way of displaying help, the so-called 
What's This help. You can add support for this help mode by showing the What's This 
button at the upper right of a form, as you can see in Figure 5-7. When the user clicks 
on this button, the mouse cursor changes into an arrow and a question mark, and 
the user can then click on any control on the form to get a quick explanation of 
what that control is and does.</p>

<p>
<img src="F05ph07.GIF" width=290 height=226 border=0>
<p>
<!--caption--><B>Figure 5-7.</B> <i>A zoomed screenshot of the upper right corner of a form whose What's This button has just been clicked.</i><!--/caption-->


<p>To take advantage of this feature in your programs, you must set the 
form's <I>WhatsThisButton </I>property to True, which makes the What's This button appear 
on the form caption. This property is read-only at run time, so you can set it only at 
design time in the Properties window. Moreover, to get the What's This button to 
appear, you must either set the <I>BorderStyle 
</I>property to 1-Fixed Single or to 3-Fixed 
Dialog, or you must set the properties <I>MaxButton 
</I>and <I>MinButton </I>to False.</p>

<p>If you can't meet these requirements, you can't display the What's This 
button. But you can always provide users with a button or a menu command that enters 
this mode by executing the form's <I>WhatsThisMode 
</I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdWhatsThis_Click()
    ' Enter What's This mode and change mouse cursor shape.
    WhatsThisMode
End Sub
</pre>
</td></tr>
</table></p>

<p>Each control on the form (but not the form itself) exposes the 
<I>WhatsThisHelpID </I>property. You assign this property the help context ID of the page that will be 
displayed when the user clicks on the control while in What's This mode.</p>

<p>Finally the form's <I>WhatsThisHelp </I>property must be set to True to activate 
the What's This help. If this property is set to False, Visual Basic reverts to the 
standard help mechanism based on the F1 key and the 
<I>HelpContextID </I>property. The 
<I>WhatsThisHelp</I> property can be set only at design time. At this point, you have three 
different ways to display a What's This? help topic:</p>

<UL>
<p><li> The user clicks on the What's This button and then on a control; in 
this case, Visual Basic automatically displays the What's This help 
associated with the <I>WhatsThisHelpID </I>property of the clicked control.</li></p>

<p><li> The user clicks on a button or selects a menu item that 
programmatically enters the What's This help mode by means of 
the <I>WhatsThisMode </I>method (see the previous code snippet) and then clicks on a control. Again, 
Visual Basic displays the What's This help associated with the 
<I>WhatsThisHelpID </I>property of the clicked control.</li></p>

<p><li> You can programmatically invoke the What's This help associated with 
the <I>WhatsThisHelpID </I>property of a control by executing the control's 
<I>ShowWhatsThis </I>method. (All intrinsic and external controls support this method.)</li></p>
</UL>
 
<p>Whatever approach you follow, don't forget that you have to prepare a 
help page for each control on each form of your application. It's legal to have 
multiple controls share the same help page, but this arrangement can be quite confusing 
to the user. Therefore, you typically associate a distinct page with each control.</p>

<p>In these first five chapters, I've shown you how to get the maximum out of the 
Visual Basic environment and the VBA language. By now, you have enough 
information to write nontrivial programs. The focus of this book, however, is 
on object-oriented programming, and in the next two chapters I hope to convince 
you how much you need OOP to build complex, real-world applications.</p>

<a name="A37"></a><h2>5.6 Chapter 6 -- Classes and Objects</h2>

<A HREF="#A36">[Previous]</A> <A HREF="#A38">[Next]</A><P>

<font size="+3">Chapter 6</font>
<A NAME="212"><H1>Classes and Objects</H1></A>

<p>Since Microsoft Visual Basic 4 introduced the concept of class modules, a 
furious debate has raged among Visual Basic developers about the object-oriented nature 
of the language. Is Visual Basic a <I>real </I>object-oriented programming (OOP) 
language? Is it just an <I>object-based </I>language? Or is it somewhere between these two extremes?</p>

<p>For what it's worth, my position on the question is a compromise: Visual 
Basic definitively is <I>not </I>a true OOP language and it won't be one until it possesses 
some essential OOP features, such as inheritance. But this deficit shouldn't excuse your 
not learning in depth what classes and objects have to offer developers. This is what 
I'll show in this chapter and in the remainder of this book:</p>

<UL>
<p><li> Class modules can immensely improve your productivity, help you 
solve many common and intricate programming problems, and even 
permit you to perform tasks that would be extremely difficult, if not 
impossible, otherwise.</li></p>

<p><li> Even if Visual Basic isn't a full-fledged object-oriented programming 
language, you can still use its classes to better organize your code into 
truly reusable modules and design your applications entirely using 
concepts derived from the Object-Oriented Design discipline. In this sense, 
the inclusion of a tool such as Visual Modeler in the Enterprise Edition is 
a clear sign of Microsoft's will to pursue this goal.</li></p>

<p><li> Most important, objects are the base on which almost every feature 
of Visual Basic is implemented. For example, without objects you can't 
do serious database programming, you can't deliver Internet applications, 
and you can't write components for COM, DCOM, or MTS. In short, you 
can do little or nothing without a firm grasp on what objects are and how 
you can take advantage of them.</li></p>
</UL>

<p>If you're absolutely new to object-oriented programming, this could be the 
most difficult chapter of the entire book for you to grasp. To understand how objects 
can help you write better programs in less time, you must be ready for a conceptual 
leap, not unlike the leap that many programmers had to take when switching from 
pure procedural MS-DOS languages such as QuickBasic to newer and more 
sophisticated event-driven programming environments such as Visual Basic. But once you 
grasp the basic concepts of OOP, you'll probably agree that objects are the most 
exciting thing to happen to Visual Basic since its first version. When you dive into 
object-oriented programming, you'll soon find yourself devising new, concise, and 
elegant solutions to old problems, often in less time and with less code. But I don't want 
to sound intimidating. As a Visual Basic programmer, you've already learned to 
master many advanced programming techniques concerned with, for example, events, 
database programming, and user interface issues. OOP isn't more difficult, it's 
merely different. And it's certainly a lot of fun.</p>

<p>If you've ever read books or articles about OOP, you surely found dozens 
of different definitions for the term <I>object</I>. Most of the definitions are correct and 
confusing at the same time. The definition I like most is this one:</p>

<p><I>An object is an entity that embeds both data and the code that deals with it.</I></p>

<p>Let's see what this means in practice.</p>


<a name="A38"></a><h3>5.6.1 The Basic Concepts</h3>

<A HREF="#A37">[Previous]</A> <A HREF="#A39">[Next]</A><P>

<A NAME="213"><h1>The Basic Concepts</h1></A>

<p>I have noticed that many programmers exposed for the first time to OOP tend to 
confuse classes and objects, so a very short explanation is in order. A <I>class</I> is a
portion of the program (a source code file, in Visual Basic) that defines the properties, 
methods, and events&#8212;in a word, behavior&#8212;of one or more objects that will be created 
during execution. An <I>object</I> is an entity created at run time, which requires memory and possibly other system resources, and is then destroyed when it's no longer needed or when the application ends. In a sense, classes are design time-only entities, while objects are run
time-only entities.</p>

<p>Your users will never <I>see</I> a class; rather, they'll probably see and interact 
with objects created from your classes, such as invoices, customer data, or circles on 
the screen. As a programmer, your point of view is reversed because the most 
concrete thing you'll have in front of you while you're writing the application is the class, 
in the form of a class module in the Visual Basic environment. Until you run the 
application, an object isn't more real than a variable declared with a 
<I>Dim</I> statement in a code listing. In my opinion, this dichotomy has prevented many
Visual Basic programmers from embracing the OOP paradigm. We have been spoiled by the 
RAD (Rapid Application Development) orientation of our favorite tool and often think 
of objects as <I>visible</I> objects, such as forms, controls, and so on. While Visual Basic 
can also create such visible objects&#8212;including Microsoft ActiveX controls&#8212;you 
won't grasp the real power of object orientation until you realize that <I>almost everything</I> in your program can be an object, from concrete and visible entities such as invoices, products, customers, employees, and so on to more abstract ones such as the validation process or the relationship between two tables.</p>

<A NAME="214"><h2>The Main Benefits of OOP</h2></A>

<p>Before getting practical, I'd like to hint at what object-oriented programming has 
to offer you. I'll do that by listing the key features of OOPLs (object-oriented 
programming languages) and explaining some concepts. An understanding of these ideas 
will turn out to be very useful later in the chapter.</p>

<A NAME="215"><h3>Encapsulation</h3></A>

<p><I>Encapsulation</I> is probably the feature that programmers appreciate most in 
object-oriented programming. In a nutshell, an object is the sole owner of its own data. 
All data is stored inside a memory area that can't be directly accessed by another 
portion of the application, and all assignment and retrieval operations are 
performed through methods and properties provided by the object itself. This simple 
concept has at least two far-reaching consequences:</p>
<UL>

<p><li> You can check all the values assigned to object properties before 
they're actually stored in memory and immediately reject all invalid ones.</li></p>

<p><li> You're free to change the internal implementation of the data stored 
in an object without changing the way the rest of the program interacts 
with the object. This means that you can later modify and improve the 
internal workings of a class without changing a single line of code elsewhere 
in the application.</li></p>
</UL>

<p>As with most OOP features, it's your responsibility to ensure that the class 
is well encapsulated. The fact that you're using a class doesn't guarantee that the 
goals of encapsulation are met. In this and the <a href="#A41">next chapter</a>, I'll show you how some 
simple rules&#8212;and common sense&#8212;help you implement <I>robust</I> classes. A robust
class is one that actively protects its internal data from tampering. If an object derived from
a class holds valid data and all the operations you perform on that object transform the 
data only into other valid data (or raise an error if the operation isn't valid), you can 
be absolutely sure that the object will always be in a valid state and will never 
propagate a wrong value to the rest of the program. This is a simple but incredibly 
powerful concept that lets you considerably streamline the process of debugging your code.</p>

<p>The second goal that every programmer should pursue is <I>code reusability,</I> which you
achieve by creating classes that are easily maintained and reused in other applications.
This is a key factor in reducing the development time and cost. Classes offer much in this respect, but again they require your cooperation. When you start writing a new class, you should always ask yourself: Is there any chance that this class can be useful in other applications? How can I make this class as independent as possible from the particular software I'm developing right now? In most cases, this means adding a few additional properties or additional arguments to methods, but the 
effort often pays off nicely. Don't forget that you can always resort to default values for properties and optional arguments for methods, so in most cases these enhancements won't really make the code that uses the class more complex than it actually needs to be.</p>

<p>The concept of <I>self-containment </I>is also strictly related to code reuse and encapsulation. If you want to create a class module that's easily reusable, you absolutely must not allow that class to depend on any entity outside it, such as a global variable. This would break encapsulation (because code elsewhere in the application might change the value of the variable to some invalid data) and above all, it would prevent you from reusing the class elsewhere without also copying the global variable (and its parent BAS module). For the same reason, you should try to make the class independent of general-purpose routines located in another module. In most cases, I prefer to duplicate shorter routines in each class module, if this makes the class easily movable elsewhere.</p>

<A NAME="216"><h3>Polymorphism</h3></A>

<p>Informally, <I>Polymorphism</I> is the ability of different classes to expose similar (or 
identical) interfaces to the outside. The most evident kind of polymorphism in Visual 
Basic is forms and controls. TextBox and PictureBox controls are completely 
different objects, but they have some properties and methods in common, such as 
<I>Left</I>, <I>BackColor</I>, and <I>Move</I>. This similarity simplifies your job as a programmer because you don't have to remember hundreds of different names and syntax formats. More 
important, it lets you manage a group of controls using a single variable (typed as Control, 
Variant, or Object) and create generic procedures that act on all the controls on a form 
and therefore noticeably reduce the amount of code you have to write.</p>

<A NAME="217"><h3>Inheritance</h3></A>

<p><I>Inheritance</I> is the ability, offered by many OOP languages, to derive a new class 
(the <I>derived </I>or <I>inherited </I>class) from another class (the <I>base </I>class). The derived class automatically inherits the properties and methods of the base class. For example, you 
could define a generic <I>Shape</I> class with properties such as <I>Color</I> and <I>Position</I> and then use it as a base for more specific classes (for example, <I>Rectangle</I>, <I>Circle</I>, and so on) that inherit all those generic properties. You could then add specific members, such 
as <I>Width</I> and <I>Height </I>for the <I>Rectangle</I> class and <I>Radius</I> for the 
<I>Circle</I> class. It's interesting to note that, while polymorphism tends to reduce the amount of code necessary to use the class, inheritance reduces the code inside the class itself and 
therefore simplifies the job of the class creator. Unfortunately, Visual Basic doesn't support inheritance, at least not in its more mature form of implementation inheritance. In the <a href="#A41">next chapter</a>, I show how you can simulate inheritance by manually writing code and explain when and why this can be useful.</p>

<A NAME="218"><h2>Your First Class Module</h2></A>

<p>Creating a class in Visual Basic is straightforward: just issue an Add Class Module 
command from the Project menu. A new code editor window appears on an empty listing. By default, the first class module is named <I>Class1</I>, so the very first thing you should do is change this into a more appropriate name. In this first example, I show how to encapsulate personal data related to a person, so I'm naming this first class CPerson.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
I admit it: I'm not a  fanatic about naming conventions. Microsoft suggests that you use the <I>cls</I> prefix for class module names, but I don't comply simply because I feel it makes my code less readable. I often prefer to use the shorter <I>C</I> prefix for classes (and <I>I</I> for interfaces), and sometimes I use no prefix at all, especially when objects are grouped in hierarchies. Of course, this is a matter of personal preference, and I don't insist that my system is more rational than any other.
</blockquote></div>
</p>

<p>The first version of our class includes only a few properties. These 
properties are exposed as Public members of the class module itself, as you can see in this 
code and also in Figure 6-1:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declaration section of the CPerson class module
Public FirstName As String
Public LastName As String
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F06ph01x.htm')"> <img src="F06ph01.JPG" width=404 height=250 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 6-1.</B> <i>Creating a class module, giving it a name in the Properties window, and adding some Public variables in the code editor window.</i><!--/caption-->
</p>

<p>This is a very simple class, but it's a good starting point for experimenting 
with some interesting concepts, without being distracted by details. Once you have 
created a class module, you can declare an object variable that refers to an instance 
of that class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a form module
Private Sub cmdCreatePerson_Click()
    Dim pers As CPerson                          ' Declare.
    Set pers = New CPerson                       ' Create.
    pers.FirstName = &quot;John&quot;                      ' Assign properties.
    pers.LastName = &quot;Smith&quot;
    Print pers.FirstName &amp; &quot; &quot; &amp; pers.LastName   ' Check that it works.
End Sub
</pre>
</td></tr>
</table></p>


<p>The code's not very impressive, admittedly. But remember that here we're 
just laying down concepts whose real power will be apparent only when we apply 
them to more complex objects in real-world applications.</p>

<A NAME="219"><h3>Auto-instancing object variables</h3></A>

<p>Unlike regular variables, which can be used as soon they have been declared, 
an object variable must be explicitly assigned an object reference before you can 
invoke the object's properties and methods. In fact, when an object variable hasn't 
been assigned yet, it contains the special <I>Nothing</I> value: In other words, it doesn't 
contain any valid reference to an actual object. To see what this means, just try out this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim pers As CPerson         ' Declare the variable,
' Set pers = New CPerson    ' but comment out the creation step.
Print pers.FirstName        ' This raises an error 91 _ &quot;Object variable
                            ' or With block variable not set&quot;
</pre>
</td></tr>
</table>
</p>

<p>In most cases, this behavior is desirable because it doesn't make much 
sense to print a property of an object that doesn't exist. A way to avoid the error is to 
test the current contents of an object variable using the <I>Is Nothing</I> test:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Use the variable only if it contains a valid object reference
If Not (pers Is Nothing) Then Print pers.FirstName
</pre>
</td></tr>
</table>
</p>

<p>In other cases, however, you just want to create an object, <I>any </I>object, and then assign its properties. In these circumstances, you might find it useful to declare an <I>auto-instancing </I>object variable using the <I>As New</I> clause:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim pers As New CPerson        ' Auto-instancing variable
</pre>
</td></tr>
</table>
</p>

<p>When at run time Visual Basic encounters a reference to an auto-instancing variable, it first determines whether it's pointing to an existing object and creates a brand new instance of the class if necessary. Auto-instancing variables have virtues and liabilities, plus a few quirks you should be aware of:</p>
<UL>

<p><li> Auto-instancing variables obviously reduce the amount of code you 
need to write to be up and running with your classes. For this reason, 
they're often valuable during the prototyping phase.</li></p>

<p><li> Auto-instancing variables can't be tested against the Nothing value. In 
fact, as soon as you use one in the <I>Is Nothing</I> test, Visual Basic relentlessly creates a new instance and the test always returns False. In some cases, this could be the decisive factor in whether to stay clear of auto-instancing variables.</li></p>

<p><li> Auto-instancing variables tend to eliminate errors, but sometimes this 
is precisely what you don't need. In fact, during the development phase you <I>want </I>to see errors because they're the symptoms of other serious flaws in the code logic. Auto-instancing variables make the debugging step a little more obscure because you can never be sure when and why an object was created. This is probably the most persuasive reason <I>not </I>to use auto-instancing variables.</li></p>

<p><li> You can't declare an auto-instancing variable of a generic type, such 
as Object, Form, or MDIForm because Visual Basic must know in advance which kind of object should be created when it references that variable for the first time.</li></p>

<p><li> In some complex routines, you might declare a variable but never actually use it: this happens all the time with standard variables and with object variables too, but it creates a problem with regular (non-auto-instancing) object variables. In fact, if you create the object with a <I>Set </I>command at the beginning of a procedure, you might be creating an object&#8212;thus taking both time and memory&#8212;for no real purpose. On the other hand, if you delay the creation of an object until you actually need it, you could soon find yourself drowning in a sea of <I>Set</I> commands, each preceded by an <I>Is Nothing</I> test to avoid re-creating an object instanced previously. 
By comparison, auto-instancing variables are automatically created by Visual Basic only if and when they are referenced: In all other cases, no time or memory will be wasted without reason. This is probably the situation in which auto-instancing variables are most useful.</li></p>

<p><li> Finally, each time Visual Basic references an auto-instancing variable, it incurs a small performance hit because it has to check whether it's Nothing. This overhead is usually negligible, but in some time-critical routines it could affect the overall time.</li></p>
</UL>

<p>In summary, auto-instancing variables often aren't the best choice, and in 
general I advise you not to use them. Most of the code shown in this chapter 
doesn't make use of auto-instancing variables, and you can often do without them in 
your own applications as well.</p>

<A NAME="220"><h3>Property procedures</h3></A>

<p>Let's go back to the CPerson class and see how the class can protect itself from invalid assignments, such as an empty string for its <I>FirstName</I> or <I>LastName</I> properties. To achieve this goal, you have to change the internal implementation of the class module because in its present form you have no means of trapping the assignment operation. What you have to do is transform those values into Private members and encapsulate them in pairs of Property procedures. This example shows the code for <I>Property Get</I> and <I>Let FirstName</I> procedures, and the code for <I>LastName</I> is similar.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Private member variables
Private m_FirstName As String
Private m_LastName As String

' Note that all Property procedures are Public by default.
Property Get FirstName() As String
    ' Simply return the current value of the member variable.
    FirstName = m_FirstName
End Property

Property Let FirstName(ByVal newValue As String)
    ' Raise an error if an invalid assignment is attempted.
    If newValue = &quot;&quot; Then Err.Raise 5    ' Invalid procedure argument 
    ' Else store in the Private member variable.
    m_FirstName = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
You can save some typing using the Add Procedure command from 
the Tools menu, which creates for you the templates for 
<I>Property Get</I> and <I>Let </I>procedures. But you should then edit the result because all properties created 
in this way are of type Variant.
</blockquote></div>
</p>

<p>Add this code and write your own procedures for handling the <I>LastName</I>;<I> </I>then<I> </I>run the program, and you'll see that everything works as before. What you have done, however, is make the class a bit more robust because it now refuses to assign invalid values to its properties. To see what I mean, just try this command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.Name = &quot;&quot;      ' Raises error &quot;Invalid procedure call or argument&quot;
</pre>
</td></tr>
</table>
</p>

<p>If you trace the program by pressing F8 to advance through individual 
statements, you'll understand what those two Property procedures actually do. Each time you 
assign a new value to a property, Visual Basic checks whether there's an associated 
<I>Property Let</I> procedure and passes it the new value. If your code can't validate the new 
value, it raises an error and throws the execution back to the caller. Otherwise, the 
execution proceeds by assigning the value to the private variable <I>m_FirstName</I>. I like to use the <I>m_ </I>prefix to keep the property name and the corresponding private member 
variable in sync, but this is just another personal preference; feel free to use it or to 
create your own rules. When the caller code requests the value of the property, Visual 
Basic executes the corresponding <I>Property Get</I> procedure, which (in this case) simply 
returns the value of the Private variable. The type expected by the <I>Property Let</I> procedure must match the type of the value returned by the <I>Property Get</I> procedure. In fact, as far as Visual Basic is concerned, the type of the property <I>is </I>the returned type of the 
<I>Property</I> <I>Get</I> procedure. (This distinction will make more sense later, when I'm 
explaining Variant properties.)</p>

<p>It isn't always clear what <I>validating</I> a property value really means. Some 
properties can't be validated without your also considering what happens outside the 
class. For example, you can't easily validate a product name without accessing a 
database of products. To keep things simpler, add a new <I>BirthDate</I> property and 
validate it in a reasonable way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_BirthDate As Date

Property Get BirthDate() As Date
    BirthDate = m_BirthDate
End Property
Property Let BirthDate(ByVal newValue As Date)
    If newValue &gt;= Now Then Err.Raise 1001, , &quot;Future Birth Date !&quot;
    m_BirthDate = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<A NAME="221"><h3>Methods</h3></A>

<p>A class module can also include Sub and Function procedures, which are collectively known as <I>methods</I> of the class. As in other types of modules, the only difference between a Function method and a Sub is that a Function method returns a value, whereas a Sub method doesn't. Since Visual Basic lets you invoke a function and discard its return value, I usually prefer to create Function methods that return a secondary value: This practice adds value to the procedure without getting in the way when the user of the class doesn't actually need the return value.</p>

<p>What methods could be useful in this simple CPerson class? When you start dealing with records for many people, you could easily find yourself printing their complete names over and over. So you might want to devise a way to print a full name quickly and simply. The <I>procedural way of thinking </I>that solves this simple task would suggest that you create a function in a global BAS module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a BAS module
Function CompleteName(pers As CPerson) As String
    CompleteName = pers.FirstName &amp; &quot; &quot; &amp; pers.LastName
End Function
</pre>
</td></tr>
</table>
</p>

<p>While this code works, it isn't the most elegant way to perform the task. In 
fact, the complete name concept is internal to the class, so you're missing an 
opportunity to make the class smarter and easier to use. Besides, you're also making it 
difficult to reuse the class itself because you now have scattered its intelligence all over 
your application. The best approach is to add a new method to the CPerson class itself:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CPerson class
Function CompleteName() As String
    CompleteName = FirstName &amp; &quot; &quot; &amp; LastName
End Function

' In the form module, you can now execute the method.
Print pers.CompleteName          ' Prints &quot;John Smith&quot;
</pre>
</td></tr>
</table>
</p>

<p>While you're within the class module, you don't need the dot syntax to refer to the properties of the current instance. On the other hand, if you're within the class and you refer to a Public name for a property (<I>FirstName</I>) instead of the corresponding Private member variable (<I>m_FirstName</I>), Visual Basic executes the <I>Property Get</I> procedure as if the property were referenced from outside the class. This is perfectly normal, and it's even desirable. In fact, you should always try to adhere to the following rule: Reference private member variables in a class only from the corresponding<I> Property Let/Get </I>procedures. If you later modify the internal implementation of the property, you'll have to modify only a small portion of the code in the class module. Sometimes you can't avoid substantial code modifications, but you should do your best to apply this rule as often as you can. Once you understand the mechanism, you can add much intelligence to your class, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function ReverseName() As String
    ReverseName = LastName &amp; &quot;, &quot; &amp; FirstName
End Function
</pre>
</td></tr>
</table>
</p>

<p>Remember that you're just adding code and that no additional memory will 
be used at run time to store the values of complete and reversed names.</p>

<p>The more intelligence you add to your class, the happier the programmer who uses this class (yourself, in most cases) will be. One of the great things about classes is that all the methods and properties you add to them are immediately visible in the Object Browser, together with their complete syntax. If you carefully select the names of your properties and methods, picking the right procedure for each different task becomes almost fun.</p>

<A NAME="222"><h3>The <I>Class Initialize</I> event</h3></A>
<p>As you start building classes, you'll soon notice how often you want to assign a well-defined value to a property at the time of the creation of the object itself, without having to specify it in the caller code. For example, if you're dealing with an Employee object you can reasonably expect that in most cases its <I>Citizenship</I> property is &quot;American&quot; (or whatever nationality applies where you live). Similarly, in most cases the <I>AddressFrom</I> property in a hypothetical Invoice object will probably match the address of the company you're working for. In all cases, you'd like for these default values to be assigned when you create an object, rather than your having to assign them manually in the code that uses the class.</p>

<p>Visual Basic offers a neat way to achieve this goal. In fact, all you have to do is write some statements in the <I>Class_Initialize</I> event of the class module. To have the editor create a template for this event procedure, you select the Class item in the leftmost combo box in the code editor. Visual Basic automatically selects the Initialize item from the rightmost combo box control and inserts the template into the code window. Here's a <I>Citizenship</I> property that defaults to &quot;American&quot;:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The Private member variable
Private m_Citizenship As String

Private Sub Class_Initialize()
    m_Citizenship = &quot;American&quot;
End Sub
' Code for Public Property Get/Let Citizenship procedure ... (omitted)
</pre>
</td></tr>
</table>
</p>

<p>If you now run the program you have built so far and trace through it, 
you'll see that as soon as Visual Basic creates the object (the 
<I>Set</I> command in the form module), the <I>Class_Initialize</I> event fires. The object is returned to the caller with all the properties correctly initialized, and you don't have to assign them in an explicit way. The <I>Class_Initialize</I> event has a matching <I>Class_Terminate</I> event, which fires when the object instance is destroyed by Visual Basic. In this procedure, you usually close your open files and databases and execute your other cleanup tasks. I will describe the <I>Class_Terminate</I> event at the end of this chapter.</p>

<A NAME="223"><h3>Debugging a class module</h3></A>

<p>In most respects, debugging code inside a class module isn't different from debugging code in, say, a form module. But when you have multiple objects that interact with one another, you might easily get lost in the code. Which particular instance are you looking at in a given moment? What are its current properties? Of course, you can use all the usual debugging tools&#8212;including <I>Debug.Print</I> statements, data tips, Instant Watch, and so on. But the one that beats them all is the Locals window, which you can see in Figure 6-2. Just keep this window open and you'll know at every moment where you are, how your code affects the object properties, and so on. All in real time.</p>

<p>
<A HREF="javascript:fullSize('F06ph02x.htm')"> <img src="F06ph02.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 6-2.</B> <i>The Locals window is a great debugging tool when you're working with multiple objects.</i><!--/caption-->
</p>

<A NAME="224"><h3>The <I>Me</I> keyword</h3></A>

<p>Sometimes a class must reference itself in code. This is useful, for instance, 
when an object must pass a reference to itself to another routine. This can be done 
using the <I>Me</I> keyword. In the following sample code, I have prepared a couple of 
general-purpose routines in a BAS module, which help keep track of when an object is 
created and destroyed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a Standard BAS module
Sub TraceInitialize (obj As Object)
    Debug.Print &quot;Created a &quot; &amp; TypeName(obj) _
        &amp; &quot; object at time &quot; &amp; Time$
End Sub
Sub TraceTerminate (obj As Object)
    Debug.Print &quot;Destroyed a &quot; &amp; TypeName(obj) _
        &amp; &quot; object at time &quot; &amp; Time$
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Here's how you use these routines from within the CPerson class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Class_Initialize()
    TraceInitialize Me
End Sub

Private Sub Class_Terminate()
    TraceTerminate Me
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>Me</I> keyword has other uses as well, as you'll discover in this and the 
<a href="#A41">next chapter</a>.</p>


<a name="A39"></a><h3>5.6.2 Properties, Methods, and Events</h3>

<A HREF="#A38">[Previous]</A> <A HREF="#A40">[Next]</A><P>

<A NAME="225"><h1>Properties, Methods, and Events</h1></A>

<p>It's time to see how you can put all the capabilities you've seen so far to good use. I'll continue to develop the original CPerson class as an example and expand it as I introduce new concepts.</p>

<A NAME="226"><h2>Read-Only and Write-Only Properties</h2></A>

<p>If you look at how Visual Basic defines its own objects (forms, controls, and so on), you'll notice that not all properties can be both read from and written to. For example, you can't modify the <I>MultiSelect </I>property of a ListBox control at run time, and you can't modify the height of a ComboBox control even at design time. Depending on the nature of your class, you might have many good reasons to limit the access to your properties, making them read-only or (less frequently) write-only.</p>

<A NAME="227"><h3>Read-only properties</h3></A>

<p>Say that you want to add an <I>Age</I> property to your CPerson class. It depends on the <I>BirthDate</I> property, so it should be a read-only property. In Visual Basic, you can make a property read-only by simply omitting its <I>Property Let</I> procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Property Get Age() As Integer
    Age = Year(Now) - Year(BirthDate)
End Property
</pre>
</td></tr>
</table>
</p>

<p>To prove that you now have a read-only property, try to execute this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.Age = 50
</pre>
</td></tr>
</table>
</p>


<p>The Visual Basic compiler traps this logical error as soon as you try to run 
your program and won't compile the program until you correct or delete the statement.

<A NAME="228"><h3>Write-only properties</h3></A>
<p>Occasionally, you might even want to create write-only properties. A typical example is a <I>Password</I> property exposed by an imaginary LoginDialog object. The property can be assigned to validate the login process but shouldn't be readable so as not to compromise the security of the application itself. In Visual Basic, such a write-only property can be easily implemented by writing a <I>Property Let</I> procedure while omitting the corresponding <I>Property Get</I> routine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_Password As String

Property Let Password(ByVal newValue As String)
    ' Validate the password, raise error if not valid.
    ' ...
    ' If all is OK, assign to Private member variable.
    m_Password = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<p>To be honest, I don't often find anything very useful for this particular Visual Basic feature to do, so I have reported it mostly for the sake of completeness. Write-only properties are often confusing and are perceived as unnatural by most developers. If need dictates a write-only property, I prefer to create a method that accepts the value as an argument (<I>SetPassword</I>, in this particular example).</p>

<A NAME="229"><h3>Write-once/read-many properties</h3></A>
<p>Write-once/read-many properties are a bit more interesting and useful than pure 
write-only properties. For example, the LoginDialog object described in the previous 
paragraph might expose a <I>UserName</I> property of this type. Once a user logs in, your 
code assigns his or her name to this property; the rest of the application can then read 
it but can't modify it. Here's another example: in an <I>Invoice</I> class, the <I>Number</I> property might be rendered as a write-once/read-many property because once you assign a number to an invoice, arbitrarily changing it might cause serious problems in your accounting system.</p>

<p>Visual Basic doesn't offer a native system to implement such write-once/read-many properties, but it's easy to do that with some additional lines of code. Let's say that you want to provide our CPerson class with an <I>ID</I> property that can be assigned only once but read as many times as you need. Here's a possible solution, based on a Static local variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_ID As Long

Public Property Get ID() As Long
    ID = m_ID
End Property
Public Property Let ID(ByVal newValue As Long)
    Static InitDone As Boolean
    If InitDone Then Err.Raise 1002, , &quot;Write-once property&quot;
    InitDone = True
    m_ID = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<p>Here's an alternative solution, which spares you the additional Static variable but consumes some additional bytes in memory (16 bytes instead of 6):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_ID As Variant

Public Property Get ID() As Long
    ID = m_ID
End Property
Public Property Let ID(ByVal newValue As Long)
    If Not IsEmpty(m_ID) Then Err.Raise 1002, , &quot;Write-once property&quot;
    m_ID = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p>In both cases, the interface that the class exposes to the outside is the same. (<I>ID</I> is a Long property.) This is another example of how a good encapsulation scheme lets you vary the internal implementation of a class without affecting the code that uses it.</p>

<A NAME="230"><h3>Read-only properties vs. methods</h3></A>

<p>From the point of view of the client code (that is, the code that actually uses your class), a read-only property is similar to a function. In fact, in all cases a read-only property can be invoked only in expressions and can never appear to the left of an assignment symbol. So this raises a sort of semantic problem: When is it preferable to implement a read-only property and when is a function better? I can't offer rigid rules, just a few suggestions:</p>
<UL>

<p><li> Most programmers expect properties to be quick shortcuts to values stored in the class. If the routine that you're building serves mostly to <I>return </I>a value stored inside the class or can be quickly and easily reevaluated, create a property because this is probably the way the client code will look at it anyway. If the routine serves mostly to <I>evaluate </I>a complex value, use a function.</li></p>

<p><li> If you can find it useful to call the routine and discard its return value 
(in other words, it's more important what the routine does than what it returns), write a function. VBA lets you call a function as if it were a Sub, which isn't possible with a <I>Property 
Get</I> procedure.</li></p>

<p><li> If you can imagine that in the future the value returned by the routine could be assigned to, use a <I>Property Get</I> procedure, and reserve for yourself the chance to add a <I>Property Let</I> routine when it's needed.</li></p>
</UL>

<p><div class="note"><blockquote><b>NOTE</b><hr>
What happens when you try to assign a value to a read-only property is slightly different from when you try to assign to a function. In the former case, you receive a plain error&#8212;&quot;Can't assign to read-only property&quot;&#8212;whereas in the latter, you get a more cryptic &quot;Function call on left-hand side of assignment must return Variant or Object.&quot; The real meaning of this strange message will be clear when I cover object properties later in this chapter.
</blockquote></div>
</p>

<p>Let's take the <I>CompleteName</I> member of the CPerson class as an example. It has been implemented as a method, but most programmers would undoubtedly think of it as a read-only property. Moreover&#8212;and this is the really important point&#8212;nothing prevents you from morphing it into a read/write property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Property Get CompleteName() As String
    CompleteName = FirstName &#38;; &quot; &quot; &#38;; LastName
End Property
Property Let CompleteName(ByVal newValue As String)
    Dim items() As String
    items() = Split(newValue)
    ' We expect exactly two items (no support for middle names).
    If UBound(items) &lt;&gt; 1 Then Err.Raise 5
    ' If no error, assign to the &quot;real&quot; properties.
    FirstName = items(0): LastName = items(1)
End Property
</pre>
</td></tr>
</table>
</p>

<p>You have increased the usability of the class by letting the client code assign the<I>FirstName</I> and <I>LastName</I> properties in a more natural way, for example, directly from a field on the form:

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.CompleteName = txtCompleteName.Text
</pre>
</td></tr>
</table>
</p>


<p>And of course you can still assign individual 
<I>FirstName </I>and <I>LastName</I> properties without the risk of creating inconsistencies with the <I>CompleteName</I> property. This is another of those cute little things you can do with classes.</p>

<A NAME="231"><h3>Properties with arguments</h3></A>

<p>So far, I've illustrated <I>Property Get</I> procedures with no arguments and their 
matching <I>Property Let</I> procedures with just one argument, the value being assigned to 
the procedure. Visual Basic also lets you create Property procedures that accept 
any number of arguments, of any type. This concept is also used by Visual Basic for 
its own controls: for example, the <I>List</I> property of ListBox controls accepts a 
numerical index. </p>

<p>Let's see how this concept can be usefully applied to the CPerson sample 
class. Suppose you need a <I>Notes</I> property, but at the same time you don't want to 
limit yourself to just one item. The first solution that comes to mind is using an array 
of strings. Unfortunately, if you declare a Public array in a class module as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Notes(1 To 10) As String        ' Not valid!
</pre>
</td></tr>
</table>
</p>

<p>the compiler complains with the following message, &quot;Constants, fixed-length 
strings, arrays, user-defined types, and Declare statements not allowed as Public member 
of object modules.&quot; But you can create a Private member array and expose it to 
the outside using a pair of Property procedures:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A module-level variable
Private m_Notes(1 To 10) As String

Property Get Notes(Index As Integer) As String
    Notes = m_Notes (Index)
End Property
Property Let Notes(Index As Integer, ByVal newValue As String)
    ' Check for subscript out of range error.
    If Index &lt; LBound(m_Notes) Or Index &gt; UBound(m_Notes) Then Err.Raise 9
    m_Notes(Index) = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
You might be tempted not to check the <I>Index</I> argument in the <I>Property Let</I> procedure in the preceding code, relying instead on the default behavior of Visual Basic that would raise an error anyway. Think about it again, and try to imagine what would happen if you later decide to optimize your code by setting the Remove Array Bounds Checks optimization for the compiler. (The answer is easy: Can you spell &quot;G-P-F&quot;?) 
</blockquote></div>
</p>

<p>Now you can assign and retrieve up to 10 distinct notes for the same 
person, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.Notes(1) = &quot;Ask if it's OK to go fishing next Sunday&quot;
Print pers.Notes(2) ' Displays &quot;&quot; (not initialized)
</pre>
</td></tr>
</table>
</p>

<p>You can improve this mechanism by making <I>Index</I> an optional argument that defaults to the first item in the array, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Property Get Notes(Optional Index As Integer = 1) As String
    ' ... (omitted: no need to change code inside the procedure)
End Property
Property Let Notes(Optional Index As Integer = 1, _
    ByVal newValue As String)
    ' ... (omitted : no need to change code inside the procedure)
End Property

' In the client code, you can omit the index for the default note.
pers.Notes = &quot;Ask if it's OK to go fishing next Sunday&quot;
' You can always display all notes with a simple For-Next loop.
For i = 1 To 10: Print pers.Notes(i): Next
</pre>
</td></tr>
</table>
</p>


<p>You can also use optional Variant arguments and the <I>IsMissing</I> function, as you would do for regular procedures in a form or standard module. In practice, this is rarely required, but it's good to know that you can do it if you need to.</p>

<A NAME="232"><h3>Properties as Public variables in a class</h3></A>

<p>I have already described the convenience of using <I>Property Get</I> and <I>Let </I>procedures instead of plain Public variables in a class: You get more control, you can validate data assigned to the property, you can trace the execution flow, and so on. But here's one more interesting detail that you should be aware of. Even if you declare a Public variable, what Visual Basic actually does is create a hidden pair of Property procedures for you and calls them whenever you reference the property from outside the class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the CPerson class
Public Height As Single  ' Height in inches

' Outside the class
pers.Height = 70.25      ' This calls a hidden Property Let procedure.
</pre>
</td></tr>
</table>
</p>


<p>Apart from a slight performance hit&#8212;invoking a procedure is surely slower 
than accessing a variable&#8212;this Visual Basic behavior doesn't appear to be a detail 
worth mentioning. Unfortunately, this isn't the case. Let's suppose that you want to 
convert all your measurements into centimeters, so you prepare a simple procedure that 
does the job with its <I>ByRef</I> argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a standard BAS module
Sub ToCentimeters (value As Single)
    ' Value is received by reference, therefore it can be changed.
    value = value * 2.54
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You think you can legitimately expect an easy conversion for your objects' 
properties, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ToCentimeters pers.Height                ' Doesn't work!
</pre>
</td></tr>
</table>
</p>

<p>The reason the preceding approach fails should be clear, now that you know that Public variables are implemented as hidden procedures. In fact, when you pass the <I>pers.Height </I>value to the <I>ToCentimeters </I>procedure you're passing the result of an expression, not an actual memory address. Therefore, the routine has no address to which to deliver the new value, and the result of the conversion is lost.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>Microsoft changed the way the Public variables in class 
modules are implemented. In Visual Basic 4, these variables weren't encapsulated 
in hidden property procedures; therefore, they could be modified if passed to 
a procedure through a <I>ByRef</I> argument. This implementation detail changed 
when Visual Basic 5 was released, and many Visual Basic 4 programmers had to 
rework their code to comply with the new style by creating a temporary 
variable that actually receives the new value:

<p><table><tr><td>
<pre>
' The fix that VB4 developers had to apply when porting to VB5
Dim temp As Single
temp = pers.Height
ToCentimeter temp
pers.Height = temp
</pre>
</td></tr></table>
</p>

<p>This code is neither elegant nor efficient. Worse, since this technique 
isn't clearly documented, many programmers had to figure it out on their own. If 
you are about to port some Visual Basic 4 code to versions 5 or 6, don't be 
caught off guard.</p>
</blockquote></div>
</p>

<p>Anyway, here's yet another untold episode of the story. What I have 
described so far is what happens when you reference the Public variable from 
<I>outside </I>the class. If you invoke the external procedure from inside the class module and pass it your variable, everything works as expected. In other words, you can write this code 
in the CPerson class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the CPerson class
ToCentimeter Height                ' It works!
</pre>
</td></tr>
</table>
</p>

<p>and the <I>Height</I> property will be correctly updated. In this case, the value passed 
is the address of the variable, not the return value of a hidden procedure. This point 
is important if you want to move code from outside the class to inside the class (or 
vice versa) because you must be prepared to deal with subtle issues like this one.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>One last note, just to add confusion to confusion: If you prefix 
the properties in your class module with the <I>Me 
</I>keyword, they're again seen as properties instead of variables and Visual Basic invokes the hidden procedure 
instead of using the variable address. Therefore, this code won't work even inside 
the class module:

<p><table><tr><td>
<pre> ToCentimeter Me.Height             ' It doesn't work!
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<A NAME="233"><h2>Advanced Uses of Methods</h2></A>

<p>You already know a lot about methods. There are, however, a few more interesting details that you should be aware of concerning how methods can be used within a class module.</p>


<A NAME="234"><h3>Saving results for subsequent calls</h3></A>

<p>Let's say that you have a function that returns a complex value&#8212;for example, the 
grand total of an invoice&#8212;and you don't want to reevaluate it each time the client code 
makes a request. On the other hand, you don't want to store it somewhere and run the risk that its value becomes obsolete because some other property of the invoice changes. This is similar to the decision that a database developer has to make: Is it better to create a <I>GrandTotal </I>field that contains the actual value (thus putting the consistency of the database at stake and also wasting some disk space) or to evaluate the total each time you need it (thus wasting CPU time each time you do it)?</p>
<p>Class modules offer a simple and viable alternative that applies equally well to all dependent values, be they implemented as functions or read-only properties. As an example, reconsider the <I>ReverseName</I> function in the CPerson<I> </I>class, and pretend that it takes a lot of processing time to evaluate its result. Here's how you can modify this function to keep the overhead to a minimum without modifying the interface that the class exposes to the outside. (Added statements are in boldface.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre><B>' A private member variable
Private m_ReverseName As Variant</B>

Property Let FirstName(ByVal newValue As String)
    ' Raise an error if an invalid assignment is attempted.
    If newValue = &quot;&quot; Then Err.Raise 5    ' Invalid procedure argument
    ' Else store in the Private member variable.
    m_FirstName = newValue
<B>    m_ReverseName = Empty</B>
End Property

Property Let LastName(ByVal newValue As String)
    ' Raise an error if an invalid assignment is attempted.
    If newValue = &quot;&quot; Then Err.Raise 5    ' Invalid procedure argument
    ' Else store in the Private member variable.
    m_LastName = newValue
<B>    m_ReverseName = Empty</B>
End Property

Function ReverseName() As String
<B>    If IsEmpty(m_ReverseName) Then
        m_ReverseName = LastName &#38;; &quot;, &quot; &#38;; FirstName
    End If
    ReverseName = m_ReverseName</B>
End Function
</pre>
</td></tr>
</table>
</p>


<p>In other words, you store the return value in a Private Variant variable 
before returning to the client and reuse that value if possible in all subsequent calls. 
The trick works because each time either <I>FirstName</I> or <I>LastName</I> (the <I>independent 
</I>properties) are assigned a new value, the Private variable is cleared, which forces it to 
be reevaluated the next time the <I>ReverseName</I> function is invoked. Examine this 
simple client code and try to figure out how difficult it would have been to 
implement equivalent logic using other techniques:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This line takes some microseconds the first time it is executed.
If pers.ReverseName &lt;&gt; &quot;Smith, John&quot; Then 
    ' If this line is executed, it internally resets m_ReverseName.
    pers.FirstName = &quot;Robert&quot;
End If
' In all cases, the next statement will be as fast as possible.
Print pers.ReverseName
</pre>
</td></tr>
</table>
</p>

<p>Of course, we might have also reevaluated the <I>m_ReverseName</I> value right in the <I>Property 
Let</I> procedures of <I>FirstName </I>and <I>LastName</I>, but that would undermine our main purpose, which is to avoid unnecessary overhead or postpone it as long as possible. In a real-world application, this difference might involve unnecessarily opening a database, reestablishing a remote connection, and so on, so it's apparent that the advantages of this technique shouldn't be underestimated.</p>

<A NAME="235"><h3>Simulating class constructors</h3></A>

<p>So far, I've explained that a class can be considered robust if it always contains 
valid data. The primary way to achieve this goal is to provide Property procedures 
and methods that permit the outside code to transform the internal data only from 
one valid state to another valid state. In this reasoning, however, is a dangerous 
omission: What happens if an object is used immediately after its creation? You can provide 
some useful initial and valid values in the <I>Class_Initialize</I> event procedure, but this 
doesn't ensure that all the properties are in a valid state:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set pers = New CPerson
Print pers.CompleteName            ' Displays an empty string.
</pre>
</td></tr>
</table>
</p>

<p>In more mature OOPLs such as C++, this issue is solved by the language's ability to define a <I>constructor method</I>. A constructor method<I> </I>is a special procedure defined in the class module and executed whenever a new instance is created. Because you define the syntax of the constructor method, you can force the client code to pass all the values that are needed to create the object in a robust state from its very beginning, or refuse to create the object at all if values are missing or invalid. </p>

<p>Alas, Visual Basic completely lacks constructor methods, and you can't prevent users of your class from using the object as soon as they create it. The best you can do is create a <I>pseudo-constructor </I>method that correctly initializes all the properties and let other programmers know that they can initialize the object in a more concise and robust way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Friend Sub Init(FirstName As String, LastName As String)
    Me.FirstName = FirstName
    Me.LastName = LastName
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Your invitation should be gladly accepted because now the client code 
can initialize the object in fewer steps:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set pers = New CPerson
pers.Init &quot;John&quot;, &quot;Smith&quot;
</pre>
</td></tr>
</table>
</p>


<p>Two issues are worth noting in the preceding code. First, the scope of 
the method is Friend: This doesn't make any difference in this particular case, but it 
will become important when and if the class becomes Public and accessible from 
the outside, as we'll see in <a href="#A100">Chapter 16</a>. In Standard EXE projects, Friend and Public 
are synonymous; using the former doesn't hurt, and you'll save a lot of work if you 
later decide to transform the project into an ActiveX component.</p>

<p>The second noteworthy point is that arguments have the same names as the properties they refer to, which makes our pseudo-constructor easier to use for the programmer who already knows the meaning of each property. To avoid a name conflict, inside the procedure you refer to the real properties using the <I>Me</I> keyword. This is slightly less efficient but preserves the data encapsulation and ensures that any validation code will be properly executed when the constructor routine assigns a value to properties.</p>

<p>The concept of constructors can be refined by using optional arguments. The key properties of our CPerson class are undoubtedly <I>FirstName</I> and <I>LastName</I>, but in many cases the client code will also set <I>BirthDate</I> and <I>ID.</I> So why not take this opportunity to make life easier for the programmer who uses the class?</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Friend Sub Init(FirstName As String, LastName As String, _
    Optional ID As Variant, Optional BirthDate As Variant)
    Me.FirstName = FirstName
    Me.LastName = LastName
    If Not IsMissing(ID) Then Me.ID = ID
    If Not IsMissing(BirthDate) Then Me.BirthDate = BirthDate
End Sub
</pre>
</td></tr>
</table>
</p>


<p> In this case, you must adopt optional arguments of type Variant because it 
is essential that you use the <I>IsMissing</I> function and bypass the assignment of values 
that were never provided by the client:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.Init &quot;John&quot;, &quot;Smith&quot;, , &quot;10 Sept 1960&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can do one more thing to improve the class's usability and acceptance 
by other programmers. This point is really important because if you convince the 
user of your class to call the constructor you provide&#8212;and you must choose this 
&quot;softer&quot; approach, since you can't force them to&#8212;your code and the entire application will be more robust. The trick I'm suggesting is that you write a constructor function 
in a BAS module in your application:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Function New_CPerson(FirstName As String, LastName As String, _
    Optional ID As Variant, Optional BirthDate As Variant) As CPerson
    ' You don't even need a temporary local variable.
    Set New_CPerson = New CPerson
    New_CPerson.Init FirstName, LastName, ID, BirthDate
End Function
</pre>
</td></tr>
</table>
</p>


<p>Procedures of this type are sometimes called 
<I>factory methods</I>. Now see how this can streamline the portion of the client code that creates an instance of the class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim pers As CPerson
' Creation, initialization, and property validation in one step!
Set pers = New_CPerson(&quot;John&quot;, &quot;Smith&quot;, , &quot;10 Sept 1960&quot;)
</pre>
</td></tr>
</table>
</p>


<p><div class="tip"><blockquote><b>TIP</b><hr>
You can reduce the typing and the guesswork when using these 
sort-of constructors if you gather them into a single BAS module and give this 
module a short name, such as <I>Class</I> or 
<I>Factory</I>. (You can't use <I>New</I>, sorry.) Then 
when you need to type the name of a constructor method, you just type 
<I>Class</I> and let Microsoft IntelliSense guide you through the list of constructor methods 
contained in that module. You can use this approach anytime you don't remember the 
name of a procedure in a module.
</blockquote></div>
</p>

<p>Creating all your objects by means of explicit constructors has other 
benefits as well. For example, you can easily add some trace statements in the 
<I>New_CPerson</I> routine that keeps track of how many objects were created, the initial values of 
properties, and so on. Don't underestimate this capability if you're writing complex 
applications that use many class modules and object instances.</p>

<A NAME="236"><h2>Advanced Uses of Properties</h2></A>

<p>I want to tell you more about properties that can make your classes even more useful and powerful.</p>

<A NAME="237"><h3>Enumerated properties</h3></A>

<p>Some properties are intended to return a well-defined subset of integer numbers. 
For example, you could implement a <I>MaritalStatus </I>property that can be assigned the values 1 (NotMarried), 2 (Married), 3 (Divorced), and 4 (Widowed). The best solution possible under Visual Basic 4 was to define a group of constants and consistently use them in the code both inside and outside the class. This practice, however, forced the developer to put the <I>CONST</I> directives in a separate BAS module, which broke the self-containment of the class.</p>

<p>Visual Basic 5 solved this issue by adding a new <I>Enum</I> keyword to the VBA language and thus the ability to create 
<I>enumerated values</I>. An <I>Enum </I>structure is nothing but a group of related constant values that automatically take distinct values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declaration section of the class
Enum MaritalStatusConstants
    NotMarried = 1
    Married
    Divorced
    Widowed
End Enum
</pre>
</td></tr>
</table>
</p>


<p>You don't need to assign an explicit value to all the items in the <I>Enum</I> structure: for all the subsequent omitted values, Visual Basic just increments the preceding value. (So in the previous code, Married is assigned the value 2, Divorced is 3, and so on.) If you also omit the first value, Visual Basic starts at 0. But because 0 is the default value for any integer property when the class is created, I always prefer to stay clear of it so that I can later trap any value that hasn't been initialized properly.</p>

<p>After you define an <I>Enum</I> structure, you can create a Public property of 
the corresponding type:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_MaritalStatus As MaritalStatusConstants

Property Get MaritalStatus() As MaritalStatusConstants
    MaritalStatus = m_MaritalStatus
End Property
Property Let MaritalStatus(ByVal newValue As MaritalStatusConstants)
    ' Refuse invalid assignments. (Assumes that 0 is always invalid.)
    If newValue &lt;= 0 Or newValue &gt; Widowed Then Err.Raise 5
    m_MaritalStatus = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p>The benefit of using enumerated properties becomes apparent when you 
write code that uses them. In fact, thanks to IntelliSense, as soon as you press the 
equal sign key (or use any other math or Boolean operator, for that matter), the Visual 
Basic editor drops down a list of all the available constants, as you can see in Figure 
6-3. Moreover, all the <I>Enum</I>s you define immediately appear in the Object Browser, 
so you can check the actual value of each individual item there.</p>

<p>
<A HREF="javascript:fullSize('F06ph03x.htm')"> <img src="F06ph03.JPG" width=404 height=243 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 6-3.</B> <i>Use IntelliSense to speed up your typing when working with Enum properties.</i><!--/caption-->
</p>

<p>Here are a few details you must account for when dealing with 
<I>Enum</I> values:</p>
<UL>

<p><li> All variables and arguments are internally managed as Longs. As far 
as Visual Basic is concerned, they <I>are </I>Longs and their symbolic names 
are just a convenience for the programmer.</li></p>

<p><li> For the same reason, you can assign an enumerated variable or property any valid 32-bit integer value without raising an error. If you want to enforce a better validation, you must explicitly validate the input data in all your <I>Property Let</I> procedures, as you do with any other property.</li></p>

<p><li> <I> Enum</I> structures aren't exclusively used with properties. In fact, you 
can also create methods that accept enumerated values as one of their arguments or that return enumerated values.</li></p>

<p><li> <I>     Enum</I> blocks can be Public or Private to a class, but it rarely makes 
sense to create a Private <I>Enum</I> because it couldn't be used for any argument 
or return value of a Public property or method. If the class is itself Public&#8212;in an ActiveX EXE or DLL project, for example&#8212;programmers who use the class can browse all the public <I>Enum</I>s in the class using a standard Object Browser.</li></p>

<p><li> It isn't essential that the <I>Enum</I> block be physically located in the same class module that uses it. For example, a class module can include an <I>Enum</I> used by other classes. But if you're planning to make your class Public (see previous point), it's important that all the 
<I>Enum</I>s that it uses are defined in other Public classes. If you put them in a Private 
module or a standard BAS module, you'll get a compile error when you run the application, which you can see in Figure 6-4.</li></p>
</UL>

<p>
<A HREF="javascript:fullSize('F06ph04x.htm')"> <img src="F06ph04.JPG" width=404 height=117 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 6-4.</B> <i>You can't use Enum values in a Public class if the Enum block is located in a form module, in a Private class, or in a standard BAS module.</i><!--/caption-->
</p>


<UL>

<p><li> Never forget that <I>Enum</I>s are just shortcuts for creating constants. 
This means that all the enumerated constants defined within an 
<I>Enum </I>block should have unique names in their scope. (Because 
<I>Enums </I>are typically Public structures, their scope is often the entire application.)
</li></p>
</UL>

<p>The last point is especially important, and I strongly advise you to devise a method for generating unique names for all your enumerated constants. If you fail to do that, the compiler refuses to compile your application and raises the &quot;Ambiguous name detected: &lt;itemname&gt;&quot; error. The easy way to avoid this problem is to add to all the enumerated constants a unique 2- or 3-letter prefix, for example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enum SexConstants
    sxMale = 1
    sxFemale
End Enum
</pre>
</td></tr>
</table>
</p>


<p>The other way to avoid trouble is to use the complete 
<I>enumname.constantname </I>syntax whenever you refer to an ambiguous 
<I>Enum</I> member, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.MaritalStatus = MaritalStatusConstants.Married
</pre>
</td></tr>
</table>
</p>


<p><I>Enum</I> values don't need to be in an increasing sequence. In fact, you can 
provide special values out of the expected order to signal some special conditions, 
as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a hypothetical Order class
Enum OrderStatusConstants
    osShipping = 1
    osBackOrder 
    osError = -9999   ' Tip: use negative values for such special cases.
End Enum
</pre>
</td></tr>
</table>
</p>


<p>Another common example of enumerated properties whose values aren't 
in sequence are <I>bit-fielded </I>properties, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enum FileAttributeConstants
    Normal = 0              ' Actually means &quot;no bit set&quot;
    ReadOnly = 1            ' Bit 0
    Hidden = 2              ' Bit 1
    System = 4              ' Bit 2 
    Directory = 16          ' Bit 3
    Archive = 32            ' Bit 4
End Enum
</pre>
</td></tr>
</table>
</p>


<p>While enumerated properties are very useful and permit you to store some descriptive information in just 4 bytes of memory, you shouldn't forget that sooner or later you'll have to extract and interpret this information and sometimes even show it to your users. For this reason, I often add to my classes a read-only property that returns the textual description of an enumerated property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Property Get MaritalStatusDescr() As String
    Select Case m_MaritalStatus
        Case NotMarried: MaritalStatusDescr = &quot;NotMarried&quot;
        Case Married: MaritalStatusDescr = &quot;Married&quot;
        Case Divorced: MaritalStatusDescr = &quot;Divorced&quot;
        Case Widowed
            If Sex = Male Then     ' Be precise for your users.
                MaritalStatusDescr = &quot;Widower&quot;
            ElseIf Sex = Female Then
                MaritalStatusDescr = &quot;Widow&quot;
            End If
<B>        Case Else
            Err.Raise 5            ' Defensive programming!</B>
    End Select
End Property
</pre>
</td></tr>
</table>
</p>


<p>It seems a lot of work for such a little piece of information, but you'll be 
glad that you did it every time you have to show the information on screen or in a 
printed report. You might wonder why I added a <I>Case Else</I> block (shown in boldface). After all, the <I>m_MaritalStatus</I> variable can't be assigned a value outside its range 
because it's protected by the <I>Property Let MaritalStatus</I> procedure, right? But you should 
never forget that a class is often an evolving entity, and what's true today might 
change tomorrow. All the validation code that you use for testing the valid range of 
such properties might become obsolete without your even noticing it. For example, 
what happens if you later add a fifth <I>MaritalStatus</I> constant? Are you really going to 
hunt through your code for possible bugs each and every time you add a new enumerated value? Explicitly testing all the values in a <I>Select Case</I> block and rejecting those that fall through the <I>Case Else</I> clause is a form of defensive programming that you should always exercise if you don't want to spend more time debugging the code later.</p>

<p>Here's an easy trick that lets you safely add new constants without also modifying the validation code in the corresponding <I>Property Let</I> procedure. Instead of testing against the largest constant, just define it explicitly in the <I>Enum</I> structure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enum MaritalStatusConstants
    NotMarried = 1
    Married
    Divorced
    Widowed
    MARITALSTATUS_MAX = Widowed    ' Uppercase is easier to spot.
End Enum

Property Let MaritalStatus(ByVal newValue As MaritalStatusConstants)
    ' Refuse invalid assignments. (Assumes that 0 is always invalid.)
    If newValue &lt;= 0 Or newValue &gt; MARITALSTATUS_MAX Then Err.Raise 5
    m_MaritalStatus = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p>When you then append constants to the <I>Enum</I> block, you need to make the MARITALSTATUS_MAX item point to the new highest value. If you add a comment, as in the preceding code, you can hardly miss it.</p>

<A NAME="238"><h3>Properties that return objects</h3></A>

<p>Visual Basic's own objects might expose properties that return object values. 
For example, forms and all visible controls expose a <I>Font</I> property, which in turn returns a Font object. You realize that this is a special case because you can append a dot to the property name and have IntelliSense tell you the names of the properties of the object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Form1.Font.Bold = True
</pre>
</td></tr>
</table>
</p>


<p>What Visual Basic does with its own objects can also be done with your custom classes. This adds a great number of possibilities to your object-oriented programs. For example, your CPerson<I> </I>class still lacks an <I>Address</I> property, so it's time to add it. In most cases, a single 
<I>Address</I> string doesn't suffice to point exactly to where a person lives, and you usually need several pieces of related information. Instead of adding multiple properties to the CPerson object, create a new CAddress class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CAddress class module
Public Street As String
Public City As String
Public State As String
Public Zip As String
Public Country As String
Public Phone As String
Const Country_DEF = &quot;USA&quot;  ' A default for Country property

Private Sub Class_Initialize()
    Country = Country_DEF
End Sub
Friend Sub Init(Street As String, City As String, State As String, _
    Zip As String, Optional Country As Variant, Optional Phone As Variant)
    Me.Street = Street
    Me.City = City
    Me.State = State
    Me.Zip = Zip
    If Not IsMissing(Country) Then Me.Country = Country
    If Not IsMissing(Phone) Then Me.Phone = Phone
End Sub
Property Get CompleteAddress() As String
    CompleteAddress = Street &#38;; vbCrLf &#38;; City &#38;; &quot;, &quot; &#38;; State &#38;; &quot; &quot; &#38;; Zip _
        &#38;; IIf(Country &lt;&gt; Country_DEF, Country, &quot;&quot;)
End Property
</pre>
</td></tr>
</table>
</p>


<p>For the sake of simplicity, all properties have been declared Public items, 
so this class isn't particularly robust. In a real-world example, a lot of nice things 
could be done to make this class a great piece of code, such as checking that the 
<I>City</I>, <I>State</I>, and <I>Zip</I> properties are compatible with one another. (You probably need a lookup search against a database for this.) You could even automatically provide an area 
code for the <I>Phone</I> property. I gladly leave these enhancements as an exercise to 
readers. For now, let's focus on how you can exploit this new class together with 
CPerson. Adding a new <I>HomeAddress</I> property to our CPerson class requires just one line 
of code in the declaration section of the module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CPerson class module
Public HomeAddress As CAddress
</pre>
</td></tr>
</table>
</p>


<p>Now you can create a CAddress object, initialize its properties, and then 
assign it to the <I>HomeAddress</I> property just created. Thanks to the 
<I>Init</I> pseudo-constructor, you can considerably reduce the amount of code that's actually needed in the client:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim addr As CAddress
Set addr = New CAddress
addr.Init &quot;1234 North Rd&quot;, &quot;Los Angeles&quot;, &quot;CA&quot;, &quot;92405&quot;
Set pers.HomeAddress = addr
</pre>
</td></tr>
</table>
</p>


<p>While this approach is perfectly functional and logically correct, it's 
somehow unnatural. The problem stems from having to explicitly create a CAddress 
object before assigning it to the <I>HomeAddress</I> property. Why not work directly with 
the <I>HomeAddress</I> property?</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set pers.HomeAddress = New CAddress
pers.HomeAddress.Init &quot;1234 North Rd&quot;, &quot;Los Angeles&quot;, &quot;CA&quot;, &quot;92405&quot;
</pre>
</td></tr>
</table>
</p>


<p>When you work with nested object properties, you'll like the 
<I>With...End With</I> clause:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With pers.HomeAddress
    .Street = &quot;1234 North Rd&quot;
    .City = &quot;Los Angeles&quot;
    ' etc.
End With
</pre>
</td></tr>
</table>
</p>


<p>As I showed you previously, you can provide an independent 
constructor method in a standard BAS module (not shown here) and do without a separate 
<I>Set </I>statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set pers.HomeAddress = New_CAddress(&quot;1234 North Rd&quot;, &quot;Los Angeles&quot;, _
    &quot;CA&quot;, &quot;92405&quot;)
</pre>
</td></tr>
</table>
</p>


<A NAME="239"><h3><I>Property Set</I> procedures</h3></A>

<p>A minor problem that you have to face is the lack of control over what can be assigned to the <I>HomeAddress</I> property. How can you be sure that no program will compromise the robustness of your CPerson object by assigning an incomplete or invalid CAddress object to the <I>HomeAddress</I> property? And what if you need to make the <I>HomeAddress</I> property read-only?</p>

<p>As you see, these are the same issues that you faced when working with regular, nonobject properties, which you resolved thanks to <I>Property Get</I> and <I>Property Let</I> procedures. So it shouldn't surprise you to learn that you can do the same with object properties. The only difference is that you use a third type of property procedure, the <I>Property Set</I> procedure, instead of the <I>Property Let</I> procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim m_HomeAddress As CAddress      ' A module-level private variable.

Property Get HomeAddress() As CAddress
    Set HomeAddress = m_HomeAddress
End Property
Property Set HomeAddress(ByVal newValue As CAddress)
    Set m_HomeAddress = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p>Because you're dealing with object references, you must use the 
<I>Set </I>keyword in both procedures. A simple way to ensure that the CAddress object being 
assigned to the <I>HomeAddress </I>property is valid is to try out its 
<I>Init</I> method with all the required properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Property Set HomeAddress(ByVal newValue As CAddress)
    With newValue
        .Init .Street, .City, .State, .Zip
    End With
    ' Do the assignment only if the above didn't raise an error.
    Set m_HomeAddress = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p>Unfortunately, protecting an object property from invalid assignments isn't 
as simple as it appears. If the innermost class&#8212;<I>CAddress</I> in this case&#8212;doesn't 
protect itself in a robust way, the outermost class can do little or nothing. To explain 
why, just trace this apparently innocent statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.HomeAddress.Street = &quot;&quot;  ' An invalid assignment raises no error.
</pre>
</td></tr>
</table>
</p>


<p>At first, you might be surprised to see that execution doesn't flow through 
the <I>Property Set HomeAddress</I> procedure; instead, it goes through the 
<I>Property Get</I> <I>HomeAddress</I> procedure, which seems nonsensical because we are 
<I>assigning </I>a value, not reading it. But if we look at the code from a compiler's standpoint, things are different. The language parser scans the line from left to right: it first finds a reference to a property exposed by the CPerson class (that is, <I>pers.HomeAddress</I>) and tries to resolve it to determine what it's pointing to. For this reason, it has to evaluate 
the corresponding <I>Property Get</I> procedure. The result is that you can't effectively use 
the <I>Property Get HomeAddress</I> procedure to protect the CPerson<I> </I>class module from invalid addresses: you must protect the CAddress dependent class itself. In a sense, 
this is only fair because each class should be responsible for itself.</p>

<p>Let's see how you can use the CAddress<I> </I>class to improve the CPerson class 
even further. You have already used it for the <I>HomeAddress </I>property, but there are other possible applications:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declaration section of CPerson
Private m_WorkAddress As CAddress
Private m_VacationAddress As CAddress
' Corresponding Property Get/Set are omitted here....
</pre>
</td></tr>
</table>
</p>


<p>It's apparent that you have achieved a lot of functionality with minimal 
effort. Not only have you dramatically reduced the amount of code in the CPerson class 
(you need only three pairs of <I>Property Get/Set</I> procedures), you also simplified its 
structure because you don't have a large number of similar properties with confusing names (<I>HomeAddressStreet</I>, <I>WorkAddressStreet</I>, and so on). But above all, you 
have the logic for the CAddress entity in one single place, and it has been 
automatically propagated elsewhere in the application, without your having to set up distinct 
validation rules for each distinct type of address property. Once you have assigned 
all the correct addresses, see how easy it is to display all of them:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
' The error handler skips unassigned (Nothing) properties.
Print &quot;Home: &quot; &#38;; pers.HomeAddress.CompleteAddress
Print &quot;Work: &quot; &#38;; pers.WorkAddress.CompleteAddress
Print &quot;Vacation: &quot; &#38;; pers.VacationAddress.CompleteAddress
</pre>
</td></tr>
</table>
</p>


<A NAME="240"><h3>Variant properties</h3></A>

<p>Properties that return Variant values aren't different from other properties: You 
just need to declare a Public Variant member and you're done. But things are a bit 
more complex if the property can receive either a regular value or an object value. 
For example, say that you want to implement a <I>CurrentAddress</I> property, but you want to keep it more flexible and capable of storing either a CAddress object or a simpler string, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The client code can assign a regular string
pers.CurrentAddress = &quot;Grand Plaza Hotel, Rome&quot;
' or a reference to another CAddress object (requires Set).
Set pers.CurrentAddress = pers.VacationAddress
</pre>
</td></tr>
</table>
</p>


<p>While this sort of flexibility adds a lot of power to your class, it also reduces 
its robustness because nothing keeps a programmer from adding a nonstring value 
or an object of a class other than CAddress. To be more in control of what is 
actually assigned to this property, you need to arbitrate all accesses to it through 
Property procedures. But in this case, you need <I>three </I>distinct Property procedures:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_CurrentAddress As Variant

Property Get CurrentAddress() As Variant
    If IsObject(m_CurrentAddress) Then
        Set CurrentAddress = m_CurrentAddress   ' Return a CAddress object.
    Else
        CurrentAddress = m_CurrentAddress       ' Return a string.
    End If
End Property

Property Let CurrentAddress(ByVal newValue As Variant)
    m_CurrentAddress = newValue
End Property

Property Set CurrentAddress(ByVal newValue As Variant)
    Set m_CurrentAddress = newValue
End Property
</pre>
</td></tr>
</table>
</p>


<p>The <I>Property Let</I> procedure is invoked when a regular value is assigned to 
the property, while the <I>Property Set</I> procedure comes into play when the client 
assigns an object with a <I>Set</I> command. Note how the 
<I>Property Get</I> procedure returns a value to the caller code: It has to test whether the private variable currently contains 
an object, and it must use a <I>Set</I> command if it does. The <I>Property Let</I> and <I>Set </I>pair lets you enforce a better validation scheme:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Property Let CurrentAddress(ByVal newValue As Variant)
    ' Check that it is a string value.
    If VarType(newValue) &lt;&gt; vbString Then Err.Raise 5
    m_CurrentAddress = newValue
End Property

Property Set CurrentAddress(ByVal newValue As Variant)
    ' Check that it is a CAddress object.
    If TypeName(newValue) &lt;&gt; &quot;CAddress&quot; Then Err.Raise 5
    Set m_CurrentAddress = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<p>Here's a technique that lets you save some code and slightly improve run-time performances. The trick is to declare the type of the object you're expecting right in the parameter list of the <I>Property Set</I> procedure, as in this code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Property Set CurrentAddress(ByVal newValue As CAddress)
    Set m_CurrentAddress = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<p>You can't use this approach in all circumstances; for example, you can't use 
it when you're willing to accept two or more objects of different types. In that 
case, it's best to use an <I>As Object</I> parameter:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Property Set CurrentAddress(ByVal newValue As Object)
    If TypeName(newValue) &lt;&gt; &quot;CAddress&quot; And TypeName(newValue) &lt;&gt; _
        &quot;COtherType&quot; Then Err.Raise 5
    Set m_CurrentAddress = newValue
End Property</pre>
</td></tr>
</table>
</p>

<p>As far as Visual Basic is concerned, the 
<I>real</I> type is determined by the value declared in the 
<I>Property Get</I> procedure. In fact, that's the type reported in 
the Object Browser.</p>

<A NAME="241"><h3>Properties in BAS modules</h3></A>

<p>While this fact is undocumented in Visual Basic manuals, you can create 
Property procedures in standard BAS modules as well. This capability makes a few 
interesting techniques possible. You can use a pair of Property procedures to encapsulate 
a global variable and arbitrate all accesses to it. Let's say that you have a global 
<I>Percent </I>variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a standard BAS module
Public Percent As Integer
</pre>
</td></tr>
</table>
</p>


<p>For really robust code, you want to be sure that all values assigned to it are 
in the proper 0 through 100 range, but you don't want to test all the assignment 
statements in your code. The solution is easy, as you'll see in the next section.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim m_Percent As Integer

Property Get Percent() As Integer
    Percent = m_Percent
End Property
Property Let Percent(newValue As Integer)
    If newValue &lt; 0 Or newValue &gt; 100 Then Err.Raise 5
    m_Percent = newValue
End Property
</pre>
</td></tr>
</table>
</p>

<p>Other interesting variations of this technique are read-only and 
write-once/read-many global variables. You can also use this technique to work around the 
inability of Visual Basic to declare string constants that contain 
<I>Chr$</I> functions and concatenation operators:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can't do this with a CONST directive.
Property Get DoubleCrLf() As String
    DoubleCrLf = vbCrLf &#38;; vbCrLf
End Property
</pre>
</td></tr>
</table>
</p>


<p>Finally, you can use Property procedures in BAS modules to trace what happens to the global variables in your code. Let's say that your code incorrectly assigns a wrong value to a global variable, and you want to understand when this happens. Just replace the variable with a pair of Property procedures, and add <I>Debug.Print</I> statements as required (or print values to a file, if you want). When you have fixed all the problems, delete the procedures and restore the original global variable. The best thing about all this is that you won't need to edit a single line of code in the rest of your application.</p>

<A NAME="242"><h2>The <I>CallByName</I> Function</h2></A>
<p><img src="new.jpg" width=102 height=87 border="0"></p>

<p>Visual Basic 6 includes a welcome addition to the VBA language, in the form of 
the <I>CallByName</I> function. This keyword lets you reference an object's method or 
property by passing its name in an argument. Its syntax is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>result = CallByName(object, procname, calltype [,arguments..])
</pre>
</td></tr>
</table>
</p>


<p>where <I>procname </I>is the name of the property or method, and 
<I>calltype </I>is one of the following constants: 1-vbMethod, 2-vbGet, 4-vbLet, 8-vbSet. You must pass any argument the method is expecting, and you should avoid retrieving a return value if 
you're invoking a Sub method or a <I>Property Let/Get</I> procedure. Here are a few examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim pers As New CPerson
' Assign a property.
CallByName pers, &quot;FirstName&quot;, vbLet, &quot;Robert&quot;
' Read it back.
Print &quot;Name is &quot; &#38;; CallByName(pers, &quot;FirstName&quot;, vbGet)
' Invoke a function method with one argument.
width = CallByName(Form1, &quot;TextWidth&quot;, vbMethod, &quot;ABC&quot;)
</pre>
</td></tr>
</table>
</p>

<p>Here are a couple of noteworthy bits of information about this function, 
both of which affect its usefulness:</p>
<UL>

<p><li> While adding a lot of flexibility when dealing with an object, neither 
the <I>CallByName</I> function nor the VBA language as a whole is able to 
<I>retrieve </I>the list of the properties and methods exposed by an object. So in 
this sense the <I>CallByName</I> function is only a half-solution to the 
problem because you have to build the property names yourself. If you know 
these names in advance, you might invoke your properties and methods 
directly, using the familiar dot syntax.</li></p>

<p><li> The <I>CallByName</I> function invokes the object's member using a late 
binding mechanism (see &quot;<A HREF="#254">The Binding Mechanism</A>&quot; later in this chapter), 
which is considerably slower than regular access through the dot syntax.</li></p>
</UL>


<p>As a general rule, you should never use the <I>CallByName</I> function when you can reach the same result using the regular dot syntax. There are times, however, when this function permits you to write very concise and highly parameterized code. One interesting application is quickly setting a large number of properties for controls on a form. This might be useful when you give your users the ability to customize a form and you then need to restore the last configuration in the 
<I>Form_Load</I> event. I have prepared a couple of reusable procedures that do the job:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns an array of &quot;Name=Values&quot; strings 
' Supports only nonobject properties, without indices
Function GetProperties(obj As Object, ParamArray props() As Variant) _
    As String()
    Dim i As Integer, result() As String
    On Error Resume Next
    ' Prepare the result array.
    ReDim result(LBound(props) To UBound(props)) As String
    ' Retrieve all properties in turn.
    For i = LBound(props) To UBound(props)
        result(i) = vbNullChar
        ' If the call fails, this item is skipped.
        result(i) = props(i) &#38;; &quot;=&quot; &#38;; CallByName(obj, props(i), vbGet)
    Next
    ' Filter out invalid lines.
    GetProperties = Filter(result(), vbNullChar, False)
End Function

' Assign a group of properties in one operation.
' Expects an array in the format returned by GetProperties
Sub SetProperties(obj As Object, props() As String)
    Dim i As Integer, temp() As String
    For i = LBound(props) To UBound(props)
        ' Get the Name-Value components.
        temp() = Split(props(i), &quot;=&quot;)
        ' Assign the property.
        CallByName obj, temp(0), vbLet, temp(1)
    Next
End Sub
</pre>
</td></tr>
</table>
</p>


<p>When you're using <I>GetProperties</I>, you have to provide a list of the 
properties you're interested in, but you don't need a list when you restore the properties 
with a call to <I>SetProperties</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim saveprops() As String
saveprops() = GetProperties(txtEditor, &quot;Text&quot;, &quot;ForeColor&quot;, &quot;BackColor&quot;)
...
SetProperties txtEditor, saveprops()
</pre>
</td></tr>
</table>
</p>


<A NAME="243"><h2>Attributes</h2></A>

<p>You can't entirely define a class in the code window. In fact, you must specify a 
few important attributes in a different way. These attributes might concern the class 
module as a whole or its individual members (that is, its properties and methods).</p>

<A NAME="244"><h3>Class module attributes</h3></A>

<p>The attributes of the class module itself are conceptually simpler because you 
can edit them through the Properties window, as you might for any other source 
code module that can be hosted in the Visual Basic environment. But in contrast to 
what happens with form and standard modules, what you see in the Properties 
window when you press the F4 key depends on the type of the project. (See Figure 6-5.) 
There are six attributes: <I>Name</I>, 
<I>DataBindingBehavior</I>, 
<I>DataSourceBehavior</I>, <I>Instancing</I>, 
<I>MTSTransactionMode</I>, and <I>Persistable</I>. They will be covered in detail in 
subsequent chapters.</p>

<p>
<img src="F06ph05.GIF" width=258 height=263 border="0">
<p>
<!--caption--><B>Figure 6-5.</B> <i>Only a Public class module in an ActiveX DLL project exposes all possible class attributes in the Properties window.</i><!--/caption-->


<A NAME="245"><h3>The default member of a class</h3></A>

<p>Most Visual Basic controls and intrinsic objects expose a default property or 
method. For example, the TextBox control's default property is 
<I>Text</I>; the Error object's default property is 
<I>Number</I>; Collections have a default 
<I>Item</I> method; and so on. Such items are said to be 
<I>default members</I> because if you omit the member name in an 
expression, Visual Basic will implicitly assume you meant to refer to that particular 
member. You can implement the same mechanism even with your own classes by 
following this procedure:</p>
<OL>

<p><li> Click in the code editor on the property or method definition, invoke 
the Procedure Attributes command from the Tools menu, and then select 
the name of the item in the topmost combo box if it isn't already displayed.</li></p>

<p><li> Alternatively, press F2 to open the Object Browser, select the class 
module name in the leftmost pane; in the rightmost pane, 
right-click the item that must become the default 
member, and then select the Properties command from the pop-up menu that appears, as you can see in Figure 6-6.</li></p>


<p>
<A HREF="javascript:fullSize('F06ph06x.htm')"> <img src="F06ph06.JPG" width=404 height=337 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 6-6.</B> <i>Selecting the Properties menu command from the Object Browser.</i><!--/caption-->
</p>


<p><li> Once the item you're interested in is highlighted in the topmost 
Name combo box, click on the Advanced button to expand the Procedure 
Attributes dialog box. (See Figure 6-7.)</li></p>


<p>
<img src="F06ph07.GIF" width=338 height=404 border="0">
<p>
<!--caption--><B>Figure 6-7.</B> <i>The expanded view of the Procedure Attributes dialog box.</i><!--/caption-->



<p><li> In the Procedure ID combo box, select the (default) item; 
alternatively, you can just type <I>0</I> (zero) in the edit area of the combo box.</li></p>

<p><li> Click the OK button to make your decision permanent, and close the 
dialog box. In the Object Browser, you'll notice that a small, round 
indicator has appeared next to the member's name. This is the confirmation that 
it has become the default member of the class.</li></p>
</OL>

<p>A class can't expose more than one default property or method. If you try 
to create a second default item, Visual Basic complains and asks you to confirm 
your decision. In general, it isn't a good idea to change the default member of a 
class because this amendment could break all the client code written previously.</p>

<p>While I certainly agree that providing a default property to a class module 
tends to make it more easily usable, I want to warn you against some potential 
problems that can arise from using this feature. Let's go back to our CPerson class and 
its <I>HomeAddress</I> and <I>WorkAddress</I> properties. As you know, you can assign one 
object property to another, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set pers.HomeAddress = New CAddress
Set pers.WorkAddress = New CAddress
pers.HomeAddress.Street = &quot;2233 Ocean St.&quot;
...
Set pers.WorkAddress = pers.HomeAddress   ' This person works at home.
</pre>
</td></tr>
</table>
</p>


<p>Since the preceding code uses the <I>Set</I> command, both properties are 
actually pointing to the same CAddress object. This is important because it implies that 
no additional memory has been allocated to store this duplicate data and also 
because you can then freely modify the address properties through any of the two 
CPerson properties without introducing any inconsistencies:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.HomeAddress.Street = &quot;9876 American Ave&quot;
Print pers.WorkAddress.Street   ' Correctly displays &quot;9876 American Ave&quot;
</pre>
</td></tr>
</table>
</p>


<p>Now see what happens if you mistakenly omit the 
<I>Set</I> keyword in the original assignment:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pers.WorkAddress = pers.HomeAddress   ' Error 438 &quot;Object doesn't support
                                      ' this property or method&quot;
</pre>
</td></tr>
</table>
</p>


<p>Don't be alarmed by this (admittedly cryptic) error message: You made a logic error in your code, and Visual Basic has spotted it for you at run time, which is a good thing. Alas, this helpful error disappears if the class exposes a default property. To see it for yourself, make <I>Street</I> the default item of the class, and then run this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set pers.HomeAddress = New CAddress
Set pers.WorkAddress = New CAddress
pers.HomeAddress.Street = &quot;2233 Ocean St.&quot;
pers.WorkAddress = pers.HomeAddress   ' No error! But has it worked?
</pre>
</td></tr>
</table>
</p>


<p>Instead of rejoicing about the absence of an error message, see how the 
two properties are now related to each other:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>'Change the Street property of one object.
pers.HomeAddress.Street = &quot;9876 American Ave&quot;
Print pers.WorkAddress.Street        ' Still displays &quot;2233 Ocean St.&quot;
</pre>
</td></tr>
</table>
</p>


<p>In other words, the two properties aren't pointing to the same object 
anymore. The assignment without the <I>Set</I> command has cheated the compiler into 
thinking that we were asking it to assign the values of the default 
<I>Street </I>property (which is a legal operation) and that we weren't interested in creating a new reference to the same object.</p>

<p>In short, by adding a default property you have deprived yourself of an 
important cue about the correctness of your code. My personal experience is that 
missing <I>Set </I>commands are subtle bugs that are rather difficult to exterminate. Keep this in 
mind when you're deciding to create default properties. And if you're determined to 
create them, always double-check your <I>Set </I>keywords in code.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
You might notice that if the object property on the left side of 
the assignment is Nothing, Visual Basic correctly raises error 91 even if we omit 
the <I>Set</I> keyword. This doesn't happen, however, if the target property had 
been declared to be auto-instancing because in that case Visual Basic would 
create an object for you. This is just further proof that auto-instancing objects 
should always be looked at with suspicion. 
</blockquote></div>
</p>

<A NAME="246"><h3>A useful example</h3></A>

<p>Now that I have warned you against using default properties, I want to show you 
a case in which they could turn out to be very useful. But first I need to introduce 
the concept of <I>sparse matrices</I>. A sparse matrix is a large, two-dimensional (or 
multidimensional) array that includes a relatively small number of nonzero items. A 
1000-by-1000 array with just 500 nonzero items can be considered a great example of 
a sparse matrix. Sparse matrices have several common applications in math and 
algebra, but you can also find a use for them in business applications. For example, you 
might have a list of 1000 cities and a two-dimensional array that stores the distance 
between any two cities. Let's assume further that we use 0 (or some other special value) 
for the distance between cities that aren't directly connected. Large sparse arrays raise 
a serious memory overhead problem: a two-dimensional array of Single or Long 
values with 1000 rows and 1000 columns takes nearly 4 MB, so you can reasonably 
expect that it will noticeably slow your application on less powerful machines.</p>

<p>One simple solution to this problem is to store only the nonzero elements, together with their row and column indices. You need 8 additional bytes for each element to do this, but in the end you're going to save a lot of memory. For example, if only 10,000 items are nonzero (filling factor = 1:100), your sparse array will 
consume less than 120 KB&#8212;that is, about 33 times less than the original array&#8212;so 
this seems to be a promising approach. You might believe that implementing a 
sparse array in Visual Basic requires quite a bit of coding, so I bet you'll be surprised to 
learn how simple it is when you're using a class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The complete source code of the CSparseArray class
Private m_Value As New Collection

Property Get Value(row As Long, col As Long) As Single
    ' Returns an item, or 0 if it doesn't exist.
    On Error Resume Next
    Value = m_Value(GetKey(row, col))
End Property

Property Let Value(row As Long, col As Long, newValue As Single)
    Dim key As String
    key = GetKey(row, col)
    ' First destroy the value if it's in the collection.
    On Error Resume Next
    m_Value.Remove key
    ' Then add the new value, but only if it's not 0.
    If newValue &lt;&gt; 0 Then m_Value.Add newValue, key
End Property

' A private function that builds the key for the private collection.
Private Function GetKey(row As Long, col As Long) As String
    GetKey = row &#38;; &quot;,&quot; &#38;; col
End Function
</pre>
</td></tr>
</table>
</p>


<p>Make sure that the <I>Value </I>property&#8212;the only public member of this 
class&#8212;is also its default property, which dramatically simplifies how the client uses the 
class. See how easy it is using your brand-new, resource-savvy data structure instead of 
a regular matrix:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre><B>Dim mat As New CSparseArray </B>
' The rest of the application that uses the matrix isn't unchanged.
mat(1, 1) = 123             ' Actually using mat's Value property!
</pre>
</td></tr>
</table>
</p>


<p>In other words, thanks to a default property you have been able to change 
the inner workings of this application (and, it's to be hoped, to optimize it too) 
<I>by</I> <I>changing only one line in the client 
code!</I> This should be a convincing argument in 
favor of default properties.</p>

<p>Actually, the CSparseArray class is even more powerful than it appears. In 
fact, while its original implementation uses Long values for the <I>row</I> and <I>col</I> arguments and a Single return value, you might decide to use Variant values for the two indices 
and for the return value. This first amendment permits you to create arrays<I> </I>that use strings as indices to data with no effort, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The distance between cities
Dim Distance As New CSparseArray
Distance(&quot;Los Angeles&quot;, &quot;San Bernardino&quot;) = 60
</pre>
</td></tr>
</table>
</p>


<p>Using a Variant return type doesn't waste more memory than before because the internal <I>m_Values</I> collection allocates a Variant for each value anyway.</p>

<p>Before concluding this section, let me hint at another special type of array, the so-called <I>symmetrical array</I>. In this type of two-dimensional array, <I>m(i,j)</I> always matches <I>m(j,i)</I>, so you can always save some memory by storing the value just once. The <I>Distance </I>matrix is a great example of a symmetrical array because the distance between two cities doesn't depend on the order of the cities themselves. When you're dealing with a regular Visual Basic array, it's up to you to remember that it's symmetrical and that you must therefore store the same value twice, which means more code, memory, and chances for errors. Fortunately, now that you have encapsulated everything in a class module, you just need to edit one private routine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Note that row and col are now Variants.
Private Function GetKey(row As Variant, col As Variant) As String
    ' Start with the lesser of the two--a case-insensitive comparison
    ' is needed because collections search their keys in this way.
    If StrComp(row, col, vbTextCompare) &lt; 0 Then
        ' Using a nonprintable delimiter is preferable.
        GetKey = row &#38;; vbCr &#38;; col
    Else
        GetKey = col &#38;; vbCr &#38;; row
    End If
End Function
</pre>
</td></tr>
</table>
</p>


<p>This is enough to make this client code work as expected:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Distance As New CSparseMatrix
Distance(&quot;Los Angeles&quot;, &quot;San Bernardino&quot;) = 60
Print Distance(&quot;San Bernardino&quot;, &quot;Los Angeles&quot;)   ' Displays &quot;60&quot;
</pre>
</td></tr>
</table>
</p>


<A NAME="247"><h3>Other attributes</h3></A><p>You might have noticed that the Procedure Attributes dialog box in Figure 6-7 contains many more fields than I have explained so far. The majority of 
the corresponding attributes are somewhat advanced and won't be covered in this 
chapter, but there are three that are worth some additional explanation in this context.</p>

<p><B>Description</B> You can associate a textual description with any property and 
method defined in your class module. This description is then reported in the Object 
Browser and provides the users of your class with some information about how each 
member can be used. The description text is visible even when you compile the class into 
a COM component and another programmer browses its interface from outside 
the current process.</p>

<p><B>HelpContextID</B> You can provide a help file that contains a longer description for all the classes, properties, methods, events, controls, and so on exposed by your project. If you do so, you should also specify a distinct ID for each item in the project. When the item is selected in the rightmost pane of the Object Browser, a click on the ? icon automatically takes you to the corresponding help page. The name of the help file can be entered in the Project Properties dialog box.</p>

<p><B>Hide This Member</B> If you select this option, the property or method in the class module won't be visible in the Object Browser when the class is browsed from 
outside the project. This setting has no effect within the current project, and it 
makes sense to use it only in project types other than Standard EXE. Note that &quot;hiding&quot; 
an item doesn't mean that it's absolutely invisible to other programmers. In fact, 
even the simple Object Browser that comes with Visual Basic includes a Show Hidden 
Members menu command (which you can see in Figure 6-6) that lets 
you discover undocumented features in other libraries (including VB and VBA's own 
libraries). The decision to hide a given item should be intended just as a suggestion to 
users of your class, meaning something like, &quot;Don't use this item because it isn't 
supported and could disappear in future versions of the product.&quot;</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
None of the class attributes&#8212;including those described in this 
section and others that I describe in forthcoming chapters&#8212;are stored in 
source code, so they aren't copied and pasted among different class modules when 
you copy the code of the procedure they're connected to. Even worse, they 
aren't even preserved when you use cut-and-paste operations to rearrange the 
order of methods and properties inside the same class module. If you want to 
move code in your class modules without also losing all the attributes that are 
invisibly connected to it, you have to first copy the code where you want to place it and 
then delete it from its original location. This isn't an issue when you're just 
renaming a property or a method.
</blockquote></div>
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>
Oddly, Visual Basic documentation doesn't mention that class 
modules also support their own <I>Description</I> and 
<I>HelpContextID</I> attributes and therefore doesn't explain how you can modify them. The trick is simple: Right-click on 
the class name in the leftmost pane of the Object Browser, and select the 
Properties command from the pop-up menu.
</blockquote></div>
</p>


<a name="A40"></a><h3>5.6.3 The Inner Life of Objects</h3>

<A HREF="#A39">[Previous]</A> <A HREF="#A41">[Next]</A><P>

<A NAME="248"><h1>The Inner Life of Objects</h1></A>

<p>Now that you have a solid understanding of how a class module can be written 
and organized and how properties and methods work, it's time to learn something 
more about the intimate nature of objects in Visual Basic.</p>

<A NAME="249"><h2>What an Object Variable Really Is</h2></A>

<p>This could seem a rather silly question, but it isn't. The first answer that springs 
to mind is this: <I>An object variable is a memory area that holds the 
object's</I> <I>data</I>. This definition evidently derives from the resemblance of objects to UDT structures (which also hold aggregate data), but unfortunately it's completely wrong. The fact that 
these are two separate concepts becomes clear if you create two object variables that 
refer to the same object, as in:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim p1 As New CPerson, p2 As CPerson
p1.CompleteName = &quot;John Smith&quot;
Set p2 = p1
' Both variables now point to the same object.
Print p2.CompleteName          ' Displays &quot;John Smith&quot; as expected.
' Change the property using the first variable.
p1.CompleteName = &quot;Robert Smith&quot;
Print p2.CompleteName          ' 2nd variable gets the new value!
</pre>
</td></tr>
</table></p>


<p>If objects and UDTs behaved in the same way, the last statement would 
have still returned the original value in <I>p2 
</I>(&quot;<I>John Smith&quot;)</I>, but it happened that the 
assignment to <I>p1 </I>in the second to last line also affected the other variable. The reason 
for this behavior is that an object variable is actually a pointer to the memory area 
where the object data is stored. This is an important concept that has a lot of 
interesting, and somewhat surprising, consequences, as you'll see in the list below.
<UL>

<p><li> Each object variable always takes 4 bytes of memory because it is 
nothing but a pointer to a memory address, regardless of the size and 
complexity of the object it refers to.</li></p>

<p><li> Whenever you use the <I>Set</I> keyword to assign one object variable to 
another, you're actually assigning the 32-bit memory address. No data in 
the object is duplicated, and no additional memory is allocated, which 
makes object assignment a very fast operation.</li></p>

<p><li> When two or more object variables point to the same object instance, 
you can manipulate the object's properties using any of these variables 
because they all point to the same data area. The first object variable that 
receives a reference to the object isn't privileged in any way, nor does it have 
any special features that distinguish it from variables assigned later.</li></p>

<p><li> Object variables are therefore a great way to reduce resource 
consumption (because data is allocated only once) and prevent 
discrepancies among data. There's only one copy of the properties; once it's 
updated through one object variable, all other variables immediately &quot;see&quot; the 
new value. To get some perspective, consider the difficult problem many 
database developers face when they scatter their data among multiple 
tables. If the data is duplicated in more tables, they must carefully update all 
the tables when they need to modify the data. Failing to do so will corrupt 
a database.</li></p>

<p><li> Setting an object variable to Nothing&#8212;or letting it get out of scope 
and be automatically set to Nothing by Visual Basic&#8212;doesn't necessarily 
mean that you're destroying the object the variable is pointing to. In fact, if 
other variables are pointing to the same object, the memory area, with all 
its properties, isn't released.</li></p>
</UL>

<p>The last point implicitly raises a question: When is an object actually 
released? It turns out that Visual Basic destroys an object when no object variables are 
pointing to it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub TryMe()
    Dim p1 As CPerson, p2 As CPerson
    Set p1 = New CPerson             ' Creates object &quot;A&quot;
    p1.LastName = &quot;Smith&quot;
    Set p2 = p1                      ' Adds a 2nd reference to &quot;A&quot;
    Set p1 = New CPerson             ' Creates object &quot;B&quot;, but doesn't
                                     ' release &quot;A&quot;, pointed to by p2
    p1.LastName = p2.LastName        ' Copies a value, not an object ref
    Set p2 = Nothing                 ' Destroys the original &quot;A&quot; object
End Sub                              ' Destroys the second &quot;B&quot; object
</pre>
</td></tr>
</table>
</p>


<p>As you see, keeping track of how many variables are pointing to a given 
object can easily become a daunting task. Fortunately, it's Visual Basic's problem, not 
yours. Visual Basic solves it using the so-called <I>reference counter,</I> which I'll talk about in the next section.</p>

<A NAME="250"><h2>Under the Objective Hood</h2></A>
<p>Figure 6-8 shows how a typical object is laid out in memory. The Visual Basic 
programmer sees just a few object variables: In this example, we have two 
variables, P1 and P2, which point to an instance of the CPerson<I> </I>class, and a third variable P3 that points to a distinct instance of the same class. Anytime Visual Basic creates a 
new instance of the class, it allocates a separate, well-defined area of memory (the 
<I>instance data </I>area). The structure and size of that area is fixed for any given class and 
depends on how many properties the class exposes, the types of properties, as well as 
other factors of no interest in this context. The structure of this area hasn't been 
documented by Microsoft, but fortunately you don't need to understand what data is stored 
there or how it's arranged.</p>

<p>
<A HREF="javascript:fullSize('F06ph08x.htm')"> <img src="F06ph08.JPG" width=404 height=337 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 6-8.</B> <i>The structure of objects is probably more complex than you had anticipated.</i><!--/caption-->
</p>

<p>One piece of information is especially important, however, for all OO 
developers: the <I>reference counter</I>. It's a four-byte memory location that always holds 
the number of object variables pointing to that particular instance data block. In 
this example, the John Smith object has a reference counter equal to 2, while the 
Anne Brown object has a reference counter equal to 1. It's impossible for this counter 
to contain a value less than 1 because it would mean that no variable is pointing to 
that specific object, and the object would be immediately destroyed. Anyway, keep in 
mind that, as far as programmers are concerned, the reference counter is an abstract 
entity because it can't be read or modified in any way (using orthodox programming 
techniques, at least). The only changes that you can legitimately make to the 
reference counter are indirectly increasing and decreasing it using <I>Set </I>commands:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set p1 = New CPerson     ' Creates an object and sets
                         ' its reference counter to 1
Set p2 = p1              ' Increments the reference counter to 2
Set p1 = Nothing         ' Decrements the reference counter back to 1
Set p2 = Nothing         ' Decrements the reference counter to 0
                         ' and destroys the object
                         ' (Or you can let p2 go out of scope....)
</pre>
</td></tr>
</table>
</p>


<p>At the end of the instance data block are the values of all the class module's variables, including all module-level variables and Static variables in procedures (but excluding dynamic local variables, which are allocated on the stack during each call). Of course, these values vary from instance to instance, even though their layout is the same for all instances of the class.</p>

<p>Another undocumented piece of information in the instance data block is very important: It contains the <I>VTable pointer</I>. This 32-bit memory location can be found at the top of the instance data block and is a pointer to another key memory area named <I>VTable</I>. All objects that belong to the same class point to the same <I>VTable</I>; hence the first 4 bytes in their instance data blocks always match. Of course, the first 4 bytes for objects instantiated by different classes differ.</p>

<p>The <I>VTable</I> is what actually characterizes the behavior of a class, but in itself it's a remarkably small structure. In fact, it's just a sort of <I>jump table,</I> a series of Long pointers to the actual compiled code. Each pointer corresponds to a function, a sub, or a Property procedure and points to the first byte of the compiled code generated for each procedure during the compilation process. Read/write properties have two distinct entries in the <I>VTable</I>, and Variant properties might have up to three entries if you also provided a <I>Property Set</I> procedure. Because it's impossible to know at compile time where the application can find a free block of memory to load the compiled code into, the address of each compiled routine is known only at run time. For this reason, the <I>VTable</I> structure is dynamically created at run time as well.</p>

<A NAME="251"><h3>Object instantiation</h3></A>

<p>The first time Visual Basic creates an object of a given class, its run-time 
module performs the following sequence of operations (here in a simplified form):</p>
<OL>

<p><li> Allocates a block of memory for the compiled code generated from 
the class module and loads the code from disk.</li></p>

<p><li> Allocates a (smaller) block of memory for the 
<I>VTable</I> itself, and then fills it with the entry point addresses of each public routine in the class module.</li></p>

<p><li> Allocates a block for the particular object instance and sets its first 
32-bit value to point to the <I>VTable</I>. At this point, it also fires the <I>Class_Initialize</I> event procedure so that the variable area can be correctly initialized.</li></p>

<p><li> Stores the address of the instance data area in the target object 
variable. At this point, the client code can do whatever it wants with the object.</li></p>
</OL>

<p>This long sequence has to be performed only the very first time your 
code creates an object of a given class. For all subsequent objects of the same class, steps 
1 and 2 are skipped because the <I>VTable</I> is already in place. And when you're 
simply assigning object variables (that is, 
<I>Set</I> commands without a <I>New</I> clause), step 3 is 
also skipped and the whole operation becomes just an assignment of a 32-bit value.</p>

<A NAME="252"><h3>Object usage</h3></A>

<p>Let's see now what happens when the client code invokes an object's method 
or property. Here we're examining only one of the many possible cases, which is 
when you're using an object from a class that resides in the same project. Since the 
compiler knows how the class is arranged, it also knows what the <I>VTable</I> of that class looks like. Of course, it isn't possible to know at compile time where the class's compiled code will be loaded, but at least its structure can be determined when the class is compiled. Therefore, the compiler can safely translate a reference to a property or a method into an offset in the 
<I>VTable</I>. Because the first seven items in the <I>VTable</I> are usually taken by other addresses (of no interest in this context), the first property procedure or method defined in the class has an offset equal to 28 (7 items * 4 bytes each). Let's say that in our class, this offset corresponds to the <I>Property Get FirstName</I> procedure. When the client code executes this statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print p1.FirstName
</pre>
</td></tr>
</table></p>


<p>here's what more or less happens behind the scenes:</p>
<OL>

<p><li> Visual Basic retrieves the 32-bit value currently in the P1 variable so 
that it can access the instance data block that object variable points to.</li></p>

<p><li> At the beginning of the instance data block, Visual Basic finds the 
address of the <I>VTable.</I> Since the compiler knows that we asked to execute 
the<I> Property Get FirstName</I>, it adds 28 to this value and finds the address 
of the beginning of the compiled routine we want to execute.</li></p>

<p><li> Finally the program calls the compiled code and passes it the contents 
of the original P1 object variable (the address of the instance data 
block). Because the compiled code knows the structure of the instance data 
block for that given class, it can access all private variables, such as 
<I>m_FirstName</I>, process them, and return a meaningful result to the caller.</li></p>
</OL>

<p>It's a long trip just to retrieve a value, but this is how things work in the 
marvelous world of objects. Knowing all this won't help you write better code, at 
least not immediately. But I'm sure that you will badly need this information some 
time in the future.</p> 

<p><div class="tip"><blockquote><b>TIP</b><hr>
As a rule, allocating and releasing the instance data block for an object is 
a relatively slow operation. If your class module executes a lot of code in its 
<I>Class_Initialize</I> event&#8212;for example, it has to retrieve data from a database, the 
Registry, or an INI file&#8212;this overhead can become critical. For this reason, try to 
keep an instance alive by assigning it to a global object variable and release it only 
when you're sure that you won't need that object anymore. (Or let Visual Basic 
automatically set the variable to Nothing when the application comes to a natural 
termination.) You might also provide a special method&#8212;for example, 
<I>Reset</I>&#8212;that reinitializes all private variables without having to create a new instance.
</blockquote></div>
</p> 

<A NAME="253"><h3>Object termination</h3></A>

<p>When no more object variables point to a given instance data block, the object 
is destroyed. Just before releasing the memory, the Visual Basic runtime invokes 
the <I>Class_Terminate</I> event procedure in the class module&#8212;if the programmer 
created one. This is the routine in which you place your clean-up code.</p> 

<p>Visual Basic never goes further than that, and for example, it doesn't 
release the <I>VTable </I>either even if there isn't any other object pointing to it. This is an 
important detail because it ensures that the next time another object of this class is created, 
the overhead will be minimal. There are just a couple of other things that you 
should know about the termination phase:</p> 
<UL>

<p><li> Visual Basic relies on a safety mechanism that prevents an object 
from being destroyed while its procedures are being executed. To see what 
I mean, think of the following scenario: You have a global object variable 
that holds the only reference to an object, and within a procedure in the 
class module you set the global variable to Nothing, thus 
destroying the only reference that keeps the object alive. If Visual Basic were really stupid, 
it would immediately terminate the procedure as soon as it performed 
the assignment. Instead, Visual Basic patiently waits for the procedure to 
end and only then destroys the object and invokes its 
<I>Class_Terminate</I> event procedure. I am mentioning this problem only for the sake of 
completeness because I absolutely don't mean to encourage you to resort to 
this inelegant programming technique. A class module should never 
reference a global variable because this would break its self-containment.</li></p>

<p><li> Once you're executing code in the 
<I>Class_Terminate</I> event procedure, Visual Basic has already started the object termination process and you can't do anything to prevent the object from being destroyed. For example, in a situation like the preceding one, you might believe that you could keep an object alive by assigning a new object reference to the global variable, hoping to reincrement the internal reference counter and prevent the object destruction. If you tried that, however, what actually would happen is that Visual Basic would first complete the destruction of the current object and then create a new instance that had nothing to do with the one you were in.</li></p>
</UL>
 
<A NAME="254"><h3>The binding mechanism</h3></A>

<p>In the previous section, I've emphasized that the application invokes methods 
and properties using offset values in the 
<I>VTable</I> and little else. This makes all object 
references really efficient because the CPU has to perform only some additions and 
other elementary steps. The process of obtaining the offset in the 
<I>VTable</I> from the name of a property or method is known as 
<I>binding</I>. As you've seen, this process is 
usually performed by the compiler, which then delivers efficient code ready to be 
executed at run time. Unfortunately, not all object references are so efficient. Let's see how 
we can embarrass the compiler:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim obj As Object
If n &gt; = 0.5 Then 
    Set obj = New CPerson
Else
    Set obj = New CCustomer
End If
Print obj.CompleteName
</pre>
</td></tr>
</table>
</p>


<p>As smart as it is, the Visual Basic compiler can't determine what the <I>obj </I>variable will actually contain at run time, and, in fact, its contents are entirely unpredictable. The problem is that even though the CPerson and CCustomer classes support the same <I>CompleteName</I> method, it hardly ever appears at the same offset in the <I>VTable</I>. So the compiler can't complete the binding process and can store in the executable code only the <I>name </I>of the method that must be invoked at run time. When execution finally hits that line, the Visual Basic runtime queries the 
<I>obj </I>variable, determines which object it contains, and finally calls its <I>CompleteName</I> method.</p>

<p>This is dramatically different from the situation we saw before, when we 
knew at compile time exactly which routine would be called. We have three different 
types of binding.</p>

<p><B>Early <I>VTable </I>Binding</B> The early binding process is completed at compile 
time. The compiler produces <I>VTable</I> offsets that are then efficiently used at run time 
to access the object's properties and methods. If the property or the method isn't 
supported, the compiler can trap the error right away, which means that early 
binding implicitly delivers more robust applications. Early binding is used whenever you 
use a variable of a well-defined type. You have an indirect confirmation that an 
object variable will use early binding when you append a dot to its name: The Visual 
Basic editor is able to give you a list of all the possible methods and properties. If the 
editor can do that, the compiler will later be able to complete the binding.</p>

<p><B>Late Binding</B> When you declare an object variable using an <I>As Object</I> or <I>As Variant</I> clause, the compiler can't deduce which type of object such a variable will 
contain and can therefore store only information about the property's or the 
method's name and arguments. The binding process is completed at run time and is 
performed any time the variable is referenced. As you might imagine, this takes a lot of 
time, and moreover there's no guarantee that the variable contains an object that 
supports the method you want. If the actual object doesn't support the method, a 
trappable run-time error will occur. If you have a generic 
<I>As Object</I> variable, appending a dot to its name in the code module doesn't invoke IntelliSense's drop-down list of properties and methods.</p>

<p><B>Early ID Binding</B> For the sake of completeness, I have to let you know about 
a third type of binding, whose behavior falls between that of the previous two. In 
the case of early ID binding, the compiler can't derive the actual offset in the 
<I>VTable</I>, but at least it can check that the property or method is there. If so, the compiler 
stores a special ID value in the executable code. At run time, Visual Basic uses this ID 
for a very quick look in the object's list of methods. This is slower than early 
<I>VTable</I> binding, but it's still much more efficient than late binding. It also ensures that 
no error occurs because we know with certainty that the method is supported. This 
type of binding is used for some external objects used by your application&#8212;for 
example, all ActiveX controls.</p>

<p>The easy rule is, therefore, that you should always strive to use early binding 
in your code. Apart from robustness considerations, late binding adds a performance 
penalty that in most cases you simply can't afford. Just to give you a broad idea, 
accessing a simple property using late binding is <I>about two hundred times slower </I>than with 
the most efficient early binding! When the called code is more complex, this gap 
tends to be reduced because early binding affects only the call time, not the execution 
of the code inside the method. Even so, you can hardly consider the difference in 
performance negligible.</p>

<p>Finally note that the way you declare an object variable affects whether 
Visual Basic uses early binding or late binding, but you have no control over which type 
of early binding Visual Basic uses. You can be sure, however, that it always uses 
the most convenient one. If the object is defined inside the current application, or 
its library exports the information about how its <I>VTable </I>is structured, Visual Basic uses the more efficient <I>VTable</I> binding; otherwise, it uses early ID binding.</p>

<A NAME="255"><h2>Revisiting Object Keywords</h2></A>

<p>Armed with all the intimate knowledge about objects that I've now given you, 
you should find it very simple to understand the real mechanism behind a few 
VBA keywords.</p>

<A NAME="256"><h3>The <I>New</I> keyword</h3></A>

<p>The <I>New</I> keyword (when used in a <I>Set </I>command) tells Visual Basic to create a brand-new instance of a given class. The keyword then returns the address of the instance data area just allocated.</p>

<A NAME="257"><h3>The <I>Set </I>command</h3></A>
<p>The <I>Set</I> command simply copies what it finds to the right of the equal sign into 
the object variable that appears to the left of it. This value can be, for example, the 
result of a <I>New </I>keyword, the contents of another variable that already exists, or the result of an expression that evaluates to an object. The only other tasks that the <I>Set</I> command performs are incrementing the reference counter of the corresponding instance data area and decrementing the reference counter of the object originally pointed to by the left-hand variable (if the variable didn't contain the Nothing value):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set P1 = New CPerson           ' Creates an object, stores its address
Set P2 = P1                    ' Just copies addresses
Set P2 = New CPerson()         ' Lets P2 point to a new object, but also
                               ' decrements the reference counter
                               ' of the original object
</pre>
</td></tr>
</table>
</p>


<A NAME="258"><h3>The <I>Nothing</I> value</h3></A>

<p>The <I>Nothing</I> keyword is the Visual Basic way of saying 
<I>Null</I> or <I>0</I> to an object variable. The statement</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set P1 = Nothing
</pre>
</td></tr>
</table>
</p>


<p>isn't a special case in the <I>Set</I> scenario because it simply decreases the reference 
counter of the instance data block pointed to by P1 and then stores 0 in the P1 variable 
itself, thus disconnecting it from the object instance. If P1 was the only variable 
currently pointing to that instance, Visual Basic also releases the instance.</p>

<A NAME="259"><h3>The <I>Is</I> operator</h3></A>

<p>The <I>Is</I> operator is used by Visual Basic to check whether two object variables 
are pointing to the same instance data block. At a lower level, Visual Basic does 
nothing but compare the actual addresses contained in the two operands and return True 
if they match. The only possible variant is when you use the <I>Is Nothing</I> test, in which case Visual Basic compares the contents of a variable with the value 0. You need this special operator because the standard equal symbol, which has a completely different meaning, would fire the evaluation of the objects' default properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This code assumes that P1 and P2 are CPerson variables, and that
' Name is the default property of the CPerson class.
If P1 Is P2 Then Print &quot;P1 and P2 point to the same CPerson object&quot;
If P1 = P2 Then Print &quot;P1's Name and P2's Name are the same&quot;
</pre>
</td></tr>
</table>
</p>


<A NAME="260"><h3>The <I>TypeOf ... Is</I> statement</h3></A>

<p>You can test the type of an object variable using the 
<I>TypeOf...Is</I> statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If TypeOf P1 Is CPerson Then
    Print &quot;P1 is of type CPerson&quot;
ElseIf TypeOf P1 Is CEmployee Then
    Print &quot;P1 is of type CEmployee&quot;
End If
</pre>
</td></tr>
</table>
</p>


<p>You should be aware of a couple of limitations. First, you can test only one 
class at a time, and you can't even directly test to see whether an object is 
<I>not </I>of a particular class. In this case, you need a workaround:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If TypeOf dict Is Scripting.Dictionary Then
    ' Do nothing in this case.
Else
    Print &quot;DICT is NOT of a Dictionary object&quot;
End If
</pre>
</td></tr>
</table>
</p>


<p>Second, the preceding code works only if the Scripting library (or more in general, the referenced library) is currently included in the References dialog box. If it isn't, Visual Basic will refuse to compile this code. This is sometimes a nuisance when you want to write reusable routines.</p>

<p><div class="tip"><blockquote>
<b>TIP</b><HR>You often use the <I>TypeOf ...Is</I> statement to avoid errors when 
assigning object variables, as in this code:

<p>
<table><tr><td>
<pre>' OBJ holds a reference to a control.
Dim lst As ListBox, cbo As ComboBox
If TypeOf obj Is ListBox Then
    Set lst = obj
ElseIf TypeOf Obj Is ComboBox Then
    Set cbo = obj
End If</pre>
</td></tr>
</table>
</p>

But here's a faster and more concise way:

<p>
<table><tr><td>
<pre>Dim lst As ListBox, cbo As ComboBox
On Error Resume Next
Set lst = obj     ' The assignment that fails will leave
Set cbo = obj     ' the corresponding variable set to Nothing.
On Error Goto 0   ' Cancel error trapping.</pre>
</td></tr>
</table>
</p>


</blockquote></div>
</p>

<A NAME="261"><h3>The <I>TypeName</I> function</h3></A>

<p>The <I>TypeName</I> function returns the name of an object's class in the form of a 
string. This means that you can find the type of an object in a more concise form, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print &quot;P1 is of type &quot; &#38;; TypeName(P1)
</pre>
</td></tr>
</table>
</p>

<p>In many situations, testing an object's type using the <I>TypeName</I> function is preferable to using the <I>TypeOf...Is</I> statement because it doesn't require that the object class 
be present in the current application or in the References dialog box.</p>

<A NAME="262"><h3><I>ByVal</I> and <I>ByRef</I> keywords</h3></A>
<p>The fact the object variables are just pointers can puzzle many a programmer 
when object variables are passed to a procedure as <I>ByVal</I> arguments. The familiar rule&#8212;a procedure can alter a <I>ByVal</I> value without affecting the original value seen by 
the caller&#8212;is obviously void when the value is just a pointer. In this case, you're 
simply creating a copy of the pointer, not of the instance data area. Both the original 
and the new object reference are pointing to the same area, so the called procedure 
can freely read and modify all the properties of the object. If you want to prevent 
any modifications of the original object, you must pass the procedure a copy of the 
object. To do so, you must create a new object yourself, duplicate all the properties' 
values, and pass that new object instead. Visual Basic doesn't offer a shortcut for this.</p>

<p>That said, you need to understand that there's a subtle difference when 
you declare an object parameter using <I>ByRef</I> or <I>ByVal</I>, as this code snippet demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Reset(pers As CPerson)     ' ByRef can be omitted.
    Set pers = Nothing         ' This actually sets the original
End Sub                        ' variable to Nothing.

Sub Reset2(ByVal pers As CPerson)
    Set pers = Nothing         ' This code doesn't do anything.
End Sub
</pre>
</td></tr>
</table>
</p>


<p> When you pass an object using <I>ByVal</I>, its internal reference counter is 
temporarily incremented and is decremented when the procedure exits. This doesn't 
happen if you pass the object by reference. For this reason, the <I>ByRef</I> keyword is slightly faster when used with objects.</p>

<A NAME="263"><h2>The <I>Class_Terminate</I> Event</h2></A>

<p>Visual Basic fires the <I>Class_Terminate</I> event one instant before releasing the 
data instance block and terminating the object's life. You usually write code for this 
event when you need to undo things that you did at initialization time or during the life 
of the instance. Typically in this event procedure, you close any open files and 
release Windows resources obtained through direct API calls. If you want to make the 
object's properties persist in a database for a future session, this is where you usually do 
it. All in all, however, you'll rarely write code for this event or at least you'll need it 
less frequently than code for the <I>Class_Initialize</I> event. For example, the 
CPerson<I> </I>class module doesn't actually require code in its <I>Class_Terminate</I> event procedure. </p>

<p>On the other hand, the mere fact that you can write some executable code 
and be sure that it will be executed when an object is destroyed opens up a world 
of possibilities that couldn't be exploited using any other, non-OOP technique. To 
show you what I mean, I've prepared three sample classes that are almost completely 
based on this simple concept. It's a great occasion to show how you can streamline 
several common programmer tasks using the power that objects give you.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Visual Basic calls the 
<I>Class_Terminate</I> event procedure only when the object is released in an orderly manner&#8212;that is, when all references 
pointing to it are set to Nothing or go out of scope, or when the application comes 
to an end. This includes the case when the application ends because of a fatal 
error. The only case when Visual Basic does <I>not 
</I>invoke the <I>Class_Terminate</I> event is when you abruptly stop a program using the End command from the Run 
menu or the End button on the toolbar. This immediately stops all activity in your 
code, which means that no <I>Class_Terminate</I> event will ever be invoked. If you 
inserted critical code in the <I>Terminate </I>events&#8212;for example, code that releases 
Windows resources allocated via APIs&#8212;you'll experience problems. Sometimes these 
are <I>big </I>problems, including system crashes. By the same token, 
<I>never </I>terminate a program using an 
<I>End</I> statement in code: This has exactly the same effect, 
but it's going to create problems even after you compile the application and run 
it outside the environment.
</blockquote></div>
</p>

<A NAME="264"><h3>Example 1: managing the mouse cursor</h3></A>

<p>Programmers commonly change the shape of the mouse cursor, typically to an 
hourglass, to inform the user that some lengthy operation is going on. Of course, you 
also have to restore the cursor before exiting the current procedure; otherwise, the 
hourglass stays visible and the user never realizes that the wait is over. As simple as 
this task is, I've found that a good number of commercial applications fail to 
restore the original shape under certain circumstances. This is a clear symptom that the 
procedure has exited unexpectedly and therefore missed its opportunity to restore 
the original shape. How can classes and objects help you avoid the same error? Just 
have a look at this simple CMouse class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CMouse class _ complete source code
Dim m_OldPointer As Variant

' Enforce a new mouse pointer.
Sub SetPointer(Optional NewPointer As MousePointerConstants = vbHourglass)
    ' Store the original pointer only once.
    If IsEmpty(m_OldPointer) Then m_OldPointer = Screen.MousePointer
    Screen.MousePointer = NewPointer
End Sub

' Restore the original pointer when the object goes out of scope.
Private Sub Class_Terminate()
    ' Only if SetPointer had been actually called
    If Not IsEmpty(m_OldPointer) Then Screen.MousePointer = m_OldPointer
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Not bad, eh? Just eight lines of code (not counting comments) to solve a 
recurring bug once and for all! See how easy it is to use the class in a real program:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ALengthyProcedure()
    Dim m As New CMouse
    m.SetPointer vbHourglass          ' Or any other pointer shape
    ' ... slow code here ... (omitted)
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The trick works because as soon as the variable goes out of scope, the object is destroyed and Visual Basic fires its <I>Class_Terminate</I> event. The interesting point is that this sequence also occurs if the procedure is exited because of an error; even in that case, Visual Basic releases all the variables that are local to the procedure in an orderly fashion.</p>

<A NAME="265"><h3>Example 2: opening and closing files</h3></A>

<p>Another common programming task is opening a file to process it and then 
closing it before exiting the procedure. As we've seen in <a href="#A30">Chapter 5</a>, all the procedures 
that deal with files have to protect themselves against unanticipated errors because if 
they were exited in an abrupt way they wouldn't correctly close the file. Once again, 
let's see how a class can help us to deliver more robust code with less effort:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CFile class--complete source code
Enum OpenModeConstants
    omInput
    omOutput
    omAppend
    omRandom
    omBinary
End Enum
Dim m_Filename As String, m_Handle As Integer

Sub OpenFile(Filename As String, _
    Optional mode As OpenModeConstants = omRandom)
    Dim h As Integer
    ' Get the next available file handle.
    h = FreeFile()
    ' Open the file with desired access mode.
    Select Case mode
        Case omInput: Open Filename For Input As #h
        Case omOutput: Open Filename For Output As #h
        Case omAppend: Open Filename For Append As #h
        Case omBinary: Open Filename For Binary As #h
        Case Else     ' This is the default case.
            Open Filename For Random As #h
    End Select
    ' (Never reaches this point if an error has occurred.)
    m_Handle = h
    m_Filename = Filename
End Sub

' The filename (read-only property)
Property Get Filename() As String
    Filename = m_Filename
End Property

' The file handle (read-only property)
Property Get Handle() As Integer
    Handle = m_Handle
End Property

' Close the file, if still open.
Sub CloseFile()
    If m_Handle Then 
        Close #m_Handle
        m_Handle = 0
    End If
End Sub

Private Sub Class_Terminate()
    ' Force a CloseFile operation when the object goes out of scope.
    CloseFile
End Sub
</pre>
</td></tr>
</table>
</p>


<p>This class solves most of the problems that are usually related to file 
processing, including finding the next available file handle and closing the file before exiting 
the procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This routine assumes that the file always exists and can be opened.
' If it's not the case, it raises an error in the client code.
Sub LoadFileIntoTextBox(txt As TextBox, filename As String)
    Dim f As New CFile
    f.OpenFile filename, omInput
    txt.Text = Input$(LOF(f.Handle), f.Handle)
    ' No need to close it before exiting the procedure!
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="266"><h3>Example 3: creating a log of your procedures</h3></A>

<p>I'll conclude this chapter with a simple class that you'll probably find useful 
when debugging dozens of nested procedures that call one another over and over. In 
such cases, nothing can preserve your sanity more effectively than a log of the 
actual sequence of calls. Unfortunately, this is easier said than done because while it is 
trivial to add a <I>Debug.Print</I> command as the first executable statement of every 
procedure, trapping the instant when the procedure is exited is a complex matter&#8212;especially 
if the procedure has multiple exit points or isn't protected by an error handler. 
However, this thorny problem can be solved with a class that counts exactly eight 
lines of executable code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Class CTracer - complete source code.
Private m_procname As String, m_enterTime As Single

Sub Enter(procname As String)
    m_procname = procname: m_enterTime = Timer
    ' Print the log when the procedure is entered.
    Debug.Print &quot;Enter &quot; &#38;; m_procname
End Sub

Private Sub Class_Terminate()
    ' Print the log when the procedure is exited.
    Debug.Print &quot;Exit &quot; &#38;; m_procname &#38;; &quot; - sec. &quot; &#38;; (Timer - m_enterTime)
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Using the class is straightforward because you have to add only two 
statements on top of any procedure that you want to trace:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub AnyProcedure()
<B>    Dim t As New Ctracer
    t.Enter &quot;AnyProcedure&quot;</B>
    ' ... Here is the code that does the real thing ...(omitted).
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The CTracer<I> </I>class displays the total time spent within the procedure, so it 
also works as a simple profiler. It was so easy to add this feature that I couldn't resist 
the temptation.</p>

<p>This chapter introduced you to object-oriented programming in Visual Basic, but 
there are other things to know about classes and objects, such as events, 
polymorphism, and inheritance. I describe all these topics in the <a href="#A41">next chapter</a>, along with several 
tips for building more robust Visual Basic applications.</p>

<a name="A41"></a><h2>5.7 Chapter 7 -- Events, Polymorphism, and Inheritance</h2>

<A HREF="#A40">[Previous]</A> <A HREF="#A42">[Next]</A><P>


<font size="+3">Chapter 7</font>

<A NAME="267"><H1>Events, Polymorphism, and Inheritance</H1></A>
<p>In the <a href="#A37">previous chapter</a>, we reviewed the basics of object-oriented programming and how you can put objects to good use to develop more concise and robust applications. In this chapter, we dive into more advanced topics than we touched upon in <a href="#A37">Chapter 6</a>&#8212;such as polymorphism, secondary interfaces, events, inheritance, and object hierarchies&#8212;that extend the OOP potential even further. In a sense, the division of the treatment of classes and objects into two distinct chapters reflects the chronological development of object-oriented features: most of the basic features described in <a href="#A37">Chapter 6</a> appeared for the first time in Microsoft Visual Basic 4, while this chapter is mostly focused on improvements added in Visual Basic 5 and inherited without any substantial change in Visual Basic 6.</p>


<a name="A42"></a><h3>5.7.1 Events</h3>

<A HREF="#A41">[Previous]</A> <A HREF="#A43">[Next]</A><P>

<A NAME="268"><h1>Events</h1></A>
<p>Until Visual Basic 4, the term <I>class events</I> could refer only to the internal <I>Class_Initialize</I> and <I>Class_Terminate</I> events that the Visual Basic runtime fires when an object is created and destroyed. In versions 5 and 6, however, classes are able to raise events to the outside, exactly as controls and forms can. This ability dramatically increases the potential of class modules, making it possible to integrate them more tightly in applications while continuing to consider them separate and reusable modules.</p>

<A NAME="269"><h2>Events and Code Reusability</h2></A>
<p>Before showing how a class module can expose events to the outside and how the client code can trap them, let me explain why events are so important for code reuse. The ability to create a piece of code that can be recycled <I>as is </I>in other projects is too tantalizing to leave any programmer indifferent to the possibility. To illustrate the concept, I'll describe an imaginary class module whose primary job is copying a series of files and optionally informing the caller about the progress of the operation (so that the caller code can display a progress bar or a message on the status bar for the user). Without events, we have two possible ways to implement this code, both of which are clearly unsatisfactory:</p>

<UL>
<p><li>You split the class module into several (related) methods. For instance, you create a <I>ParseFileSpec</I> method that receives the file specification (such as C:\Word\*.doc) and returns a list of files, and you also create a <I>CopyFile </I>method that copies one file at a time. In this case, the client doesn't need a notification because it governs the entire process and calls each method in turn. Unfortunately, this means writing more code on the client side, which diminishes the class's usability. For more complex jobs, this approach is absolutely inappropriate.</li></p>

<p><li>You create a more intelligent class module, which performs its chores internally but at the same time calls back the client when it needs to notify the client that something has occurred. This works better, but you need to solve a problem: How exactly does the class call back its client? Does it invoke a procedure with a given name? This would force you to include this procedure even if you aren't actually interested in a notification; otherwise, the compiler wouldn't run the code. A second, more serious problem is what happens if your application uses the same class in two or more distinct circumstances. Each instance of the class will clearly call back the same procedure, so the client code would have to figure out which instance has called it. And if the caller code is a class itself, that would break its self-containment. Again, we need a better approach. (Note: More advanced <I>callback techniques </I>are available to Visual Basic programmers, and I'll describe them in <a href="#A100">Chapter 16</a>. They aren't as simple as depicted in this paragraph.)</li></p>
</UL>
 
<p>Finally events made their appearance and offered the best solution so far to the dilemma:</p>

<UL>
<p><li>You can create a class as described in the previous point, but when the time comes for a notification the class simply <I>raises </I>an event. The client code might not be listening to this specific event, but the class will continue with its copy operation and return from the method only when all files have been copied (unless of course you also provide clients with a mechanism to stop the process). This approach permits you to keep the structure of the client as simple as possible because it doesn't need to implement an event procedure for all the possible events raised by the class. This is similar to what happens when you place a TextBox control on a form and then decide to respond to just one or two of the many events that the control raises.</li></p>
</UL>
 
<A NAME="270"><h2>Syntax for Events</h2></A>
<p>Implementing events in a class module and using them in a client module is a straightforward process, which consists of just a few logical, easy steps. Figure 7-1 shows how the implementation works. I'm using as an example the hypothetical CFileOp class, which copies multiple files, as I described previously.</p>

<p>
<A HREF="javascript:fullSize('F07ph01x.htm')"> <img src="F07ph01.JPG" width=404 height=245 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-1.</B> <i>Implementing events in a class module.</i><!--/caption-->
</p>

<A NAME="271"><h3>Declaring an event</h3></A>
<p>To expose an event to its clients, a class must include an <I>Event</I> statement in its declaration section. This statement serves to inform the outside world about the event's name as well as its arguments. For example, the CFileOp class might expose this event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Event FileCopyComplete(File As String, DestPath As String)
</pre>
</td></tr>
</table></p>

<p>There's nothing special about the syntax of arguments, and you can in fact declare arguments of any type supported by Visual Basic, including objects, collections, and <I>Enum</I> values.</p>

<A NAME="272"><h3>Raising an event</h3></A>
<p>When the time comes for the class to raise an event, it executes a <I>RaiseEvent </I>statement, which specifies both the event name and its actual arguments. Again, this isn't conceptually different from calling a procedure, and you'll also find that Microsoft IntelliSense can give you a hand in both selecting the event name and the values for its arguments. In the CFileOp class, you could therefore write something like this:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>RaiseEvent FileCopyComplete &quot;c:\bootlog.txt&quot;, &quot;c:\backup&quot;
</pre>
</td></tr>
</table></p>

<p>This is all you need to do in the class module. Now let's see what the client code does.</p>

<A NAME="273"><h3>Declaring the object in the client module</h3></A>
<p>If you're writing code in a form or a class module and you want to receive events from an object, you must declare a reference to that object in the declaration section of the module, using the <I>WithEvents</I> keyword:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can use Public, Private, or Dim, as needed.
Dim WithEvents FOP As CFileOp
</pre>
</td></tr>
</table></p>

<p>You should be aware of a few facts about the <I>WithEvents</I> clause:</p>

<UL>
<p><li>It can appear only in the declaration section of a module and can't be local to a procedure. It can be used in any type of module except for standard BAS modules.</li></p>

<p><li>It can't be used with the <I>New</I> keyword; in other words, you can't create auto-instancing object variables if you also use <I>WithEvents</I>. Instead, you must declare and create the instance as a separate step, as in this code:</li></p>
 
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Set FOP = New CFileOp
End Sub
</pre>
</td></tr>
</table></p>

<p><li>You can't declare an array of object variables in a <I>WithEvents</I> clause.</li></p>

<p><li><I>WithEvents</I> doesn't work with generic object variables.</li></p>
</UL>
 
<A NAME="274"><h3>Trapping the event</h3></A>
<p>At this point, Visual Basic has all the information it needs to respond to events raised by the object. In fact, if you look at the list portion of the leftmost combo box at the top of the code editor window, you'll see that the variable you have declared using <I>WithEvents</I> appears in the list, together with all the controls already on the form. Select it and move to the rightmost combo box control to choose the event that interests you. (In this example, there's only one such event.) As it happens for events coming from controls, Visual Basic automatically creates the procedure template for you, and all you have to do is fill it with some meaningful code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Fop_FileCopyComplete(File As String, DestPath As String)
    MsgBox &quot;File &quot; &amp; File &amp; &quot; has been copied to &quot; &amp; DestPath
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="275"><h2>A First, Complete Sample Application</h2></A>
<p>Now that all syntax details have been explained, it's time to complete the CFileOp class, which is able to copy one or multiple files and provide feedback to the caller. As you'll see shortly, this initial sample program provides us with the playground for more complex and interesting programming techniques based on events.</p>

<A NAME="276"><h3>The CFileOp class module</h3></A>
<p>Let's create a class module and name it CFileOp. This class exposes a few properties that allow the client to decide which files should be copied (<I>FileSpec</I>, <I>Path</I>, and <I>Attributes</I> properties) and a method that starts the actual copy process. As I indicated, the class also exposes a <I>FileCopyComplete</I> event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CFileOp class module
Event FileCopyComplete(File As String, DestPath As String)
Private m_FileSpec As String
Private m_Filenames As Collection
Private m_Attributes As VbFileAttribute

Property Get FileSpec() As String
    FileSpec = m_FileSpec
End Property
Property Let FileSpec(ByVal newValue As String)
    ' Reset the internal Collection if a new file specification is given.
    If m_FileSpec &lt;&gt; newValue Then
        m_FileSpec = newValue
        Set m_Filenames = Nothing
    End If
End Property

Property Get Path() As String
    Path = GetPath(m_FileSpec)
End Property
Property Let Path(ByVal newValue As String)
    ' Get current file specification, and then substitute just the path.
    FileSpec = MakeFilename(newValue, GetFileName(FileSpec))
End Property

Property Get Attributes() As VbFileAttribute
    Attributes = m_Attributes
End Property
Property Let Attributes(ByVal newValue As VbFileAttribute)
    ' Reset the internal Collection only if a new value is given.
    If m_Attributes &lt;&gt; newValue Then
        m_Attributes = newValue
        Set m_Filenames = Nothing
    End If
End Property

' Holds the list of all the files that match FileSpec,
' plus any other file added by the client code (read-only property)
Property Get Filenames() As Collection
    ' Build the file list &quot;on demand&quot;, and only if necessary.
    If m_Filenames Is Nothing Then ParseFileSpec
    Set Filenames = m_Filenames
End Property

' Parses a file specification and attributes and adds
' the resulting filename to the internal m_Filenames Collection
Sub ParseFileSpec(Optional FileSpec As Variant, _
    Optional Attributes As VbFileAttribute)
    Dim file As String, Path As String
    ' Provide a default for arguments.
    If IsMissing(FileSpec) Then
        ' In this case, we need a file specification.
        If Me.FileSpec = &quot;&quot; Then Err.Raise 1001, , &quot;FileSpec undefined&quot;
        FileSpec = Me.FileSpec
        Attributes = Me.Attributes
    End If

    ' Create the internal Collection if necessary.
    If m_Filenames Is Nothing Then Set m_Filenames = New Collection
    Path = GetPath(FileSpec)
    file = Dir$(FileSpec, Attributes)
    Do While Len(file)
        m_Filenames.Add MakeFilename(Path, file)
        file = Dir$
    Loop
End Sub

Sub Copy(DestPath As String)
    Dim var As Variant, file As String, dest As String
    On Error Resume Next
    For Each var In Filenames
        file = var
        dest = MakeFilename(DestPath, GetFileName(file))
        FileCopy file, dest
        If Err = 0 Then
            RaiseEvent FileCopyComplete(file, DestPath)
        Else
            Err.Clear
        End If
    Next
End Sub

' Support routines that parse a filename. They are used internally
' but are also exposed as Public for convenience.
Sub SplitFilename(ByVal CompleteName As String, Path As String, _
    file As String, Optional Extension As Variant)
    Dim i As Integer
    ' Assume there isn't any embedded path.
    Path = &quot;&quot;: file = CompleteName
    ' Backward search for a path delimiter
    For i = Len(file) To 1 Step -1
        If Mid$(file, i, 1) = &quot;.&quot; And Not IsMissing(Extension) Then
            ' We have found an extension, and the caller asked for it.
            Extension = Mid$(file, i + 1)
            file = Left$(file, i - 1)
        ElseIf InStr(&quot;:\&quot;, Mid$(file, i, 1)) Then
            ' Paths don't have a trailing backslash.
            Path = Left$(file, i)
            If Right$(Path, 1) = &quot;\&quot; Then Path = Left$(Path, i - 1)
            file = Mid$(file, i + 1)
            Exit For
        End If
    Next
End Sub

Function GetPath(ByVal CompleteFileName As String) As String
    SplitFilename CompleteFileName, GetPath, &quot;&quot;
End Function

Function GetFileName(ByVal CompleteFileName As String) As String
    SplitFilename CompleteFileName, &quot;&quot;, GetFileName
End Function

Function MakeFilename(ByVal Path As String, ByVal FileName As String, _
    Optional Extension As String) As String
    Dim result As String
    If Path &lt;&gt; &quot;&quot; Then
        ' Path might include a trailing backslash.
        result = Path &amp; IIf(Right$(Path, 1) &lt;&gt; &quot;\&quot;, &quot;\&quot;, &quot;&quot;)
    End If
    result = result &amp; FileName
    If Extension &lt;&gt; &quot;&quot; Then
        ' Extension might include a dot.
        result = result &amp; IIf(Left$(Extension, 1) = &quot;.&quot;, &quot;.&quot;, &quot;&quot;) _
            &amp; Extension
    End If
    MakeFilename = result
End Function
</pre>
</td></tr>
</table></p>

<p>The structure of the class should be self-evident, so I'll just explain a few minor details. When you assign a value to either the <I>FileSpec</I> or the <I>Attributes</I> property, the class resets an internal <I>m_Filenames</I> Collection variable. When eventually the <I>Filenames </I>Public property is referenced&#8212;from outside or inside the class module&#8212;the corresponding <I>Property Get</I> procedure checks whether the file list should be rebuilt, and if so, it invokes the <I>ParseFileSpec</I> method. This method could have been made Private to the class module, but keeping it Public adds some flexibility, as I'll show in the &quot;<A HREF="#279">Filtering Input Data</A>&quot; section, later in this chapter. At this point, everything is ready for the <I>Copy</I> method, which requires only the <I>DestPath</I> argument to learn where files are to be copied and which can raise a <I>FileCopyComplete </I>event back in the client code. All the other functions&#8212;<I>SplitFilename</I>, <I>GetPath</I>, <I>GetFilename</I>, and so on&#8212;are support routines used for parsing filenames and paths. They're also exposed as Public methods, however, because they can be useful to the client code as well.</p>

<A NAME="277"><h3>The client form module</h3></A>
<p>Add a form module to your project, and add a few controls, as depicted in Figure 7-2:</p>

<p>
<A HREF="javascript:fullSize('F07ph02x.htm')"> <img src="F07ph02.JPG" width=404 height=221 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-2.</B> <i>The preliminary version of the CFileOp sample application at design time.</i><!--/caption-->
</p>

<p>Use the following code to help you decide what names to use for your controls. (Or you can just load the demonstration program from the companion CD). I've used self-explanatory names for controls, so you shouldn't have problems understanding the function of each one of them. This is the code in the form module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The client Form1 module
Dim WithEvents Fop As CFileOp

Private Sub Form_Load()
    ' WithEvents objects can't be auto-instancing.
    Set Fop = New CFileOp
End Sub

Private Sub cmdParse_Click()
    Dim file As Variant
    InitFOP
    lstFiles.Clear
    For Each file In Fop.Filenames
        lstFiles.AddItem file
    Next
    picStatus.Cls
    picStatus.Print &quot;Found &quot; &amp; Fop.Filenames.count &amp; &quot; files.&quot;;
End Sub

Private Sub cmdCopy_Click()
    InitFOP
    Fop.Copy txtDestPath.Text
End Sub

' A useful routine shared by many procedures in the form
Private Sub InitFOP()
    Fop.FileSpec = txtFilespec
    Fop.Attributes = IIf(chkHidden, vbHidden, 0) + _
        IIf(chkSystem, vbSystem, 0)
End Sub

' Trapping events from CFileOp class
Private Sub Fop_FileCopyComplete(File As String, DestPath As String)
    picStatus.Cls
    picStatus.Print &quot;Copied file &quot; &amp; File &amp; &quot; ==&gt; &quot; &amp; DestPath;
End Sub
</pre>
</td></tr>
</table></p>

<p>To get a taste of how events actually work, there's nothing that beats a trace session. Set some breakpoints, type some reasonable paths for the source and destination, click on the Parse or Copy button (be careful not to overwrite the files you need!), and press F8 to see the code come alive before your eyes.</p>

<A NAME="278"><h2>Improving the Sample Application</h2></A>
<p>In its simplicity, the CFileOp class module is a good piece of code that can be extensively improved with the addition of many new features. What's more important from our standpoint is that most of these additions demonstrate compelling new techniques you can implement with events.</p>

<A NAME="279"><h3>Filtering input data</h3></A>
<p>In its first version, the CFileOp class simply parses the value assigned to the <I>FileSpec</I> property and builds the list of the files to be copied, taking into account the value of the <I>Attributes</I> property. Unfortunately, the client code has no way to filter out particular files, for example, temporary or backup files or files with specific names. Thanks to the flexibility offered by events, however, you can add this capability in just a matter of seconds. You only have to add a new event declaration to the class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declaration section of the CFileOp class module
Event Parsing(file As String, Cancel As Boolean)
</pre>
</td></tr>
</table></p>

<p>and add a few lines (shown here in boldface) inside the <I>ParseFileSpec</I> routine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>        ' ... inside the ParseFileSpec routine
<B>        Dim Cancel As Boolean</B>
        Do While Len(file)
<B>            Cancel = False
            RaiseEvent Parsing(file, Cancel)
            If Not Cancel Then </B>
                m_Filenames.Add MakeFilename(Path, file)
<B>            End If</B>
            file = Dir$
        Loop
</pre>
</td></tr>
</table></p>

<p>Taking advantage of the new event in the client code is even easier. Let's say that you want to exclude temporary files from the copy process. All you have to do is trap the <I>Parsing </I>event and set its <I>Cancel </I>parameter to True when the class is about to copy a file you aren't interested in, as this code demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the client form module
Private Sub Fop_Parsing(file As String, Cancel As Boolean)
    Dim ext As String
    ' GetExtension is a handy method exposed by CFileOp.
    ext = LCase$(Fop.GetExtension(file))
    If ext = &quot;tmp&quot; Or ext = &quot;$$$&quot; Or ext = &quot;bak&quot; Then Cancel = True
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="sidebar"><blockquote>
<b>Handling Multiple File Specifications</b>

<p>This doesn't have to do with events, but I just want to demonstrate how a carefully designed structure of your class module can simplify your work when you want to extend its features. Because the class exposes the <I>ParseFileSpec</I> routine as a Public method, nothing prevents the client code from calling it directly&#8212;instead of indirectly through the <I>FileSpec</I> property&#8212;to add unrelated filenames, with or without wildcards:</p>

<p><table><tr><td>
<pre>' Prepare to copy EXE files, using the standard FileSpec property.
Fop.FileSpec = &quot;C:\Windows\*.exe&quot;
' But also copy all executable files from another directory.
Fop.ParseFileSpec &quot;C:\Windows\System\*.Exe&quot;, vbHidden
Fop.ParseFileSpec &quot;C:\Windows\System\*.Com&quot;, vbHidden
</pre>
</td></tr>
</table></p>

<p>The great advantage of this approach is that the <I>CFileOp</I> class module will always raise a <I>Parsing</I> event in your client code, which has, therefore, an opportunity to filter out filenames, regardless of how they were added to the internal list. Another example of flexible design is offered by the ability to have the <I>ParseFileSpec</I> routine search for multiple file specifications. The routine doesn't directly depend on module-level variables, so you can easily add a few lines (shown here in boldface) to turn it into a powerful recursive routine:</p>

<p><table><tr><td>
<pre>        ' Create the internal Collection if necessary.
        If m_Filenames Is Nothing Then Set m_Filenames = New Collection
<B>        ' Support for semicolon delimited multiple file specifications
        Dim MultiSpecs() As String, i As Integer
        If InStr(FileSpec, &quot;;&quot;) Then
            MultiSpecs = Split(FileSpec, &quot;;&quot;)
            For i = LBound(MultiSpecs) To UBound(MultiSpecs)
                ' Recursive call to this routine
                ParseFileSpec MultiSpecs(i)
            Next
            Exit Sub
        End If</B>
        Path = GetPath(FileSpec)
        ' And so on....
</pre>
</td></tr>
</table></p>

<p>Because the <I>FileSpec</I> property internally uses the <I>ParseFileSpec</I> routine, it automatically inherits the ability to accept multiple semicolon-delimited file specifications. The class module provided on the companion CD is based on this technique.</p>
</blockquote></div></p>

<A NAME="280"><h3>Prenotification events</h3></A>
<p>So far, you have seen that the <I>FileCopyComplete</I> event is raised immediately after the copy operation because it's intended to give the client code a clue that something has occurred inside the class module. A more flexible class would envision the capability for the client to intervene even <I>before </I>the operation takes place. In other words, what you need is a <I>WillCopyFile</I> event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enum ActionConstants
    foContinue = 1
    foSkip
    foAbort
End Enum
Event WillCopyFile(file As String, DestPath As String, _
    Action As ActionConstants)
</pre>
</td></tr>
</table></p>

<p>I could have used a standard Boolean <I>Cancel</I> argument, but an enumerated value adds a lot of flexibility. You raise a <I>WillCopyFile</I> event in the <I>Copy</I> method, just before doing the actual copy. Here's the revised procedure, with added or modified statements showed in boldface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Copy(DestPath As String)
    Dim var As Variant, file As String, dest As String
<B>    Dim Action As ActionConstants</B>
    On Error Resume Next
    For Each var In Filenames
        file = var
        dest = MakeFilename(DestPath, GetFileName(file))
<B>        Action = foContinue
        RaiseEvent WillCopyFile(file, dest, Action)
        If Action = foAbort Then Exit Sub
        If Action = foContinue Then</B>
            FileCopy file, dest
            If Err = 0 Then
                <B>RaiseEvent FileCopyComplete(file, GetPath(dest))</B>
            Else
                Err.Clear
            End If
<B>        End If</B>
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>To take advantage of this new event, the client form module has been enriched with a Confirm CheckBox control that, if selected, gives the user control over the copy process. Thanks to the <I>WillCopyFile</I> event, you can implement this new feature with just a handful of statements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Fop_WillCopyFile(File As String, DestPath As String, _
    Action As ActionConstants)
    ' Exit if user isn't interested in file-by-file confirmation.
    If chkConfirm = vbUnchecked Then Exit Sub
    Dim ok As Integer
    ok = MsgBox(&quot;Copying file &quot; &amp; File &amp; &quot; to &quot; &amp; DestPath &amp; vbCr _
        &amp; &quot;Click YES to proceed, NO to skip, CANCEL to abort&quot;, _
        vbYesNoCancel + vbInformation)
    Select Case ok
        Case vbYes: Action = foContinue
        Case vbNo: Action = foSkip
        Case vbCancel: Action = foAbort
    End Select
End Sub
</pre>
</td></tr>
</table></p>

<p>You can use the mechanism of prenotification events to much greater effect than just as a means for allowing or preventing the completion of a given process. In fact, a significant point of these types of events is that most or all their arguments are passed by reference and can therefore be altered by the caller. This is similar to what you usually do with the <I>KeyAscii</I> argument passed to the <I>KeyPress</I> event procedure of a standard control. For example, you might decide that all BAK files should be copied to a different directory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>        ' Inside the WillCopyFile event procedure (in the client)...
        If LCase$(Fop.GetExtension(file)) = &quot;bak&quot; Then
            DestPath = &quot;C:\Backup&quot;
        End If
</pre>
</td></tr>
</table></p>

<A NAME="281"><h3>Notifying clients of error conditions</h3></A>
<p>In most cases, the best means for a class to return an error to the client is by using the standard <I>Err.Raise</I> method. This allows the client to get a definitive confirmation that something went wrong and that appropriate steps must be taken. However, when a class communicates with its clients through events, you can explore a few alternatives to the <I>Err.Raise</I> method. For example, if the CFileOp class isn't able to copy a particular file, should the entire copy process be terminated? Needless to say, only the client code knows the answer, so the right thing to do is to ask it&#8212;by means of an event, of course:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Event Error(OpName As String, File As String, File2 As String, _
    ErrCode As Integer, ErrMessage As String, Action As ActionConstants)
</pre>
</td></tr>
</table></p>

<p>You see that I've added a generic <I>OpName </I>argument so that the same <I>Error</I> event can be shared by all the methods in the class module. Adding support for this new event in the <I>Copy</I> method requires little effort:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the Copy method in the CFileOp class module...
FileCopy File, dest
If Err = 0 Then
    RaiseEvent FileCopyComplete(File, DestPath)
Else
<B>    Dim ErrCode As Integer, ErrMessage As String
    ErrCode = Err.Number: ErrMessage = Err.Description
    RaiseEvent Error(&quot;Copy&quot;, File, DestPath, ErrCode, _
        ErrMessage, Action)
    ' Report the error to the client if user aborted the process.
    If Action = foAbort Then
        ' You need to cancel error handling, otherwise the Err.Raise
        ' method won't return the control to the client.
        On Error GoTo 0           
        Err.Raise ErrCode, , ErrMessage
    End If</B>
Err.Clear
End If
</pre>
</td></tr>
</table></p>

<p>The client now has the ability to trap errors and decide what to do with them. For example, an &quot;Error 76 - Path not found&quot; means that either the source or the destination isn't valid, so there isn't any point in continuing the operation:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Fop_Error(OpName As String, File As String, File2 As String, _
    ErrCode As Integer, ErrMessage As String, Action As ActionConstants)
    If ErrCode = 76 Then
        MsgBox ErrMessage, vbCritical
        Action = foAbort
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>This code doesn't test the <I>OpName</I> argument: This is an intentional omission because the same code can manage errors raised by all methods in the class. Also note that the class passes both <I>ErrCode</I> and <I>ErrMessage</I> by reference, and the client can, for example, modify them at will:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    ' Use a custom error scheme for this client.
    If OpName = &quot;Copy&quot; Then 
        ErrCode = ErrCode + 1000: ErrMessage = &quot;Unable to Copy&quot;
    ElseIf OpName = &quot;Move&quot; Then
        ErrCode = ErrCode + 2000: ErrMessage = &quot;Unable to Move&quot;
    End If
    Action = foAbort
</pre>
</td></tr>
</table></p>

<A NAME="282"><h3>Notifying clients of progress</h3></A>
<p>The task of notifying the user about the progress of a process is among the most common uses for events. In a sense, each prenotification and postnotification event can be considered a signal that the process is active, so it could seem that a separate <I>Progress</I> event is superfluous. But you can offer your clients better service if you also expose an event that clients can use to inform the user about the progress of a task, for example using a progress bar that shows the percentage of the job accomplished. The trick is to raise this event only when the actual percentage changes so that you don't force the client to continuously update the user interface without any real reason to do so:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Event ProgressPercent(Percent As Integer)
</pre>
</td></tr>
</table></p>

<p>After writing some classes that expose the <I>ProgressPercent</I> event, you realize that you can put most of the logic for this event in a generic procedure, which can be reused in all your class modules:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub CheckProgressPercent(Optional NewValue As Variant, _
    Optional MaxValue As Variant)
    Static Value As Variant, Limit As Variant
    Static LastPercent As Integer
    Dim CurrValue As Variant, CurrPercent As Integer
    If Not IsMissing(MaxValue) Then
        Limit = MaxValue
        If IsMissing(NewValue) Then Err.Raise 9998, , _
            &quot;NewValue can't be omitted in the first call&quot;
        Value = NewValue
    Else
        If IsEmpty(Limit) Then Err.Raise 9999, , &quot;Not initialized!&quot;
        Value = Value + IIf(IsMissing(NewValue), 1, NewValue)
    End If
    CurrPercent = (Value * 100) \ Limit
    If CurrPercent &lt;&gt; LastPercent Or Not IsMissing(MaxValue) Then
        LastPercent = CurrPercent
        RaiseEvent ProgressPercent(CurrPercent)
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The structure of the <I>CheckProgressPercent 
</I>routine is somewhat contorted because it has to account for many possible default values of its 
arguments. You can call it with two, one, or no arguments. You call it with two arguments when you want to reset 
its internal counters <I>Value </I>and 
<I>Limit</I>. You call it with just one argument when you 
simply want to increment <I>Value</I>. Finally, you call it with no arguments when you 
increment <I>Value </I>by 1 (a case so common that it deserves a courtesy treatment). This 
flexible scheme simplifies how the routine is invoked by the methods in the class, and in 
most cases you just need two statements to fire the 
<I>Progress</I> event at the right time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the Copy method 
On Error Resume Next
<B>CheckProgressPercent 0, Filenames.Count     ' Reset internal counters.</B>
For Each var In Filenames
<B>    CheckProgressPercent                    ' Increment by 1.
    </B>File = var
    ...
</pre>
</td></tr>
</table></p>


<p>The <I>CheckProgressPercent</I> routine is optimized and raises a 
<I>ProgressPercent</I> event only when the percentage actually changes. This allows you to write code 
in the client without worrying about tracing the changes yourself:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Fop_ProgressPercent(Percent As Integer)
    ShowProgress picStatus, Percent
End Sub

' A reusable routine that prints to a generic PictureBox
Private Sub ShowProgress(pic As PictureBox, Percent As Integer, _
    Optional Color As Long = vbBlue)
    pic.Cls
    pic.Line (0, 0)-(pic.ScaleWidth * Percent / 100, _
        pic.ScaleHeight), Color, BF
    pic.CurrentX = (pic.ScaleWidth - pic.TextWidth(CStr(Percent) _
        &amp; &quot; %&quot;)) / 2
    pic.CurrentY = (pic.ScaleHeight - pic.TextHeight(&quot;%&quot;)) / 2
    pic.Print CStr(Percent) &amp; &quot; %&quot;;
End Sub
</pre>
</td></tr>
</table></p>

<p>The CFileOp class that you'll find on the companion CD includes many other improvements, such as the support for <I>Move </I>and <I>Delete </I>commands, and the inclusion of a <I>Parsing </I>event that lets the client filter out specific files during the parsing process. (See Figure 7-3.)</p>

<p>
<A HREF="javascript:fullSize('F07ph03x.htm')"> <img src="F07ph03.JPG" width=404 height=296 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-3.</B> <i>This version of the CFileOp demonstration program supports multiple filespecs, wildcards, additional file commands, a progress bar with a percentage indicator, and full control of individual file operations.</i><!--/caption-->
</p>

<A NAME="283"><h2>Multicasting</h2></A>
<p>Now that I have shown you several ways to exploit events in your own classes in hopes of piquing your interest, I admit that I've reserved the best news for the grand finale (of this section about events, at least). In fact, what I've purposefully left out is that the event mechanism on which <I>WithEvents</I> is based is compatible with COM and with all the events raised by Visual Basic's own forms and controls.</p>

<p>This mechanism is also known as <I>event multicasting</I>. This term means that an object can raise events in all the client modules containing a <I>WithEvents</I> variable that points to that object. This might seem to be a negligible detail until you see how far-reaching its consequences are.</p>

<p>As you all know, a form module is always able to trap events from its own controls. Before multicasting, trapping controls' events in the parent form's module was the best thing a programmer could do. Well, it probably is <I>still </I>the best thing that you can do with events, but surely it isn't the only one. In fact, you can declare an explicit object variable, let it point to a particular control, and use it to trap that control's events. The multicasting mechanism ensures that the variable receives the event notification <I>wherever it is declared</I>! This means that you can move the variable to another module in the program (or to another form, or class, or actually anything but a standard BAS module) and still react to all the events raised by the control.</p>

<A NAME="284"><h3>A class for validating TextBox controls</h3></A>
<p>Let's see what this means to us, mere Visual Basic programmers. To show multicasting in action, you just need a very simple CTextBxN class module, whose only purpose is to reject any nondigit keys from a TextBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public WithEvents TextBox As TextBox

Private Sub TextBox_KeyPress(KeyAscii As Integer)
    Select Case KeyAscii
        Case 0 To 31                   ' Accept control chars.
        Case 48 To 57                  ' Accept digits.
        Case Else
            KeyAscii = 0               ' Reject anything else.
    End Select
End Sub
</pre>
</td></tr>
</table></p>


<p>To test drive this class, create a form, place a TextBox control on it, and add this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Amount As CTextBxN
Private Sub Form_Load()
    Set Amount = New CTextBxN
    Set Amount.TextBox = Text1
End Sub
</pre>
</td></tr>
</table></p>


<p>Run the program, and try to type a nondigit key in Text1. After a few attempts, you'll realize that the CTextBxN class is trapping all the <I>KeyPress</I> events raised from Text1 and processing the validation code on behalf of the Form1 module. Seems interesting, eh? The real power of this technique becomes apparent when you have other numerical fields on your form, for example, a new Text2 control that holds a percentage value:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Amount As CTextBxN<B>, Percentage As CTextBxN</B>
Private Sub Form_Load()
    Set Amount = New CTextBxN
    Set Amount.TextBox = Text1
<B>    Set Percentage = New CTextBxN
    Set Percentage.TextBox = Text2</B>
End Sub
</pre>
</td></tr>
</table></p>

<p>Instead of creating distinct event procedures in the parent form module, each one validating the keys going to a distinct TextBox control, you've encapsulated the validation logic in the CTextBxN class once, and you're now reusing it over and over again. And you can do it for all the fields in Form1, as well as for any number of fields in any form of your application (not to mention all the future applications that you'll write from now on). This is <I>reusable </I>code!</p>

<A NAME="285"><h3>Improving the CTextBxN class</h3></A>
<p>The benefits of multicasting shouldn't make you forget that CTextBxN is a regular class module, which can be improved with properties and methods. Just as an example, let's add three new properties that make the class more useful: <I>IsDecimal</I> is a Boolean property that, if True, allows decimal values; <I>FormatMask</I> is a string used to format the number when the focus leaves the control; and <I>SelectOnEntry</I> is a Boolean property that states whether the current value should be highlighted when the control gets the focus. Here's the new version of the class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public WithEvents TextBox As TextBox
<B>Public IsDecimal As Boolean
Public FormatMask As String
Public SelectOnEntry As Boolean</B>

Private Sub TextBox_KeyPress(KeyAscii As Integer)
    Select Case KeyAscii
        Case 0 To 31                   ' Accept control chars.
        Case 48 To 57                  ' Accept digits.
<B>        Case Asc(Format$(0.1, &quot;.&quot;))    ' Accept the Decimal separator.
            If Not IsDecimal Then KeyAscii = 0</B>
        Case Else
            KeyAscii = 0               ' Reject anything else.
    End Select
End Sub

<B>Private Sub TextBox_GotFocus()
    TextBox.Text = FilterNumber(TextBox.Text, True)
    If SelectOnEntry Then 
        TextBox.SelStart = 0
        TextBox.SelLength = Len(TextBox.Text)
    End If
End Sub

Private Sub TextBox_LostFocus()
    If Len(FormatMask) Then 
        TextBox.Text = Format$(TextBox.Text, FormatMask)
    End If
End Sub</B>
' Code for FilterNumber is omitted. (See <a href="#A14">Chapter 3</a>.)
</pre>
</td></tr>
</table></p>

<p>Using the new properties is a pleasure. Just set them in the <I>Form_Load</I> procedure and then enjoy your smarter TextBox controls:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the Form_Load event procedure
Amount.FormatMask = &quot;#,###,###&quot;
Amount.SelectOnEntry = True
Percentage.FormatMask = &quot;0.00&quot;
Percentage.IsDecimal = True
Percentage.SelectOnEntry = True
</pre>
</td></tr>
</table></p>

<A NAME="286"><h3>Send custom events to the container</h3></A>
<p>Because CTextBxN is a regular class module, it can even declare and raise its own custom events. This ability is really interesting: The class &quot;steals&quot; controls' events from the original form but then sends the form other events. This permits a degree of sophistication that couldn't be possible otherwise. To demonstrate this concept in action, I'll show you how to add to the class full support for validation against <I>Min</I> and <I>Max</I> properties. In a regular program, validation is performed in the <I>Validate</I> event on the parent form. (See <a href="#A14">Chapter 3</a>.) But now you can trap that event and preprocess it against your new custom properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CTextsBxN class module
Event ValidateError(Cancel As Boolean)
Public Min As Variant, Max As Variant

Private Sub TextBox_Validate(Cancel As Boolean)
    If Not IsEmpty(Min) Then
        If CDbl(TextBox.Text) &lt; Min Then RaiseEvent ValidateError(Cancel)
    End If
    If Not IsEmpty(Max) Then
        If CDbl(TextBox.Text) &gt; Max Then RaiseEvent ValidateError(Cancel)
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>If the class detects a potential out-of-range error, it just raises a <I>ValidationError</I> in the original form, passing the <I>Cancel</I> argument by reference. In the client form module, you can therefore decide whether you actually want to abort the shift focus, exactly as you would do under normal circumstances:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Now Percentage must be declared using WithEvents.
Dim <B>WithEvents </B>Percentage As CTextBxN
Private Sub Form_Load()
    ' ...
    <B>Percentage.Min = 0
    Percentage.Max = 100</B>
End Sub
' ...
<B>Private Sub Percentage_ValidateError(Cancel As Boolean)
    MsgBox &quot;Invalid Percentage Value&quot;, vbExclamation
    Cancel = True
End Sub</B>
</pre>
</td></tr>
</table></p>

<p>Alternatively, you could set <I>Cancel </I>to True in the class module and give the client code an opportunity to reset it to False. These are just details. The important point is that you're now in complete control of what happens inside the control, and you're doing that with a minimum amount of code on the form itself because most of the logic is encapsulated in the class module.</p>

<A NAME="287"><h3>Trapping events from multiple controls</h3></A>
<p>Now that you know how you can have a class module trap events from a control, you can extend the technique to multiple controls as well. For example, you can trap events from a TextBox control and a tiny ScrollBar control beside it to simulate those fancy spin buttons that are so trendy in many Windows applications. Or you can rework the scrollable form example in <a href="#A14">Chapter 3</a> and build a CScrollForm class module that traps events from a form and its two companion scroll bars. Instead of rehashing such simple tasks, I prefer to focus on something new and more interesting. In the following example, I'll show you how easily you can create <I>calculated fields</I> using multicasting. This example is a bit more complex, but I'm sure that in the end you'll be glad to have spent some time on it.</p>

<p>The CTextBoxCalc class module I built is able to trap the <I>Change</I> event from up to five distinct TextBox controls (the <I>independent </I>fields) and use this capability to update the contents of another Textbox on the form (the <I>dependent </I>field) without any intervention from the main program. To create a generic calculated field, I needed to devise a way for the client code to specify the expression that must be reevaluated each time one of the independent controls raises a <I>Change</I> event. To this end, the class exposes a <I>SetExpression </I>method that accepts an array of parameters. Each parameter can be a reference to a control, a number, or a string that represents one of the four math operators. Look, for example, at the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Example of client code that uses the CTextBoxCalc class
' txtTax and txtGrandTotal depend on txtAmount and txtPercent.
Dim Tax As New CTextBoxCalc, GrandTotal As New CTextBoxCalc
' Link the class to the control on which the result is to be displayed.
Set Tax.TextBox = txtTax
' Set the expression &quot;Amount * Percent / 100&quot;.
Tax.SetExpression txtAmount, &quot;*&quot;, txtPercent, &quot;/&quot;, 100
' Create a GrandTotal calculated field, equal to &quot;Amount + Tax&quot;.
Set GrandTotal.TextBox = txtGrandTotal
GrandTotal.SetExpression txtAmount, &quot;+&quot;, txtTax
</pre>
</td></tr>
</table></p>

<p>The intricacy of the CTextBoxCalc class derives mostly from the need to parse the arguments passed to the <I>SetExpression</I> method. I kept this intricacy to a minimum and renounced sophisticated features such as allowing different priorities among operators, bracketed subexpressions, and functions. This leaves the four math operators, which are evaluated in a strict left-to-right order. (For example, &quot;2+3*4&quot; evaluates to 20 instead of 14.) On the other hand, the complete class module has just 80 lines of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The complete source code for CTextBoxCalc class
Public TextBox As TextBox
Public FormatMask As String
' We can trap events from max 5 TextBox controls.
Private WithEvents Text1 As TextBox
Private WithEvents Text2 As TextBox
Private WithEvents Text3 As TextBox
Private WithEvents Text4 As TextBox
Private WithEvents Text5 As TextBox
' Here we store the arguments passed to SetExpression.
Dim expression() As Variant

Sub SetExpression(ParamArray args() As Variant)
    Dim i As Integer, n As Integer
    ReDim expression(LBound(args) To UBound(args)) As Variant
    For i = LBound(args) To UBound(args)
        If IsObject(args(i)) Then
            ' Objects must be stored as such, using Set.
            Set expression(i) = args(i)
            If TypeName(args(i)) = &quot;TextBox&quot; Then
                n = n + 1
                If n = 1 Then Set Text1 = args(i)
                If n = 2 Then Set Text2 = args(i)
                If n = 3 Then Set Text3 = args(i)
                If n = 4 Then Set Text4 = args(i)
                If n = 5 Then Set Text5 = args(i)
            End If
        Else
            ' Store number and strings without the Set keyword.
            expression(i) = args(i)
        End If
    Next
End Sub

' Here we actually evaluate the result.
Sub EvalExpression()
    Dim i As Integer, opcode As Variant
    Dim value As Variant, operand As Variant
    On Error GoTo Error_Handler
    For i = LBound(expression) To UBound(expression)
        If Not IsObject(expression(i)) And VarType(expression(i)) _
            = vbString Then
                opcode = expression(i)
        Else
            ' This works with numbers and Text (default) properties alike.
            operand = CDbl(expression(i))
            Select Case opcode
                Case Empty: value = operand
                Case &quot;+&quot;: value = value + operand
                Case &quot;-&quot;: value = value - operand
                Case &quot;*&quot;: value = value * operand
                Case &quot;/&quot;: value = value / operand
            End Select
            opcode = Empty
        End If
    Next
    If Len(FormatMask) Then value = Format$(value, FormatMask)
    TextBox.Text = value
    Exit Sub
Error_Handler:
    TextBox.Text = &quot;&quot;
End Sub

' Here we trap events from the independent fields.
Private Sub Text1_Change()
    EvalExpression
End Sub
' ... Text2-Text5 Change procedures .... (omitted)
</pre>
</td></tr>
</table></p>

<p>The class can trap events from a maximum of five TextBox independent controls, but the expression could refer to just one or two of them. This is OK: If a <I>WithEvents</I> variable isn't assigned and remains Nothing, it simply stays inert and never raises events in the class. It isn't useful but doesn't do any harm either.</p>

<p>To get an idea of the potential of this class, run the demonstration program on the companion CD and see how you can grow a spreadsheet-like form that accepts data in a couple of fields and automatically updates the other two fields. (See Figure 7-4 for an example of how that might work.) The same application demonstrates both the CTextBxN and the CTextBoxCalc classes.</p>

<p>
<img src="F07ph04x.gif" width=409 height=276 border=0>
</p><p>
<!--caption--><B>Figure 7-4.</B> <i>You can create smart forms that contain live calculated fields by using reusable external class modules exclusively.</i><!--/caption-->
</p>

<A NAME="288"><h3>The pitfalls of multicasting</h3></A>
<p>Exploiting the event multicasting features in your application is among the best favors you can do yourself. Before you get too carried away, though, you should be aware that there are a few problems with this technique.</p>

<UL>
<p><li>The <I>WithEvents</I> keyword doesn't work with arrays of object variables. This makes it difficult to create extremely generic routines. For example, in the CTextBoxCalc class we had to set a limit of five external TextBox controls&#8212;the variables <I>Text1 </I>through <I>Text5 </I>in the class&#8212;because it wasn't possible to create an array of objects. This problem has a solution, but it isn't simple and you won't see it until the &quot;Data-Driven Form&quot; section in <a href="#A53">Chapter 9</a>.</li></p>

<p><li>You have absolutely no control over the order in which events are dispatched to <I>WithEvents</I> variables. In general, you should avoid having the same event served in two distinct places in your code&#8212;for example, a <I>KeyPress </I>event for a control trapped both in the form and in an external class. If you can't avoid it, at least ensure that your code will work in whatever order the events arrive. (This order is random, so one or two attempts won't be enough to prove the correctness of your approach.)</li></p>

<p><li>There's an undocumented bug in how Visual Basic implements the <I>WithEvents </I>keyword: you can't use <I>WithEvents</I> with controls that belong to a control array:</li></p>
 
<p><table width="95%" cellpadding="5"><tr><td>
<PRE>
Dim WithEvents TextBox As TextBox
Private Sub Form_Load()
    ' Raises a Type Mismatch run-time error.
    Set TextBox = Text1(0)
End Sub
</PRE>
</td></tr></table></p>

<p>This bug prevents you from dynamically creating a new control from a control array and then trapping its events using multicasting. Unfortunately, there isn't any known solution to this problem. Curiously, this bug doesn't manifest itself if the control you're assigning to a <I>WithEvents</I> variable is an ActiveX control authored in Visual Basic.</p>
</ul>


<a name="A43"></a><h3>5.7.2 Polymorphism</h3>

<A HREF="#A42">[Previous]</A> <A HREF="#A44">[Next]</A><P>

<A NAME="289"><h1>Polymorphism</h1></A>
<p>The term <I>polymorphism </I>describes the capability of different objects to expose a similar set of properties and methods. The most obvious and familiar examples of polymorphic objects are Visual Basic's own controls, most of which share property and method names. The advantage of polymorphism is evident when you think of the sort of generic routines that work on multiple objects and controls:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change the BackColor property for all the controls on the form.
Sub SetBackColor(frm As Form, NewColor As Long)
    Dim ctrl As Control
    On Error Resume Next            ' Account for invisible controls.
    For Each ctrl In frm.Controls
        ctrl.BackColor = NewColor
    Next
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="290"><h2>Leveraging Polymorphism </h2></A>
<p>You can exploit the benefits of polymorphism to write better code in many ways. In this section, I examine the two that are most obvious: procedures with polymorphic arguments and classes with polymorphic methods.</p>

<A NAME="291"><h3>Polymorphic procedures</h3></A>
<p>A polymorphic procedure can do different things depending on which arguments you pass it. In previous chapters, I have often implicitly used this idea, for example, when writing routines that use a <I>Variant </I>argument to process arrays of different types. Let's see now how you can expand on this concept for writing more flexible classes. I'll illustrate a simple CRectangle class, which exposes a number of simple properties (<I>Left</I>,<I> Top</I>,<I> Width</I>,<I> Height</I>,<I> Color</I>, and <I>FillColor</I>) and a <I>Draw</I> method that displays it on a surface. Here's the source code of the class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a complete implementation, we would use property procedures.
Public Left As Single, Top As Single
Public Width As Single, Height As Single
Public Color As Long, FillColor As Long    

Private Sub Class_Initialize()
    Color = vbBlack
    FillColor = -1              ' -1 means &quot;not filled&quot;
End Sub

' A pseudoconstructor method
Friend Sub Init(Left As Single, Top As Single, Width As Single, Height As _
    Single, Optional Color As Variant, Optional FillColor As Variant)
    ' .... code omitted for brevity
End Sub

' Draw this shape on a form, a picture box, or the Printer object.
Sub Draw(pic As Object)
    If FillColor &lt;&gt; -1 Then
        pic.Line (Left, Top)-Step(Width, Height), FillColor, BF
    End If
    pic.Line (Left, Top)-Step(Width, Height), Color, B
End Sub
</pre>
</td></tr>
</table></p>


<p>For the sake of brevity, all the properties are implemented as Public variables, but in a real implementation you would surely use Property procedures to enforce validation rules. The real focal point of this class, however, is the <I>Draw</I> method, which expects an Object argument. This means that we can display the rectangle on any object that supports the <I>Line</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rect As New CRect
' Create a white rectangle with a red border.
rect.Init 1000, 500, 2000, 1500, vbRed, vbWhite
' Display it wherever you want.
If PreviewMode Then
    rect.Draw Picture1          ' A picture box
Else
    rect.Draw Printer           ' A printer
End If
</pre>
</td></tr>
</table></p>

<p>This first form of polymorphism is interesting, though limited. In this particular case, in fact, we can't do much more than what we've done because forms, PictureBox controls, and the Printer are the only objects that support the <I>Line</I> method with its exotic syntax. The really important point is that the client application benefits from this capability to simplify its code.</p>

<A NAME="292"><h3>Polymorphic classes</h3></A>
<p>The real power of polymorphism becomes apparent when you create multiple class modules and select the names of their properties and methods in a way that ensures a complete or partial polymorphism among them. For example, you can create a CEllipse class that's completely polymorphic with the CRectangle class, even if the two classes are implemented differently:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CEllipse class
Public Left As Single, Top As Single
Public Width As Single, Height As Single
Public Color As Long, FillColor As Long    

Private Sub Class_Initialize()
    Color = vbBlack
    FillColor = -1             ' -1 means &quot;not filled&quot;
End Sub

' Draw this shape on a form, a picture box, or the Printer object.
Sub Draw(pic As Object)
    Dim aspect As Single, radius As Single
    Dim saveFillColor As Long, saveFillStyle As Long
    aspect = Height / Width
    radius = IIf(Width &gt; Height, Width / 2, Height / 2)
    If FillColor &lt;&gt; -1 Then
        saveFillColor = pic.FillColor
        saveFillStyle = pic.FillStyle
        pic.FillColor = FillColor
        pic.FillStyle = vbSolid
        pic.Circle (Left + Width / 2, Top + Height / 2), radius, Color, _
            , , aspect
        pic.FillColor = saveFillColor
        pic.FillStyle = saveFillStyle
    Else
        pic.Circle (Left + Width / 2, Top + Height / 2), radius, Color, _
            , , aspect
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>You can also create classes that are only partially polymorphic with respect to CRectangle. For example, a CLine class might support the <I>Draw</I> method and the <I>Color</I> property but use different names for its other members:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CLine class
Public X As Single, Y As Single
Public X2 As Single, Y2 As Single
Public Color As Long

Private Sub Class_Initialize()
    Color = vbBlack
End Sub

' Draw this shape on a form, a picture box, or the Printer object.
Sub Draw(pic As Object)
    pic.Line (X, Y)-(X2, Y2), Color
End Sub
</pre>
</td></tr>
</table></p>

<p>Now you have three classes that are polymorphic with one another with respect to their <I>Draw</I> methods and their <I>Color</I> properties. This permits you to create a first version of a very primitive CAD-like application, named Shapes, shown in Figure 7-5. You can do this by using an array or a collection that holds all your shapes so that you can redraw all of them quite easily. To keep the client code as concise and descriptive as possible, you can also define a number of factory methods in a separate BAS module (not shown here because it's not terribly interesting for our purposes):</p>

<p>
<A HREF="javascript:fullSize('F07ph05x.htm')"> <img src="F07ph05.JPG" width=404 height=277 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-5.</B> <i>Playing with polymorphic shapes.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is a module-level variable.
Dim Figures As Collection

Private Sub Form_Load()
    CreateFigures
End Sub
Private Sub cmdRedraw_Click()
    RedrawFigures
End Sub

' Create a set of figures.
Private Sub CreateFigures()
    Set Figures = New Collection
    Figures.Add New_CRectangle(1000, 500, 1400, 1200, , vbRed)
    Figures.Add New_CRectangle(4000, 500, 1400, 1200, , vbCyan)
    Figures.Add New_CEllipse(2500, 2000, 1400, 1200, , vbGreen)
    Figures.Add New_CEllipse(3500, 3000, 2500, 2000, , vbYellow)
    Figures.Add New_CRectangle(4300, 4000, 1400, 1200, , vbBlue)
    Figures.Add New_CLine(2400, 1100, 4000, 1100, vbBlue)
    Figures.Add New_CLine(1700, 1700, 1700, 4000, vbBlue)
    Figures.Add New_CLine(1700, 4000, 3500, 4000, vbBlue)
End Sub

' Redraw figures.
Sub RedrawFigures()
    Dim Shape As Object
    picView.Cls
    For Each Shape In Figures
        Shape.Draw picView
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>While complete polymorphism is always preferable, you can still use a lot of interesting techniques when objects have just a few properties in common. For example, you can quickly turn the contents of the Figures collection into a series of wire-framed objects:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next     ' CLine doesn't support the FillColor property.
For Each Shape In Figures
    Shape.FillColor = -1
Next
</pre>
</td></tr>
</table></p>

<p>It's easy to add sophistication to this initial example. For example, you might add support for moving and zooming objects, using the <I>Move</I> and <I>Zoom</I> methods. Here's a possible implementation of these methods for the CRectangle class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In CRectangle class module...
' Move this object.
Sub Move(stepX As Single, stepY As Single)
    Left = Left + stepX
    Top = Top + stepY
End Sub

' Enlarge or shrink this object on its center.
Sub Zoom(ZoomFactor As Single)
    Left = Left + Width * (1 - ZoomFactor) / 2
    Top = Top + Height * (1 - ZoomFactor) / 2
    Width = Width * ZoomFactor
    Height = Height * ZoomFactor
End Sub
</pre>
</td></tr>
</table></p>

<p>The implementation for the CEllipse class is identical to this code because it's perfectly polymorphic with CRectangle and therefore exposes <I>Left</I>, <I>Top</I>, <I>Width</I>, and <I>Height</I> properties. The CLine class supports both the <I>Move</I> and the <I>Zoom</I> method as well, even if their implementation is different. (See the code on the companion CD for more details.)</p>

<p>Figure 7-6 shows an improved Shapes sample program, which also permits you to move and zoom the objects on the playground. This is the code behind the buttons on the form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdMove_Click(Index As Integer)
    Dim shape As Object
    For Each shape In Figures
        Select Case Index
            Case 0: shape.Move 0, -100    ' Up
            Case 1: shape.Move 0, 100     ' Down
            Case 2: shape.Move -100, 0    ' Left
            Case 3: shape.Move 100, 0     ' Right
        End Select
    Next
    RedrawFigures
End Sub

Private Sub cmdZoom_Click(Index As Integer)
    Dim shape As Object
    For Each shape In Figures
        If Index = 0 Then
            shape.Zoom 1.1                ' Enlarge
        Else
            shape.Zoom 0.9                ' Reduce
        End If
    Next
    RedrawFigures
End Sub
</pre>
</td></tr>
</table></p>

<p>If you want to appreciate what polymorphism can do for your programming habits, just think of the many lines of code you would have written to solve this simple programming task using any other means. And of course consider that you can apply these techniques to more complex business objects, including Documents, Invoices, Orders, Customers, Employees, Products, and so on.</p>

<p>
<A HREF="javascript:fullSize('F07ph06x.htm')"> <img src="F07ph06.JPG" width=404 height=284 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-6.</B> <i>More fun with polymorphic shapes.</i><!--/caption-->
</p>

<A NAME="293"><h3>Polymorphism and late binding</h3></A>
<p>I haven't yet talked about one aspect of polymorphism in the depth it deserves. The most important trait in common among all the polymorphic examples seen so far is that you have been able to write polymorphic code only because you use <I>generic </I>object variables. For example, the <I>pic </I>argument in the <I>Draw</I> method is declared with <I>As Object</I>, as is the <I>Shape </I>variable in all <I>Click</I> procedures in the preceding code. You might use Variant variables that hold an object reference, but the concept is the same: you are doing polymorphism through late binding.</p>

<p>As you'll recall from <a href="#A37">Chapter 6</a>, late binding is a technique that has several defects, the most serious being a sloppy performance&#8212;it's even <I>hundreds </I>of times slower than early binding&#8212;and less robust code. Depending on the particular piece of code you're working on, these defects can easily nullify all the benefits you get from polymorphism. Fortunately, Visual Basic offers a solution to this problem&#8212;a great solution, I daresay. To understand how it works, you must be familiar with the concept of <I>interfaces</I>.</p>

<A NAME="294"><h2>Working with Interfaces</h2></A>
<p>When you start using polymorphism in your code, you realize that you're logically subdividing all the properties and methods exposed by your objects into distinct groups. For example, the CRectangle, CEllipse, and CLine classes expose a few members in common (<I>Draw</I>, <I>Move</I>, and <I>Zoom</I>). With real-world objects, which include dozens or even hundreds of properties and methods, creating groups of them isn't just a luxury, it's necessary. A group of related properties and methods is called an <I>interface</I>.</p>

<p>Under Visual Basic 4, any object could have only one interface, the <I>main </I>interface. Starting with version 5, Visual Basic's class modules can include one or more <I>secondary interfaces</I>. This is exactly what you need to better organize your object-oriented code. And you'll see that this innovation has many other beneficial implications.</p>

<A NAME="295"><h3>Creating a secondary interface</h3></A>
<p>In Visual Basic 5 and 6, the definition of a secondary interface requires that you create a separate class module. This module doesn't contain any executable code, just the definition of properties and methods. For this reason, it's often called an <I>abstract class</I>. As with any Visual Basic module, you need to give it a name. It's customary to distinguish interface names from class names by using a leading letter <I>I</I>.</p>

<p>Back to our mini-CAD example: Let's create an interface that gathers the <I>Draw</I>, <I>Move</I>, and <I>Zoom</I> methods&#8212;that is, the members in common to all the shapes we're dealing with. This will be the IShape interface. To add some spice, I am also adding the <I>Hidden</I> property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The IShape class module
Public Hidden As Boolean

Sub Draw(pic As Object)
    ' (Empty comment to prevent automatic deletion of this routine)
End Sub
Sub Move(stepX As Single, stepY As Single)
    '
End Sub
Sub Zoom(ZoomFactor As Single)
    '
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
You might need to add a comment inside all methods to prevent the editor from automatically deleting empty routines when the program is executed.
</blockquote></div></p>

<p>This class doesn't include any executable statements and only serves as a model for the IShape interface. What really matters are the names of properties and methods, their arguments, and the type of each one of them. For the same reason, you don't need to create pairs of Property procedures because a simple Public variable is usually enough. For only two cases do you need explicit Property procedures:</p>

<UL>
<p><li>You want to specify that a property is read-only: in this case, you explicitly omit the <I>Property Let</I> or <I>Property Set</I> procedure.</li></p>

<p><li>You want to specify that a <I>Variant</I> property can never return an object: in this case, you include the <I>Property Get</I> and <I>Property Let</I> procedures but omit the <I>Property Set</I> procedure.</li></p>
</UL>
 
<p>Interfaces never include <I>Event</I> declarations. Visual Basic takes only Public properties and methods into account when you're using a CLS module as an abstract class that defines a secondary interface.</p>

<A NAME="296"><h3>Implementing the interface</h3></A>
<p>The next step is letting Visual Basic know that the CRectangle, CEllipse, and CLine classes expose the IShape interface. You do this by adding an <I>Implements</I> keyword in the declaration section of each class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CRectangle class module
Implements IShape
</pre>
</td></tr>
</table></p>

<p>Declaring that a class exposes an interface is only half of the job because you now have to actually <I>implement </I>the interface. In other words, you must write the code that Visual Basic will execute when any member of the interface is invoked. The code editor does part of the job on your behalf by creating the code template for each individual routine. The mechanism is similar to the one available for events: In the leftmost combo box, you select the name of the interface (it appeared in the box as soon as you moved the caret away from the <I>Implements</I> statement) and select the name of a method or a property in the rightmost combo box, which you can see in Figure 7-7. Notice this important difference from events, though: When you implement an interface, you must create <I>all </I>the procedures listed in this combo box. If you don't do this, Visual Basic won't even run your application. For this reason, the fastest way to proceed is to select all the items in the rightmost combo box to create all the procedure templates, and then add code to them. Note that all names have been prefixed with IShape_, which solves any name conflict with the methods already in the module, and that all routines have been declared to be Private. This is what you want because if they were Public, they would appear in the main interface. Also note that the <I>Hidden</I> property has generated a pair of Property procedures.</p>

<A NAME="297"><h3>Writing the actual code</h3></A>
<p>To complete the implementation of the interface, you must write code inside the procedure templates. If you don't, the program will run but the object will never respond to the IShape interface.</p>

<p>Interfaces are said to be <I>contracts</I>: If you implement an interface, you implicitly agree to respond to all the properties and methods of that interface in a way that complies with the interface specifications. In this case, you're expected to react to the <I>Draw</I> method with code that displays the object, to the <I>Move</I> method with code that moves the object, and so on. If you fail to do so, you're breaking the interface contract and you're the only one to blame for this.</p>

<p>
<A HREF="javascript:fullSize('F07ph07x.htm')"> <img src="F07ph07.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-7.</B> <i>Let the code editor create the procedure templates for you.</i><!--/caption-->
</p>

<p>Let's see how you can implement the IShape interface in your CRectangle class. In this case, you already have the code that displays, moves, and scales the object&#8212;namely, the <I>Draw</I>, <I>Move</I>, and <I>Zoom</I> methods in the main interface. One of the goals of secondary interfaces, however, is to get rid of redundant members in the main interface. In line with this, you should delete the <I>Draw</I>, <I>Move</I>, and <I>Zoom</I> methods from CRectangle's primary interface and move their code inside the IShape interface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A (private) variable to store the IShape_Hidden property
Private Hidden As Boolean

Private Sub IShape_Draw(pic As Object)
    If Hidden Then Exit Sub
    If FillColor &gt;= 0 Then
        pic.Line (Left, Top)-Step(Width, Height), FillColor, BF
    End If
    pic.Line (Left, Top)-Step(Width, Height), Color, B
End Sub

Private Sub IShape_Move(stepX As Single, stepY As Single)
    Left = Left + stepX
    Top = Top + stepY
End Sub

Private Sub IShape_Zoom(ZoomFactor As Single)
    Left = Left + Width * (1 - ZoomFactor) / 2
    Top = Top + Height * (1 - ZoomFactor) / 2
    Width = Width * ZoomFactor
    Height = Height * ZoomFactor
End Sub

Private Property Let IShape_Hidden(ByVal RHS As Boolean)
    Hidden = RHS
End Property
Private Property Get IShape_Hidden() As Boolean
    IShape_Hidden = Hidden
End Property
</pre>
</td></tr>
</table></p>

<p>This completes the implementation of the IShape interface for the CRectangle class. I won't show here the code for CEllipse and CLine because it's substantially the same, and you'll probably prefer to browse it on the companion CD.</p>

<A NAME="298"><h3>Accessing the secondary interface</h3></A>
<p>Accessing the new interface is simple. All you have to do is declare a variable of the IShape class and assign the object to it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the client code ...
Dim Shape As IShape    ' A variable that points to an interface
Set Shape = Figures(1) ' Get the first figure in the list.
Shape.Draw picView     ' Call the Draw method in the IShape interface.
</pre>
</td></tr>
</table></p>

<p>The Set command in the previous code is somewhat surprising because you would expect that the assignment would fail with a Type Mismatch error. Instead, the code works because the compiler can ascertain that the Figures(1) object (a CRectangle object in this particular sample program) supports the IShape interface and that a valid pointer can be returned and safely stored in the <I>Shape </I>variable. It's as if Visual Basic queried the source CRectangle object, &quot;Do you support the IShape interface?&quot; If it does, the assignment can be completed, otherwise an error is raised. This operation is referred to as <I>QueryInterface</I>, or <I>QI </I>for short.</p>

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
In <a href="#A37">Chapter 6</a>, you learned that a class is always paired with a <I>VTable</I> structure, which holds the addresses of all its procedures. A class that implements a secondary interface comes with a secondary <I>VTable</I> structure, which of course points to the procedures of that secondary interface. When a <I>QI </I>command is attempted for a secondary interface, the value returned in the target variable is the address of a memory location inside the instance data area, which in turn holds the address of this secondary <I>VTable</I> structure. (See Figure 7-8.) This mechanism enables Visual Basic to deal with primary and secondary interfaces using the same low-level core routines.
</blockquote></div>

<p>
<A HREF="javascript:fullSize('F07ph08x.htm')"> <img src="F07ph08.JPG" width=404 height=337 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-8.</B> <i>Secondary interfaces and VTable structures. (Compare this with Figure 6-8.)</i><!--/caption-->
</p>

<p><I>QueryInterface </I>is a symmetrical operation, and Visual Basic lets you do assignments in both directions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Shape As IShape, Rect As CRectangle
' You can create a CRectangle object on the fly.
Set Shape = New CRectangle
Set Rect = Shape                 ' This works.
Rect.Init 100, 200, 400, 800     ' Rect points to primary interface.
Shape.Move 30, 60                ' Shape points to its IShape interface.
' Next statement proves that both variables point to the same instance.
Print Rect.Left, Rect.Top        ' Displays &quot;130&quot; and &quot;260&quot;
</pre>
</td></tr>
</table></p>

<A NAME="299"><h3>Refining the client code</h3></A>
<p>If you implement the IShape interface in the CEllipse and CLine classes as well, you'll see that you can call code inside any of these three classes using the <I>Shape </I>variable. In other words, you're doing polymorphism using a variable of a specific type, hence, you can now use early binding.</p>

<p>When two or more classes share an interface, they're said to be <I>polymorphic with each other </I>with respect to that particular interface. This technique lets you speed up the Shapes program and make it more robust at the same time. What's really astonishing is that you can accomplish all this by replacing one single line in the original client code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub RedrawFigures()
<B>    Dim shape As IShape         ' Instead of &quot;As Object&quot;</B>
    picView.Cls
    For Each shape In Figures
        shape.Draw picView
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>The performance benefit you can get using this approach can vary greatly. This particular routine spends most of its time doing graphics, so the speed improvement might go unnoticed. Most of the time, however, you'll literally see the difference before your eyes.</p>

<A NAME="300"><h3>Playing with VBA keywords </h3></A>
<p>Before diving into another (I hope) fascinating OOP topic, let's see how a few VBA keywords behave when applied to object variables that point to a secondary interface.</p>

<p><b>The <I>Set</I> keyword</b> As you just saw, you can freely assign object variables to each other, even if they're of different types. The only condition is that the source object (the right side of the assignment) must implement the target class (the left side of the assignment) as a secondary interface. The opposite is also possible&#8212;that is, when the source class is an interface implemented by the target class. In both cases, remember that you're assigning a reference to the <I>same</I> object.</p>

<p><b>The <I>TypeName</I> function</b> This function returns the name of the original class of the object pointed to by the object variable, regardless of the type of argument. For example, consider this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rect As New CRectangle, shape As IShape
Set shape = rect
Print TypeName(shape)     ' Displays &quot;CRectangle&quot;, not &quot;IShape&quot;!
</pre>
</td></tr>
</table></p>

<p><b>The <I>TypeOf...Is</I> statement</b> The <I>TypeOf&#8230;Is</I> statement tests whether an object supports a given interface. You can test for primary and secondary interfaces, as in this example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rect As New CRectangle, shape As IShape
Set shape = rect
' You can pass a variable and test a secondary interface.
If TypeOf rect Is IShape Then Print &quot;OK&quot;          ' Displays &quot;OK&quot;
' You can also pass a variable pointing to a secondary interface
' and test the primary interface (or a different secondary interface).
If TypeOf shape Is CRectangle Then Print &quot;OK&quot;     ' Displays &quot;OK&quot;
</pre>
</td></tr>
</table></p>

<p>In <a href="#A37">Chapter 6</a>, I suggested that you use <I>TypeName</I> instead of a<I> TypeOf&#8230;Is</I> statement. This is correct when you're dealing with primary interfaces exclusively, but when you're testing for a secondary interface you really need <I>TypeOf&#8230;Is</I>.</p>

<p><b>The <I>Is</I> keyword</b> In <a href="#A37">Chapter 6</a>, I explained that the Is operator simply compares the contents of the involved object variables. This is true only when you're comparing variables that hold pointers to the primary interface: when you compare object variables of different types, Visual Basic is smart enough to understand whether they're pointing to the same instance data area, even if the values stored in the variables are different:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set shape = rect
Print (rect Is shape)               ' Displays &quot;True&quot;.
</pre>
</td></tr>
</table></p>

<A NAME="301"><h3>Support functions to retrieve secondary interfaces</h3></A>
<p>When you get more involved with secondary interfaces, you'll soon find yourself writing a lot of code just to retrieve the secondary interface of an object. This effort usually requires declaring a variable of the given type and executing a Set command. You might instead find it convenient to write a simple function in a BAS module that does it for you:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function QI_IShape(shape As IShape) As IShape
    Set QI_IShape = shape
End Function
</pre>
</td></tr>
</table></p>

<p>For example, see how you can invoke the <I>Move</I> method in the IShape interface of a CRectangle object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>QI_IShape(rect).Move 10, 20
</pre>
</td></tr>
</table></p>


<p>In most cases, you don't need a temporary variable even when assigning multiple properties or multiple methods:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With QI_IShape(rect)
    .Move 10, 20
    .Zoom 1.2
End With
</pre>
</td></tr>
</table></p>


<a name="A44"></a><h3>5.7.3 Inheritance</h3>

<A HREF="#A43">[Previous]</A> <A HREF="#A45">[Next]</A><P>

<A NAME="302"><h1>Inheritance</h1></A>
<p>After encapsulation and polymorphism, inheritance is the third major characteristic of all mature object-oriented programming languages. In <a href="#A37">Chapter 6</a>, I briefly described what inheritance is and how it could be useful to programmers. And I also told you that&#8212;unfortunately&#8212;inheritance isn't natively supported by Visual Basic. In this section, I explain what you can do to remedy this deficiency.</p>

<p>Back to the Shapes sample program. This time, you'll write a CSquare class module, which adds support for drawing squares. Because this class is so similar to CRectangle, this could actually be a one-minute job: Just copy the CRectangle code into the CSquare module, and edit it where appropriate. For example, because a square is nothing but a rectangle with width equal to height, you could make both the <I>Width</I> and <I>Height</I> properties point to the same private variable.</p>

<p>This solution is somewhat unsatisfactory, however, because we have duplicated the code in the CRectangle class. If we later discover that the CRectangle class includes a bug, we must remember to correct it in the CSquare module, as well as in all other classes that were derived from CRectangle in the meantime. If Visual Basic supported true inheritance, we could just declare that the CSquare class inherits all its properties and methods from CRectangle, and then we could focus only on the few differences. Alas, this isn't possible, at least with the current version of Visual Basic. (I am an irrepressibly optimistic guy<I>&#8230;</I>) On the other hand, the concept of inheritance is so alluring and promising that you might take a second look at it. As I'll show shortly, you can resort to a coding technique that lets you simulate inheritance at the expense of some manual coding.</p>

<A NAME="303"><h2>Inheritance Through Delegation</h2></A>
<p>The technique of simulating inheritance is called <I>delegation</I>. The concept is simple: because most of the logic needed in CSquare (the <I>derived </I>class) is embodied in CRectangle (the <I>base </I>class), the code in CSquare can simply ask a CRectangle object to do the work on its behalf.</p>

<A NAME="304"><h3>Basic delegation techniques</h3></A>
<p>So you do this trick by declaring a private CRectangle object inside the CSquare class and passing it all the calls that CSquare doesn't want to deal with directly. These calls include all methods and all read/write operations for properties. Here's a possible implementation of this technique:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CSquare Class
' This is the Private instance of the CRectangle class.
Private Rect As CRectangle

Private Sub Class_Initialize()
    ' Create the private variable for doing the delegation.
    Set Rect = New CRectangle
End Sub

' A simple pseudoconstructor for ease of use
Friend Sub Init(Left As Single, Top As Single, Width As Single, _
    Optional Color As Variant, Optional FillColor As Variant)
    ...
End Sub

' The delegation code
Property Get Left() As Single
    Left = Rect.Left
End Property
Property Let Left(ByVal newValue As Single)
    Rect.Left = newValue
End Property

Property Get Top() As Single
    Top = Rect.Top
End Property
Property Let Top(ByVal newValue As Single)
    Rect.Top = newValue
End Property

Property Get Width() As Single
    Width = Rect.Width
End Property
Property Let Width(ByVal newValue As Single)
    ' Squares are rectangles whose Width = Height.
    Rect.Width = newValue
    Rect.Height = newValue
End Property

Property Get Color() As Long
    Color = Rect.Color
End Property
Property Let Color(ByVal newValue As Long)
    Rect.Color = newValue
End Property

Property Get FillColor() As Long
    FillColor = Rect.FillColor
End Property
Property Let FillColor(ByVal newValue As Long)
    Rect.FillColor = newValue
End Property
</pre>
</td></tr>
</table></p>

<p>Admittedly, it's a lot of code for such a simple task, but you shouldn't forget that we're playing with toy objects here. In a real program, the base class might include hundreds or thousands of lines of code. In that case, the relatively few lines needed for the delegation would be absolutely negligible.</p>

<A NAME="305"><h3>Support for secondary interfaces</h3></A>
<p>While our CSquare class is functional, it still doesn't know how to redraw itself. If the CRectangle class exposed the <I>Draw</I>, <I>Move</I>, and <I>Zoom</I> methods in its primary interface&#8212;as it did in the first version of the Shapes program&#8212;this would have been child's play. Unfortunately, we moved the <I>Draw</I> method from the CRectangle main interface to its IShape secondary interface. For this reason, in order to delegate this method we first need to get a reference to that interface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CSquare class
Private Sub IShape_Draw(pic As Object)
    Dim RectShape As IShape
    Set RectShape = Rect        ' Retrieve the IShape interface.
    RectShape.Draw pic          ' Now it works!
End Sub
</pre>
</td></tr>
</table></p>

<p>Since you'll need a reference to Rect's IShape interface many times during the life of the CSquare class, you can speed up execution and reduce the amount of code by creating a module-level <I>RectShape </I>variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' CSquare also supports the IShape interface. 
Implements IShape

' This is the private instance of the CRectangle class.
Private Rect As CRectangle
' This points the Rect's IShape interface.
<B>Private RectShape As IShape</B>

Private Sub Class_Initialize()
    ' Create the two variables for doing the delegation.
    Set Rect = New CRectangle
<B>    Set RectShape = Rect</B>
End Sub
' ... code for Left, Top, Width, Color, FillColor properties ...(omitted)

' The IShape interface
Private Sub IShape_Draw(pic As Object)
    RectShape.Draw pic
End Sub

Private Property Let IShape_Hidden(ByVal RHS As Boolean)
    RectShape.Hidden = RHS
End Property
Private Property Get IShape_Hidden() As Boolean
    IShape_Hidden = RectShape.Hidden
End Property

Private Sub IShape_Move(stepX As Single, stepY As Single)
    RectShape.Move stepX, stepY
End Sub

Private Sub IShape_Zoom(ZoomFactor As Single)
    RectShape.Zoom ZoomFactor
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="306"><h3>Subclassing the base class</h3></A>
<p>While inheritance through delegation could be easily disregarded as a hack by any serious OO programmer working with mature OOPLs, the fact that you're in complete control of what happens during execution has several advantages. For example, when the client invokes a method in your derived class, you have several choices:</p>

<UL>
<p><li>You simply delegate the call to the base class and return any results to the caller. This is the purest implementation of inheritance, and it's more or less what the compiler would do for you if Visual Basic were a true OOPL.</li></p>

<p><li>You don't delegate the call and process it all inside the derived class. This is often necessary for methods that vary greatly between the two classes.</li></p>

<p><li>You delegate the call but modify the values of the arguments passed to the base class. For example, the CSquare class doesn't expose the <I>Height</I> property, so the client will never see such an argument. It's up to the CSquare class to create a dummy value (equal to <I>Width</I>) and pass it where appropriate to the base class.</li></p>

<p><li>You delegate the call and then intercept the return value and process it before returning to the caller.</li></p>
</UL>
 
<p>In the last two cases, your code is sometimes said to be <I>subclassing </I>the base class. It uses the base class for what can be useful but also executes some pre- and postprocessing code that adds power to the derived class. Even if the concept is vaguely similar, don't confuse it with <I>control </I>or <I>Windows subclassing,</I> which is a completely different (and more advanced) programming technique that lets you modify the behavior of standard Windows controls. (This type of subclassing is described in the <a href="#A129">Appendix</a>.)</p>

<A NAME="307"><h3>Subclassing the VBA language</h3></A>
<p>You might not be aware that VBA gives you the means to subclass itself. As you know, Visual Basic can be considered the sum of the Visual Basic library and the VBA language. These libraries are always present in the References dialog box and can't be removed as other external libraries can. Even if you can't remove them, however, as far as the Visual Basic parser is concerned, the names that you use in your own code have a higher priority than the names defined in external libraries, <I>including the VBA library!</I> To see what I mean, add this simple procedure in a standard BAS module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' An IIf replacement that accepts just one argument 
' If FalsePart is omitted and the expression is False, it returns Empty.
Function IIf(Expression As Boolean, TruePart As Variant, _
    Optional FalsePart As Variant) As Variant
    If Expression Then
        IIf = TruePart
    ElseIf Not IsMissing(FalsePart) Then
        IIf = FalsePart
    End If
End Function
</pre>
</td></tr>
</table></p>

<p>You can call native VBA statements even if you're currently subclassing them, provided that you specify the name of the VBA library:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Hex(Value As Long, Optional Digits As Variant) As String
    If IsMissing(Digits) Then
        Hex = VBA.Hex(Value)
    Else
        Hex = Right$(String$(Digits, &quot;0&quot;) &amp; VBA.Hex(Value), Digits)
    End If
End Function
</pre>
</td></tr>
</table></p>

<p>You should always try to keep the syntax of your new custom function compatible with that of the original VBA function so that you won't break any existing code.</p>

<p>One word of caution: This technique could give rise to problems, especially if you work on a team of programmers and not all of them are familiar with it. You can cope with this issue in part by always enforcing a compatible syntax, but this doesn't solve the problem when it falls to your colleagues to maintain or revise your code. For this reason, always consider the opportunity to define a new function with a different name and syntax so that your code isn't unnecessarily ambiguous.</p>

<A NAME="308"><h2>Inheritance and Polymorphism</h2></A>
<p>If you completely inherit a class module from another class&#8212;that is, you implement <I>all </I>the methods of the base class into the derived class&#8212;you end up with two modules that are very similar to one another, often to the point that you can use an <I>Object</I> variable to leverage their polymorphism and simplify your client code. On the other hand, you know that you don't need to resort to late binding (that is, <I>Object</I> variables) to get all the advantages of polymorphism because secondary interfaces always offer a much better alternative.</p>

<A NAME="309"><h3>Implementing the base class as an interface</h3></A>
<p>As an illustration of this concept, the CSquare class could implement the CRectangle interface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CSquare class module
Implements IShape
Implements CRectangle

' The primary and the IShape interface are identical... (omitted).... 
' This is the secondary CRectangle interface.

Private Property Let CRectangle_Color(ByVal RHS As Long)
    Rect.Color = RHS
End Property
Private Property Get CRectangle_Color() As Long
    CRectangle_Color = Rect.Color
End Property

Private Property Let CRectangle_FillColor(ByVal RHS As Long)
    Rect.FillColor = RHS
End Property
Private Property Get CRectangle_FillColor() As Long
    CRectangle_FillColor = Rect.FillColor
End Property

' The rect's Height property is replaced by the Width property.
Private Property Let CRectangle_Height(ByVal RHS As Single)
    rect.Width = RHS
End Property
Private Property Get CRectangle_Height() As Single
    CRectangle_Height = rect.Width
End Property

Private Property Let CRectangle_Left(ByVal RHS As Single)
    Rect.Left = RHS
End Property
Private Property Get CRectangle_Left() As Single
    CRectangle_Left = Rect.Left
End Property

Private Property Let CRectangle_Top(ByVal RHS As Single)
    Rect.Top = RHS
End Property
Private Property Get CRectangle_Top() As Single
    CRectangle_Top = Rect.Top
End Property

Private Property Let CRectangle_Width(ByVal RHS As Single)
    Rect.Width = RHS
End Property
Private Property Get CRectangle_Width() As Single
    CRectangle_Width = Rect.Width
End Property
</pre>
</td></tr>
</table></p>

<p>In the CRectangle interface, you're using the same delegation technique that you saw before, so actually this isn't much of a shift in the organization of the class module. The benefits of this approach, however, are visible in the client application, which can now refer to either a CRectangle or a CSquare object using a single variable and through early binding:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim figures As New Collection
Dim rect As CRectangle, Top As Single

' Create a collection of rectangles and squares.
figures.Add New_CRectangle(1000, 2000, 1500, 1200)
figures.Add New_CSquare(1000, 2000, 1800)
figures.Add New_CRectangle(1000, 2000, 1500, 1500)
figures.Add New_CSquare(1000, 2000, 1100)

' Fill them, and stack them one over the other using early binding!
For Each rect In figures
    rect.FillColor = vbRed
    rect.Left = 0: rect.Top = Top
    Top = Top + rect.Height
Next
</pre>
</td></tr>
</table></p>

<A NAME="310"><h3>Add executable code to abstract classes</h3></A>
<p>When I introduced abstract classes as a means of defining interfaces, I said that abstract classes never contain executable code, but only the definition of the interface. But the previous example shows that it's perfectly legal to use the same class module as an interface blueprint for an <I>Implements</I> statement and at the same time use the code inside it.</p>

<p>The CRectangle class is a rather complex application of this technique because it works as a regular class, as a base class from which you can inherit, and as an interface that you can implement in other classes. When you begin to be acquainted with objects, this approach will become natural.</p>

<A NAME="311"><h2>The Benefits of Inheritance</h2></A>
<p>Inheritance is a great OOP technique that lets programmers derive new classes with minimum effort. Simulation of true inheritance through delegation is the next best thing, and even if it takes some coding effort you should always consider it when you're creating several classes that are similar to one another because inheritance lets you reuse code and logic, enforce a better encapsulation, and ease code maintenance:</p>

<UL>
<p><li>The derived class doesn't need to know how the base class works internally. All that matters is the interface exposed by the base class. The derived class can consider the base class a sort of <I>black box,</I> which accepts inputs and returns results. If the base class is robust and well encapsulated, the inherited class can use it safely and will inherit its robustness as well.</li></p>

<p><li>A consequence of the black box approach is that you can even &quot;inherit&quot; from classes for which you don't have the source code, for example, an object embedded in an external library.</li></p>

<p><li>If you later modify the internal implementation of one or more routines in the base class&#8212;typically to fix a bug or improve performance&#8212;all the derived classes will inherit the improvements, without your having to edit their code. You need to modify code in derived classes only when you change the interface of the base class, add new properties and methods, or delete existing ones. This is a great concept if you're interested in the easy maintenance of your code.</li></p>

<p><li>You don't need to perform validation in the derived class because it's performed in the base class. If an error occurs, it propagates through the derived class and eventually to the client code. The client code receives the error as if it were generated in the derived class, which means that inheritance doesn't affect how errors are managed and corrected in the client.</li></p>

<p><li>All the actual data is stored inside the base class, not the inherited class. In other words, you aren't duplicating data, and the derived class needs an additional object reference only for doing the delegation.</li></p>

<p><li>Calling the code in the base class imposes a slight performance penalty. But this overhead is usually minimal. I prepared a benchmark showing that on a 233-MHz machine, you can easily perform about 1.5 million delegation calls per second (in natively compiled code). This is less than one millionth of a second for each call. In most cases, this overhead will go unnoticed, especially in complex methods.</li></p>
</UL>
 

<a name="A45"></a><h3>5.7.4 Object Hierarchies</h3>

<A HREF="#A44">[Previous]</A> <A HREF="#A46">[Next]</A><P>

<A NAME="312"><h1>Object Hierarchies</h1></A>
<p>So far, I have shown you how you can store complex pieces of logic in a class and reuse these pieces elsewhere in your application and in your future projects with very little effort. But what you have seen so far are <I>individual </I>classes that solve particular programming problems. The real power of objects is striking when you use them to create larger cooperative structures, also known as <I>object hierarchies</I>.</p>

<A NAME="313"><h2>Relationships Among Objects</h2></A>
<p>If you want to aggregate multiple objects in larger structures, you need a way to establish relationships among them.</p>

<A NAME="314"><h3>One-to-one relationships</h3></A>
<p>In the world of OOP, establishing a relationship between two objects is as simple as providing the former object with an object property that points to the latter. For example, a typical CInvoice object might expose a <I>Customer</I> property (which points to a Customer object) and two properties, <I>SendFrom</I> and <I>ShipTo</I>, that can contain references to a CAddress object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CInvoice class module
Public Customer As CCustomer           ' In a real app, these would
Public SendFrom As CAddress            ' be implemented as pairs
Public ShipTo As CAddress              ' of property procedures.
</pre>
</td></tr>
</table></p>

<p>This code <I>declares </I>that the class is able to support these relationships. You actually <I>create</I> the relationships at run time when you assign a non-Nothing reference to the properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim inv As New CInvoice, cust As CCustomer
inv.Number = GetNextInvoiceNumber()    ' A routine defined somewhere else
' For simplicity, let's not worry about how the CUST object is created.
Set cust = GetThisCustomer()           ' This returns a CCustomer object.
Set inv.Customer = cust                ' This creates the relationship.
' You don't always need an explicit variable.
Set inv.SendFrom = GetFromAddress()    ' This returns a CAddress object,
Set inv.ShipTo = GetToAddress()        ' as does this one.
</pre>
</td></tr>
</table></p>

<p>Once the relationship has been established, you can start playing with the infinite possibilities offered by VBA and write code that is extremely concise and elegant:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CInvoice class module
Sub PrintHeader(obj As Object)
    ' Print the invoice on a form, PictureBox, or the Printer.
    obj.Print &quot;Number &quot; &amp; Number
    obj.Print &quot;Customer: &quot; &amp; Customer.Name
    obj.Print &quot;Send From: &quot; &amp; SendFrom.CompleteAddress
    obj.Print &quot;Ship To: &quot; &amp; ShipTo.CompleteAddress
End Sub
</pre>
</td></tr>
</table></p>


<p>Being able to deal with data already logically grouped in subproperties noticeably improves the quality and style of your code. Because, in most cases, the <I>ShipTo</I> address coincides with the address of the customer, you can offer a reasonable default for that property. You only have to delete the Public <I>ShipTo</I> member in the declaration section and add the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private m_ShipTo As CAddress

Property Get ShipTo() As CAddress
    If m_ShipTo Is Nothing Then
        Set ShipTo = Customer.Address
    Else
        Set ShipTo = m_ShipTo
    End If
End Property
Property Let ShipTo(newValue As CAddress)
    Set m_ShipTo = newValue
End Property
</pre>
</td></tr>
</table></p>

<p>Because you aren't touching the class's interface, the rest of the code&#8212;both inside and outside the class itself&#8212;continues to work without a glitch.</p>

<p>Once the relation is set, there's no way to accidentally invalidate it by tampering with the involved objects. In the CInvoice example, even if you explicitly set the <I>cust </I>variable to Nothing&#8212;or let it go out of scope, which has the same effect&#8212;Visual Basic won't destroy the CCustomer instance, and therefore the relationship between Invoice and Customer will continue to work as before. This isn't magic; it's simply a consequence of the rule that states that an object instance is released only when all the object variables that reference it are set to Nothing. In this case, the <I>Customer</I> property in the CInvoice class keeps that particular CCustomer instance alive until you set the <I>Customer</I> property to Nothing or the CInvoice object itself is destroyed. You don't need to explicitly set the <I>Customer</I> property to Nothing in the <I>Class_Terminate</I> event of the CInvoice class: When an object is released, Visual Basic neatly sets all its object properties to Nothing before proceeding with the actual deallocation. This operation decreases the reference counter of all the referenced objects, which in turn are destroyed if their reference counter goes to 0. In larger object hierarchies, it often happens that destroying an object causes a complex chain of cascading deallocation operations. Fortunately, you don't have to worry about it because it's Visual Basic's business, not yours.</p>

<A NAME="315"><h3>One-to-many relationships</h3></A>
<p>Things are a bit more complex when you create one-to-many relationships among objects. There are countless occasions when one-to-many relationships are necessary. For example, your CInvoice class might have to point to multiple product descriptions. Let's see how this problem can be solved efficiently.</p>

<p>For your object-oriented experiment, you need an auxiliary class, CInvoiceLine, which holds information about a product, ordered quantity, and unit price. What follows is a very simple implementation of it, with no validation at all. (Don't use this implementation in your real invoicing software, <I>please!</I>) The version on the companion CD also has a constructor, a <I>Description</I> property, and other features, but you need just three variables and a property procedure to get started:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A workable CInvoiceLine class module
Public Qty As Long
Public Product As String
Public UnitPrice As Currency

Property Get Total() As Currency
    Total = Qty * UnitPrice
End Property
</pre>
</td></tr>
</table></p>

<p>You can choose, basically, from two ways to implement such one-to-many relations: You can use an array of object references, or you can use a collection. The array solution is trivial:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' We can't expose arrays as Public members.
Private m_InvoiceLines(1 To 10) As CInvoiceLine

Property Get InvoiceLines(Index As Integer) As CInvoiceLine
    If Index &lt; 1 Or Index &gt; 10 Then Err.Raise 9   ' Subscript out of range
    Set InvoiceLines(Index) = m_InvoiceLines(Index)
End Property
Property Set InvoiceLines(Index As Integer, newValue As CInvoiceLine)
    If Index &lt; 1 Or Index &gt; 10 Then Err.Raise 9   ' Subscript out of range
    Set m_InvoiceLines(Index) = newValue
End Property

' In the client code
' (Assumes that we defined a constructor for the CInvoiceLine class)
Set inv.InvoiceLine(1) = New_CInvoiceLine(10, &quot;Monitor ZX100&quot;, 225.25)
Set inv.InvoiceLine(2) = New_CInvoiceLine(14, &quot;101-key Keyboard&quot;, 19.99)
' etc.
</pre>
</td></tr>
</table></p>

<p>As easy as they are to implement, arrays of object references have a lot of problems, especially because it isn't clear how you can use them effectively when you don't know in advance how many child CInvoiceLine items you need. In fact, I suggest that you use them only if you're absolutely sure that the number of possible related objects is well defined in advance.</p>

<p>The collection solution is more promising because it doesn't pose any limit to the number of related objects, and also because it permits a more natural, OO-like syntax in the client code. Besides, you <I>can </I>declare a collection (unlike an array) as a Public member, so the code in the class module is even simpler:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CInvoice class
Public InvoiceLines As New Collection

' In the client code (no need to keep track of line index)
inv.InvoiceLines.Add New_CInvoiceLine(10, &quot;Monitors ZX100&quot;, 225.25)
inv.InvoiceLines.Add New_CInvoiceLine(14, &quot;101-key Keyboards&quot;, 19.99)
</pre>
</td></tr>
</table></p>

<p>Using a collection improves the code inside the CInvoice class in other ways as well. See how easily you can enumerate all the lines in an invoice:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintBody(obj As Object)
    ' Print the invoice body on a form, PictureBox, or the Printer.
    Dim invline As CInvoiceLine, Total As Currency
    For Each invline In InvoiceLines
        obj.Print invline.Description
        Total = Total + invline.Total
    Next
    obj.Print &quot;Grand Total = &quot; &amp; Total
End Sub
</pre>
</td></tr>
</table></p>

<p>This solution has one major drawback, though. It leaves the CInvoice class completely at the mercy of the programmer who uses it. To see what I mean, just try out this bogus code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>inv.InvoiceLines.Add New CCustomer          ' No error!
</pre>
</td></tr>
</table></p>

<p>This isn't surprising, of course: Collection objects store their values in Variants, so they accept anything you throw at them. This seemingly innocent detail undermines the robustness of the CInvoice class and completely undoes all our efforts. Must we tolerate it?</p>

<A NAME="316"><h2>Collection Classes </h2></A>
<p>The solution to the robustness problem comes in the form of <I>collection classes</I>. These are special classes that you write in plain Visual Basic code and that closely resemble native Collection objects. Since you are in control of their implementation, you can establish a particular syntax for their methods and check what's being added to the collection. As you'll see, they're so alike that you won't even need to retouch the client code.</p>

<p>Collection classes are an application of the concept of inheritance that I described earlier in this chapter. A collection class keeps a reference to a private collection variable and exposes to the outside a similar interface so that the client code believes it's interacting with a real Collection. To enhance the CInvoice example, you therefore need a special CInvoiceLines collection class. (It's customary for the name of a collection class to be the plural form of the name of the base class.) Now that you have mastered the secrets of inheritance, you should have no problem understanding how the code below works.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The private collection that holds the real data
Private m_InvoiceLines As New Collection

Sub Add(newItem As CInvoiceLine, Optional Key As Variant, _
    Optional Before As Variant, Optional After As Variant)
    m_InvoiceLines.Add newItem, Key
End Sub
Sub Remove(index As Variant)
    m_InvoiceLines.Remove index
End Sub
Function Item(index As Variant) As CInvoiceLine
    Set Item = m_InvoiceLines.Item(index)
End Function
Property Get Count() As Long
    Count = m_InvoiceLines.Count
End Property
</pre>
</td></tr>
</table></p>

<p>You need to do two more things to make your CInvoiceLines collection class perfectly mimic a standard Collection: You must provide support for the default item and for enumeration.</p>

<A NAME="317"><h3>Make <I>Item</I> the default member</h3></A>
<p>Programmers are used to omitting the <I>Item</I> member's name in code when working with Collection objects. To support this feature in your collection class, you just have to make <I>Item</I> the default member of the class, which you do by issuing the Procedure Attributes command from the Tools menu, selecting <I>Item </I>in the uppermost combo box, expanding the dialog box, and typing <I>0</I> (zero) in the ProcID field. Or you can select <I>(default)</I> in the drop-down list. This procedure was explained in more detail in <a href="#A37">Chapter 6</a>.</p>

<A NAME="318"><h3>Add support for enumeration</h3></A>
<p>No collection class could hope to win the hearts of hardcore Visual Basic developers if it didn't support the <I>For Each</I> statement. Visual Basic lets you add such support, though in a rather cryptic way. First add the following procedure to your class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function NewEnum() As IUnknown
    Set NewEnum = m_InvoiceLines.[_NewEnum]
End Function
</pre>
</td></tr>
</table></p>

<p>and then invoke the Procedure Attributes dialog box. Then select the <I>NewEnum</I> member, assign it a ProcID equal to -4, tick the Hide This Member check box, and close the dialog box.</p>

<P><div class="NOTE"><blockquote>
<B>NOTE</B><HR>
Understanding how this weird technique works requires some intimate knowledge of OLE mechanisms, in particular the IEnumVariant interface. Without going into too many details, suffice it to say that when an object appears in a <I>For Each</I> statement, it has to expose an auxiliary <I>enumerator object</I>. OLE conventions dictate that the class must provide this enumerator object through a function whose ProcID is equal to -4. At run time, Visual Basic calls the corresponding procedure and uses the returned enumerator object to progress through the loop iteration.

<p>Unfortunately, you can't manufacture an enumerator object using plain Visual Basic code, but you can borrow the enumerator object exposed by the private Collection object, which is exactly what the <I>NewEnum</I> function shown previously does. Collection objects expose their enumerators using a hidden method named <I>_NewEnum</I> (search for it in the Object Browser with the Show Hidden Members option enabled), which is an invalid name in VBA and must therefore be enclosed in a pair of square brackets. By the way, Dictionary objects don't expose any Public enumerator objects, and for this reason you can't use them as the basis of your collection classes.</p>
</blockquote></div></p>

<A NAME="319"><h3>Testing the collection class</h3></A>
<p>You can now improve the CInvoice class by making it use your new CInvoiceLines class instead of the standard Collection object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the declaration section of CInvoice
Public InvoiceLines As New CInvoiceLines
</pre>
</td></tr>
</table></p>

<p>The mere fact that the CInvoiceLines class checks the type of object passed to its <I>Add</I> method is enough to morph the CInvoice class into a secure object. Interestingly, you don't strictly need any other changes in code, either inside or outside the class. Just press F5 to see it for yourself.</p>

<A NAME="320"><h3>Improving the collection class</h3></A>
<p>If collection classes were useful only to improve the robustness of your code, they would be worth the effort. But the real fun only begins here. Since you have complete control over what happens inside your class, you can decide to improve it with new methods or modify how existing ones react to their arguments. For example, you can have the <I>Item</I> method return Nothing if the element doesn't exist, instead of obnoxiously raising an error as regular collections do:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Item(index As Variant) As CInvoiceLine
    On Error Resume Next
    Set Item = m_InvoiceLines.Item(index)
End Function
</pre>
</td></tr>
</table></p>

<p>Or you can add an explicit <I>Exists</I> function as shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Exists(index As Variant) As Boolean
    Dim dummy As CInvoiceLine
    On Error Resume Next
    Set dummy = m_InvoiceLines.Item(index)
    Exists = (Err = 0)
End Function
</pre>
</td></tr>
</table></p>

<p>You can also supply a handy <I>Clear</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Clear()
    Set m_InvoiceLines = New Collection
End Sub
</pre>
</td></tr>
</table></p>

<p>All these custom members are completely generic, and you can often implement them in most of the collection classes you write. Methods and properties that are specific to the particular collection class are undoubtedly more interesting:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Evaluate the total of all invoice lines.
Property Get Total() As Currency
    Dim result As Currency, invline As CInvoiceLine
    For Each invline In m_InvoiceLines
        result = result + invline.Total
    Next
    Total = result
End Property

' Print all invoice lines.
Sub PrintLines(obj As Object)
    Dim invline As CInvoiceLine
    For Each invline In m_InvoiceLines
        obj.Print invline.Description
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>These new members simplify the structure of the code in the main class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CInvoice class
Sub PrintBody(obj As Object)
    InvoiceLines.PrintLines obj
    obj.Print &quot;Grand Total = &quot; &amp; InvoiceLines.Total
End Sub
</pre>
</td></tr>
</table></p>

<p>Of course, the total amount of code doesn't vary, but you have distributed it in a more logical way. Each object is responsible for what happens inside it. In real projects, this approach has many beneficial consequences in code testing, reuse, and maintenance.</p>

<A NAME="321"><h3>Add real constructors to the game</h3></A>
<p>Collection classes offer one additional benefit that object-oriented programmers can't live without: <I>real constructors</I>. I have already explained that the lack of constructor methods is a major defect in the otherwise decent support for encapsulation supplied by Visual Basic.</p>

<p>If you wrap a collection class around a base class&#8212;as CInvoiceLines and CInvoiceLine do, respectively&#8212;you can create a constructor by adding a method to the collection class that creates a new base object and adds it to the collection in one single step. In most cases, this double operation makes a lot of sense. For example, a CInvoiceLine object would have a very hard life outside a parent CInvoiceLines collection. (Have you ever seen a lone invoice line wandering around all by itself in the external world?) It turns out that such a constructor is just a variant of the <I>Add </I>method:</p></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Create(Qty As Long, Product As String, UnitPrice As Currency) _
    As CInvoiceLine
    Dim newItem As New CInvoiceLine ' Auto-instancing is safe here.
    newItem.Init Qty, Product, UnitPrice
    m_InvoiceLines.Add newItem
    Set Create = newItem            ' Return the item just created.
End Function

' In the client code
inv.InvoiceLines.Create 10, &quot;Monitor ZX100&quot;, 225.25
inv.InvoiceLines.Create 14, &quot;101-key Keyboard&quot;, 19.99
</pre>
</td></tr>
</table></p>

<p>A key difference between the <I>Add</I> and the <I>Create</I> methods is that the latter also returns the object just added to the collection, which is never strictly necessary with <I>Add</I> (because you already have a reference to it). This greatly simplifies how you write your client code. For example, say that the CInvoiceLine object supports two new properties, <I>Color</I> and <I>Notes</I>. Both are optional, and as such they shouldn't be included among the required arguments of the <I>Create</I> method. But you can still set them using a concise and efficient syntax, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With inv.InvoiceLines.Create(14, &quot;101-key Keyboard&quot;, 19.99)
    .Color = &quot;Blue&quot;
    .Notes = &quot;Special layout&quot;
End With
</pre>
</td></tr>
</table></p>

<p>Depending on the nature of the specific problem, you can build your collection classes with both the <I>Add</I> and <I>Create</I> methods, or you can just use one of the two. It's important, however, that if you leave the <I>Add</I> method in the collection, you add some form of validation to it. In most cases&#8212;but not always&#8212;you just need to let the class validate itself, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Add(newItem As CinvoiceLine)
    newItem.Init newItem.Qty, newItem.Product, newItem.UnitPrice
    ' Add to the collection only if no error was raised.
    m_InvoiceLines.Add newItem, Key
End Sub
</pre>
</td></tr>
</table></p>

<p>If you have encapsulated an inner class into its parent collection class in such a robust way, it's impossible for any developer to accidentally or intentionally add an incoherent object to the system. The worst that they can do is create a disconnected CInvoiceLine object, but they won't be able to add it to your self-protected CInvoice object.</p>

<A NAME="322"><h2>Full-Fledged Hierarchies</h2></A>
<p>Once you know how to create efficient collection classes, there isn't much to stop you from building complex and incredibly powerful object hierarchies, such as those exposed by well-known models Microsoft Word, Microsoft Excel, DAO, RDO, ADO, and so on. You already have all the pieces in the right places and only need to take care of details. Let me show you a few recurring problems when building hierarchies and how you can fix them.</p>

<A NAME="323"><h3>Class static data</h3></A>
<p>When you build a complex hierarchy, you're often faced with the following problem: How can all the objects of a given class share a common variable? For example, it would be great if the CInvoice class were able to correctly set its <I>Number</I> property in its <I>Class_Initialize</I> event so that from that point on <I>Number</I> could be exposed as a read-only property. This would improve the formal correctness of the class because it would guarantee that there aren't two invoices with the same number. This problem would be quickly solved if it were possible to define <I>class static variables</I> in the class module, that is, variables that are shared among all the instances of the class itself. But this is beyond the current capabilities of the VBA language.</p>

<p>The easy and obvious solution to this problem is to use a global variable in a BAS module, but that would break the class's encapsulation because anyone could modify this variable. Any other similar approach&#8212;such as storing the value in a file, in a database, in the Registry, and so on&#8212;is subject to the same problem. Fortunately, the solution is really simple: Use a parent collection class to gather all the instances of the class that share the common value. Not only do you solve the specific problem, you can also provide a more robust constructor for the base class itself. In the CInvoice sample program, you can create a CInvoices collection class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CInvoices Collection class
Private m_LastInvoiceNumber As Long
Private m_Invoices As New Collection

' The number used for the last invoice (read-only)
Public Property Get LastInvoiceNumber() As Long
    LastInvoiceNumber = m_LastInvoiceNumber
End Property

' Create a new CInvoice item, and add it to the private collection.
Function Create(InvDate As Date, Customer As CCustomer) As CInvoice
    Dim newItem As New CInvoice
    ' Don't increment the internal variable yet!
    newItem.Init m_LastInvoiceNumber + 1, InvDate, Customer
    ' Add to the internal collection, using the number as a key.
    m_Invoices.Add newItem, CStr(newItem.Number)
    ' Increment the internal variable now, if no error occurred.
    m_LastInvoiceNumber = m_LastInvoiceNumber + 1
    ' Return the new item to the caller.
    Set Create = newItem
End Function
' Other procedures in the CInvoices collection class ... (omitted)
</pre>
</td></tr>
</table></p>

<p>Similarly, you can create a CCustomers collection class (not shown here) that creates and manages all the CCustomer objects in the application. Now your client code can create both CInvoice and CCustomer objects in a safe way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' These variables are shared in the application.
Dim Invoices As New CInvoices
Dim Customers As New CCustomers

Dim inv As CInvoice, cust As CCustomer
' First create a customer.
Set cust = Customers.Create(&quot;Tech Eleven, Inc&quot;)
cust.Address.Init &quot;234 East Road&quot;, &quot;Chicago&quot;, &quot;IL&quot;, &quot;12345&quot;
' Now create the invoice.
Set inv = Invoices.Create(&quot;12 Sept 1998&quot;, cust)
</pre>
</td></tr>
</table></p>

<p>At this point, you can complete your artwork by creating a top-level class named CCompany, which exposes all the collections as properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The CCompany class (the company that sends the invoices)
Public Name As String 
Public Address As CAddress
Public Customers As New CCustomers
Public Invoices As New CInvoices
' The next two collections are not implemented on the companion CD.
Public Orders As New COrders           
Public Products As New CProducts       
</pre>
</td></tr>
</table></p>

<p>You enjoy many advantages when you encapsulate classes in this way, a few of which aren't immediately apparent. Just to give you an idea of the potential of this approach, let's say that your boss asks you to add support for multiple companies. It won't be a walk in the park, but you can do it relatively effortlessly by creating a new CCompanies collection class. Since the CCompany object is well isolated from its surroundings, you can reuse entire modules without the risk of unexpected side effects.</p>

<A NAME="324"><h3>Backpointers</h3></A>
<p>When you deal with hierarchies, a dependent object frequently needs access to its parent; for example, to query one of its properties or to invoke its methods. The natural way to do that is to add a <I>backpointer</I> to the inner class. A backpointer is an explicit object reference to its parent object. This can be a Public property or a Private variable.</p>

<p>Let's see how this fits in our sample invoicing application. Say that when an invoice prints itself it should add a warning to the customer if there are any other invoices that must be paid and tell the customer the total sum due. To do this, the CInvoice class must scan its parent CInvoices collection and so needs a pointer to it. By convention, this backpointer is named <I>Parent </I>or <I>Collection</I>, but feel free to use whatever name you prefer. If you want to make this pointer Public, it's essential that it be a read-only property, at least from the outside of the project. (Otherwise, anyone could detach an invoice from the CInvoices collection.) You can achieve this by making the pointer's <I>Property Set</I> procedure with a Friend scope:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CInvoice class
Public Paid As Boolean
Private m_Collection As CInvoices         ' The actual backpointer

Public Property Get Collection() As CInvoices
    Set Collection = m_Collection
End Property
Friend Property Set Collection(newValue As CInvoices)
    Set m_Collection = newValue
End Property
</pre>
</td></tr>
</table></p>

<p>The parent CInvoices collection class is now responsible for correctly setting up this backpointer, which it does in the <I>Create </I>constructor method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the CInvoices' Create method (rest of the code omitted)
newItem.Init m_LastInvoiceNumber + 1, InvDate, Customer
<B>Set newItem.Collection = Me</B>
</pre>
</td></tr>
</table></p>

<p>Now the CInvoice class knows how to encourage recalcitrant customers to pay their bills, as you can see in Figure 7-9 and in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Sub PrintNotes(obj As Object)
    ' Print a note if customer has other unpaid invoices. 
    Dim inv As CInvoice, Found As Long, Total As Currency
    For Each inv In Collection
        If inv Is Me Then
            ' Don't consider the current invoice!
        ElseIf (inv.Customer Is Customer) And inv.Paid = False
		Then
            Found = Found + 1
            Total = Total + inv.GrandTotal
        End If
    Next
    If Found Then
        obj.Print &quot;WARNING: Other &quot; &amp; Found &amp; _
            &quot; invoices still waiting to be paid ($&quot; &amp; Total &amp; &quot;)&quot;
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('F07ph09x.htm')"> <img src="F07ph09.JPG" width=404 height=386 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-9.</B> <i>Don't let the rudimentary user interface fool you: There are as many as eight classes working together to supply you with a skeleton for a robust invoicing application.</i><!--/caption-->
</p>

<A NAME="325"><h3>Circular references</h3></A>
<p>No description of object hierarchies would be complete without an acknowledgment of the circular reference problem. In short, you have a <I>circular reference</I> when two objects point to each other, either directly or indirectly (that is, through intermediate objects). The invoicing hierarchy didn't include a circular reference until you added the <I>Collection </I>backpointer to the CInvoice class. What makes circular references a problem is that the two involved objects will keep each other alive indefinitely. This isn't a surprise; it's just the same old rule that governs the lives of objects.</p>

<p>In this case, unless we take appropriate steps, the reference counter of the two objects will never decrease to 0, even if the main application has released all its references to them. This means that you have to forego a portion of memory until the application comes to an end and wait for Visual Basic to return all its memory to Windows. It isn't just a matter of wasted memory: In many sophisticated hierarchies, the robustness of the entire system often depends on the code inside the <I>Class_Terminate</I> event (for example, to store properties back in the database). When the application ends, Visual Basic correctly calls the <I>Class_Terminate</I> event in all objects that are still alive, but that might happen after the main application has already closed its own files. The likely result is a corrupted database.</p>

<p>Now that I have warned you about all the possible nasty consequences of circular references, let me scare you even more: Visual Basic doesn't offer any definitive solution to this problem. You have only two half-solutions, both of which are largely unsatisfactory: You avoid circular references in the first place, and you manually undo all circular references before your application destroys the object reference.</p>

<p>In the invoicing example, you can avoid backpointers if you let the inner CInvoice class access its parent collection using a global variable. But you know that this is forbidden behavior that would break class encapsulation and would compromise the application's robustness. The second solution&#8212;manually undoing all circular references&#8212;is often too difficult when dealing with complex hierarchies. Above all, it would force you to add tons of error-handling code, just to be sure that no object variable is automatically set to Nothing by Visual Basic before you have the opportunity to resolve all the existing circular references.</p>

<p>The only good news I can tell you is that this problem can be solved, but it requires some really advanced, low-level programming techniques based on the concept of <I>weak object pointers</I>. This technique is well beyond the scope of this book, and for this reason I won't show any code here. However, the bravest of you might have a look at the CInvoice class on the companion CD. I have bracketed these special advanced sections using <I>#If</I> directives, so you can easily see what happens using regular and weak object pointers. You probably need to review how objects are stored in memory and what an object variable really is (see <a href="#A37">Chapter 6</a>), but the comments in the code should help you understand what the code actually does. Be sure to study this technique before using it in your own applications because when you play with objects at this low level, any mistake causes a GPF.</p>

<A NAME="326"><h2>The Class Builder Add-In</h2></A>
<p>Visual Basic 6 comes with a revamped version of the Class Builder Add-In. This is a major utility that lets you design the structure of a class hierarchy, create new classes and collection classes, and define their interfaces down to the attributes of each property, method, or event. (See Figure 7-10.) The new version adds support for enumerated properties and optional arguments of any data type, as well as a few minor enhancements.</p>

<p>The Class Builder Add-In is installed by the Visual Basic 6 setup routine, so you just have to open the Add-In Manager dialog box and double-click on the VB6 Class Builder Utility. When you close the window, a new item in the Add-In menu lets you invoke the utility.</p>

<p>
<A HREF="javascript:fullSize('F07ph10x.htm')"> <img src="F07ph10.JPG" width=404 height=282 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 7-10.</B> <i>The Class Builder Add-In. A child class (CPoint, in this case) always corresponds to a property in its parent class (CLine).</i><!--/caption-->
</p>

<p>Using the Class Builder Add-In is very simple, and I won't show in detail how you create new classes and their properties and methods. Its user interface is so clear that you won't have any problem using it. Instead, I focus on a few key points that can help you get the most from this utility.</p>

<UL>
<p><li>You should use the Class Builder Add-In from the very start of your design process. This is important, because even if the add-in is able to recognize all the classes in the current project, it can establish the relationships among them only if you created them from within the add-in.</li></p>

<p><li>You can create top-level classes or dependent classes, depending on which item in the leftmost pane is highlighted when you invoke the New command from the File menu. If you create a child class, the Add-In automatically inserts in the parent a property that points to the new class. You can move a class around in the hierarchy by using drag-and-drop in the leftmost pane.</li></p>

<p><li>While the Class Builder doesn't support inheritance, you can create a class that's based on another existing class. In this case, the Class Builder copies all the necessary code from the existing class into the new class module.</li></p>

<p><li>The Class Builder utility is particularly useful for building collection classes: You simply point to the class that's to be contained in the collection, and the Add-In correctly creates the collection class with a suitable <I>Add</I> method, an <I>Item</I> default method, support for enumeration, and so on.</li></p>

<p><li>Finally, you have some degree of control over how child objects are created inside parent classes. You can have them instantiated in the parent <I>Initialize</I> event (which slows down the parent's creation but makes access more efficient), or you can have child objects created in the <I>Property Get</I> procedure of the parent if necessary (which speeds up the parent's creation but adds overhead to each access).</li></p>
</UL>
 
<p>A drawback of the Class Builder is that you have no control over the code it generates. For example, it uses particular naming conventions for arguments and variables and adds a lot of pretty useless remarks, which you'll probably want to delete as soon as you can. Another issue is that once you begin to use it in a project, you're virtually forced to invoke it any time you want to add a new class&#8212;otherwise, it won't be able to correctly place the new class in the hierarchy. Even with these limitations, you'll find that creating hierarchies with the Class Builder Add-In is so simple that you can easily get carried away.</p>

<p>This chapter concludes our journey in object-oriented land. If you care about well-designed software and code reuse, you'll surely agree with me that OOP is a fascinating technology. When working with Visual Basic, however, a firm understanding of how classes and objects work is necessary to tackle many other technologies, including database, client/server, COM, and Internet programming. I'll frequently use, in the remaining sections of this book, all the concepts you've encountered in this chapter.</p>

<a name="A46"></a><h2>5.8 Chapter 8 -- Databases</h2>

<A HREF="#A45">[Previous]</A> <A HREF="#A47">[Next]</A><P>


<font size="+3">Chapter 8</font>

<A NAME="327"><h1>Databases</h1>  </A>

<p>All the surveys that I'm aware of among Visual Basic developers invariably 
conclude that the vast majority of Visual Basic programs are database and client/server 
applications. This isn't surprising because the language has a lot to offer developers. 
And this trend will surely grow now that Visual Basic 6 has introduced so many new 
tools for database and client/server (and, yes, Internet) programming.</p>

<p>In this chapter, I introduce you to database programming and show you 
how to use the ADO binding mechanism with bound controls and the ADO Data 
control, but the concepts underlying these technologies can be applied to other data 
consumers or sources.</p>

<p>Before showing what you can do with ADO in Visual Basic 6, however, I 
must quickly recapitulate database architectures and data access techniques.</p>


<a name="A47"></a><h3>5.8.1 The Data Access Saga</h3>

<A HREF="#A46">[Previous]</A> <A HREF="#A48">[Next]</A><P>

<A NAME="328"><h1>The Data Access Saga</h1></A>

<p>All the new database-related capacities in Visual Basic 6 are based on 
Microsoft ActiveX Data Objects (ADO), a technology that lets you access any database or 
data source, as long as someone has written an OLE DB provider that connects to 
that source.</p>

<p>Figure 8-1 summarizes the many ways you can get to a 
data source in Visual Basic 6. As you can see, data access methods differ greatly in the 
number of layers that sit between your application and the database you're connecting to. 
In this book, however, I concentrate on ADO technology and give you only glimpses 
of the others. Deciding not to cover popular data access techniques such as DAO and 
RDO has been a difficult choice, but I had to make it to keep this book a reasonable size. 
I was comforted in this choice by the fact that DAO and RDO haven't been improved 
at all in Visual Basic 6; so if you already mastered those techniques in Visual Basic 
5, there's nothing new for you to see. Both these older technologies will be 
eventually replaced by ADO. You can find several good books and other information 
sources about DAO and RDO, such as the superb <I>Hitchhiker's Guide to Visual Basic and 
SQL Server</I> by William R. Vaughn (Microsoft Press, 1998). Although I don't have the 
space to describe DAO and RDO in depth, you need at least a broad understanding 
of how they work. To help you understand the benefits that ADO brings you, I 
must describe the tools that were available before it and how ADO relates to those 
older technologies.</p>

<p>
<A HREF="javascript:fullSize('F08ph01x.htm')"> <img src="F08ph01.JPG" width=404 height=316 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-1. </B> <I>Accessing a database using ODBC, DAO, RDO, and ADO. </I><!--/caption-->
</p>


<A NAME="329"><h2>ODBC</h2></A>

<p>ODBC stands for Open Database Connectivity and is a set of functions that lets 
you connect to a local or remote database. Microsoft launched this technology as a 
means of accessing several databases in different formats&#8212;dBASE, Microsoft 
FoxPro, Microsoft Access, Microsoft SQL Server, Oracle, or even plain comma-delimited 
text files&#8212;using a common API. The machine the application runs on connects to a 
DLL called the ODBC Driver Manager, which in turn sends commands to (and 
retrieves data from) an ODBC driver specific to the particular database you want to 
use. Visual Basic 2 was the first version of the language that was capable of 
connecting to an ODBC source. Since then the number of available ODBC drivers has grown 
very rapidly, to the point that it's nearly impossible to find a commercial database for 
which no ODBC driver exists.</p>

<p>The challenge of ODBC is to provide a common interface to all these 
different databases. In theory, you can prepare an application that uses ODBC to talk to 
an Access database and then upsize to an SQL Server database simply by changing 
the back-end ODBC driver and a few statements in the source code. You can do 
this because all the commands you send to the database are standard SQL statements. 
SQL (Structured Query Language) is a programming language specialized for working 
with databases. (See &quot;<A HREF="#361">Crash Course in SQL</A>&quot; later in this chapter for an introduction to 
SQL). In practice, however, while the ODBC layer does what it can to convert these 
standard SQL commands into the particular database's dialect, an ODBC 
programmer frequently has to bypass the ODBC translation engine and send commands 
directly to the database. (These are known as <I>pass-through 
</I>queries or commands.) Needless to say, having to do this hinders the portability of such an application to 
another database.</p>

<p>ODBC is efficient, at least compared with most other data access 
techniques. Another advantage of ODBC is that it supports both 16-bit and 32-bit APIs, so 
it's one of the few techniques available to Visual Basic 3 and Visual Basic 4/16 
applications. ODBC version 3 has added several performance-boosting techniques, 
such as connection pooling, which means that an ODBC driver on the client side 
can reuse existing connections in a way that's transparent to your program. For 
example, your code can open and close multiple connections to a database, but the 
ODBC driver actually uses the same connection. Because opening a connection is a 
lengthy operation&#8212;it can take several seconds each time&#8212;connection pooling is bound 
to make your application much more responsive. Microsoft Transaction Server 
uses connection pooling to improve the performance of connections opened by 
ActiveX components that run under it.</p>

<p>Using ODBC, however, isn't easy, especially for Visual Basic programmers. 
The set of API functions is complex, and if you make a mistake you often crash 
your application with a fatal error. (If this occurs while you're in the IDE, you can't 
even save your code.) For this reason, relatively few Visual Basic programmers write 
applications that directly call ODBC functions. Interestingly, most other data 
access techniques available to Visual Basic can use ODBC drivers as intermediate layers, 
so sometimes you can augment other techniques (typically those based on RDO) 
with direct API calls. Unfortunately, you can't do that with ADO: 
Even though ADO internally uses an ODBC driver, you can't mix ADO code and ODBC API code 
for the same connection.</p>

<p>Even if you're not going to directly use ODBC API calls in your Visual 
Basic programs, you should become familiar with the basic concepts on which this 
technology is based. For example, one concept that you'll probably deal with even 
when working with ADO is the Data Source Name (DSN). A DSN is a set of values that 
an application needs to correctly connect to a database. It typically includes the 
name of the ODBC driver you want to use, the name of the machine that hosts the 
database server (if you're working with client-server engines such as SQL Server or 
Oracle), the name or path of the specific database, the timeout of the connection (that is, 
the number of seconds after which the ODBC driver gives up and returns an error to 
the calling application when trying to establish the connection), the name of the 
calling workstation and application, and so on.</p>

<p>You can create a DSN in several ways, inside or outside the Visual Basic 
6 environment. The command center for ODBC is a Control Panel applet that lets 
you create DSNs and set other ODBC configuration values. You can choose from 
several types of DSNs. A <I>User DSN </I>is stored in the system Registry, can be used only by 
the current user, and can't therefore be shared with others. A 
<I>System DSN </I>is also stored in the Registry but is visible to all other users, including Microsoft Windows NT 
services. Finally, a <I>File DSN </I>is stored in a .dsn file and can be shared by all users 
(provided that the correct ODBC driver is installed on their machines). File DSNs can 
be easily copied on other machines, so they make the installation phase easier; on 
the other hand, the application needs to know where the DSN is located, so the 
code must provide the complete path to the .dsn file, and you need to store the path 
somewhere (in an INI file, for example). This is never an issue with User or System DSNs.</p>

<p>You aren't forced to work with DSNs if you don't want to. When you're 
working with ODBC, you can provide all the information needed for the 
connection&#8212;driver name, database name and path, and so on&#8212;right in your code. These are 
the so-called DSN-less connections, which are usually more efficient because you 
save the ODBC driver a trip to the Registry or to a File DSN. But DSN-less 
techniques require a bit more work from the developer.</p>

<p>The first three tabs of the ODBC Control Panel applet dialog box let you 
create, delete, and configure DSNs of all types. As you can see in Figure 8-2, creating 
a DSN often requires that you open several nested dialog boxes. The Drivers tab 
displays all the installed ODBC drivers and lets you compare version numbers 
(which is sometimes important when something doesn't work as expected on a 
customer's machine). Visual Basic 6 comes with several ODBC drivers (some of which are 
visible in Figure 8-3), but you can also purchase other drivers from third-party vendors.</p>

<p>You use the Tracing tab of the ODBC Data Source Administrator applet to 
define the path of the log file for all ODBC operations, which is a lifesaver when 
you're debugging ODBC-based applications. (This option is vital also when you are 
indirectly using ODBC through DAO, RDO, or ADO.) The latest version of the 
ODBC Data Source Administrator applet includes the ability to start Microsoft Visual 
Studio Analyzer, a tool that lets you monitor the activity of your programs over the network.</p>

<p>In the Connection Pooling tab, you can enable or disable connection 
pooling for each specific ODBC driver. You rarely need to change these settings, though, 
and I suggest that you not play with them unless you're pretty sure about what 
you're doing. Finally, in the About tab, you can check the position and versions of all 
the code DLLs of the ODBC subsystem.</p>

<p>
<A HREF="javascript:fullSize('F08ph02x.htm')"> <img src="F08ph02.JPG" width=404 height=298 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-2. </B> <I>Creating a User DSN for a Microsoft Jet database. The contents of nested dialog boxes depend on the ODBC driver you're connecting to. </I><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('F08ph03x.htm')"> <img src="F08ph03.JPG" width=404 height=330 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-3. </B> <I>Some of the ODBC drivers that can be installed by the Visual Basic 6 setup procedure.</I><!--/caption-->
</p>


<A NAME="330"><h2>DAO</h2></A>

<p>DAO, or Data Access Objects, has a place in the heart of all programmers who 
began to develop database applications with Visual Basic 3. DAO is an 
object-oriented interface to Microsoft Jet, the engine that powers Access. Developers can design 
an MDB database using Access and then use DAO from a Visual Basic application to 
open the database, add and retrieve records, and manage transactions. The best thing 
about DAO is that it doesn't limit you to Jet databases because you can directly open 
any database for which an ODBC driver exists. Or you can use Jet 
<I>attached tables,</I> which are virtual tables that appear to belong to an MDB database but actually retrieve 
and store data in other ODBC sources.</p>

<p>Even if you can use DAO to access non-Jet sources, you can clearly see that 
it was devised with Access databases in mind. For example, even if your 
application doesn't use MDB databases, you still have to load the entire Jet engine DLL in 
memory. (And you also have to distribute it to your users). Even worse, DAO doesn't 
expose many of the capabilities that you could use if working directly with ODBC API 
functions. For example, you can't perform asynchronous queries or connections 
using DAO, nor can you work with multiple result sets.</p>

<p>Visual Basic 3 also contained the first release of the Data control. This 
control lets you <I>bind </I>one or more controls on a form to a data source and offers buttons 
for navigating through the records of the database table you've connected to. At first, 
it seems that the Data control is a great tool because it lets you quickly create 
effective user interfaces to work with your data. After some testing, however, 
developers tend to abandon the Data control because its many limitations are difficult to 
overcome. Apart from performance considerations, the Data control has one serious 
disadvantage: It ties your front-end applications to the data in the back-end 
database. If you later want to access data in another database, you have to revise all the 
forms in your application. If you want to add complex validation rules to database 
fields, you must add code in every single module of the program. These (and other 
problems) are the typical defects of a 2-tier architecture, which in fact is being 
abandoned in favor of 3-tier (or n-tier) architectures, where one or more intermediate 
layers between the application and the database provide services such as data 
validation, business rules, workload balance, and security. Alas, if you want to embrace 
the n-tier philosophy, you should forget about the Data control.</p>

<p>Visual Basic 4 included the improved DAO 3.0 version, which features a 
special DLL that allows programmers who work with 32-bit technology to access 
16-bit databases. Visual Basic 5 programmers can use DAO 3.5. In the Visual Basic 6 
package, you'll find DAO 3.51, which is substantially similar to the previous one. 
This suggests that Microsoft doesn't plan to improve DAO further, even though version 
4 has been announced for Microsoft Office 2000.</p>

<A NAME="331"><h2>RDO</h2></A>

<p>RDO, or Remote Data Objects, is the first attempt by Microsoft to combine the 
simplicity of DAO with the power of direct ODBC API programming. RDO is an 
object model vaguely patterned after DAO, but it bypasses the Jet Engine and the DAO 
DLL and works directly with the underlying ODBC drivers. Applications based on 
RDO load only a small DLL instead of the resource-hungry Jet engine. Even more 
important, RDO was specifically designed to work with ODBC sources, so it exposed 
functionality that couldn't be accessed from DAO. RDO is 32-bit technology, 
however, so you can't use it from 16-bit applications.</p>

<p>RDO 1 was introduced with Visual Basic 4, and the engine was improved 
in Visual Basic 5, which includes RDO 2. This latest version is a mature product 
and also supports a new programming model based on events, which is great for 
working with asynchronous operations. The development of RDO seems to have 
stopped, though, because Visual Basic 6 still includes version 2, with no apparent 
improvement over the version shipped with Visual Basic 5. So RDO could be another 
dead end. Although Microsoft seems committed to actively supporting RDO, it seems 
to be betting everything on ADO.</p>

<p>RDO 1 and 2 came with the RemoteData control, which works in much the 
same way as the Data control and lets you bind controls to remote data sources. In 
this sense, the RemoteData control shares all the advantages and disadvantages of the 
Data control, including its problems with n-tier architectures.</p>

<A NAME="332"><h2>ODBCDirect</h2></A>

<p>Visual Basic 5 included yet another data access technology, named 
ODBCDirect, which allowed programmers to employ RDO using a DAO syntax. ODBCDirect 
was conceived as a transition technique that would help Visual Basic programmers 
move their DAO/Jet applications to more powerful client/server architectures. In 
theory, by changing just a few properties, an existing DAO program that stores data in a 
Jet database might be converted to a client/server application that connects to any 
ODBC source. ODBCDirect shouldn't be regarded as a technology of its own. It's more 
like a trick that you can use to save time in converting applications, and nothing 
more. Most of the RDO 2 new features&#8212;the new event programming model, for 
example&#8212;can't be exploited by ODBCDirect because it has to be code-compatible with 
DAO. Besides, being based on RDO, ODBCDirect works only with 32-bit applications. 
For these reasons, unless you have very big and complex DAO/Jet Visual Basic 
applications to port to another database as quickly as possible, don't waste your time 
on ODBCDirect.</p>

<A NAME="333"><h2>OLE DB</h2></A>

<p>OLE DB is a low-level data access technology with which Microsoft intends to 
eventually replace ODBC as the primary means for connecting to databases. The OLE 
DB counterpart to ODBC drivers are the OLE DB providers, which work as bridges 
between applications and databases. Although OLE DB is a relatively recent technology, 
you can find OLE DB providers for most popular databases, and others will be 
released before long. In spite of their apparent similarities, ODBC and OLE DB 
technologies are profoundly different. First, OLE DB is based on COM, an architecture that 
has proven robust enough to move large quantities of data across the network. 
Second, OLE DB lends itself to the task of connecting any type of data source, not just 
relational and ISAM (indexed sequential access mode) databases, which are the 
natural field for ODBC drivers.</p>

<p>OLE DB is part of Microsoft's Universal Data Access (UDA) strategy, 
which enables you to read and process data where it is, without first converting it 
and importing it to a more traditional database. Using OLE DB providers, you can 
process data in e-mail messages, HTML pages, spreadsheet and text documents, and even 
in more exotic data sources. Visual Basic 6 itself comes with providers for Microsoft 
Jet, SQL Server, FoxPro, text files, and Oracle databases. You can download other 
OLE DB providers from the Microsoft Web site, and I've heard of other providers from 
third-party vendors.</p>

<p>In the transition between the ODBC and the OLE DB worlds, you can use 
a special OLE DB provider, named MSDASQL&#8212;also known by its code name, 
Kagera&#8212;that works as a bridge to any ODBC source. Instead of connecting directly to 
the database, you can use this special provider to connect to an ODBC driver, which 
in turn reads and writes data in the database. This additional layer has a 
performance hit, of course, but you should look at it as a short-term solution to a problem 
that will disappear when more providers are available.</p>

<A NAME="334"><h2>ADO</h2></A>

<p>ADO is the high-level interface to OLE DB. It fills more or less the same role that 
RDO does for the ODBC APIs. Like ODBC APIs, OLE DB is a low-level interface that 
can't be easily (or at all) accessed from high-level languages such as Visual Basic. 
ADO builds on OLE DB to provide functions that aren't available directly in OLE DB 
or that would make stringent demands on the coding abilities of a programmer. 
ADO matches most of RDO's capacities: Both can make 
asynchronous queries and connections and optimistic batch updates. ADO adds great new features such as 
file-based and stand-alone Recordsets, hierarchical Recordsets, and more.</p>

<p>The single most important feature of ADO is probably its extensibility. 
Instead of being a complex and monolithic object hierarchy as DAO and RDO are, 
ADO consists of fewer objects that can be combined in more ways. New features can 
be added to ADO in the form of special OLE DB providers, such as the 
MSDataShape provider, which offers hierarchical Recordset objects to other providers. Microsoft 
also is making new features available in ADO in the form of separate libraries that 
link dynamically to the core ADO library. For example, the new ADO 2.1 library 
includes support for Data Definition Language and security (that is, the creation of new 
database tables, users, and groups of users), Jet replicas, and multidimensional 
Recordsets. Because these additions are distinct libraries, you don't have to distribute them 
with your applications if you don't use them. This contrasts with DAO and RDO, each 
of which comprises one larger DLL that embeds all the features (and which you 
have to distribute in its entirety even if you use a small fraction of its potential).</p>

<p>Another nice ADO feature is that you can use it from within HTML pages in 
a browser such as Internet Explorer or on a server inside an Active Server Page 
hosted on Internet Information Server. One ADO subsystem, named Remote Data 
Services, even lets you send a bunch of records to a client browser or activate COM 
components remotely over the Internet.</p>

<p>The only relevant defect of ADO is that it's a recent technology that hasn't 
proven its robustness in a large number of real-world applications, as DAO and RDO 
have. For example, I found a few bugs in ADO 2, even though my experience is that 
most of these problems were caused by the OLE DB provider, not ADO itself. This 
distinction is important because you can often fix these bugs by simply updating 
the provider when a new version is released. In fact, I found that the providers 
for Microsoft Jet 4.0 and SQL Server 7.0 are noticeably better than the versions for 
Jet 3.51 and SQL Server 6.5. (The latter are the providers distributed with Visual Basic 6.) 
I expect that by the time you read this book, most major problems with ADO will 
be fixed. On the other hand, the only alternative to ADO is to continue to use DAO 
or RDO, but, as I've explained, these technologies aren't going to be improved 
significantly in the future.</p>

<p>You can see that choosing the data access technique to use is a complex 
matter. My suggestion is simple, though: If you're maintaining or updating an 
existing application based on DAO or RDO (or ODBC APIs, if you're a brave 
programmer), wait until you see where ADO is going. If you're beginning a new application, 
give ADO a try, especially if you plan to update and maintain it for several years or if 
you plan to eventually port it to the Internet.</p>

<p>The good news is that Visual Basic 6 includes several tools and facilities 
for creating ADO applications quickly and effectively. For this reason, the rest of this 
book focuses on ADO exclusively.</p>


<a name="A48"></a><h3>5.8.2 Visual Database Tools</h3>

<A HREF="#A47">[Previous]</A> <A HREF="#A49">[Next]</A><P>

<A NAME="335"><h1>Visual Database Tools</h1></A>

<p>Visual Basic 5 Enterprise Edition was the first language version that integrated a 
suite of tools for working with databases from within the IDE. Before that, you had to 
switch to an external program, such as Access, SQL Server Enterprise Manager, or 
FoxPro, whenever you needed to create or edit a table, set a relationship between two 
tables, design a query, and so on. The Visual Database Tools suite has been inherited 
by Visual Basic 6, and most of its tools are also available in the Professional Edition. 
The new version of Visual Database Tools is better integrated in the environment, and 
in fact some menus in the IDE&#8212;most notably the Query menu, the Diagram menu, 
and some commands in the File, Edit, and View menus&#8212;become active only when 
a window of Visual Database Tools has the focus.</p>

<p>In this section, I review a few of these tools and show how you can use 
them to manage your databases. Remember that the Database Designer window and 
the Query Designer window are available only with Visual Basic 6 Enterprise Edition.</p>

<A NAME="336"><h2>The DataView Window</h2></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The entry point for using Visual Database Tools is the DataView window, which 
you can display using the corresponding command in the View menu or by clicking 
on its yellow icon in the standard toolbar. This window is a repository for all the 
database connections you want to have available at all times; these connections are 
called <I>data links</I>. For example, the DataView window shown in Figure 8-4 contains data links to the Biblio and NWind Jet databases and two connections to 
the Pubs SQL Server database, one of which connects through the native OLE DB 
provider for SQL Server while the other connects through the MSDASQL provider 
for ODBC sources. You can open these data link nodes and display all the tables, 
views, diagrams, and stored procedures in the database. (In an Oracle database, you'll 
see two more folders, Functions and Synonyms.) You can expand a table or a view 
node to see the individual fields that make up that particular table or view, and you 
can look at an object's properties by right-clicking on it and selecting the Properties 
menu command. Let me summarize what you can do with the DataView window:</p>

<UL>
<p><li> You can create new data links and add them to the DataView window 
by clicking on the rightmost icon on the DataView window's toolbar. You 
can also delete an existing data link&#8212;or any other object displayed in 
the window&#8212;by clicking on it and pressing the Del key or by 
right-clicking on it and selecting the Delete command from the pop-up menu. Data 
links are stored in the system Registry and aren't associated with any 
particular Visual Basic project.</li></p>

<p><li> You can see the contents of a table or a view (as shown in Figure 8-5) by double-clicking on it or by selecting the Open 
command from the pop-up menu. If you have the right permissions, you can 
even edit the values displayed in the grid and save your changes to the 
underlying database.</li></p>

<p><li> You can create a new database table by right-clicking on the Tables 
folder and selecting the New Table menu command. In the same menu, 
you'll find other commands for showing or hiding system tables or for 
filtering tables according to their owner. Keep in mind that these 
capabilities aren't supported for all databases. For 
example, the SQL Server provider supports table creation whereas the Jet provider doesn't.</li></p>

<p><li> You can change the layout of an existing table by right-clicking on it 
and selecting the Design menu command. Again, this feature isn't 
supported by the Jet providers in version 3.51 and 4.0. Interestingly, if you 
change the type of columns of a table or if you add or delete columns, the 
DataView window automatically moves existing data into the new layout.</li></p>

<p><li> You can right-click on any object and select the Properties menu 
command to browse its attributes. This is especially useful for revising the values 
used for the connection, the owner of each table, and the type of columns. 
(See Figure 8-4.)</li></p>

<p><li> You can create new stored procedures or edit existing ones. A 
stored procedure is a sequence of database commands that's stored in the 
database in a precompiled and optimized form. A stored procedure can 
(and often does) accept parameters and return a set of records. Stored 
procedures can be edited in the SQL Editor, another member of the 
Visual Database Tool suite. (See <a href="#A90">Chapter 14</a> for a description of the SQL Editor.)</li></p>

<p><li> You can add a new trigger to an existing table by selecting the New 
Trigger command from the pop-up menu. Triggers are special stored 
procedures that are automatically executed whenever a record in the table 
is modified, inserted, or deleted.</li></p>

<p><li> You can create a new database diagram or edit an existing one by 
selecting the corresponding command from the menu that pops up when 
you right-click the Database Diagram folder or on an existing database 
diagram object. Database diagrams are graphical views of part or all the tables 
in the database; they display all the relationships between these objects, 
and you can annotate these diagrams with your own comments.</li></p>
</UL>
 
<p>
<A HREF="javascript:fullSize('F08ph04x.htm')"> <img src="F08ph04.JPG" width=404 height=301 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-4. </B> <I>Objects displayed in the DataView window can display a Properties dialog box. </I><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('F08ph05x.htm')"> <img src="F08ph05.JPG" width=404 height=217 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-5. </B> <I>The TitleView window, as seen in Visual Database Tools. </I><!--/caption-->
</p>


<p>A few of these operations are so important that they deserve a more 
detailed description.</p>

<A NAME="337"><h3>Adding a new data link</h3></A>

<p>Before working on a database with the DataView window, you must establish a 
data link to that database. A data link includes several pieces of information, including 
the name of the OLE DB provider used to connect to the database engine, the name 
of the particular database you want to access, and other login data such as the user 
name and password.</p>

<p>
<img src="F08ph06.GIF" width=367 height=460 border="0">
<p>
<!--caption--><B>Figure 8-6. </B> <I>To create a new data link, you must select an OLE DB provider. </I><!--/caption-->



<p>You can create a new data link by clicking on the rightmost icon in the 
DataView toolbar or by selecting the Add A Data Link command from the pop-up menu 
that appears when you right-click on the window. This command starts a four-step 
wizard, whose first page is visible in Figure 8-6. In this page, you select the OLE DB 
provider you want to use to connect to the database. By default, ADO uses the Microsoft 
OLE DB Provider for ODBC Drivers (MSDASQL), which lets you connect to virtually 
any relational and ISAM database in the world. For some data sources, you can get 
better performance and more features using providers specifically created for those 
particular data sources.</p>

<p>The content of the second page of the wizard depends on which provider 
you selected in the opening tab. For example, when connecting to a Jet database you 
have to select only the path of the MDB file and the user name and password to use 
at login. Figure 8-7 shows the options you have when connecting 
to a SQL Server database using the Microsoft OLE DB Provider for SQL Server 6.5: 
here you must select the server name, enter login data, and select, if you want, a 
database name. (This is what ADO calls the <I>initial 
catalog.</I>) Remember that if you have a blank password, you must tick the Blank Password check box because 
simply leaving the password field empty won't work. You don't need to specify a user 
name and password if you rely on Windows NT integrated security. In that case, 
SQL Server uses the name and password provided at login time to check whether 
you're granted access to the server. Click on the Test Connection button to be sure 
that everything is OK.</p>

<p>
<img src="F08ph07.GIF" width=367 height=460 border="0">
<p>
<!--caption--><B>Figure 8-7. </B> <I>The connection properties of the Microsoft OLE DB Provider for SQL Server. </I><!--/caption-->


<p>When you use the default Microsoft OLE DB Provider for ODBC Drivers, 
the second page of the wizard is different. In this case, you can opt for a DSN or use 
a connection string (which broadly corresponds to a DSN-less connection). If 
you've chosen to use a connection string, you can build one starting with an existing 
DSN or create one from scratch, and you can also enter other properties in a dialog 
box whose content depends on the ODBC driver you're using. If you fill in the user 
name, password, and database name fields in this dialog box (on the right in Figure 
8-8), you don't need to type these values again in the corresponding fields of the 
wizard page (on the left in the same figure).</p>

<p>
<A HREF="javascript:fullSize('F08ph08x.htm')"> <img src="F08ph08.JPG" width=404 height=275 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-8. </B> <I>Building a connection string.</I><!--/caption-->
</p>


<p>You seldom need to enter any values in the remaining two pages of the 
Data Link wizard. But you can optimize your application's performance if you specify 
in the Advanced page that you're opening the database for read-only operations 
exclusively, and you can prevent timeout errors by setting a higher value for the 
Connection Timeout property. In the last wizard page, named All, you see a summary of 
all the connection properties. Some of these attributes are also present in the 
previous pages, while others can be modified only here. In general, these are advanced 
settings, and you shouldn't alter their default values unless you know what you're 
doing. Because each OLE DB provider exposes a different set of properties, you should 
refer to the documentation of the specific provider for additional information.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
If you're using the Microsoft OLE DB Provider for SQL Server 6.5, 
chances are that you can't list the database tables contained in a given SQL Server. 
This seems to be a bug in this version of the provider, and in fact everything 
works correctly if you upgrade to the Microsoft OLE DB Provider for SQL Server 
7.0. (You need to upgrade just the provider, not the entire SQL Server engine). It 
turns out, however, that SQL Server 6.5 needs just a little help from us. Use the 
Find command to locate a copy of the INSTCAT.SQL file on your system. (You 
should find it in your \Windows\System directory and possibly in other directories as 
well.) Then import this file in ISQL_w and run the script; at the end of the 
execution, try again to create a data link, and you'll see that you are now able to 
correctly list all SQL Server databases.</blockquote></div>
</P>


<A NAME="338"><h3>Creating or editing a database table </h3></A>

<p>You can create a new database table&#8212;if the underlying provider allows you to 
do so&#8212;by right-clicking an existing table object and selecting the New Table 
command from the pop-up menu. You'll be asked for the name of the new table, and then 
a window like the one in Figure 8-9 will appear. You must enter 
the name of each field in the new table in this window, together with its type 
(integer, floating-point number, string, and so on), size, precision, and default value. You 
must also decide whether the field can accept Null values and whether the field is 
the identity key for the table.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
When you're building a table, you can create new fields by copying 
and pasting their attributes from other tables in the database. To select multiple 
field rows, click on the leftmost (gray) column while pressing the Ctrl or Shift key. 
(See Figure 8-9.) You can copy the selection using the Ctrl+C key combination 
and then paste it into another grid using Ctrl+V.</blockquote></div>
</P>

<p>
<A HREF="javascript:fullSize('F08ph09x.htm')"> <img src="F08ph09.JPG" width=404 height=260 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-9. </B> <I>When you create a new table or edit the design of an existing one, you can copy and paste field attributes from other tables. </I><!--/caption-->
</p>


<p>The next step you take when creating a table is deciding which field (or 
fields) should be the primary key, which can include multiple columns, if necessary. A 
primary key is useful for uniquely identifying each record in the table and for 
enforcing relational integrity rules. You also generally need a primary key to create 
updatable cursors on the table. To create a primary key, select the row that contains the 
field key (use Ctrl+mouse click to select multiple columns), and then right-click on the 
grid and select the Set Primary Key menu command. You can create only one primary 
key per table, and the involved columns can't allow Null values. A key icon will 
appear on the left border for all the fields that are part of the primary key.</p>

<p>If you right-click on the grid and select the Properties menu command, the 
dialog box shown in Figure 8-10 appears. Here you can define the 
constraints<I>,</I> the relationships, and the indices for this table. </p>

<p>A constraint is a simple validation rule that involves one or more fields in 
the table, for example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>price &gt; 0 
</pre>
</td></tr>
</table></p>


<p>A table can have multiple constraints, and each constraint has a name. You can 
have the database enforce the constraint for all the records already in the table, for 
all subsequent insert and delete operations, and when the database is being replicated.</p>

<p>In the second page of the Properties dialog box, you define the attributes 
for the relationships this table is involved in.</p>

<p>In the third page of the Properties dialog box, you create and delete the 
indices associated with the table. Indices are database entities that permit you to 
quickly retrieve the information in a table if you know the value of one or more fields. 
Indices also serve to create relationships between tables and to enforce referential 
integrity constraints. You can define several types of indices. A 
<I>primary key </I>index is the main index for a table; none of its fields can have a Null value and their combination 
must have a unique value so that each row of the table can be uniquely identified. A 
<I>foreign key </I>index is based on one or more keys that are primary keys in another 
table, and it's used when the two tables participate in a relationship. A 
<I>unique </I>index is based on any field (or combination of fields) that has a unique value in all the rows of 
the table. A unique index differs from a primary index in that a unique index can 
accept Null values. You can also have 
<I>non-unique</I> indices, which are often used to 
speed up searches without enforcing any constraints on the fields upon which they're 
based. Some database engines also support <I>clustered 
</I>indices, which ensure that the records in the table are physically arranged in the same order as they are in the index. 
(You can have only one index of this type in each table.)</p>

<p>
<img src="F08ph10.GIF" width=401 height=468 border="0">
<p>
<!--caption--><B>Figure 8-10.</B> <i>You can create constraints in a table's Properties page.</i><!--/caption-->


<p>When you complete the definition of a new table or when you alter the 
layout of an existing table, you can select the Save Change Script command from the 
File menu. This creates a script containing a sequence of SQL commands that 
reproduce the edits you've just completed. You can save this script to use as a reference or 
to enable you to re-create the table in other SQL Server systems. You can't decide 
where the script is saved, though. For example, on my system all scripts are stored in 
files with .sql extensions, which are saved in the C:\Program Files\Microsoft 
Visual Studio\Vb98 directory.</p>

<A NAME="339"><h2>The Database Diagram Window</h2></A>

<p>As I mentioned earlier, database diagrams display all or part of the tables in 
your database, including their fields, their keys, and the relationships among them. 
You can create diagrams for SQL Server and Oracle databases by right-clicking on a 
database Diagram folder in the DataView windows and selecting the New 
Diagram menu command. This command brings up the Database Diagram window, 
another Visual Database tool. You can drag-and-drop tables from the DataView window 
to the Database Diagram window, and when the diagram includes more tables 
the relationships among them are automatically displayed. You can also display all 
the tables that are related to a table already in the diagram by right-clicking on the 
table and selecting the Add Related Tables menu command. Figure 8-11 shows a 
diagram I created for the sample Pubs database that comes with SQL Server. Using the 
database diagram window, you can perform several interesting tasks:</p>

<UL>
<p><li> You can automatically arrange all tables, or just the selected tables, 
using the command in the Diagram menu.</li></p>

<p><li> You can show or hide the names of the relationships using the 
Show Relationship Labels command in the Diagram menu or in the 
pop-up menu that appears when you right-click on the Database Diagram 
window background.</li></p>

<p><li> You can add a text annotation using the New Text Annotation 
menu command, located in the Diagram menu or in the Database 
Diagram window pop-up menu. You can change the attributes of the text you 
enter using the Set Text Font command in the Diagram menu.</li></p>

<p><li> You can select one or more tables in the diagram and change their 
appearance. You can decide to display just a table name, the key field 
names, all column names, or all column names and attributes, and you can 
even define a custom view to display only the column attributes you want.</li></p>

<p><li> Because all the information in the tables is alive, you can change a 
table's layout without leaving the Database Diagram window, and you can 
also create and delete columns and select primary keys. (See the pop-up 
menu in Figure 8-11.) You can delete the table from the diagram or drop it 
from the database using the Delete Table from Database and Remove Table 
from Diagram menu commands respectively, so pay attention to which 
option you select. If you delete a table from the database, all the data it 
contains is gone forever.</li></p>

<p><li> You can change the zoom factor of the diagram window, from the 
Zoom submenu in the Edit menu or from the pop-up menu that you display 
by right-clicking the window background.</li></p>

<p><li> You can print the diagram using the Print command from the File 
menu. Before printing, you might want to recalculate and view page breaks 
using the corresponding commands in the Diagram menu or the pop-up 
menu. Unlike the Print Setup command in the File menu, the Print Setup 
command in the pop-up menu lets you select the zoom factor of the printed page.</li></p>

<p><li> Finally, you can save the diagram to the database with the Save and 
Save As commands in the File menu.</li></p>
</UL>
 
<p>The nature of relationships between tables is a key factor in the design of 
a database. You can place tables in one-to-one relationships or in one-to-many 
relationships. An example of a one-to-one relationship is the relationship between 
the Publishers and Pub_info tables in the Pubs database. An example of a 
one-to-many relationship is that between the Publishers and Titles tables. You can revise the 
attributes of a relationship in the Database Diagram window by right-clicking on 
the line that connects two related tables and selecting the Properties menu command.</p>

<p>The Database Diagram window can also work as a source for 
drag-and-drop operations. For example, you can copy a subset of the tables in a diagram to 
another diagram by selecting the subset and dragging the tables to the other diagram's 
window. Using drag-and-drop, you can also assemble multiple diagrams into a larger 
one. These techniques are particularly useful when you're dealing with databases with 
a lot of tables.</p>

<p>
<A HREF="javascript:fullSize('F08ph11x.htm')"> <img src="F08ph11.JPG" width=404 height=343 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-11.</B> <i>A database diagram for the Pubs database.</i><!--/caption-->
</p>

<A NAME="340"><h2>The Query Builder Window</h2></A>

<p>If you right-click on a Views folder inside the Data View window, you can create 
a new view. A view is either a subset of all the rows from a database table or the 
logical join of two or more tables in the database. For example, the Titleview view 
in the Pubs database shows all the titles in the database together with their authors. 
To retrieve this information, the view has to collect data from three distinct tables, 
Authors, Titles, and TitlesAuthor. When you create a new view, or edit an existing 
one, the Query Builder window appears. This is another member of the Visual 
Database Tools suite and is also one of the most useful because it lets you create queries 
and views using an intuitive user interface. The Query Builder window is subdivided 
into four panes, as you can see in Figure 8-12.</p>

<UL>
<p><li> In the Diagram pane, you arrange tables dropped from the DataView 
or the Database Diagram windows, from which you can select the fields 
that should appear in the query. You can display four different pop-up 
menus from this pane, which arise from a right-click on a table caption, a 
field name, a relationship connecting line, or the pane's background. Some 
of these commands are also included in the Query top-level menu, 
which becomes active when the Query Builder window is the foreground window.</li></p>

<p><li> In the Grid pane, you can define the query or the view using a 
tabular format. For each field, you can define an alias name (that is, the name 
that field will appear under in the result set) and a criteria selection. For 
example, you can create a view that returns only the titles from a 
specific publisher or those whose price is below a given threshold.</li></p>

<p><li> In the SQL pane, you see the query in SQL syntax. You can modify 
the query using the Diagram or the Grid panes and see how the SQL 
string changes, but you can also change the SQL query and watch the other 
two panes update their contents and appearance. (Some queries are too 
complex for Query Builder to display graphically, though.) You can also 
have Query Builder verify the syntax of the SQL string that you've typed, 
using the Verify SQL Syntax command in the Query menu.</li></p>

<p><li> In the Result pane, you can see the result of the query or the view so 
that you have a chance to confirm that your query does exactly what you 
want. To populate this pane, you must select the Run command from the 
Query menu or from the pop-up menu that appears when you right-click 
anywhere in the Query Builder window. When you modify 
the query or view using one of the other three panes, the contents of this pane are 
grayed out to remind you that they aren't up to date.</li></p>
</UL>
 
<p>You can hide and show individual panes using the Show Panes submenu in 
the View top-level menu. Commands in the Query menu let you add filters, sort or 
group the results based on a field value, and more. You can also use the Query 
Builder window to create SQL commands other than SELECT. You usually do this using 
the Change Type submenu from the Query menu, but these commands are disabled 
when you're creating or modifying a view (which can be based only on a SELECT 
command). For examples of other SQL commands, see &quot;<A HREF="#361">Crash Course in SQL</A>&quot; at the 
end of this chapter.</p>

<p>
<A HREF="javascript:fullSize('F08ph12x.htm')"> <img src="F08ph12.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-12.</B> <i>The Query Builder open in the Titleview view of the Pubs database.</i><!--/caption-->
</p>


<a name="A49"></a><h3>5.8.3 ADO Data Binding</h3>

<A HREF="#A48">[Previous]</A> <A HREF="#A50">[Next]</A><P>

<A NAME="341"><h1>ADO Data Binding</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Historically, the first form of database support in Visual Basic (version 3) was 
the Data control and bound controls, as I explained in the first section of this 
chapter. This binding mechanism has undergone several refinements in Visual Basic 4 
and 5, but it hadn't changed much until the ADO binding mechanism made its 
debut in Visual Basic 6.</p>

<p>First let me briefly remind you that binding is a technology that lets you 
place controls&#8212;such as TextBox, CheckBox, ListBox, and ComboBox controls&#8212;on a 
form and <I>bind </I>any or all of them to another control, called the Data control, which in 
turn is connected to a database. The Data control allows you to navigate through 
the records in the database: Each time a new record becomes current, its field 
values appear in the bound controls. Similarly, if the user updates one or more values 
in the bound controls, these changes are propagated to the database. You can 
therefore create simple user interfaces to database data without writing a single line of 
code. (This is in theory; in practice you should validate input data and often format 
data displayed in bound controls.)</p>

<p>The new ADO-based binding technology is a revolution in how you display 
data from a database. First of all, you don't always have a database to work with, 
not directly at least. In Visual Basic 6 you shouldn't talk about bound controls and 
Data controls; instead, you should talk about one or more 
<I>data consumers </I>that are bound to a <I>data 
source</I>. In Visual Basic 6, you can use many types of data consumers, 
such as an intrinsic or external control, a class, a COM component, a homemade 
ActiveX control (or UserControl), or the DataReport designer. You also have many data 
sources to choose from: the ADO Data control, a class, a COM component, a 
UserControl, or the DataEnvironment designer. (The DataEnvironment designer is described 
later in this chapter, whereas the DataReport designer is covered in <a href="#A94">Chapter 15</a>.)</p>

<p>This assortment of data sources and consumers gives you an unparalleled 
flexibility in devising the most appropriate binding scheme for your application, and 
it also overcomes one of the most serious limitations of the original Data control 
(and its younger cousin, the RemoteData control). When you use ADO binding, you're 
not tied to a 2-tier architecture because you don't have to necessarily bind user 
interface elements to fields in a database. Rather, you can use one or more intermediate 
COM components, which consistently implement a more flexible 3-tier design. It isn't 
really important where these COM components reside; they might execute on the 
client machine, on the server machine, or on another machine. Don't forget that 
n-tier development is a state of mind: In a sense, you can do 3-tier development even 
when the client and the server are on the same machine (although in that case you 
surely don't take advantage of many of the 3-tier promises). The important point in 
n-tier architectures is that the front-end application isn't tightly tied to the back-end 
database so that you can&#8212;if the need arises&#8212;substitute the front end or the back 
end without having to rewrite the entire application.</p>

<A NAME="342"><h2>The Binding Mechanism</h2></A>

<p>You exploit the simplest form of ADO binding when you bind one or more 
controls to an ADO Data control, but the concepts I'll explain here can be applied to any 
type of data source or consumer. And you'll learn more about writing such data 
sources and consumers in Chapters <a href="#A106">17</a> and <a href="#A111">18</a>.</p>

<p>Before using the ADO Data control, you must add it to the current project 
to have it available in the control Toolbox. You also need to add some items to 
the References dialog box, so let's take the following shortcut: Select the New 
Project command from the File menu, and then open the Data Project template from 
the Project gallery. This template adds several modules to the project (some of 
which aren't of interest to us right now). Above all, the template adds a reference to 
the Microsoft ActiveX Data Objects 2.0 Library (MSADO15.DLL) and a number of 
additional controls to the Toolbox, including the ADO Data control. If you already 
upgraded to the new ADO 2.1 version, the item added to the References dialog box 
is msado20.tlb.</p>

<p>Drop an instance of the ADO Data control on the only form in the 
project, frmDataEnv, and set its <I>Align </I>property to 2-vbAlignBottom so that it resizes with 
the form. You might set other properties from the regular Properties window, but it's 
much better to use the custom Property pages that pop up when you right-click on 
the control and select the ADODC Properties menu command. In the General page, 
you can specify which database you're connecting to using three different methods: a 
Data Link file, an ODBC Data Source Name (the old DSNs aren't dead in the ADO 
world, as you can see), or a custom connection string.</p>

<p>Data link files are the ADO equivalent of file-based DSNs. At first, you 
might wonder how to create a UDL file because no New or Add button is 
immediately apparent. The answer is in Figure 8-13: Click on the Browse button to bring up 
an Open dialog box that lets you browse through your directories looking for UDL 
files. Then right-click inside the (possibly empty) file list part of the dialog box, and 
select the New submenu and the Microsoft Data Link menu command. This creates 
a &quot;blank&quot; UDL file, which you can rename whatever you like. It's a simple task 
once you know how to do it; just don't call this process an intuitive user interface!</p>

<p>Creating the UDL file is only part of the job because you now have to 
specify which database this Data Link file is pointing to. You need to perform another 
counter-intuitive operation: Right-click on the UDL file that you've just created, and select 
the Properties menu command. This brings up a multipage Properties dialog box, 
which seems intimidating at first. A closer look reveals that the last four tabs are nothing 
new: They're the Provider, Connection, Advanced, and All pages you saw when we 
created a data link inside the Data View window. This shouldn't be a 
surprise. We're still talking about the same concepts here. Anyway, it's good to walk in familiar territory again.</p>

<p>By the way, you can also do without UDL files and create the connection 
string directly. If you click on the Build button in the ADODC Properties dialog box, 
once again you'll see those four pages that let you define an ADO connection. 
Suddenly, everything you learned when you were working with the Data View window 
makes sense in this context as well. For this example, let's connect to the NWind.mdb 
database, using any of the available methods.</p>

<p>
<A HREF="javascript:fullSize('F08ph13x.htm')"> <img src="F08ph13.JPG" width=404 height=268 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-13.</B> <i>The long path to Data Link file creation.</i><!--/caption-->
</p>

<p>Back to the ADODC Properties dialog box. Move on to the Authentication 
page, enter user name and password if your database requires them, and then click on 
the RecordSource page. This is where you define the database table, the stored 
procedure, or the SQL query that will feed data to bound controls. For this 
example, select the adCmdText option in the upper combo box, and then enter the 
following SQL query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Select * from Products
</pre>
</td></tr>
</table></p>


<p>Go back to the form and add four TextBox controls, four Labels, and 
one CheckBox control, as shown in Figure 8-14. Set the 
<I>DataSource </I>properties of the CheckBox control and all the TextBox controls to Adodc1, and then set their 
<I>DataField </I>properties to the name of the database field you want to bind the control to. You 
don't have to guess their names because a handy drop-down list in the Properties 
window contains all the field names in the Publishers table. For this example, use 
the ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, and Discontinued fields.</p>

<p>You're finally ready to run this program and to navigate through the 
records using the four arrow buttons in the ADO Data control. Try to modify one or 
more fields, and then move to the next record and back to see whether the new 
values have persisted. As you can see, the mechanism really works without your 
having written a single line of Visual Basic code.</p>

<p>You can even add new records, still without writing a single line of code. 
Go back to design time, and set the ADO Data control's 
<I>EOFAction </I>property to the value 2-adDoAddNew. Then run the sample program again, click on the rightmost 
arrow button to move to the last record, and click on the second button from the right 
to move to the next record. All bound controls will be cleared, and you can enter a 
new record's field values. Remember that you need to move to another record to 
make your edits persistent. If you simply close the form, any changes you made to 
the current record are lost.</p>

<p>
<A HREF="javascript:fullSize('F08ph14x.htm')"> <img src="F08ph14.JPG" width=404 height=194 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-14.</B> <i>The ADO Data control sample application uses the DataCombo control described in <a href="#A94">Chapter 15</a>.</i><!--/caption-->
</p>

<A NAME="343"><h2>Working with Bound Controls</h2></A>

<p>Most of the Visual Basic 6 intrinsic controls support data binding, including 
the TextBox, Label, CheckBox, ListBox, ComboBox, PictureBox, and OLE controls. 
Typically, you use TextBox for editable string or numeric fields, Labels for 
non-editable fields, CheckBoxes for Boolean values, and ListBoxes and ComboBoxes to list 
valid values. In the Visual Basic 6 package, you'll also find some 
external ActiveX controls that support data binding, such as the ImageCombo, MonthView, 
DateTimePicker, MaskEdBox, RichTextBox, DataGrid, DataList, DataCombo, and Hierarchical 
FlexGrid controls. In this section, I've assembled a few tips and suggestions for making 
the best use of the intrinsic controls as bound controls; data-aware ActiveX controls 
are covered in Chapters <a href="#A57">10</a>, <a href="#A67">11</a>, <a href="#A74">12</a>, and <a href="#A94">15</a>.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Visual Basic 6 includes some data-aware controls&#8212;namely the 
DBGrid, DBList, DBCombo, and MSFlexGrid controls&#8212;that aren't compatible with 
the ADO Data control and work only with older Data and RemoteData controls. 
All the intrinsic controls work with both the older Data controls and the newer 
ADO Data control.</blockquote></div>
</P>


<p>All bound controls expose the <I>DataChanged 
</I>run-time_only Boolean property. Visual Basic sets this property to True when the end user (or the code) 
modifies the value in the control. The ADO binding mechanism uses this flag to check 
whether the current record has been edited and resets it to False after displaying a new 
record. This means that you can prevent the ADO Data control from moving a control's 
value to a database field by setting the control's 
<I>DataChanged </I>property to False yourself.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
The <I>DataChanged 
</I>property is independent from the ADO binding 
mechanism and is correctly managed from Visual Basic even if the control isn't 
currently bound to a database field. For example, you can exploit this property when 
you want to determine whether a control's contents have been modified after you 
have loaded a value in it. If you didn't use this property, you would need to use a 
form-level Boolean variable and manually set it to True from within the 
control's <I>Change </I>or <I>Click </I>event procedure.
</blockquote></div></p>

<p>When you use a data-bound Label control, you should set its 
<I>UseMnemonics </I>property to False. If it's set to its True (default) value, all ampersand characters 
in database fields will be mistakenly interpreted as placeholders for hot key characters.</p>

<p>The CheckBox control recognizes a zero value as vbUnchecked, any 
nonzero value as vbChecked, and a Null value as vbGrayed. But when you modify the 
value in this field, The CheckBox control always stores 0 and _1 values in the 
database. For this reason, the CheckBox control should be bound only to a Boolean field.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
You can't bind a PictureBox control to photographs stored in 
an Access database field of type OLE control. Instead, you must use an OLE 
control. A bound PictureBox control is fine for displaying a photograph stored in 
an SQL Server field of type Image.
</blockquote></div></p>

<p>The OptionButton control isn't data aware, so you need to resort to the 
following trick to bind it to an ADO Data control. Create an array of OptionButton controls 
and a hidden TextBox control, and bind the hidden TextBox control to the database 
field in question. Then write the code you see at the top of the next page in the 
form module.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub optRadioButton_Click(Index As Integer)
    ' Change hidden TextBox's contents when user clicks on radio buttons.
    txtHidden.Text = Trim$(Index)
End Sub

Private Sub txtHidden_Change()
    ' Select the correct radio button when the ADO Data control
    ' assigns a new value to the hidden TextBox.
    On Error Resume Next
    optRadioButton(CInt(txtHidden.Text)).Value = True
End Sub
</pre>
</td></tr>
</table></p>


<p>The ideal solution would be to have an ActiveX control that displays an 
array of OptionButton controls and bind them to a single database field, and in fact a 
few commercial controls do exactly this. But now that Visual Basic supports the 
creation of ActiveX controls, you can create such a control yourself in a few minutes. 
See <a href="#A106">Chapter 17</a> to learn how you can create bound ActiveX controls.</p>

<p>Pay attention when you use ComboBox controls with 
<I>Style</I> set to 2-DropdownList and ListBox controls as bound controls. If the value in the database doesn't 
match one of the values in the list, you get a run-time error.</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Visual Basic 6 lets you assign the <I>DataSource 
</I>property of a control at run time, so you can bind (or unbind) a control during execution:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Bind a control at run time.
txtFirstName.DataField = &quot;FirstName&quot;
Set txtFirstName.DataSource = Adodc1
...
' Unbind it.
Set txtFirstName.DataSource = Nothing 
</pre>
</td></tr>
</table></p>


<p>Dynamic assignments of the <I>DataSource </I>property don't work with older 
Data and RemoteData controls.</p>

<A NAME="344"><h2>The ADO Data Control</h2></A>

<p>The ADO Data control embodies many features of the ADO Connection and 
Recordset objects, which I'll cover in <a href="#A82">Chapter 13</a>. For this reason, in this section I'll only 
describe the few properties that you really need to set up a minimal sample application 
that uses this control.</p>

<p>The <I>ConnectionString </I>property is the string that contains all the 
information that's necessary to complete the connection, as I showed you in the previous 
section. You can set login data using the <I>UserName 
</I>and <I>Password </I>properties, and you can define a timeout for the connection attempt with the 
<I>ConnectionTimeout </I>property. <I>Mode </I>determines which operations are allowed on the connection. For additional 
information about these properties, read &quot;<A HREF="#549">The Connection Object</A>&quot; section in Chapter 13.</p>

<p>Most of the other properties of the ADO Data control are borrowed from 
the ADO Recordset object. <I>RecordSource </I>is the table, the stored procedure, or the 
SQL command that returns the records from the database. (It corresponds to the 
Recordset object's <I>Source </I>property.) <I>CommandType 
</I>is the type of query stored in the <I>RecordSource 
</I>property, and <I>CommandTimeout </I>is the timeout in seconds for the 
command to execute. <I>CursorLocation </I>specifies whether the cursor should be located on the 
client or on the server workstation, and <I>CursorType 
</I>determines the type of the cursor. <I>CacheSize 
</I>is the number of records that are read from the database in each data 
transfer, whereas <I>LockType </I>affects how the client application can update data in the 
database. I examine these properties in detail, along with cursor and locking options, 
in Chapters <a href="#A82">13</a> and <a href="#A90">14</a>.</p>

<p>The ADO Data control also exposes a pair of properties that have no 
corresponding items in the Recordset object. The 
<I>EOFAction </I>property determines what happens when the user attempts to move past the last record: 0-adDoMoveLast means that 
the record pointer stays at the last record in the Recordset, 1-adStayEOF sets the 
EOF (End-Of-File) condition, and 2-adDoAddNew automatically adds a new record. 
The <I>BOFAction </I>property determines what happens when the user clicks on the left 
arrow button when the first record is the current record; 0-adDoMoveFirst leaves the 
pointer on the first record, and 1-adStayBOF sets the BOF (Begin-Of-File) condition.</p>

<p>At run time, the ADO Data control exposes one more property, the 
<I>Recordset </I>property, which returns a reference to the underlying Recordset object. This 
reference is essential for exploiting all the power of this control because it lets you 
add support for other operations. For example, you can create two 
CommandButton controls, set their <I>Caption </I>properties to 
<I>AddNew</I> and <I>Delete</I>, and write this 
code behind their <I>Click </I>events:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdAddNew_Click()
    Adodc1.Recordset.AddNew
End Sub

Private Sub cmdDelete_Click()
    Adodc1.Recordset.Delete
End Sub
</pre>
</td></tr>
</table></p>


<p>Keep in mind, however, that the preceding operations aren't always 
permitted; for example, you can't add new records or delete existing ones if the ADO Data 
control has opened the data source in read-only mode. Even if the data source has 
been opened in read-write mode, certain operations on a record might be illegal. 
For example, you can't delete a record in the Customers table when one or more 
records in the Orders table are referencing it.</p>

<p>The Recordset object is packed with properties and methods, and you can 
use all of them from the ADO Data control. You can, for example, sort or filter the 
displayed records, or set a bookmark to quickly return to a given record. The ADO 
Data control doesn't expose the underlying Connection object directly, but you can 
use the <I>ActiveConnection </I>property of the underlying Recordset. For example, you 
can implement transactions using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    ' Start a transaction when the form loads.
    Adodc1.Recordset.ActiveConnection.BeginTrans
End Sub

Private Sub Form_Unload(Cancel As Integer)
    ' Commit or roll back when the form unloads.
    If MsgBox(&quot;Do you confirm changes to records?&quot;, vbYesNo) = vbYes Then
        Adodc1.Recordset.ActiveConnection.CommitTrans
    Else
        Adodc1.Recordset.ActiveConnection.RollbackTrans
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>If you roll back a transaction using the preceding 
<I>Form_Unload </I>routine, you need to invoke the control's 
<I>Refresh </I>method to see the previous values in records.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
A 
<I>transaction</I> is a group of related database operations that should 
be logically considered as a single command, which can either succeed or fail as 
a whole. For example, when you move money from one bank account to 
another account you should enclose the two operations within a transaction so that if 
the second operation isn't successful, the first one is canceled as well. When 
you confirm a transaction, you should <I>commit 
</I>it. When you want to cancel the effect of all its commands, you should 
<I>roll it back</I>.
</blockquote></div></p>

<p>The ADO Data control also exposes several events borrowed from the 
Recordset, so I'm deferring the description of most of them until <a href="#A82">Chapter 13</a>. I want to 
describe only three events here. The <I>MoveComplete 
</I>event fires when a new record has become the current record. You can exploit this event to display information that can't 
be retrieved with a simple bound control. For example, suppose that a field in the 
database, named PictureFile, holds the path of a BMP file. You can't directly display 
this bitmap using a bound control, but you can trap the 
<I>MoveComplete </I>event and manually load the image into a PictureBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Adodc1_MoveComplete(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal pError As ADODB.Error, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
    picPhoto.Picture = LoadPicture(Adodc1.Recordset(&quot;PictureFile&quot;))
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>WillChangeRecord</I> fires immediately before the ADO Data control 
writes data to the database. This is the best place to validate the contents of bound 
controls and cancel the operation if necessary:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim ValidationError As Boolean           ' A form-level variable

Private Sub Adodc1_WillChangeRecord(ByVal adReason As _
    ADODB.EventReasonEnum, ByVal cRecords As Long, adStatus As _
    ADODB.EventStatusEnum, ByVal pRecordset As ADODB.Recordset)
    ' Check that fields are valid, cancel the update if not.
    If txtProductName = &quot;&quot; Or Not IsNumeric(txtUnitPrice) Then
        MsgBox &quot;Please enter valid field values&quot;, vbExclamation
        ValidationError = True
        adStatus = adStatusCancel
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>Error </I>event is the only event that hasn't been inherited from the 
Recordset object. The ADO Data control fires it if an error occurs while there's no Visual 
Basic code running. Typically, this happens when the user clicks on one of the 
control's arrow buttons and the resulting operation fails (for example, when you're trying 
to update a record locked by another user). This event also fires when you cancel 
an operation in the <I>WillChangeRecord </I>event. By default, the ADO Data control 
displays a standard error message, but you can modify this standard behavior by 
assigning True to the <I>fCancelDisplay </I>parameter. This code snippet completes the 
previous example that performs field validation:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Adodc1_Error(ByVal ErrorNumber As Long, Description As String,_
    ByVal Scode As Long, ByVal Source As String, ByVal HelpFile As String,_
    ByVal HelpContext As Long, fCancelDisplay As Boolean)
    ' Don't show validation errors (already processed elsewhere).
    If ValidationError Then
        fCancelDisplay = True
        ValidationError = False
    End If
End Sub
</pre>
</td></tr>
</table></p>


<A NAME="345"><h2>Formatting Data</h2></A>

<p>One of the serious limitations of the original Data and RemoteData controls was 
that you couldn't format data for display on screen. For example, if you wanted to 
display a number with thousand separators, you had to write code. You also had to 
write code to display a date value in the long date format (such as &quot;October 17, 1999&quot;) 
or some other more or less standard format. Well, it doesn't make sense to use 
bound controls if you have to write code even for such basic operations, does it?</p>

<A NAME="346"><h3>The <I>DataFormat </I>property</h3></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The ADO binding mechanism effectively and elegantly solves this problem by 
adding the new <I>DataFormat </I>property to all bound controls. If you click on the 
<I>DataFormat </I>item in the Properties window, the property page shown in Figure 
8-15 appears. Here you can interactively select from many basic format types (such 
as number, currency, date, and time), each one with several formatting options 
(number of decimal digits, thousand separators, currency symbol, date/time formats, and so on).</p>

<p>You can also set custom formatting, in which case you can specify a 
format string that follows the same syntax for the 
<I>Format </I>function (which I described in <a href="#A30">Chapter 5</a>). But the ADO Data control can't correctly unformat values that 
were formatted using a complex format string, so it might store wrong data in the 
database. This problem can be overcome using StdDataFormat objects, as I explain in 
the next section.</p>

<p>The <I>DataFormat</I> property might not work correctly for a few controls. 
For example, when used with the DataCombo control this property doesn't affect 
the formatting of the items in the list portion. The DataGrid control exposes a 
DataFormats collection, where each item affects the format of a column of the grid.</p>

<p>
<img src="F08ph15.GIF" width=398 height=361 border="0">
<p>
<!--caption--><B>Figure 8-15.</B> <i>The DataFormat property page.</i><!--/caption-->


<A NAME="347"><h3>StdDataFormat objects</h3></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>To be able to use StdDataFormat objects, you must add a reference to the 
Microsoft Data Formatting Object Library, and you must then distribute the 
corresponding MSSTDFMT.DLL file with all your applications.</p>

<p>The first use for these objects is to set the 
<I>DataFormat </I>property of a bound field at run time. You must do this, for example, when you create controls during 
execution using a control array (as explained in <a href="#A14">Chapter 3</a>) or using the new Visual 
Basic 6 dynamic control creation feature (covered in <a href="#A53">Chapter 9</a>). To modify how data is 
formatted in a bound control, you create a new StdDataFormat object, set its 
properties, and then assign it to the <I>DataFormat 
</I>property of the control, as in the following piece of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    ' Create a new formatting object and assign it to a bound field.
    Dim sdf As New StdDataFormat
    sdf.Type = fmtCustom
    sdf.Format = &quot;mmm dd, yyyy&quot;
    Set txtShippedDate.DataFormat = sdf
    ' Force the Data control to correctly display the first record.
    Adodc1.Recordset.Move 0
End Sub
</pre>
</td></tr>
</table></p>


<p>The most important property of StdDataFormat objects is 
<I>Type</I>, which can be assigned one of the following values: 0-fmtGeneral, 1-fmtCustom, 2-fmtPicture, 
3-fmtObject, 4-fmtCheckbox, 5-fmtBoolean, or 6-fmtBytes. If you're using a 
custom formatting option, you can assign the <I>Format 
</I>property a formatting string, which has the same syntax as the second argument of the VBA 
<I>Format </I>function.</p>

<p>When retrieving data from a Boolean field, you typically use a CheckBox 
control and the frmCheckbox setting. But you can also use a Label or a TextBox 
control that interprets the contents of the Boolean field and displays a meaningful 
description. In this case, you must assign strings to the 
<I>FalseValue</I>, <I>TrueValue</I>,<I> </I>and 
(optionally) <I>NullValue </I>properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Dim sdf As New StdDataFormat
    sdf.Type = frmBoolean
    ' Set meaningful strings for False, True, and Null values.
    sdf.FalseValue = &quot;In Production&quot;
    sdf.TrueValue = &quot;Discontinued&quot;
    sdf.NullValue = &quot;(unknown)&quot;
    Set lblDiscontinued.DataFormat = sdf
    ' Force the Data control to correctly display the first record.
    Adodc1.Recordset.Move 0
End Sub
</pre>
</td></tr>
</table></p>


<p>As a rule, you should use this technique only with Label, locked TextBox, 
and ListBox controls because the user shouldn't be allowed to enter a value other 
than the three strings assigned to the 
<I>FalseValue</I>, <I>TrueValue</I>,<I> </I>and 
<I>NullValue </I>properties.</p>

<p>The real power of StdDataFormat objects is their ability to raise events. You 
can think of an StdDataFormat object as something that sits between a data source 
and a data consumer. You're using an ADO Data control as a data source and a 
bound control as a data consumer in this case, but the StdDataFormat object can be 
used whenever the ADO binding mechanism is active. StdDataFormat objects let you 
actively intervene when the data is moved from the data source to the consumer 
and when the move occurs in the opposite direction. You do this thanks to the 
<I>Format </I>and <I>Unformat </I>events.</p>

<p>To trap these events, you must declare the StdDataFormat object as a 
form-level variable, using the <I>WithEvents </I>keyword. The 
<I>Format </I>event fires when a value is read from the database and displayed in a control. If the user modifies the value, 
an <I>Unformat </I>event fires when the ADO Data control saves the value back to the 
database. Both events receive a <I>DataValue </I>parameter, which is an object with two 
properties: <I>Value </I>is the value being transferred, and 
<I>TargetObject </I>is the bound control&#8212;or more generally, the data consumer&#8212;involved. Normally, if you manually format 
and unformat values inside these events you don't need to set any other property of 
the StdDataFormat object.</p>

<p>Figure 8-16 shows a sample program (also available on the companion CD) 
that displays data from the Orders table of the NWind.mdb database. The Freight 
amount can be expressed as dollars or euros, but the database stores the value only in 
dollars and therefore you need to do the conversion on the fly. This is the code that 
does the trick:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' How many euros in one dollar?
' (Of course, in a real program this would be a variable.)
Const DOLLARS_TO_EURO = 1.1734

Dim WithEvents sdfFreight As StdDataFormat

Private Sub Form_Load()
    Set sdfFreight = New StdDataFormat
    Set txtFreight.DataFormat = sdfFreight
    ' Force the Data control to correctly display the first record.
    Adodc1.Recordset.Move 0
End Sub

Private Sub sdfFreight_Format(ByVal DataValue As StdFormat.StdDataValue)
    ' Convert to euros if necessary.
    If optFreight(1) Then
        DataValue.Value = Round(DataValue.Value * DOLLARS_TO_EURO, 2)
    End If
End Sub

Private Sub sdfFreight_UnFormat(ByVal DataValue As StdFormat.StdDataValue)
    ' Convert back to dollars if necessary.
    If optFreight(1) Then
        DataValue.Value = Round(DataValue.Value / DOLLARS_TO_EURO, 2)
    End If
End Sub

Private Sub optFreight_Click(Index As Integer)
    If Index = 0 Then
        ' Convert from euros to dollars.
        txtFreight = Trim$(Round(CDbl(txtFreight) / DOLLARS_TO_EURO, 2))
    Else
        ' Convert from dollars to euros.
        txtFreight = Trim$(Round(CDbl(txtFreight) * DOLLARS_TO_EURO, 2))
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('F08ph16x.htm')"> <img src="F08ph16.JPG" width=404 height=233 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-16. </B> <I>Use StdDataFormat object to keep the display format independent of the value stored in the database. </I><!--/caption-->
</p>

<p>You can use the <I>DataValue</I>.<I>TargetObject 
</I>property to affect the appearance or the behavior of the bound control. For example, you can have the Freight 
amount appear in red when it's higher than 30 dollars:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub sdfFreight_Format(ByVal DataValue As StdFormat.StdDataValue)
    ' Show the value in red ink if &gt;30 dollars.
    If DataValue.Value &gt; 30 Then
        DataValue.TargetObject.ForeColor = vbRed
    Else
        DataValue.TargetObject.ForeColor = vbBlack
    End If
    ' Convert to euros if necessary.
    If optFreight(1) Then
        DataValue.Value = Round(DataValue.Value * DOLLARS_TO_EURO, 2)
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>An interesting&#8212;though not adequately documented&#8212;feature of 
StdDataFormat objects is that you can assign the same instance to the 
<I>DataFormat </I>properties of more than one control. This is especially effective when you want to manage the 
formatting yourself in <I>Format </I>and <I>Unformat 
</I>events, so you have a single entry point to format multiple on-screen fields. You can use the 
<I>DataValue.TargetObject.Name </I>property to find out which bound control is requesting the formatting, as in the 
piece of code you see here.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub sdfGeneric_Format(ByVal DataValue As StdFormat.StdDataValue)
    Select Case DataValue.TargetObject.Name
        Case &quot;txtFreight&quot;, &quot;txtGrandTotal&quot;
            ' These are currency fields.
            DataValue.Value = FormatCurrency(DataValue.Value)
        Case &quot;ProductName&quot;
            ' Display product names in uppercase characters.
            DataValue.Value = UCase$(DataValue.Value)
    End Select
End Sub
</pre>
</td></tr>
</table></p>


<p>An StdDataFormat object exposes a third event, 
<I>Changed</I>, which fires when any property of the object has been changed. You usually react to this event by 
refreshing the contents of fields, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub sdfGeneric_Changed()
    ' This forces the ADO Data control to reread the current record.
    Adodc1.Recordset.Move 0
End Sub
</pre>
</td></tr>
</table></p>


<p>Here are a few other bits of information about StdDataFormat objects:</p>

<UL>
<p><li> If you assign a complex formatting string to the 
<I>Format </I>property, the StdDataFormat object is unable to correctly unformat it, so you must 
do that manually in the <I>Unformat </I>event.</li></p>

<p><li> The Visual Basic 6 online documentation warns that you should 
unbind a control and then rebind it if you want to change its 
StdDataFormat object's <I>Type </I>property. I've found that you don't need the 
unbind/rebind operation, but I must admit that I haven't tested all the possible 
combinations of properties and field types. So just be careful when you 
modify the <I>Type </I>property at run time.</li></p>

<p><li> The <I>Unformat </I>event fires only if the value of the bound control has 
been modified since it was read from the database, that is, if its 
<I>DataChanged</I> property is True.</li></p>

<p><li> At first, I believed that the <I>Unformat 
</I>event fires when the data is moved back to the database, but this isn't what actually happens. This event 
fires as soon as the user edits the value in a bound control and then moves 
the focus to another control. This is an important fact because when 
the <I>Unformat </I>event completes, the control's 
<I>DataChanged </I>property is set to False. So you can't rely on this property to determine whether any 
control has been modified. (If no StdDataFormat object is associated to 
the bound control, the <I>DataChanged </I>property stays True until the record 
is stored back in the database.)</li></p>
</UL>
 
<A NAME="348"><h2>The Data Form Wizard</h2></A>

<p>The Data Form Wizard is a Visual Basic 6 add-in that automatically builds a form 
with a group of controls that are bound to a data source. It also creates a number of 
push buttons for common database operations, such as adding or deleting records. 
The Data Form Wizard was already included with Visual Basic 5, but it has been 
modified to work with the ADO Data control. It can also work without an ADO Data 
control simply by using an ADO Recordset as the data source, and it can even create an 
ad hoc data source class module.</p>

<p>Using the Data Form Wizard is really straightforward, so I won't describe 
each step in detail. Figure 8-17 displays an intermediate step, in which you decide 
the type of form you want to create and which type of binding should be used. 
You can generate a set of bound controls, a single DataGrid or Hierarchical 
FlexGrid control, a master/detail form, or an MSChart. The wizard is especially useful 
for creating single record and master/detail forms. For example, Figure 8-18 shows a form that displays orders in the upper part and information for 
each order in the lower grid.</p>

<p>
<A HREF="javascript:fullSize('F08ph17x.htm')"> <img src="F08ph17.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-17. </B> <I>The Data Form Wizard creates five different types of bound forms. </I><!--/caption-->
</p>

<p>In the next page, you select which table or view should be used as the 
record source. You also select which fields will be included in the result form and 
whether the output is to be sorted on a given column. If you are building a master/detail 
form, you have to select two different record sources, one for the master table and one 
for the detail table, and you also need to select one field from each table that links 
the two sources together. In the Control Selection tab you select which buttons will 
be placed on the form, choosing from the Add, Update, Delete, Refresh, and Close 
buttons. Finally, in the last page of the wizard, you have the opportunity to save all 
your settings in an RWP profile file so that you can later rerun the wizard without 
having to reenter all the options.</p>

<p>
<img src="F08ph18.GIF" width=391 height=462 border="0">
<p>
<!--caption--><B>Figure 8-18.</B> <i>A master/detail form based on the Orders and Order Details tables of the NWind.mdb database.</i><!--/caption-->


<p>It's highly likely that you'll need to fix the form or the code produced by 
the Data Form Wizard, if only for cosmetic reasons. But you might learn how to 
write good ADO code by simply running it and then browsing the results. Or you 
could use the wizard just to create a data source class. (Data source classes are 
described in <a href="#A111">Chapter 18</a>.)</p>


<a name="A50"></a><h3>5.8.4 The DataEnvironment Designer</h3>

<A HREF="#A49">[Previous]</A> <A HREF="#A51">[Next]</A><P>

<A NAME="349"><h1>The DataEnvironment Designer</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The DataEnvironment designer is one of the most intriguing new features of Visual Basic 6. In short, it's a design-time representation of the ADO objects 
that you would otherwise create at run time. This capability is 
<I>very </I>exciting because it brings the same programming paradigm to database development that Visual 
Basic itself introduced several years ago and that made Windows programming so easy 
and immediate.</p>

<p>When you use a form designer, you're actually defining at design time the 
forms and controls Visual Basic will create at run time. You make your choices in a 
visual manner, without worrying about what Visual Basic actually does when the 
program runs. Similarly, you can use the DataEnvironment designer to define the behavior 
of ADO Connections, Commands, and Recordset objects. You can set their 
properties at design time by pressing the F4 key to bring up the Properties window or by 
using their custom property pages, exactly as you would do with forms and controls.</p>

<p>The DataEnvironment designer is the descendent of the UserConnection 
designer, the first external designer ever created for Visual Basic. The 
UserConnection designer was included in the Enterprise Edition of Visual Basic 5 and could 
work exclusively with RDO connections, so only a fraction of Visual Basic developers 
ever used it or even were aware that a such a tool existed. The DataEnvironment 
designer is much more powerful than its ancestor. It works with any local and remote 
ADO connection and even supports multiple connections. Moreover, it qualifies as 
an ADO data source, so you can bind fields to it, as I'll show later.</p>

<p>Another advantage of using DataEnvironment objects defined at design 
time instead of ADO objects built through code is that&#8212;similarly to forms&#8212;a 
DataEnvironment instance is a self-sufficient entity that contains other objects and the 
code to manage them. You can add public properties and methods to 
DataEnvironment designers, which greatly improves their reusability, as if they were class 
modules specialized to work with databases. I believe that DataEnviroment objects, 
properly used, will revolutionize the way database applications are built.</p>

<p>To add a DataEnvironment designer to the current project, you can choose 
the Add Data Environment command from the Project menu. This command appears 
only if you've added a reference to the Microsoft Data Environment Instance 1.0 
library. You can also create a DataEnvironment designer from the DataView window. 
Finally, you can create a new Data Project from the project gallery. In this case, Visual 
Basic creates a project for you with all the necessary references and an instance of 
the DataEnvironment designer.</p>

<A NAME="350"><h2>Connection Objects</h2></A>

<p>The main object in a DataEnviroment designer is the Connection object. It 
broadly corresponds to the form object in the Form designer in the sense that it's the 
top-level object. Unlike forms, however, a DataEnvironment designer instance can 
contain multiple Connection objects.</p>

<p>You can create a Connection in many ways. When you create a 
DataEnvironment, it already contains a default Connection object, so you simply need to set its 
properties. You do this either by pressing F4 to display the standard Properties 
window, or (better) by right-clicking on the object and selecting the Properties menu 
command to display its custom property pages. (You get the same effect by clicking on 
the Properties button on the DataEnviroment toolbar.) I won't spend any time 
describing the Connection object's property pages because you're already familiar with 
them. The Provider, Connection, Advanced, and All pages are exactly the same ones 
that you encountered when setting data link's properties in the DataView window or 
when creating the <I>ConnectionString </I>property of an ADO Data control.</p>

<p>The standard Properties window contains a few properties that don't appear 
in the custom property pages. The 
<I>DesignUserName</I> and <I>DesignPassword </I>properties 
let you set the user name and password you want to use when you're creating 
the DataEnvironment object, while <I>RunUserName 
</I>and <I>RunPassword</I> are the user name and password you want to use when the program is executing. For example, 
you might develop the application using an Administrator identity and then check 
how the application behaves at run time when a guest user logs in. You can 
decide whether you want to see the prompt when the connection opens, and you can 
use different settings for design time and run time. The 
<I>DesignPromptBehavior</I> and <I>RunPromptBehavior 
</I>properties can take the following values: 
1-adPromptAlways (always show the login dialog box, so the user is allowed to change login 
data), 2-adPromptComplete (show the login dialog box only if one or more required 
parameters are missing), 3-adPromptCompleteRequired (like the previous one, but 
allow user to enter only required parameters), and 4-adPromptNever (never show the 
login dialog box, and return an error to the application if one or more required 
parameters are missing). You usually set <I>DesignPromptBehavior 
</I>to adPromptComplete and 
<I>RunPromptBehavior</I> to adPromptNever; the latter prevents malicious users 
from logging on to other data sources or entering random user names and passwords 
until they manage to get into the system. Finally, the 
<I>DesignSaveAuthentication </I>and 
<I>RunSaveAuthentication</I> properties determine whether the login information 
described previously is saved in the VBP or the EXE file, respectively. A word of caution is 
in order here: User names and passwords in EXE files aren't encrypted, so 
determined hackers might load the file into a hex editor or parse it in some other way until 
they find that information.</p>

<A NAME="351"><h2>Command Objects</h2></A>

<p>A Command object in the DataEnvironment designer represents an action 
performed on a database. A command object is always a child of a Connection object, in 
much the same way a control is always a child of a form. More precisely, you can create 
a stand-alone Command object, but you can't use it until you make it a child of 
a Connection object.</p>

<A NAME="352"><h3>Creating a Command object</h3></A>

<p>The easiest way to create a Command object is by dragging a table, a view, or a 
stored procedure from the DataView window into the DataEnvironment window. 
Visual Basic then creates the Command object that corresponds to that table, view, or 
stored procedure, and it also creates a parent Connection, if necessary. A Command 
object can be a child only of a Connection that refers to its own database. You can also 
create one or more Command objects that map to stored procedures in a database by 
clicking on the Insert Stored Procedures button on the DataEnvironment toolbar. I used 
this shortcut to quickly create the Command objects visible in Figure 8-19.</p>

<p>There are two kinds of Command objects: ones that return Recordsets and 
ones that don't. The former are SQL queries, stored procedures, tables, or views that 
return a Recordset (which can be empty, if no records in the database meet the 
selection criteria). The latter are SQL commands or stored procedures that insert, 
delete, or modify values in the database but don't return a set of records. For example, 
you can create a Command named AuthorsInCA that returns all the authors that live 
in California by using the following SQL query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Authors WHERE State = 'CA'
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F08ph19x.htm')"> <img src="F08ph19.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-19.</B> <i>You can drag tables, views, and stored procedures from the DataView window to the DataEnvironment designer to create Command objects, and right-click on them to display the custom property pages.</i><!--/caption-->
</p>

<p>Unlike Connection objects, all the properties of a Command object can be 
set in its custom property pages, and you never need to display the standard 
Properties window. In the General tab, you select the database object that the Command 
corresponds to&#8212;a table, a view, a stored procedure, or a synonym&#8212;or you enter 
the SQL text of a query. (You can also run the SQL Query Builder to build the 
query interactively.)</p>

<p>If you have a normal, nonparameterized and nonhierarchical command, 
you can skip all the intermediate tabs and go to the Advanced page, shown in Figure 
8-20. Here you decide the cursor type and location, the type of 
locking to be enforced, the size of the local cache (that is, the number of records read 
from the server when necessary), the timeout for the command, and the maximum 
number of records that the query should return. You can use this last value to prevent a 
query from returning hundreds of thousands of records and so bringing your workstation 
and your network to their knees. Don't worry if you don't understand the real meaning 
of most of these options; they directly map to properties of ADO Recordset 
and Command objects, so their purpose will be clear to you after you read Chapters <a href="#A82">13</a> and <a href="#A90">14</a>.</p>

<p>
<img src="F08ph20.GIF" width=401 height=338 border="0">
<p>
<!--caption--><B>Figure 8-20.</B> <i>The Advanced tab of the Command's property pages.</i><!--/caption-->


<p>The only attribute in this page that doesn't directly relate to an ADO 
property is the Recordset Returning check box. Most of the time, the DataEnvironment 
designer is able to determine whether you've added a Recordset returning or 
non-Recordset returning command, but if it makes a wrong assumption you can correct it by 
acting on this check box.</p>

<A NAME="353"><h3>Parameterized commands</h3></A>

<p>Using parameters adds a lot of flexibility to Command objects. You can create 
two types of parameterized Command objects: those based on a SQL query and 
those based on a stored procedure with parameters. For the first kind, you must enter 
a parameterized SQL query, using question marks as placeholders for parameters. 
For example, you can create a Command object named AuthorsByState, which 
corresponds to the following query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Authors WHERE State = ?
</pre>
</td></tr>
</table></p>


<p>After you've entered this query in the General tab of the Properties dialog box, 
switch to the Parameters tab and check that the DataEnvironment has correctly 
determined that the query embeds one parameter. In this tab, you can assign a name to 
each parameter, set its data type and size, and so on. All parameters in this type of 
query are input parameters.</p>

<p>To create a Command object that maps a stored procedure, you can click 
on the Insert Stored Procedure button and select the stored procedure you're 
interested in. The DataEnvironment is usually able to retrieve the stored procedure syntax 
and correctly populate the Command's Parameters collection. You should pay 
attention to the direction of the parameters because sometimes the DataEnvironment 
doesn't correctly recognize output parameters and you have to manually fix their 
<I>Direction</I> attribute. Also, double-check that all 
<I>string</I> parameters have nonzero sizes.</p>

<A NAME="354"><h2>Data Binding with the DataEnvironment Designer </h2></A>

<p>DataEnvironment designers can work as ADO data sources, so they appear in 
the DataSource combo box in the Properties window at design time. When you bind 
a control to a DataEnvironment designer, however, you must also set the 
<I>DataMember </I>property of a data-aware control to the name of the specific Command object 
you're binding it to. Only recordset-returning Command objects can work as data sources.</p>

<A NAME="355"><h3>Fields and grids</h3></A>

<p>You don't need to manually create controls on a form and bind them to the 
DataEnvironment object because Visual Basic 6 allows you to do everything with 
drag-and-drop. To see how simple it is to use this feature, open a new form, click on 
a Command object in the DataEnvironment window, and drop it on the form. 
You'll immediately see the form being populated with many TextBox and 
(possibly) CheckBox controls, one for each field in the Command object, as shown 
in Figure 8-21. You can press F5 to check that the data binding mechanism is working correctly.</p>

<p>
<A HREF="javascript:fullSize('F08ph21x.htm')"> <img src="F08ph21.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-21.</B> <i>A group of bound controls created by dropping a Command object on a form.</i><!--/caption-->
</p>

<p>Because you don't have a Data control on the form, you must provide the 
navigational buttons yourself. This is really easy: Just create two CommandButton 
controls, name them <I>cmdPrevious </I>and 
<I>cmdNext</I>, and then add the code you see here.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdNext_Click()
    DataEnvironment1.rsAuthors.MoveNext
End Sub
Private Sub cmdPrevious_Click()
    DataEnvironment1.rsAuthors.MovePrevious
End Sub
</pre>
</td></tr>
</table></p>


<p>The preceding code works because the DataEnvironment creates at run 
time, for each recordset-returning Command object, a Recordset whose name is 
<I>rs</I> followed by the Command's name. Using the same method, you can add buttons for 
deleting and inserting records, finding values, and so on. See Chapters <a href="#A82">13</a> and <a href="#A90">14</a> for all 
the properties, methods, and events of the ADO Recordset object.</p>

<p>You aren't restricted to creating simple controls, and you can even use 
bound grids to display a tabular view of your records. If you want to use bound grids, 
you must start the drag-and-drop operation using the right mouse button, release 
the button when the cursor is over the form, and select the Data Grid option from 
the pop-up menu. The sample application shown in Figure 8-22 demonstrates how 
you can use the parameterized AuthorsByState command to display a subset of all 
the records in the grid. This is the code behind the Filter push button:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdFilter_Click()
    ' Run the query, passing the expected &quot;State&quot; parameter.
    DataEnvironment1.AuthorsByState txtState
    ' Ensure that the grid is bound to the DataEnvironment.
    Set DataGrid1.DataSource = DataEnvironment1
    DataGrid1.DataMember = &quot;AuthorsByState&quot;
End Sub
</pre>
</td></tr>
</table></p>


<p>Or you can bind the grid directly to the Recordset produced by the 
parameterized query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set DataGrid1.DataSource = DataEnvironment1.rsAuthorsByState
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F08ph22x.htm')"> <img src="F08ph22.JPG" width=404 height=235 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-22.</B> <i>The sample application shows a record-view and table-view of the Authors table, and it lets you filter records on their State fields.</i><!--/caption-->
</p>

<A NAME="356"><h3>Selecting field types</h3></A>

<p>When you drop a Command object (or an individual database field) onto a form, 
the DataEnvironment designer creates by default TextBox controls for all types of 
fields, except CheckBox controls for Boolean fields. You can change this default 
behavior in the following ways:</p>

<UL>
<p><li> Click on the Options button on the DataEnvironment toolbar to bring 
up the dialog box shown in Figure 8-23, where you can select which 
control will be created when you drop a field of a given type. ADO field 
types are grouped by category, but you can tick the Show All Data Types 
check box to view individual data types. For each field type, you can select 
the corresponding control among all the intrinsic Visual Basic controls and 
all the ActiveX controls installed on the machine. The Drag And Drop 
Field Captions check box determines whether the DataEnvironment 
designer will also create Label controls for each field.</li></p>

 
<p>
<img src="F08ph23.GIF" width=401 height=373 border="0">
<p>
<!--caption--><B>Figure 8-23.</B> <i>The Field mapping tab of the Options dialog box lets you select which type of control will be created when you drop a field on a form.</i><!--/caption-->


<p><li> You can choose from two special field types. The Caption element 
lets you specify which control will be used to label the other fields. 
(The default is a Label control.) Multiple is the control to use when you drag 
a Command object using the left mouse button. You can specify a 
grid-like control if you want, but leaving the default value (TextBox control) 
won't hurt because you can always drop either a DataGrid or a 
Hierarchical FlexGrid control if you start dragging with the right mouse button.</li></p>

<p><li> For maximum flexibility, you can select the control to be used for 
each individual field of a particular Command object. Just right-click on a 
field in the DataEnvironment designer, issue the Properties menu 
command, and then select the control type and the caption to be used when the 
user drops that field on a form.</li></p>
</UL>
 
<A NAME="357"><h2>Hierarchical Commands</h2></A>

<p>The DataEnvironment designer offers a design-time interface to one of the 
most powerful features of ADO, the ability to create 
hierarchical Recordsets. A hierarchical Recordset contains a set of records, which in turn might contain other child 
Recordsets. A practical example will clarify why this is a good thing. Let's say that you want 
to create a list of authors from the Biblio.mdb database, and for each author you 
want to display (and possibly update) the list of titles he or she has written. You can 
retrieve this information by executing an SQL JOIN query, or you can manually populate 
a form that shows this master/detail relationship by executing a distinct SQL 
SELECT query on the Title Author and Titles tables each time the user moves to a new 
record from the main Authors table. But neither of these approaches seems 
particularly satisfying, especially now that you can use a hierarchical Recordset instead. Let 
me show you how it works.</p>

<A NAME="358"><h3>Relation hierarchies</h3></A>

<p>You can create hierarchical Recordsets inside a DataEnvironment designer in 
a couple of different ways. The first one requires that you display the Relation 
property page of the Command object that corresponds to the main table in the 
relationship. To see how this technique works, open a connection to the Biblio.mdb 
database in the DataView window, and then drag its Authors and Title Author tables to 
the DataEnvironment window. To make the latter Command a child of the former 
one, display the Title_Author object's property pages and switch to the Relation tab. 
(See Figure 8-24.)</p>

<p>Click on the Relate To a Parent Command Object check box to activate 
the controls on this page, and then select the parent Command (Authors in this case) 
in the combo box. In the Relation Definition frame, you select the fields through 
which the two Command objects are related. These fields are the primary key in the 
parent Command and a foreign key in the child Command. In this particular example, 
the two fields have the same name in both tables, but this isn't generally the case. 
To complete our example, ensure that the Au_ID item is highlighted in both 
combo boxes, click on the Add button to add to the list of fields, and then click on the 
OK button to confirm. You will notice that the Title_Author Command has become a 
child of the Author Command, at the same level as the latter's fields. In fact, when 
the DataEnvironment designer creates this hierarchical Recordset at run time, its 
fourth field will actually contain the child Recordset.</p>

<p>
<img src="F08ph24.GIF" width=401 height=338 border="0">
<p>
<!--caption--><B>Figure 8-24.</B> <i>The Relation tab of the Properties dialog box.</i><!--/caption-->


<p>To refine the example, we need to create a Titles Command and make it a 
child of the Title_Author object. This time we'll follow a different approach: Right-click 
on the Title_Author Command, and select the Add Child Command object. This 
creates an object called Command1 object. Rename it as Titles, bring up its property 
pages, specify that it takes its records from the Authors table in Biblio.mdb, and then 
switch to the Relation page to complete the relationship. The Title_Author and Titles 
Commands are related through their ISBN field, so you can click on the Add button 
and close the dialog box. You have completed the creation of a 3-level 
hierarchical Recordset.</p>

<p>To test-drive this new object, create a new form, drag the Authors 
Command onto it using the right mouse button, and then select the Hierarchical Flex Grid 
from the menu. This creates an instance of the Microsoft Hierarchical FlexGrid control 
on the form. Before running the program, you need to make a few columns 
invisible, so you should right-click on the grid, select the Retrieve Structure command, 
right-click again to display the Properties dialog box, and switch to the Bands tab. In 
this tab, you can define which fields are visible for each of the three Recordsets 
that participate in the relationship. In Band 0 (Authors), clear the Au_ID check box; 
in Band 1 (Title_Author), clear both the ISBN and Au_ID check boxes (which 
makes the band invisible); and in Band 2 (Titles), clear the Pub_ID, Description, Notes, 
and Comments check boxes. You can now run the application, which should display 
what appears in Figure 8-25. Notice how you can expand and 
collapse rows using the plus and minus symbols near the grid's left border.</p>

<p>You can better this example by adding another level to the hierarchy, 
which you'd need to display information about the publisher of each title. You can add 
the level by dragging the Publishers table from the DataView window to the 
DataEnvironment designer, making it a child Command of the Titles Command. I 
leave this to you as an exercise.</p>

<p>
<A HREF="javascript:fullSize('F08ph25x.htm')"> <img src="F08ph25.JPG" width=404 height=304 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-25.</B> <i>The Hierarchical FlexGrid control displays hierarchical Recordsets and lets you expand and collapse individual rows in the parent Recordset.</i><!--/caption-->
</p>

<A NAME="359"><h3>Grouping hierarchies </h3></A>

<p>The DataEnvironment designer supports two more types of hierarchies, the 
Grouping and the Aggregate hierarchies. A grouping hierarchy is conceptually simple: 
You start with a Command object and build a parent Command that groups the 
records of the original Command according to one or more fields. To see what this means 
in practice, drop the Titles table on the DataEnvironment window, bring up its 
<I>Grouping</I> property page, tick the Group Command Object check box to enable the 
controls on this tab, move the Year Published field from the left list box to the right list 
box, and then close the dialog box to confirm your changes. You'll see that the 
DataEnvironment designer now hosts a new Command object under the main 
Connection, named Titles1_grouped_using_Title1_Grouping, and two folders under it. One 
folder contains the Year Published field (the summary field), the other folder contains 
the fields of the original Titles1 Command. If you bind a Hierarchical FlexGrid 
control to the new parent Command, you'll see that the leftmost column displays 
different year numbers and all the other columns contain information about the titles 
published in that year.</p>

<A NAME="360"><h3>Aggregate hierarchies</h3></A>

<p>An aggregate field is a calculated field that computes an elementary expression 
(the count, the sum, the average, and so on) for a given field in all the rows of a 
Recordset. You often add an aggregate field when you already have a grouping hierarchy. 
To our previous example, we could add a TitleCount field that reports the number 
of books that were published in each year. In a more complex example, you might 
have all your orders grouped by month, with several aggregate fields reporting the 
order count, the sum of orders total, their average amounts, and so on.</p>

<p>You define aggregate fields in the Aggregates tab of the Properties dialog 
box. Click on the Add button to create a new aggregate, give it a meaningful name, and 
select a function among those available: Count, 
Sum, Average, Minimum, Maximum, Standard Deviation, or 
Any. (Any returns the value common to all the 
fields in the selected records.) The Aggregate On combo box determines on which fields 
the aggregate field is evaluated and can be one of the following: Grouping, Grand 
Total, or the name of a child Command. (The actual content of the combo box 
depends on the type of the current Command.) If you select Grand Total, you can enter 
the name of the grand total field. In this case, a new folder is created under the main 
Command, and it will gather all the grand total fields in the Command. (See 
Figure 8-26.)</p>

<p>
<img src="F08ph26.GIF" width=297 height=418 border="0">
<p>
<!--caption--><B>Figure 8-26.</B> <i>A Command object that exploits all three types of hierarchies.</i><!--/caption-->



<a name="A51"></a><h3>5.8.5 Crash Course in SQL</h3>

<A HREF="#A50">[Previous]</A> <A HREF="#A53">[Next]</A><P>

<A NAME="361"><h1>Crash Course in SQL</h1></A>

<p>If you want to work with databases, you must learn to speak their language. 
Databases speak Structured Query Language, better known as SQL, which was 
invented by E. F. Codd in the 1970s. Instead of working with tables one record at a time, 
SQL manages groups of records as a single entity, which makes it suitable for 
creating queries of any complexity. This language has been standardized, and now 
most database servers, and ADO itself, accept its ANSI-92 dialect.</p>

<p>SQL encompasses two distinct categories of statements: data definition 
language (DDL) and data manipulation language (DML). The DDL subset includes a group 
of statements that allow you to create database structures, such as tables, fields, 
indices, and so on. The DML subset includes all the commands that allow you to query 
and modify the data in the database, add new records, or delete existing ones. 
While both subsets are equally important, most of the time you'll use only DML 
statements to retrieve and update data stored in a database whose structure has been 
already defined in advance (possibly by another developer or the database 
administrator). For this reason, I focus in this section exclusively on the DML subset of the 
language. You need the information contained in this section to build queries that can't 
be created interactively using the SQL Query Builder (which permits you to create 
only the simplest queries).</p>

<p>Countless books have been written about SQL, so it's impossible to tell 
you anything new in a few pages. I'm writing this section only to enable those of 
you who've never worked with databases to understand the SQL queries that are 
used in the rest of the book. If you're already proficient with SQL, you can jump to 
the <a href="#A53">next chapter</a> without any hesitation.</p>

<p>Most of the examples in the following sections are based on the Biblio.mdb 
or the NWind.mdb databases. On the companion CD, you'll find a sample 
application (shown in Figure 8-27) that lets you practice with SQL and immediately see the 
results of your query. You can recall previous queries using the less-than and 
greater-than buttons, and you can also safely perform action queries that delete, insert, 
or modify records because all your operations are wrapped in a transaction that's 
rolled back when you close the form.</p>

<p>
<A HREF="javascript:fullSize('F08ph27x.htm')"> <img src="F08ph27.JPG" width=404 height=216 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 8-27.</B> <i>The SQL Training sample application.</i><!--/caption-->
</p>

<A NAME="362"><h2>The SELECT Command</h2></A>

<p>The most frequently used SQL statement is undoubtedly the SELECT command, 
which returns a set of records based on selection criteria.</p>

<A NAME="363"><h3>Basic selections</h3></A>

<p>The simplest SELECT command returns all the records and all the fields from a 
database table:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Publishers
</pre>
</td></tr>
</table></p>


<p>(In all the examples in this section, I use uppercase characters for SQL keywords, 
but you can write them in lowercase characters if you like.) You can refine a 
SELECT command by specifying the list of fields you want to retrieve. If the field name 
includes spaces or other symbols, you must enclose it within square brackets:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT PubID, [Company Name], Address FROM Publishers
</pre>
</td></tr>
</table></p>


<p>You can often speed up a query by retrieving only the fields you're actually 
going to use in your application. SQL supports simple expressions in the field list 
portion of a SELECT. For example, you determine the age of each author at the turn of 
the century using the following command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Author, 2000-[Year Born] AS Age FROM Authors 
</pre>
</td></tr>
</table>
</p>

<p>Notice how the AS clause lets you assign a well-defined name to a 
calculated field, which would otherwise be labeled with a generic name such as 
<I>Expr1001</I>. You can also use aggregate functions such as COUNT, MIN, MAX, SUM, and AVG on 
the table field, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT COUNT(*) AS AuthorCnt, AVG(2000-[Year Born]) AS AvgAge FROM Authors
</pre>
</td></tr>
</table></p>


<p>This statement returns only one record with two fields: AuthorCnt is the 
number of records in the Authors table, and AvgAge is the average of the age of all 
authors in the year 2000.</p>

<p>Aggregate functions generally consider only non-Null values in the 
database. For example, you can learn the number of authors for which the average has 
been evaluated using this statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT COUNT([Year Born]) FROM Authors
</pre>
</td></tr>
</table></p>


<p>The Count(*) syntax is an exception to the general rule in that it returns 
the number of all the records in the result. In a real application, you rarely retrieve 
all the records from a table, though, for a good reason: If the table contains 
thousands of records, you're going to add too much overhead to your system and the 
network. You filter a subset of the records in the table using the WHERE clause. For 
example, you might want to retrieve the names of all the publishers in California:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Name, City FROM Publishers WHERE State = 'CA'
</pre>
</td></tr>
</table></p>


<p>You can also combine multiple conditions using AND and OR Boolean 
operators, as in the following query, which retrieves only the Californian publishers 
whose names begin with the letter <I>M</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Publishers WHERE State = 'CA' AND Name LIKE 'M%'
</pre>
</td></tr>
</table></p>


<p>In the WHERE clause, you can use all the comparison operators (=, &lt;, &lt;=, 
&gt;, &gt;=, and &lt;&gt;) and the LIKE, BETWEEN, and 
IN<I> </I>operators. The BETWEEN operator is used to select all the values in a range:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Titles WHERE [Year Published] BETWEEN 1996 AND 1998
</pre>
</td></tr>
</table></p>


<p>The IN operator is useful when you have a list of values. The query below returns all the publishers located in California, Texas, and New Jersey.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Name, State FROM Publishers WHERE State IN ('CA', 'TX', 'NJ')
</pre>
</td></tr>
</table></p>


<p>SQL lets you embed strings in single quotes or in double quotes. Because 
you usually pass these statements as Visual Basic strings, using single quotes is often 
more practical. But when the string contains a single quote, you must use two 
consecutive single quotes. For example, to search for an author named 
<I>O'Hara</I>, you must use the following query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Authors WHERE Author = 'O''Hara'
</pre>
</td></tr>
</table></p>


<A NAME="364"><h3>Sorting and grouping</h3></A>

<p>The ORDER BY clause lets you affect the order in which records are retrieved. 
For example, you can display publishers in alphabetical order:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Publishers ORDER BY [Company Name]
</pre>
</td></tr>
</table></p>


<p>You can also specify multiple sort keys by separating the keys with 
commas. Furthermore, for each sort key you can add the DESC keyword to sort in 
descending order. For example, you can list publishers sorted by state in ascending order 
and at the same time list all the publishers in the same state by city in descending 
order, as you can see in the following statement. (This is, admittedly, not a really useful 
thing to do, but it works as an example.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Publishers ORDER BY State, City DESC
</pre>
</td></tr>
</table></p>


<p>When the results are sorted, you can decide to take just the first records 
returned by the SELECT, which you do with the TOP clause. For example, you can 
retrieve the five titles published more recently using the following query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT TOP 5 * FROM Titles ORDER BY [Year Published] DESC
</pre>
</td></tr>
</table></p>


<p>Keep in mind, however, that the TOP clause always returns all the records 
with a given value in the field for which the results are sorted. For example, the 
version of the Biblio.mdb database I'm working with includes seven titles published in 
the most recent year (1999), and therefore the preceding query will return seven 
records, not five.</p>

<p>You can define the number of returned records in terms of the percentage 
of the total number of the records that would be returned, using the TOP 
PERCENT clause:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT TOP 10 PERCENT * FROM Titles ORDER BY [Year Published] DESC
</pre>
</td></tr>
</table></p>


<p>The GROUP BY clause lets you create summary records that include 
aggregate values from groups of other records. For example, you can create a report with 
the number of titles published in each year by using the following query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT [Year Published], COUNT(*) As TitlesInYear FROM Titles 
    GROUP BY [Year Published] 
</pre>
</td></tr>
</table></p>


<p>The next query displays the number of titles published in the last 10 years:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT TOP 10 [Year Published], COUNT(*) As TitlesInYear FROM Titles 
    GROUP BY [Year Published] ORDER BY [Year Published] DESC
</pre>
</td></tr>
</table></p>


<p>You can prepare more sophisticated groupings with the HAVING clause. 
This clause is similar to the WHERE clause, but it acts on the fields produced by the 
GROUP BY clause and is often followed by an aggregate expression. The next query is 
similar to the previous one but returns a record only for those years when more than 
50 titles have been published:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT [Year Published], COUNT(*) As TitlesInYear FROM Titles 
    GROUP BY [Year Published] HAVING COUNT(*)  &gt; 50
</pre>
</td></tr>
</table></p>


<p>You can have both a WHERE clause and a HAVING clause in the same 
query. If you use both, SQL applies the WHERE clause first to filter the records from 
the original table. The GROUP BY clause then creates the groups, and finally the 
HAVING clause filters out the grouped records that don't meet the condition it specifies.</p>

<p>The following statement returns the names of all the cities where there's at 
least one publisher:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT City FROM Publishers 
</pre>
</td></tr>
</table></p>


<p>This query presents some problems in that it also returns records for which 
the City field is Null, and, in addition, it returns duplicate values when there's more 
than one publisher in a city. You can solve the first problem by testing the field with 
the ISNULL function, and you can filter out duplicates using the DISTINCT keyword:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT DISTINCT City FROM Publishers WHERE NOT ISNULL(City)
</pre>
</td></tr>
</table></p>


<A NAME="365"><h3>Subqueries</h3></A>

<p>All the examples I've shown you so far retrieved their records from just one 
table. Most of the time, however, the data you're interested in is distributed in multiple 
tables. For example, to print a list of titles and their publishers you must access both the 
Titles and the Publishers tables. You do this easily by specifying both table names in 
the FROM clause and then setting a suitable WHERE clause:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Titles.Title, Publishers.Name FROM Titles, Publishers 
    WHERE Titles.PubID = Publishers.PubID
</pre>
</td></tr>
</table></p>


<p>You use the <I>tablename.fieldname </I>syntax to avoid ambiguities when the 
two tables have fields with the same name. Here's another example, which retrieves 
all the titles published by a given publisher. You need to specify both tables in the 
FROM clause, even if the returned fields come only from the Titles table:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Titles.* FROM Titles, Publishers WHERE Publishers.Name = 'MACMILLAN'
</pre>
</td></tr>
</table></p>


<p>But you can use another&#8212;and often more efficient&#8212;way to retrieve the 
same information, based on the fact that the SELECT statement can return a value, 
which you can use to the left of the = operator. The next query uses a nested SELECT 
query to get a list of all the titles from a given publisher:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Titles WHERE PubID = 
    (SELECT PubID FROM Publishers WHERE Name = 'MACMILLAN')
</pre>
</td></tr>
</table></p>


<p>If you aren't sure whether the subquery returns only one record, use the 
IN operator instead of the equal sign. You can make these subqueries as complex as 
you like. For example, the following query returns the titles published by all the 
publishers from California, Texas, and New Jersey:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Titles WHERE PubId IN 
    (SELECT PubID FROM Publishers WHERE State IN ('CA', 'TX', 'NJ'))
</pre>
</td></tr>
</table></p>


<p>You can also use aggregate functions, such as SUM or AVG. The next 
query returns all the items from the Orders table in NWind.mdb for which the Freight 
value is higher than the average Freight value:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Orders WHERE Freight &gt; (SELECT AVG(Freight) FROM Orders)
</pre>
</td></tr>
</table></p>


<A NAME="366"><h3>Joins</h3></A>

<p>The join operation is used to retrieve data from two tables that are related to 
each other through a common field. Conceptually, the result of the join is a new 
table whose rows consist of some or all the fields from the first table followed by some 
or all the fields from the second table; the expression in the ON clause in a JOIN 
command determines which rows from the second table will match a given row from 
the first table. For example, the following query returns information about all titles, 
including the name of their publisher. I already showed that you can complete this task using 
a SELECT command with multiple tables, but an INNER JOIN command is often better:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Titles.Title, Titles.[Year Published], Publishers.Name FROM Titles 
    INNER JOIN Publishers ON Titles.PubID = Publishers.PubID
</pre>
</td></tr>
</table></p>


<p>This is an important detail: the previous statement retrieves only those titles 
for which there is a publisher, that is, those whose PubID field isn't Null. While the 
INNER JOIN (also known as <I>equi-join</I>) is the most common form of join operation, SQL 
also supports two other types of joins, the LEFT JOIN and the RIGHT JOIN 
operations. The LEFT JOIN operation retrieves all the records in the first table, regardless 
of whether there's a corresponding record in the other table. For example, the 
following command retrieves all the titles, even if their publisher isn't known:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Titles.Title, Titles.[Year Published], Publishers.Name FROM Titles 
    LEFT JOIN Publishers ON Titles.PubID = Publishers.PubID
</pre>
</td></tr>
</table></p>


<p>The RIGHT JOIN operation retrieves all the records in the second table, 
even if there isn't a related record in the first table. The following statement selects all 
the publishers, whether or not they have published any titles:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Titles.Title, Titles.[Year Published], Publishers.Name FROM Titles 
    RIGHT JOIN Publishers ON Titles.PubID = Publishers.PubID
</pre>
</td></tr>
</table></p>


<p>Join operations can be nested. Here's an example that retrieves 
information about all authors and the books they've written. The two tables are related 
through the intermediate table Title Author, so we need a nested INNER JOIN operation:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Author, Title, [Year Published] FROM Authors INNER JOIN 
    ([Title Author] INNER JOIN Titles ON [Title Author].ISBN = Titles.ISBN) 
    ON Authors.Au_Id = [Title Author].Au_ID
</pre>
</td></tr>
</table></p>


<p>Of course, you can filter records using a WHERE clause in both the nested 
and the external join. For example, you can return only titles published before 1960:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Author, Title, [Year Published] FROM Authors INNER JOIN 
    ([Title Author] LEFT JOIN Titles ON [Title Author].ISBN = Titles.ISBN) 
    ON Authors.Au_Id = [Title Author].Au_ID WHERE [Year Published] &lt; 1960
</pre>
</td></tr>
</table></p>


<A NAME="367"><h3>Unions</h3></A>

<p>You can append results to a SELECT command using the UNION keyword. Say 
that you want to send your Christmas greetings to all your customers and suppliers. 
You can retrieve their names and addresses using the following query:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT Name, Address, City FROM Customers 
    UNION SELECT CompanyName, Address, City FROM Suppliers
</pre>
</td></tr>
</table></p>


<p>The two tables can have different structures, provided that the fields 
returned by each SELECT command are of the same type.</p>

<A NAME="368"><h2>The INSERT INTO Command</h2></A>

<p>The INSERT INTO command adds a new record to a table and sets its fields in 
one operation. You must provide a list of field names and values, as in the 
following statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>INSERT INTO Authors (Author, [Year Born]) VALUES ('Frank Whale', 1960)
</pre>
</td></tr>
</table></p>


<p>If the table has a key field that's automatically generated by the database 
engine&#8212;as is true for the Au_Id field in the Authors table&#8212;you don't have to 
include it in the field list. Null values are inserted in all the columns that you omit from 
the field list and that aren't automatically generated by the database engine. If you 
want to insert data that's already stored in another table, you can append a SELECT 
command to the INSERT INTO statement. For example, the following command 
copies all the records from a table called NewAuthors into the Authors table:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>INSERT INTO Authors SELECT * FROM NewAuthors 
</pre>
</td></tr>
</table></p>


<p>You often need a WHERE clause to limit the number of records that are 
inserted. You can copy from tables with a different structure or with different name fields, 
but in this case you need to use aliases to make field names match. The statement which follows copies an entry from the Contact table to the Customer 
table but accounts for different field names.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>INSERT INTO Customers SELECT ContactName AS Name, Address, City, State 
    FROM Contacts WHERE Successful = True
</pre>
</td></tr>
</table></p>


<A NAME="369"><h2>The UPDATE Command</h2></A>

<p>The UPDATE command modifies the values in one or more records. You often 
use a WHERE clause to restrict its action to the record(s) you're interested in:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>UPDATE Authors SET [Year Born] = 1961 WHERE Author = 'Frank Whale'
</pre>
</td></tr>
</table></p>


<p> You can also use expressions in SET clauses. For example, the following 
statement increments the discount for all the items in the Order Details table that 
have been ordered by customer <I>LILAS</I>. (Run this query against the NWind.mdb database.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>UPDATE [Order Details] INNER JOIN Orders 
    ON [Order Details].OrderID = Orders.OrderID 
    SET Discount = Discount + 0.10 WHERE CustomerID = 'LILAS'
</pre>
</td></tr>
</table></p>


<A NAME="370"><h2>The DELETE Command</h2></A>

<p>The DELETE command lets you remove one or more records from a table. You 
must append a WHERE clause to this command unless you want to delete all the 
records in the table. For example, the following command deletes all the titles that 
were published before 1950:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DELETE FROM Titles WHERE [Year Published] &lt; 1950
</pre>
</td></tr>
</table></p>


<p>A DELETE operation can fire cascading delete operations in other tables if 
an integrity relationship is enforced between the two tables. For example, you can 
delete a record in the Orders table in NWind.mdb and the Jet engine automatically 
deletes all the related records in the Order Details table. In general, however, you 
can't delete a record in a table if a foreign key in another table points to it. For 
example, you can't delete a record in the Employees table until you delete the records in 
the Orders table whose EmployeeID values are pointing to the record you want to 
delete. You can do the latter operation using an INNER JOIN clause in the 
DELETE command. Keep in mind that when multiple tables are involved, you need to 
specify which one you want to delete records from immediately after the DELETE command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DELETE Orders.* FROM Orders INNER JOIN Employees ON Orders.EmployeeID =
    Employees.EmployeeID WHERE Employees.LastName = 'King'
</pre>
</td></tr>
</table></p>


<p>After that, you can delete the records in the Employees table:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DELETE FROM Employees WHERE Employees.LastName = 'King'
</pre>
</td></tr>
</table></p>


<p>This chapter concludes the first part of this book, which has covered all the 
basic concepts you need before diving into more complex programming issues. We'll 
go back to database programming in <a href="#A82">Chapter 13</a>, but in the meantime let's see how 
you can take advantage of the ActiveX controls that come in the Visual Basic package.</p>


<a name="A52"></a><h1>6. Part II: The User Interface</h1>
<a name="A53"></a><h2>6.1 Chapter 9 -- Advanced Forms and Dialogs</h2>

<A HREF="#A51">[Previous]</A> <A HREF="#A54">[Next]</A><P>


<font size="+3">Chapter 9</font>

<A NAME="371"><H1>Advanced Forms and Dialogs</H1></A>
<p>Forms have evolved considerably since their first appearance in Microsoft 
Visual Basic 1, yet many programmers fail to take advantage of all their new features. In 
most cases, programmers deal with forms as they did in Visual Basic 3, not realizing 
that the inner workings of forms has changed.
</p>
<p>In this chapter, I focus both on regular forms and MDI forms, and I also 
explain how to create parameterized form components and how to implement 
drag-and-drop. I also describe several new Visual Basic 6 features, including dynamic control 
creation and the capability to deliver data-driven forms that can be reused against 
different data sources.
</p>


<a name="A54"></a><h3>6.1.1 Standard Usage of Forms</h3>

<A HREF="#A53">[Previous]</A> <A HREF="#A55">[Next]</A><P>

<A NAME="372"><H1>Standard Usage of Forms</H1></A>
<p>In <a href="#A9">Chapter 2</a>, I described the many properties, methods, and events of Visual 
Basic forms. In this chapter, I illustrate how forms fit into the object-oriented 
programming paradigm and how you can exploit them to build effective and bug-free applications.
</p>

<A NAME="373"><H2>Forms as Objects</H2></A>
<p>The first step in getting the most out of Visual Basic forms is recognizing what 
they really are. In all versions from Visual Basic 4 on, in fact, a form is nothing but a 
class module plus a designer. As you might recall from <a href="#A9">Chapter 2</a>, 
<I>designers </I>are modules integrated into the Visual Basic environment that let programmers visually 
design characteristics of objects to be instantiated at run time.
</p>
<p>The form designer lets you define the aspect of your form at design time 
by placing child controls on its surface and setting their properties. When you 
launch the application, the Visual Basic runtime translates these pieces of information 
into a series of calls to Windows API functions that create the main window and then 
all its child controls. Translated into C or C++ code, a typical Visual Basic form with 
some controls on it would require several hundred lines of code, which gives you an 
idea why Visual Basic has quickly become the most popular language for 
building Windows software.
</p>
<p>It's easy to prove that a form is nothing but an object with a user interface. 
Say that you have a form in your application named frmDetails. You can instantiate it 
as if it were a regular object using a standard New operator:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim frm As frmDetails
Set frm = New frmDetails
frm.Show
</pre>
</td></tr>
</table>
</p>
<p>A consequence of forms being objects is that they can expose 
properties, methods, and events exactly as regular objects do. For instance, you can add to a 
form module one or more Public Property procedures that encapsulate values 
contained in the form's child controls, as in the following code:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the frmDetails form 
Public Property Get Total() As Currency
    Total = CCur(txtTotal.Text)
End Property
</pre>
</td></tr>
</table>
</p>
<p>Similarly, you can define Public methods that let the main application ask 
the form object to perform an action, for example, to print its contents on the printer:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Note that Sub, Function, and Property procs are Public by default.
Sub PrintOrders()
    ' Here you place the code that prints the form's contents.
End Sub
</pre>
</td></tr>
</table>
</p>
<p>From outside the form module, you access the form's properties and 
methods as you would do with any object:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Total As Currency
Total = frm.Total()
frm.PrintOrders
</pre>
</td></tr>
</table>
</p>
<p>The most important difference between form modules and regular class 
modules is that the former can't be made Public and accessed from another 
application through COM.
</p>

<A NAME="374"><h3>Hidden global form variables</h3></A>

<p>The notion that a form is a special type of object leads to an apparent paradox. 
As you know, to use an object you must first initialize it. But you can (and usually 
do) reference a form directly without any prior explicit initialization. For example, in 
the following code snippet you don't need to explicitly create the frmDetails form:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdDetails_Click()
    frmDetails.Show
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Since forms are objects, why doesn't this statement raise error 91: &quot;Object 
variable or With block variable not set&quot;? The reason is mostly historical. When 
Visual Basic 4 was released, Microsoft engineers were faced with the issue of backward 
compatibility with Visual Basic 3 and previous versions for which the preceding code 
was OK. Clearly, if Visual Basic 4 couldn't have imported existing Visual Basic 3 
projects, it would have been a flop. The solution the engineers came up with is both 
simple and elegant. For each form in the current application, the compiler defines a 
hidden global variable, whose name coincides with that of the form class:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' (Note: you will never actually see these declarations.)
Public frmDetails As New frmDetails
Public frmOrders As New frmOrders
' (Same for every other form in the application)
</pre>
</td></tr>
</table>
</p>
<p>When your code references the <I>frmDetails</I> entity, you aren't referring to the 
frmDetails form <I>class</I>, you're referring to a 
<I>variable </I>whose name happens to be the same as 
its class. Because this variable is declared to be auto-instancing, Visual Basic creates 
a new instance of that particular form class as soon as your code references the variable.
</p>
<p>This ingenious trick, based on a hidden global form variable, has 
permitted developers to painlessly port their existing Visual Basic 3 applications to Visual 
Basic 4 and later versions. At the same time, as you'll see in a moment, these 
hidden variables introduce a few potential problems that you need to be aware of.
</p>

<A NAME="375"><h3>The &quot;clean form instance&quot; problem</h3></A>

<p>To illustrate a problem that often manifests itself when working with forms, I'll 
create a simple frmLogin form, which asks the end user for his or her name and 
password and refuses to unload if the password isn't the correct one. This simple 
form has only two public properties, 
<I>UserName</I> and <I>Password</I>, which are set to the 
contents of the txtUserName and txtPassword controls, respectively, in the 
<I>Unload</I> event procedure. This is the complete source code of the frmLogin form module:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public UserName As String
Public Password As String

Private Sub cmdOK_Click()
    ' Unload this form only if password is OK.
    If LCase$(txtPassword) = &quot;balena&quot; Then Unload Me
End Sub

Private Sub Form_Load()
    ' Move property values into form fields.
    txtUserName = UserName
    txtPassword = Password
End Sub

Private Sub Form_Unload(Cancel As Integer)
    ' Move field contents back into public properties.
    UserName = txtUserName
    Password = txtPassword
End Sub
</pre>
</td></tr>
</table>
</p>
<p>You can display the frmLogin form and read its properties to retrieve 
values entered by the end user:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Code in frmMain form
Private Sub cmdShowLogin_Click()
frmLogin.Show vbModal
' Execution gets here only if password is OK.
MsgBox frmLogin.UserName &amp; &quot; logged in.&quot;
End Sub
</pre>
</td></tr>
</table>
</p>
<p>To test that this form works correctly, run the main form, click on 
its cmdShowLogin button, and then enter the correct user name and password. 
(Mine is shown in Figure 9-1). When the frmMain form regains control, it greets you 
with a message box. Apparently, everything works as it should. But if you click again 
on the Login button, the frmLogin form appears again; however, this time the user 
name and password fields are already filled with the values from the previous call. This 
isn't what I'd call a secure way to manage passwords!
</p>

<p>
<A HREF="javascript:fullSize('f09ph01x.htm')"> <img src="f09ph01.JPG" width=404 height=258 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-1.</B> <i>The Login demo application.</i><!--/caption-->
</p>

<p>To understand what has happened, add the following statements to the 
frmLogin form module:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Initialize()
    Debug.Print &quot;Initialize event&quot;
End Sub
Private Sub Form_Terminate()
    Debug.Print &quot;Terminate event&quot;
End Sub
</pre>
</td></tr>
</table>
</p>
<p>If you now run the program and repeat the same sequence of actions that I 
just described, you'll see that the 
<I>Initialize</I> event is called as soon as you reference 
the <I>frmLogin</I> variable in code, whereas the 
<I>Terminate</I> event is never invoked. In other words, the second time you show the frmLogin form, you're actually using the 
same instance created the first time. The form has been unloaded normally, but Visual 
Basic hasn't released the instance data area associated with the form instance&#8212;that is, 
the area where Private and Public variables are stored. For this reason, the value 
of <I>UserName</I> and <I>Password</I> properties persist from the first call, and you'll find them 
in the two TextBox controls. In a real application, this behavior can lead to bugs that 
are very difficult to discover because they aren't immediately visible in the user interface.
</p>
<p>You can work around this issue by forcing Visual Basic into releasing the 
form instance so that the next time you reference the form a new instance will be 
created. You can choose from two methods to achieve this. The most obvious one is to 
set the form variable to Nothing after returning from the 
<I>Show</I> method:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdShowLogin_Click()
    frmLogin.Show vbModal
    MsgBox frmLogin.UserName &amp; &quot; logged in.&quot;
    <B>' Set the hidden global form variable to Nothing.</B>
    <B>Set frmLogin = Nothing</B>
End Sub
</pre>
</td></tr>
</table>
</p>
<p>The other method is a more object-oriented way to achieve the same result. 
You simply need to explicitly create a local form variable with the same name as the 
hidden global variable so that the local variable takes precedence over the global variable:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdShowLogin_Click()
    <B>Dim frmLogin As New frmLogin</B>
    frmLogin.Show vbModal
    MsgBox frmLogin.UserName &amp; &quot; logged in.&quot;
End Sub
</pre>
</td></tr>
</table>
</p>
<p>If you now run the program, you'll see that when the form variable goes out of 
scope Visual Basic correctly invokes the form's 
<I>Form_Terminate</I> event, which is a 
confirmation that the instance is correctly 
destroyed: An interesting benefit of this technique is 
that you can create multiple instances of any nonmodal form, as you can see in Figure 9-2.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdShowDocument_Click()
    Dim TextBrowser As New TextBrowser
    TextBrowser.Filename = txtFilename.Text
    ' Show the form, making it a child form of this one. 
    TextBrowser.Show, Me
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('f09ph02x.htm')"> <img src="f09ph02.JPG" width=404 height=300 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-2.</B> <i>Using explicit form variables, you can create and display multiple instances of the same form. All child forms are shown in front of their parent form, even if the parent form has the focus.</i><!--/caption-->
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>The <I>Show</I> method supports a second, optional argument that permits 
you to specify the parent form of the form being shown. When you pass a value 
to this argument, you achieve two interesting effects: the child form is always 
shown in front of its parent, even if the parent has the focus, and when the parent 
form is closed or minimized, all its child forms are also automatically closed or 
minimized. You can take advantage of this feature to create floating forms that host a 
toolbar, a palette of tools, a group of icons, and so on. This technique is most effective 
if you set the <I>BorderStyle</I> property of the child form to 4-Fixed ToolWindow 
or 5-Sizable ToolWindow.

</blockquote></div>
</p>
<p>You can find the complete source code of the frmTextBrowser form module 
on the companion CD. Note that in this case you're working with modeless 
forms. Consequently, when the form variable goes out of scope the form is still visible, 
which prevents Visual Basic from releasing the instance data area. When eventually the 
end user unloads the form, the Visual Basic runtime fires the 
<I>Form_Terminate</I> event immediately after the 
<I>Form_Unload</I> event. This seems to break the rule that any 
object is released as soon as the program destroys the last reference to it, but we 
haven't really destroyed the last reference, as I'll explain next.
</p>

<A NAME="376"><h3>The Forms collection</h3></A>

<p>The Forms collection is a global collection that contains all the currently loaded 
forms. This means that all loaded forms are referenced by this collection, and this 
additional reference keeps the form alive even if the main application has released all the 
references to a form. You can exploit the Forms collection to retrieve a reference to 
any form, even though the application has set to Nothing all the other references to 
it. All you need is the following function:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function GetForm(formName As String) As Form
    Dim frm As Form
    For Each frm In Forms
        If StrComp(frm.Name, formName, vbTextCompare) = 0 Then
            Set GetForm = frm
            Exit Function
        End If
    Next
End Function
</pre>
</td></tr>
</table>
</p>
<p>If there are multiple occurrences of the same form, the preceding 
function returns the first reference to it in the Forms collection. You can use this function 
to reference a form by its name, as in this code:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>GetForm(&quot;frmLogin&quot;).Caption = &quot;Login Form&quot;
</pre>
</td></tr>
</table>
</p>
<p>You should be aware that the <I>GetForm</I> function returns a reference to a 
generic Form object. It therefore exposes the interface common to all forms, which 
includes properties such as <I>Caption</I> and 
<I>ForeColor</I> and methods such as <I>Move</I> and 
<I>Show</I>. You can't use this interface to access any custom method or property you have 
defined for a particular form class. Instead, you must 
<I>cast</I> the generic Form reference to a specific variable:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim frm As frmLogin
Set frm = GetForm(&quot;frmLogin&quot;) = &quot;Login Form&quot;
username = frm.UserName
</pre>
</td></tr>
</table>
</p>

<A NAME="377"><h2>Reusable Forms</h2></A>

<p>The notion that forms are objects suggests that you can reuse them exactly as 
you reuse class modules. You can reuse forms many ways, the simplest one being to 
store them as templates, as I suggested in <a href="#A9">Chapter 2</a>. But you can take advantage of 
more advanced and flexible techniques for form code reuse. I'll describe these 
techniques in the following sections.
</p>

<A NAME="378"><h3>Using custom properties and methods</h3></A>

<p>Many business applications show a calendar for the user to select one or more 
dates. Visual Basic comes with a MonthView Microsoft ActiveX control (see <a href="#A67">Chapter 11</a>), 
but a custom form has its advantages: Just to name a few, you can customize its size, 
the language used for months and the names of days of the week, and colors used 
for holidays. In general, a custom form gives you the greatest flexibility and control 
over the user interface. On the companion CD, you'll find the complete source code 
for the frmCalendar form module shown in Figure 9-3. The buttons with day 
numbers are arranged in an array of OptionButton controls whose 
<I>Style</I> property is set to 1-Graphical.
</p>

<p>
<A HREF="javascript:fullSize('f09ph03x.htm')"> <img src="f09ph03.JPG" width=404 height=292 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-3.</B> <i>A custom Calendar form that communicates with the main application through custom properties, methods, and events.</i><!--/caption-->
</p>

<p>The frmCalendar form exposes several properties that let you customize 
its interface, such as <I>DialogTitle</I> (the caption of the dialog box), 
<I>FirstDayOfWeek</I>, and 
<I>SaturdayIsHoliday</I> (useful for customizing the appearance of the calendar). There 
are also properties for retrieving the date selected by the user: 
<I>CancelPressed</I> (True if the end user hasn't selected any date), 
<I>SelectedDate</I> (a read/write Date value), 
<I>Day</I>, <I>Month</I>, and <I>Year</I> (read-only properties that return a given component of 
<I>SelectedDate</I>). The module exposes a single method, 
<I>ShowMonth</I>, that displays a given month in the dialog box, and optionally highlights a particular day:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdCalendar_Click()
    Dim Calendar As New frmCalendar
    Calendar.DialogTitle = &quot;Select a new date for the appointment&quot;
    ' Highlight the current day/month/year.
    Calendar.ShowMonth Year(Now), Month(Now), Day(Now)
    ' Show the calendar as a modal dialog.
    Calendar.Show vbModal
    ' Get the result if the user didn't press Cancel.
    If Not Calendar.CancelPressed Then
        AppointmentDate = Calendar.SelectedDate
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
<p>In general, when working with a form as an object, you should provide the 
form with an interface that lets you avoid accessing the form's native properties. For 
example, the frmCalendar form module exposes the 
<I>DialogTitle</I> property, and client code should use it instead of the standard 
<I>Caption</I> property. This way, the client doesn't break the form object encapsulation, which in turn makes it possible for 
you to have control of what happens inside the form module. Alas, while you can 
build really robust class modules, you have no way to prevent the application from 
directly accessing the form's native properties or the controls on the form's surface. 
Nevertheless, you should exercise this discipline if you want to enjoy all the benefits 
of using forms as objects.
</p>

<A NAME="379"><h3>Adding custom events</h3></A>

<p>In the previous code example, the frmCalendar form is displayed as a modal 
dialog box, which pauses the execution of the program until the dialog box is closed. 
When the dialog box closes, you can query the form's properties to retrieve the end 
user's choices. In many circumstances, however, you might want to display a form as 
a modeless dialog box. In this case, you need a way to learn when the user closes 
the form so that you can query its 
<I>SelectedDate</I> property. You can accomplish this 
by adding a couple of custom events to the form module:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Event DateChanged(newDate As Date) 
Event Unload(CancelPressed As Boolean)
</pre>
</td></tr>
</table>
</p>
<p>These custom events increase the usability of the frmCalendar module. To 
trap these custom events, you need a module-level 
<I>WithEvents</I> variable in the form that's showing the calendar dialog box, as you would for a regular object:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the frmMain form
Dim WithEvents Calendar As New frmCalendar

Private Sub cmdCalendar_Click()
    Set Calendar = New frmCalendar
    Calendar.DialogTitle = &quot;Select a new date for the appointment&quot;
    Calendar.ShowMonth Year(Now), Month(Now), Day(Now)
    Calendar.Show           ' Show as a modeless dialog box.
End Sub

Private Sub Calendar_DateChanged(newDate As Date)
    ' Show the date currently selected on a Label control.
    lblStatus.Caption = Format(newDate, &quot;Long Date&quot;)
End Sub

Private Sub Calendar_Unload(CancelPressed As Boolean)
    If CancelPressed Then
        MsgBox &quot;Command canceled&quot;, vbInformation
    Else
        MsgBox &quot;Selected date: &quot; &amp; Format$(Calendar.SelectedDate, _
            &quot;Long Date&quot;), vbInformation
    End If
    ' We don't need this variable any longer.
    Set Calendar = Nothing
End Sub
</pre>
</td></tr>
</table>
</p>
<p><div class="note"><blockquote><b>NOTE</b><hr>
You might wonder why you need a custom 
<I>Unload </I>event: since the <I>Calendar</I> variable is referencing the frmCalendar form, you might think it 
capable of trapping its <I>Unload</I> event. This assumption isn't correct because, in fact, 
the <I>Calendar</I> variable is pointing to the frmCalendar interface, whereas the 
<I>Unload</I> event as well as other form events such as 
<I>Resize</I>, <I>Load</I>, <I>Paint</I>, and so on 
are exposed by the <I>Form</I> interface and can't be trapped by the 
<I>frmCalendar</I> variable. If you want to trap standard form events, you should assign the form 
reference to a generic <I>Form</I> variable. In this particular case, adding a custom 
<I>Unload</I> event simplifies the structure of the client code.
</blockquote></div>
</p>
<p>As they do for regular class modules, custom events add a lot of flexibility 
to form modules. Adding a <I>Change</I>-like event&#8212;such as the 
<I>DateChanged</I> event in the frmCalendar<I> 
</I>module&#8212;lets you keep the application in sync with data entered by 
the end user in the form. You can add many other types of events, for instance a 
<I>Progress</I> event, for when the form module performs lengthy operations. For more 
information about events, see <a href="#A41">Chapter 7</a>.
</p>

<A NAME="380"><h3>Parameterized forms</h3></A>

<p>You can push the usability of form modules even further with the concept of 
<I>parameterized forms, </I>a name that I use for forms whose appearance heavily depends on 
how the main application sets the properties or invokes the methods of the form 
before actually showing it. To see what I mean, have a look at Figure 9-4: the two 
Options forms are actually the same form module, which adjusts itself according to what 
the main application has requested.
</p>
<p>Parameterized forms are difficult to build, for two main reasons. First, you 
need to provide a reasonable set of properties and methods that let the client 
code customize the form appearance and contents and eventually retrieve all the 
values entered by the user. Second, you have to write a lot of code within the form to 
create controls on the fly and automatically place them in their appropriate 
positions on the form.
</p>

<p>
<A HREF="javascript:fullSize('f09ph04x.htm')"> <img src="f09ph04.JPG" width=404 height=272 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-4.</B> <i>Two distinct instances of a parameterized Options form.</i><!--/caption-->
</p>
<p>The frmOptions form exposes three key methods, which let you add a 
Frame control, a CheckBox control, and an OptionButton control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cdmOptionsOne_Click()
    Dim frm As New frmOptions

    ' Add a Frame control _ the first argument to this and following 
    ' methods is a unique ID code for the control being created.
    frm.AddFrame &quot;F1&quot;, &quot;First Group&quot;
    ' Each subsequent AddOption and AddCheck method adds 
    ' a control inside the current frame, until another AddFrame
    ' method is issued.
    frm.AddOption &quot;O1&quot;, &quot;&amp;1. First&quot;, True   ' Set the value to True.
    frm.AddOption &quot;O2&quot;, &quot;&amp;2. Second&quot;
    frm.AddOption &quot;O3&quot;, &quot;&amp;3. Third&quot;

    ' Add a second frame, with three radio buttons and two check boxes.
    frm.AddFrame &quot;F2&quot;, &quot;Second Group&quot;
    frm.AddOption &quot;O4&quot;, &quot;&amp;4. Fourth&quot;, True  ' Set the value to True.
    frm.AddOption &quot;O5&quot;, &quot;&amp;5. Fifth&quot;
    frm.AddOption &quot;O6&quot;, &quot;&amp;6. Sixth&quot;
    ' Tick this check box control.
    frm.AddCheck &quot;C1&quot;, &quot;&amp;7. Check one&quot;, True  
    frm.AddCheck &quot;C2&quot;, &quot;&amp;8. Check two&quot;
    ' Show the form as a modal dialog.
    frm.Show vbModal
</pre>
</td></tr>
</table>
</p>
<p>The form module exposes the <I>Value</I> method, which returns the value of 
a control given its ID code. You can use it as you would use the 
<I>Value</I> property for CheckBox and OptionButtons controls, or you can pass it the ID code of a 
Frame control to learn which OptionButton control is selected inside the frame itself:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>    ' Continuing the cmdOptionsOne_Click procedure...
    If frm.CancelPressed Then
        MsgBox &quot;Command canceled&quot;, vbInformation
    Else
        MsgBox &quot;Option button in first frame: &quot; &amp; frm.Value(&quot;F1&quot;) _
            &amp; vbCr &amp;  &quot;Option button in second frame: &quot; _
            &amp; frm.Value(&quot;F2&quot;) &amp; vbCr _
            &amp; &quot;First checkbox : &quot; &amp; frm.Value(&quot;C1&quot;) &amp; vbCr _
            &amp; &quot;Second checkbox: &quot; &amp; frm.Value(&quot;C2&quot;) &amp; vbCr, _
            vbInformation, &quot;Result of Options form&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Have a look at the source code of the frmOptions form module to see how 
it resizes each Frame control to account for all its contained controls. You can also 
see how the form itself is resized to account for all the Frame controls on it.
</p>
<p>You can build a huge number of parameterized forms like the 
frmOptions module. For example, you can use forms for showing custom message boxes 
with any number of buttons, any icon, any font for the main message text, and so on. 
The greatest advantage of parameterized forms is that you build them once and reuse 
them for forms and dialog boxes that behave in the same or a similar way, even if 
their appearance is different. This has a beneficial impact on the size of the EXE file 
and on the memory needed at run time.
</p>

<A NAME="381"><h2>Forms as Object Viewers</h2></A>

<p>You can look at forms in yet another way. If your application extensively uses 
class modules for storing and processing data, you might build forms that work as 
specialized <I>object viewers</I>. For example, if you have a CPerson class module that 
holds personal data, you might build a frmPerson form module that exposes one 
custom object property&#8212;<I>Person</I>, of type CPerson. This approach greatly simplifies the 
structure of the client code because it just needs to assign one single property instead 
of many distinct, simpler properties (in this case, 
<I>Name</I>, <I>Address</I>, <I>City</I>, and 
<I>Married</I>):
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The client code that uses the frmPerson form
Dim Person1 As New CPerson
' Initialize properties for this instance.
Person1.Name = &quot;John Smith&quot;
Person1.Address = &quot;12345 West Road&quot;
...
' Display it on screen.
Dim frm As New frmPerson
Set frm.Person = Person1
frm.Show
</pre>
</td></tr>
</table>
</p>
<p>The frmPerson form module has to correctly assign values to its fields when 
the <I>Person</I> property is set, as you can see in Figure 9-5 and in the code that follows it.
</p>

<p>
<A HREF="javascript:fullSize('f09ph05x.htm')"> <img src="f09ph05.JPG" width=404 height=304 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-5.</B> <i>Using forms as object viewers. The two form instances that display the same CPerson object are automatically synchronized.</i><!--/caption-->
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the frmPerson form module
Private WithEvents ThisPerson As CPerson

Property Get Person() As CPerson
    Set Person = ThisPerson
End Property
Property Set Person(newValue As CPerson)
    ' Initialize the private object and form fields.
    Set ThisPerson = newValue
    With ThisPerson
        txtName.Text = .Name
        txtAddress.Text = .Address
        txtCity.Text = .City
        chkMarried.Value = Abs(.Married)    ' Assign zero or one.
    End With
End Property
</pre>
</td></tr>
</table>
</p>
<p>Another advantage of this technique is that the client code doesn't 
directly address the properties of the CPerson object. Thanks to this detail, you must add 
or remove statements in the frmPerson module if the interface exposed by this 
class changes, but you don't have to modify the code in the client application that 
instantiates the frmPerson module showing the object.
</p>
<p>A third, more interesting advantage of this approach is this: Because the 
form has a direct link with the class that holds the data, the form can delegate all the 
data validation chores to the class itself, which is the right thing to do in an object-
oriented application. The validation process usually occurs when the user clicks 
on the OK button:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the frmPerson form module...
Private Sub cmdOK_Click()
    On Error Resume Next
    ' Assign (and implicitly validate) the Name property.
    ThisPerson.Name = txtName.Text
    If Err Then
        ' If the class raised an error
        MsgBox Err.Description
        txtName.SetFocus
        Exit Sub
    End If

    ' Similar code for the Address, City, and Married properties.
    ...
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Forms used as object viewers have a fourth advantage, which is, in my 
opinion, also the most important and intriguing one. Since each form holds a 
reference to the actual object, you can have multiple forms pointing to the same object. 
This ensures that all form instances access the same data and that they don't display 
inconsistent values. To see what I mean, run the ObjView.Vbp sample application, 
click two or more times on the John Smith button, modify data in a form, and then 
click on OK to see the new value automatically propagated to all the other form 
instances. By selecting a different option in the Notification frame on the main form, you 
can also have new values propagated to other forms whenever the user exits each 
field (field-level notification) or even when the user presses a key (key-level 
notification). I added this capability to the demonstration program just to show you that it's 
possible to do it. But in most real-world applications, record-level notification is the 
most appropriate choice.
</p>
<p>To implement this fourth feature, the CPerson class raises an event 
whenever one of its properties changes, as shown here:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CPerson class module...
Event Change(PropertyName As String)
' A private variable that holds the value of the Name property
Private m_Name As String

Property Let Name(newValue As String)
    ' It's very important that the new value always be checked.
    If newValue = &quot;&quot; Then Err.Raise 5, , &quot;Invalid Value for Name property&quot;
    If m_Name &lt;&gt; newValue Then
        m_Name = newValue
        PropertyChanged &quot;Name&quot;
    End If
End Property

' Similar code for Property Let Address/City/Married
... 

' This private method simply raises a Change event in client code.
Private Sub PropertyChanged(PropertyName As String)
    RaiseEvent Change(PropertyName)
End Sub
</pre>
</td></tr>
</table>
</p>
<p>The frmPerson form module can trap the 
<I>Change</I> event because its <I>ThisPerson</I> Private instance pointing to the CPerson object is declared using the 
<I>WithEvents </I>keyword:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub ThisPerson_Change(PropertyName As String)
    Select Case PropertyName
        Case &quot;Name&quot;
            txtName.Text = ThisPerson.Name
        Case &quot;Address&quot;
            txtAddress.Text = ThisPerson.Address
        Case &quot;City&quot;
            txtCity.Text = ThisPerson.City
        Case &quot;Married&quot;
            chkMarried.Value = Abs(ThisPerson.Married)
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Here are a couple of final notes about using forms as object viewers:
</p>
<UL>
<p><li> In your application, you can have forms from different classes pointing 
to the same object. For example, you can have a frmPerson form module 
that shows essential information about a person and a frmPerson2 form 
module that displays the same information plus additional confidential 
data. You can use both forms in the same application and open them so 
that they refer to the same CPerson instance at the same time. When you 
have multiple forms that display the same object, this technique 
dramatically reduces the amount of code because all the validation logic, as well as 
the code that reads data from a database and stores it back, is located in 
the class module and doesn't need to be duplicated in each form module.
</li></p>
<p><li> You can have the same form module work as a viewer for multiple classes, 
 as long as such classes have a common secondary interface. For 
example, your application can deal with CPerson, CCustomer, and CEmployee 
objects. If all of these objects implement the IPersonalData secondary 
interface, which gathers all the properties that are common to them, you can 
build a frmPersonalData form module that exposes a 
<I>PersonalData</I> property:</li></p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the frmPersonalData form module...
Private PersData As IPersonalData

Property Get PersonalData() As IPersonalData
    Set PersonalData = PersData
End Property

Property Set PersonalData(newValue As IPersonalData)
    Set PersData = newValue
    ' Initialize fields on the form.

    With PersData

        txtName = .Name

        ...

    End With
End Property
</pre>
</td></tr></table>
</p>
<p>You can't receive events from the classes, however, because 
events aren't exposed by secondary interfaces. So you can use a single form 
that points to a secondary interface of multiple classes only when you 
don't need to keep multiple instances of the form in sync. You don't need 
to account for synchronization issues when all the forms are shown 
as modal dialog boxes.
</p>
</ul>

 
<A NAME="382"><h2>Dynamic Control Creation</h2></A>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>
<p>Dynamic control creation is one of the most exciting, new features of Visual Basic 
6 and overcomes a serious limitation of the previous versions of the language. 
Using this new capability, you can create new controls on a form at run time by 
specify-ing their class name. This mechanism is much more flexible than the one 
based on control arrays (described in <a href="#A14">Chapter 3</a>). In fact, creating a control at run 
time using control arrays forces you to place an instance of each type of control on 
the form at design time. This isn't necessary using Visual Basic 6's dynamic 
control creation features.
</p>

<A NAME="383"><h3>The <I>Add </I>method of the Controls collection</h3></A>

<p>Under Visual Basic 6, the Controls collection has been enhanced to support the 
<I>Add</I> method, which lets you dynamically create controls at run time. This method 
uses the following syntax:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set controlRef = Controls.Add(ProgID, Name [,Container])
</pre>
</td></tr>
</table>
</p>
<p>where ProgID is the class name of the control in the format 
<I>libraryname.controlname</I>, and <I>Name </I>is the name you want to assign to the control (and which will be 
returned by its <I>Name</I> property). This name must be unique: If another control in the 
collection has the same name, Visual Basic raises an error 727&#8212;&quot;There is already a control 
with the name 'ctrlname'&quot;. <I>Container </I>is an optional reference to a container control 
(for example, a PictureBox or a Frame control) inside which you want to place the 
control being created. If you omit this argument, the control is placed on the form's 
surface. <I>ControlRef </I>is an object variable that you use to reference the control's 
properties, invoke its methods, and trap its events. You can see from the following code 
how easy it is to create a CommandButton control and place it near the lower right 
corner of the form:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents cmdCalendar As CommandButton

Private Sub Form_Load()
    Set cmdCalendar = Controls.Add(&quot;VB.CommandButton&quot;, &quot;cmdButton&quot;)
    ' Assumes that form's ScaleMode is twips.
    cmdCalendar.Move ScaleWidth - 1400, ScaleHeight - 800, 1000, 600
    cmdCalendar.Caption = &quot;&amp;Calendar&quot;
    ' All controls are created invisible.
    cmdCalendar.Visible = True
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Because you have declared <I>cmdCalendar</I> using the 
<I>WithEvents</I> clause, you can react to its events. For example, you can display a custom calendar when the 
user clicks on the button you just created:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdCalendar_Click()
    Dim frm As New frmCalendar
    frm.ShowMonth Year(Now), Month(Now)
    frm.Show vbModal
End Sub
</pre>
</td></tr>
</table>
</p>
<p>You can remove any control added dynamically using the Controls 
collection's <I>Remove</I> method, whose only argument is the name of the control (that is, the 
string passed as a second argument to the 
<I>Add</I> method):
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Controls.Remove &quot;cmdButton&quot;
</pre>
</td></tr>
</table>
</p>
<p>You get an error if the control specified doesn't exist on the form or if it 
wasn't added dynamically at run time.
</p>

<A NAME="384"><h3>Adding an external ActiveX control</h3></A>

<p>Adding an external ActiveX control is similar to adding an intrinsic Visual Basic 
control. But you must pay particular attention to two important details.
<UL>
<p><li> For some external ActiveX controls, you can't use the ProgID as 
you read it in the object browser. When you try to use it, you get a 
run-time error. Fortunately, the error message clearly reports the correct 
ProgID. (See Figure 9-6.) For example, the TreeView control's actual ProgID 
is &quot;MSComCtlLib.TreeCtrl.2&quot;, and this is the string you must pass as the 
first argument to the <I>Controls.Add</I> method.
</li></p>
<p>
<img src="f09ph06.GIF" width=371 height=201 border="0">
<p>
<!--caption--><B>Figure 9-6.</B> <i>The error message you get when you try to add a TreeView control using the ProgID string as found in the Object Browser.</i><!--/caption-->

<p><li> If you dynamically add an ActiveX control that's never been used on 
any form of the current project, Visual Basic raises a run-time error. (See 
Figure 97.) This happens because the Visual Basic compiler usually 
discards all the information about controls that are present in the Toolbox but 
not referenced in the project. This step optimizes the performance and 
reduces the size of the executable file. To circumvent this error, uncheck the 
Remove Information About Unused ActiveX Controls box in the Make 
tab of the Project Properties dialog box.
</li></p>
<p>
<img src="f09ph07.GIF" width=371 height=201 border="0">
<p>
<!--caption--><B>Figure 9-7.</B> <i>You get this error message when you try to load an ActiveX control that appears in the Toolbox but isn't referenced in any other form of the application.</i><!--/caption-->

</UL>

<p><div class="note"><blockquote><b>NOTE</b><hr>
You can dynamically add any type of intrinsic Visual Basic control, 
except menu items. Unfortunately, this limitation prevents developers from 
devising customizable menu structures with top-level menus and submenus built 
on the fly.
</blockquote></div></p>

<A NAME="385"><H3>The Windowless Controls Library</H3></A>
<p>
<img src="new.jpg" width=102 height=87 border="0"></p>
</p>
<p>Visual Basic 6 comes with a new library of windowless controls that exactly 
duplicate the appearance and the features of most Visual Basic intrinsic controls. This 
library isn't mentioned in the main language documentation, and it must be 
installed manually from the Common\Tools\VB\Winless directory. This folder contains 
the Mswless.ocx ActiveX control and the Ltwtct98.chm file with its documentation. 
To install the library, you first copy this directory on your hard disk. Before you can 
use the control, you must register it using the Regsvr32.exe utility or from within 
Visual Basic, and then double-click on the Mswless.reg file, which creates the Registry 
keys that make the ActiveX control available to the Visual Basic environment.
</p>
<p>Once you have completed the registration step, you can load the library 
into the IDE by pressing the Ctrl+T key and selecting the Microsoft Windowless 
Controls 6 item from the list of available ActiveX controls. After you do this, you'll find that 
a number of new controls have been added to the Toolbox. The library contains 
a replacement for the TextBox, Frame, CommandButton, CheckBox, 
OptionButton, ComboBox, ListBox, and the two ScrollBar controls. It doesn't include Label, 
Timer, or Image controls because the Visual Basic versions are already windowless. Nor 
does it contain PictureBox and OLE controls, which are containers and can't therefore 
be rendered as windowless controls.
</p>
<p>The controls in the Windowless Controls Library don't support the 
<I>hWnd </I>property. As you might remember from <a href="#A9">Chapter 2</a>, this property is the handle of the 
window on which the control is based. Since these controls are windowless, there's 
no such window and therefore the <I>hWnd</I> property doesn't make any sense. Other 
properties are missing, namely those that have to do with DDE communications. 
(DDE is, however, an outdated technology and isn't covered in this book.) Another 
difference is that the WLOption control (the windowless counterpart of the 
OptionButton intrinsic control) supports the new 
<I>Group </I>property, which serves to create 
groups of mutually exclusive radio buttons. (You can't create a group of radio buttons 
by placing them in a WLFrame control because this control doesn't work as a container.)
</p>
<p>Apart from the <I>hWnd</I> property and the <I>Group 
</I>property, the controls in the library are perfectly compatible with Visual Basic's intrinsic controls in the sense 
that they expose the same properties, methods, and events as their Visual Basic 
counterparts. Interestingly, the library's controls offer a number of property pages that 
let the programmer set the properties in a logical manner, as you can see in Figure 
9-8.
</p>
<p>
<A HREF="javascript:fullSize('f09ph08x.htm')"> <img src="f09ph08.JPG" width=404 height=375 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-8.</B> <i>You can set the properties of controls in the Windowless library using handy property pages. Notice how the new controls appear in the Toolbox.</i><!--/caption-->
</p>
<p>The real advantage of using the controls in the Windowless library is that at 
run time they aren't subject to many of the limitations that the intrinsic controls are. 
In fact, <I>all </I>their properties can be modified during execution, including the 
<I>MultiLine</I> and <I>ScrollBars</I> properties of the WLText control, the 
<I>Sorted</I> and <I>Style</I> properties of the WLList and WLCombo controls, and the 
<I>Alignment</I> property of the WLCheck and WLOption controls.
</p>
<p>The ability to modify any property at run time makes the Windowless library 
a precious tool when you're dynamically creating new controls at run time using 
the <I>Controls.Add</I> method. When you add a control, it's created with all properties set 
to their default values. This situation means that you can't use the 
<I>Controls.Add</I> method to create multiline intrinsic TextBox controls or sorted ListBox or ComboBox 
controls. The only solution is to use the Windowless Controls Library:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents TxtEditor As MSWLess.WLText

Private Sub Form_Load()
    Set TxtEditor = Controls.Add(&quot;MSWLess.WLText&quot;, &quot;txtEditor&quot;)
    TxtEditor.MultiLine = True
    TxtEditor.ScrollBars = vbBoth
    TxtEditor.Move 0, 0, ScaleWidth, ScaleHeight
    TxtEditor.Visible = True
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="386"><h3>Unreferenced controls</h3></A>

<p>So far, I've described what you have to do to add controls that are referenced at 
design time in the Toolbox. But you can do more with the dynamic control creation 
feature than I've shown you so far; its greater power lies in letting you create ActiveX 
controls that aren't referenced in the Toolbox. You can provide support for versions of 
ActiveX controls that don't exist yet at compile time, for example by storing the control's 
name in an INI file that you edit when delivering a new version of the control. This 
adds tremendous flexibility to your applications and lets you transform your forms 
into generic ActiveX control containers.
</p>
<p>The first issue you must resolve when working with controls not referenced 
in the Toolbox is design-time licensing. Even if you're not actually using the control 
at design time, to dynamically load it at run time you must prove that you're 
legally allowed to do so. If there weren't any restrictions to dynamically creating 
ActiveX controls at run time, any programmer could &quot;borrow&quot; ActiveX controls from 
other commercial software and use them in his or her applications without actually 
purchasing the license for the controls. This is an issue only for ActiveX controls that 
aren't referenced in the Toolbox at design time; if you can load a control in the 
Toolbox, you surely own a design-time license for the control.
</p>
<p>To dynamically create an ActiveX control not referenced in the Toolbox 
at compile time, you must exhibit your design-time license at run time. In this 
context, a license is a string of characters or digits that comes with the control and is 
stored in the system Registry when you install the control on your machine. Visual 
Basic doesn't force you to search for this string in the Registry because you can find it 
by means of the <I>Add</I> method of the Licenses collection:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This statement works only if the MSWLess library is
' *NOT* currently referenced in the Toolbox.
Dim licenseKey As String
licenseKey = Licenses.Add(&quot;MSWLess.WLText&quot;)
</pre>
</td></tr>
</table>
</p>
<p>After you have the license string, you must devise a way to make it 
available to the application at run time. The easier method is storing it in a file:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Open &quot;MSWLess.lic&quot; For Output As #1
Print #1, licenseKey
Close #1
</pre>
</td></tr>
</table>
</p>
<p>The preceding code must be executed just once during the design process, 
and after you've generated the LIC file you can throw the code away. The application 
reads this file back into the Licenses collection, again using the 
<I>Add</I> method but this time with a different syntax:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Open &quot;MSWLess.lic&quot; For Input As #1
Line Input #1, licenseKey
Close #1
Licenses.Add &quot;MSWLess.WLText&quot;, licenseKey
</pre>
</td></tr>
</table>
</p>
<p>The Licenses collection also supports the 
<I>Remove</I> method, but you will rarely need to invoke it.</P>

<A NAME="387"><H3>Late-bound properties, methods, and events</H3></A>
<p>Once you resolve the licensing issue, you're ready to face another problem that 
comes up when you're working with ActiveX controls not referenced in the Toolbox 
at compile time. As you might imagine, if you don't know what control you'll load 
at run time, you can't assign the return value of the 
<I>Controls.Add</I> method to an object variable of a specific type. This means that you have no simple way to access 
properties, methods, or events of your freshly added control.</P>

<P>The solution offered by Visual Basic 6 is a special type of object variable 
named <I>VBControlExtender</I>. This represents a generic ActiveX control inside the Visual 
Basic IDE:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents TxtEditor As VBControlExtender

Private Sub Form_Load()
    ' Add the license key to the Licenses collection (omitted).
    Set TxtEditor = Controls.Add(&quot;MSWLess.WLText&quot;, &quot;TxtEditor&quot;)
    TxtEditor.Move 0, 0, ScaleWidth, ScaleHeight
    TxtEditor.Visible = True
    TxtEditor.Text = &quot;My Text Editor&quot;
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Trapping events from an ActiveX control not referenced in the Toolbox is a 
bit more complex than accessing properties and methods. In fact, the 
VBControlExtender object can't expose the events of the control it will host at run time. Instead, it 
supports only a single event, named 
<I>ObjectEvent</I>, which is invoked for all the events 
raised by the original ActiveX control. The 
<I>ObjectEvent</I> event receives one argument, an EventInfo object that in turn contains a collection of EventParameter objects. 
This collection enables the programmer to learn what arguments were passed to the event.
</p>
<p>
<A HREF="javascript:fullSize('g09ph01x.htm')"> <img src="g09ph01.JPG" width=404 height=144 border=0 ALT = "Click to view at full size."> </A></p>

<P>Inside the <I>ObjectEvent</I> event procedure, you usually test the 
<I>EventInfo</I>.<I>Name</I> property to discern which event was fired, and then you read, and sometimes 
modify, the value of each of its parameters:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TxtEditor_ObjectEvent(Info As EventInfo)
    Select Case Info.Name
        Case &quot;KeyPress&quot;
            ' The Escape key clears the editor.
            If Info.EventParameters(&quot;KeyAscii&quot;) = 27 Then
                TxtEditor.Object.Text = &quot;&quot;
            End If
        Case &quot;DblClick&quot;
            ' Just to prove that we can trap any event
            MsgBox &quot;Why have you double-clicked me?&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Events trapped in this way are called <I>late-bound 
events</I>. There's a group of <I>extender 
events</I> that you don't trap inside the <I>ObjectEvent 
</I>event. These extender events (one of which is shown in the following code snippet) are available as regular 
events of the VBControlExtender object. This group of events includes 
<I>GotFocus</I>, <I>LostFocus</I>, <I>Validate</I>, 
<I>DragDrop</I>, and <I>DragOver</I>. For more information about extender 
properties, methods, and events, see <a href="#A106">Chapter 17</a>.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TxtEditor_GotFocus()
    ' Highlight textbox's contents on entry.
    TxtEditor.Object.SelStart = 0
    TxtEditor.Object.SelLength = 9999
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="388"><h2>Data-Driven Forms</h2></A>

<p>Visual Basic's new dynamic control creation capabilities enable developers to 
create true <I>data-driven forms,</I> which are forms whose appearance is completely 
determined at run time by data read from a file or&#8212;if you're building a form that displays 
data from a database table&#8212;by the structure of the database itself. Imagine what 
degree of flexibility you get if you're able to modify the appearance of a Visual Basic 
form at run time without having to recompile the application:
</p>
<UL>
<p><li> You can add and remove fields to the database and have the form 
automatically update itself.
</li></p>
<p><li> You can provide your users with the ability to customize the 
application's user interface in terms of colors, fonts, field position and size, new 
buttons that display other tables, and so on.
</li></p>
<p><li> You can easily implement policies to make given fields invisible or 
read-only, depending on which user is currently logged in. For example, 
you can give access to confidential information only to people authorized 
to read it, and you can hide it from others.
</li></p>
</UL>
<p>To implement data-driven forms, however, you must first solve a problem. 
When you don't know in advance how many controls you're going to add to the form, 
how can you trap events from them? This problem arises because the 
<I>WithEvents</I> keyword is unable to trap events from an array of objects. As you'll see, this issue can be 
resolved, but the solution probably isn't as simple as you might think it should 
be. However, the technique that I'll describe is both interesting and flexible and can 
not only help you build data-driven forms but also more generally trap events from 
an undetermined number of objects, a problem I left unresolved in <a href="#A41">Chapter 7</a>.
</p>

<A NAME="389"><h3>Trapping events from an array of controls</h3></A>

<p>To trap events coming from an undetermined number of controls dynamically 
created at run time&#8212;or, in general, from an undetermined number of objects&#8212;you 
need to build two support classes, the first one a collection class that contains all the 
instances of the second class. In the sample program that you'll find on the 
companion CD, these classes are named ControlItems and ControlItem, respectively. 
The relationships among these classes and the main form are summarized in 
Figure 9-9.
</p>
<p>
<A HREF="javascript:fullSize('f09ph09x.htm')"> <img src="f09ph09.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-9.</B> <i>You need two auxiliary classes and some tricky code to trap events raised by an array of controls dynamically created at run time.</i><!--/caption-->
</p>
<p>The events can be trapped as follows:
</p>
<OL>
<p><li> The main application holds a reference to an instance of the 
ControlItems collection class in a variable named 
<I>CtrlArray</I>. This variable is declared using the 
<I>WithEvents</I> clause because it will raise events in the main application.
</li></p>
<p><li> After the form creates a new control, it passes a reference to that 
control to the <I>Add</I> method of the 
ControlItems<I> </I>collection class. This reference 
can be of a specific class (if you know at design time which type of 
controls you're creating) or it can be of a VBControlExtender object if you 
want to exploit late-bound events.
</li></p>
<p><li> The <I>Add</I> method of the 
ControlItems<I> </I>collection class creates a new 
instance of the ControlItem class and passes it a reference to the control just 
created on the form. It also passes a reference to itself.
</li></p>
<p><li> The ControlItem class instance stores the reference to the control 
in a <I>WithEvents</I> Public variable. It also stores a reference to the 
parent ControlItems collection class in the Private 
<I>Parent</I> object variable.
</li></p>
<p><li> When the control eventually raises an event, the ControlItem class 
traps it and can therefore pass the event to the parent collection classes. 
This notification is performed by calling a Friend method in the 
ControlItems collection class. In general, you should provide one such method for 
each possible event trapped by the dependent class because each event has 
a different set of arguments.
</li></p>
<p><li> Inside the notification event, the ControlItems class can finally raise 
an event in the parent form. The first argument passed to this event is a 
reference to the control that raised the event or a reference to the 
ControlItem object that trapped it.
</li></p>
</OL>
<p>As you can see, it's a long trip just to intercept an event. But now that you 
know how to do it, you can apply this technique in many interesting ways.
</p>

<A NAME="390"><H3>Database-driven data-entry forms</H3></A>
<p>One of the many possible applications of dynamic control creation are forms 
that automatically map themselves to the structure of a database table or query. This 
is especially useful when you're writing large business applications with dozens or 
hundreds of queries, and you don't want to create customized forms for each one. 
This technique dramatically reduces development time and shrinks the size of the 
executable file as well as its requirements in terms of memory and resources.
</p>
<p>On the companion CD, you'll find a complete Visual Basic application 
whose main form adapts itself to the structure of a database table of SQL SELECT query, 
as you can see in Figure 9-10.
</p>
<p>
<A HREF="javascript:fullSize('f09ph10x.htm')"> <img src="f09ph10.JPG" width=404 height=313 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-10.</B> <i>All the controls on this form are dynamically created at run time, based on the structure of an ADO recordset. The program creates different controls according to the type of the database field and also provides validation for each.</i><!--/caption-->
</p>
<p>Space constraints prevent me from showing the complete source code in 
print, so I'll include only the most interesting routines:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The collection of controls added dynamically (module-level
' variable)
Dim WithEvents ControlItems As ControlItems

' This is the most interesting routine, which actually
' creates the controls and passes them to the ControlItems
' collection class.
Sub LoadControls(rs As ADODB.Recordset)
    Dim index As Long, fieldNum As Integer
    Dim field As ADODB.field
    Dim ctrl As Control, ctrlItem As ControlItem, ctrlType As String
    Dim Properties As Collection, CustomProperties As Collection
    Dim top As Single, propItem As Variant
    Dim items() As String
     
    ' Start with a fresh ControlItems collection.
    Set ControlItems = New ControlItems
    ' Initial value for Top property
    top = 100

    ' Add controls corresponding to fields.
    ' This demo program supports only a few field types.
    For Each field In rs.Fields
        ctrlType = &quot;&quot;
        Set Properties = New Collection
        Set CustomProperties = New Collection
        Select Case field.Type
            Case adBoolean
                ctrlType = &quot;MSWLess.WLCheck&quot;
                Properties.Add &quot;Caption=&quot;
            Case adSmallInt   ' As Integer
                ctrlType = &quot;MSWLess.WLText&quot;
            Case adInteger    ' As Long
                ctrlType = &quot;MSWLess.WLText&quot;
                CustomProperties.Add &quot;IsNumeric=-1&quot;
                CustomProperties.Add &quot;IsInteger=-1&quot;
            Case adSingle, adDouble, adCurrency
                ctrlType = &quot;MSWLess.WLText&quot;
                CustomProperties.Add &quot;Numeric=-1&quot;
            Case adChar, adVarChar  ' As String
                ctrlType = &quot;MSWLess.WLText&quot;
                Properties.Add &quot;Width=&quot; &amp; _
                    (field.DefinedSize * TextWidth(&quot;W&quot;))
            Case adLongVarChar   ' (Memo field)
                ctrlType = &quot;MSWLess.WLText&quot;
                Properties.Add &quot;Width=99999&quot;  ' Very large width
                Properties.Add &quot;Height=2000&quot;
                Properties.Add &quot;Multiline=-1&quot;
                Properties.Add &quot;ScrollBars=2&quot;  'vbVertical
            Case adDate
                ctrlType = &quot;MSWLess.WLText&quot;
                Properties.Add &quot;Width=1000&quot;
                CustomProperties.Add &quot;IsDate=-1&quot;
            Case Else
                ' Ignore other field data types.
        End Select

        ' Do nothing if this field type is not supported (ctrlType=&quot;&quot;).
        If ctrlType &lt;&gt; &quot;&quot; Then
            fieldNum = fieldNum + 1
            ' Create the label control with database field name.
            Set ctrl = Controls.Add(&quot;VB.Label&quot;, &quot;Label&quot; &amp; fieldNum)
            ctrl.Move 50, top, 1800, 315
            ctrl.Caption = field.Name
            ctrl.UseMnemonic = False
            ctrl.BorderStyle = 1
            ctrl.Alignment = vbRightJustify
            ctrl.Visible = True
            ' Create the control, and move it to the correct position.
            Set ctrl = Controls.Add(ctrlType, &quot;Field&quot; &amp; fieldNum)
            ctrl.Move 1900, top, 2000, 315

            ' If the field is not updatable, lock it. 
            If (field.Attributes And adFldUpdatable) = 0 Then
                On Error Resume Next
                ctrl.Locked = True
                ' If the control doesn't support the Locked property,
                ' disable it.
                If Err Then ctrl.Enabled = False
                On Error GoTo 0
            End If

            ' Set other properties of the field.
            For Each propItem In Properties
                ' Split property's name and value.
                items() = Split(propItem, &quot;=&quot;)
                CallByName ctrl, items(0), VbLet, items(1)
            Next
            ' Link it to the Data control, and make it visible.
            Set ctrl.DataSource = Adodc1
            ctrl.DataField = field.Name
            ctrl.Visible = True

            ' Add this control to the ControlItems collection.
            Set ctrlItem = ControlItems.Add(ctrl)
            ' Move the actual width into the custom Width property.
            ' This is used in the Form_Resize event.
            ctrlItem.Properties.Add ctrl.Width, &quot;Width&quot;
            ' Set its other custom properties.
            For Each propItem In CustomProperties
                ' Split property name and value.
                items() = Split(propItem, &quot;=&quot;)
                ctrlItem.Properties.Add items(1), items(0)
            Next
            ' Increment top.
            top = top + ctrl.Height + 80
        End If
    Next
    ' Force a Form_Resize event to resize longer controls.
    Call Form_Resize
    Adodc1.Refresh
End Sub

' A control added dynamically is asking for validation.
' Item.Control is a reference to the control.
' Item.GetProperty(propname) returns a custom property.
Private Sub ControlItems_Validate(Item As ControlItem, _
    Cancel As Boolean)
    If Item.GetProperty(&quot;IsNumeric&quot;) Then
        If Not IsNumeric(Item.Control.Text) Then
            MsgBox &quot;Please enter a valid number&quot;
            Cancel = True: Exit Sub
        End If
    End If
    If Item.GetProperty(&quot;IsInteger&quot;) Then
        If CDbl(Item.Control.Text) &lt;&gt; Int(CDbl(Item.Control.Text)) Then
            MsgBox &quot;Please enter a valid Integer number&quot;
            Cancel = True: Exit Sub
        End If
    End If
    If Item.GetProperty(&quot;IsDate&quot;) Then
        If Not IsDate(Item.Control.Text) Then
            MsgBox &quot;Please enter a valid date&quot;
            Cancel = True: Exit Sub
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Many points in the <I>LoadControls</I> routine are worth a closer look. First, it 
uses the Windowless Controls Library because it needs to modify properties such 
as TextBox control's <I>Multiline</I> (for example, for memo fields). Second, to streamline 
the structure of the code and make it easily extendable, each 
<I>Case</I> clause in the main <I>Select</I> block simply adds property names and values to a Properties collection: after 
the control is actually created, it uses the 
<I>CallByName</I> command to assign all the properties in a 
<I>For Each</I> loop. Third, it creates the 
<I>CustomProperties</I> collection, where it stores information that can't be directly assigned to the control's properties. 
This includes the &quot;<I>IsNumeric&quot;</I>, 
&quot;<I>IsInteger&quot;</I>, and &quot;<I>IsDate&quot; 
</I>custom attributes, which are later used when the code in the main form validates the value in the field.
</p>
<p>Please refer to the complete project on the companion CD for the 
complete source code of the main form and the ControlItems and ControlItem class modules.
</p>


<a name="A55"></a><h3>6.1.2 MDI Forms</h3>

<A HREF="#A54">[Previous]</A> <A HREF="#A56">[Next]</A><P>

<A NAME="391"><h1>MDI Forms</h1></A>

<p>MDI stands for Multiple Document Interface and is the type of user interface 
used by most of the applications in the Microsoft Office suite, including Microsoft 
Word, Microsoft Excel, and Microsoft PowerPoint. Many applications lend themselves 
to implementation via an MDI user interface. Whenever you have an application 
that should be able to deal with multiple documents at the same time, an MDI 
interface is probably the best choice.
</p>

<A NAME="392"><h2>MDI Applications</h2></A>

<p>Building Visual Basic MDI applications is simple, as long as you know how to 
make the best use of a few features of the language. You begin developing an MDI 
application by adding an MDIForm module to the current project. An MDIForm 
module is similar to a regular Form module, with just a few peculiarities:
</p>

<UL>
<p><li> You can have only one MDIForm module in each project; after you 
add one MDI module to the current project, the Add MDIForm command 
in the Project menu is disabled, as is the corresponding icon on the 
main toolbar.
</li></p>
<p><li> You can't place most controls directly on an MDIForm surface. More 
specifically, you can create only menus, invisible controls (such as 
Timer and CommonDialog controls), and controls that support the 
<I>Align</I> property (such as PictureBox, Toolbar, and StatusBar controls). The only 
way to show any other control on an MDIForm object is to place it inside 
a container control, typically a PictureBox control.
</li></p>
<p><li> You can't display text or graphics on an MDIForm surface. Again, you 
need to place a PictureBox control and display text or graphics inside it.
</li></p>
</UL>
 
<A NAME="393"><h3>MDI child forms</h3></A>

<p>An MDIForm object contains one or more child forms. To create such child 
forms, you add a regular form to the project and set its 
<I>MDIChild</I> property to True. When you do this, the form's icon in the Project Explorer window changes, as shown 
in Figure 9-11. You don't have to specify which MDI form this form is a child of 
because there can be only one MDIForm module per project.
</p>
<p>An MDI child form can't be displayed outside its parent MDIForm. If an 
MDI child form is the startup form for an application, its parent MDI form is 
automatically loaded and displayed before the child form becomes visible. Apart from the 
startup form, all instances of the MDI child form are created using the 
<I>New</I> keyword:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the MDIForm module
Private Sub mnuFileNew_Click()
    Dim frmDoc As New frmDocument
    frmDoc.Show
End Sub
</pre>
</td></tr>
</table>
</p>
<p>MDIForm modules support an additional property, 
<I>AutoShowChildren</I>. When this property is True (the default value), an MDI child form is displayed inside 
its parent MDI form as soon as you load the parent. In other words, you can't load 
an MDI child form and keep it hidden unless you set this property to False.
</p>
<p>MDI child forms have other peculiarities as well. For example, they don't 
display menu bars as regular forms do: If you add one or more top-level menus to 
an MDI child form, when the form becomes active its menu bar replaces the MDI 
parent form's menu bar. For this reason, it's customary for MDI child forms not to 
include a menu; you define menus only for the main MDIForm module.
</p>
<p>
<A HREF="javascript:fullSize('f09ph11x.htm')"> <img src="f09ph11.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-11.</B> <i>The MDI Notepad application at design time.</i><!--/caption-->
</p>

<P>When a menu command is invoked in the MDIForm module, you 
normally apply it to the MDI child form that's currently active, which you do through 
the <I>ActiveForm</I> property. For example, here's how you execute the Close command 
on the File menu:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the MDI parent form
Private Sub mnuFileClose_Click()
    ' Close the active form, if there is one.
    If Not (ActiveForm Is Nothing) Then Unload ActiveForm
End Sub
</pre>
</td></tr>
</table>
</p>
<p>You should always check for an 
<I>ActiveForm</I> because it's possible that no 
MDI child form is currently open, in which case 
<I>ActiveForm</I> returns Nothing. (It doesn't return a reference to the MDIForm itself, as you might expect.) If your MDI 
application supports different kinds of child forms, you often need to figure out which 
form is the active form, as in the code below.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuFilePrint_Click()
    If TypeOf ActiveForm Is frmDocument Then
        ' Print the contents of a TextBox control.
        Printer.Print ActiveForm.txtEditor.Text
        Printer.EndDoc
    ElseIf TypeOf ActiveForm Is frmImageViewer Then
        ' Print the contents of a PictureBox control.
        Printer.PaintPicture ActiveForm.picImage.Picture, 0, 0
        Printer.EndDoc
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="394"><h3>The Window menu</h3></A>

<p>MDIForm modules support an additional method that's not exposed by regular 
forms: the <I>Arrange</I> method. This method provides a quick way to programmatically 
arrange all the child forms in an MDI application. You can tile all child forms horizontally 
or vertically, you can arrange them in a cascading fashion, or you can line up all 
the minimized forms in an orderly fashion near the bottom of the MDI parent form. 
To this purpose, you usually create a Window menu with four commands: Tile 
Horizontally, Tile Vertically, Cascade, and Arrange Icons. This is the code behind 
these menu items:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuTileHorizontally_Click()
    Arrange vbTileHorizontal
End Sub
Private Sub mnuTileVertically_Click()
    Arrange vbTileVertical
End Sub
Private Sub mnuCascade_Click()
    Arrange vbCascade
End Sub
Private Sub mnuArrangeIcons_Click()
    Arrange vbArrangeIcons
End Sub
</pre>
</td></tr>
</table>
</p>
<p>It's also customary for the Window menu to include a list of all open MDI 
child forms and to let the user quickly switch to any one of them with a click of the 
mouse. (See Figure 9-12.) Visual Basic makes it simple to add this feature to your MDI 
applications: You only have to tick the WindowList option in the Menu Editor for 
the top-level Window menu. Alternatively, you can create a submenu with the list of 
all open windows by ticking the WindowList option for a lower level menu item. In 
any case, only one menu item can have this option ticked.
</p>
<p>
<A HREF="javascript:fullSize('f09ph12x.htm')"> <img src="f09ph12.JPG" width=404 height=276 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-12.</B> <i>The Window menu lets you tile and arrange all MDI child windows and quickly switch to any one of them with a click of the mouse.</i><!--/caption-->
</p>

<A NAME="395"><h3>Adding properties to MDI child forms</h3></A>

<p>In Visual Basic 3, writing MDI applications wasn't particularly easy because you 
had to keep track of the status of each MDI child form using an array of UDTs, and it 
was up to you to update this array whenever an MDI child form was created or 
closed. Things are much simpler in Visual Basic 4 and later versions because each form 
can support custom properties and you can store the data right in MDI child form 
modules without the need for a global array of UDTs.
</p>
<p>Typically, all MDI child forms support at least two custom properties, 
<I>Filename</I> and <I>IsDirty</I> (of course, actual names can be different). The 
<I>Filename</I> property stores the name of the data file from where data was loaded, whereas 
<I>IsDirty</I> is a Boolean flag that tells whether data was modified by the user. Here's how these 
properties are implemented in the MDI Notepad sample program:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the frmDocument MDI child form
Public IsDirty As Boolean
Private m_FileName As String

Property Get Filename() As String
    Filename = m_FileName
End Property
Property Let Filename(ByVal newValue As String)
    m_FileName = newValue
    ' Show the filename on the form's Caption.
    Caption = IIf(newValue = &quot;&quot;, &quot;Untitled&quot;, newValue)
End Property

Private Sub txtEditor_Change()
    IsDirty = True
End Sub
</pre>
</td></tr>
</table>
</p>
<p>You need the <I>IsDirty</I> property so that you can ask the user if he or she 
wants to save modified data when closing the form. This is done in the MDI child 
form's <I>Unload </I>event procedure:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Unload(Cancel As Integer)
    Dim answer As Integer
    If IsDirty Then
        answer = MsgBox(&quot;This document has been modified. &quot; &amp; vbCr _
            &amp; &quot;Do you want to save it?&quot;, vbYesNoCancel + vbInformation)
        Select Case answer
            Case vbNo
                ' The form will unload without saving data.
            Case vbYes
                ' Delegate to a procedure in the main MDI form.
                frmMainMDI.SaveToFile Filename
            Case vbCancel
                ' Refuse to unload the form.
                Cancel = True
        End Select
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="396"><h2>Polymorphic MDI Containers</h2></A>

<p>The MDI Notepad application described in the previous section is perfectly 
functional, but it can't be regarded as a good example of object-oriented design. In fact, 
the MDIForm object breaks the encapsulation of MDI child forms because it 
directly accesses the properties of the txtEditor control. This might appear to be a minor 
defect, but you know that good encapsulation is the key to reusable, easily 
maintainable, bug-free software. I'll demonstrate this concept by offering an alternate way 
to design an MDI application.
</p>

<A NAME="397"><h3>Defining the parent-child interface</h3></A>

<p>If you don't want the parent MDI form to directly access controls on its child 
forms, the solution is to define an interface through which the two forms can talk to 
one another. For example, instead of loading and saving text by manipulating the txtEditor's 
properties, the parent MDI form should ask the child form to load or save a given 
file. Similarly, instead of directly cutting, copying, and pasting data on the txtEditor 
control, the parent MDI form should invoke a method in the child form that does 
the job. The parent MDI form should also query the MDI child form to learn which 
commands should be made available in the Edit menu.
</p>
<p>After playing for a while with MDI projects, I came up with a simple 
interface that's generic enough to fit many MDI applications. In addition to the usual 
<I>Filename</I> and <I>IsDirty</I> properties, this interface includes properties such as 
<I>IsEmpty</I> (True if the MDI child form doesn't contain any data), 
<I>CanSave</I>,<I> CanCut</I>,<I> CanCopy</I>, 
<I>CanPaste</I>, and <I>CanPrint</I>, as well as methods such as 
<I>Cut</I>,<I> Copy</I>,<I> Paste</I>, 
<I>PrintDoc</I>, <I>LoadFile</I>,<I> 
SaveFile</I>,<I> </I>and<I> AskFilename</I> (which uses a 
<I>FileOpen</I> or <I>FileSave</I> common dialog). This 
interface permits you to rewrite the MDI Notepad application without breaking the 
encapsulation of MDI child forms. For example, this is the code that implements the Save 
As command on the File menu in the MDI parent form:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuFileSaveAs_Click()
    ' Ask the document to show a common dialog, and
    ' then save the file with the name selected by the user.
    On Error Resume Next
    ActiveForm.SaveFile ActiveForm.AskFilename(True)
End Sub
</pre>
</td></tr>
</table>
</p>
<p>And this is how the MDI child form implements the 
<I>PrintDoc</I> method:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintDoc()
    Printer.NewPage
    Printer.Print txtEditor.Text
    Printer.EndDoc
End Sub
</pre>
</td></tr>
</table>
</p>
<p>As usual, the complete source code of this new version of the application 
is available on the companion CD. You'll notice that the overall amount of code is 
slightly larger than the original MDI Notepad application. But this new structure has 
several benefits, which will be apparent in a moment.
</p>
<p><div class="note"><blockquote><b>NOTE</b><hr>
In this sample program, I defined a set of properties and methods. 
Then I added them to the primary interface of the frmDocument MDI child form. 
Because the frmMain MDI parent form accesses all its child forms through 
the <I>ActiveForm</I> property, properties and methods of this interface are 
accessed through late binding, which means that you must protect each reference with 
an <I>On Error</I> statement. For a more robust implementation, define a secondary 
interface as an abstract class and implement it in each MDI child form module.
</blockquote></div></p>

<A NAME="398"><H3>Changing the client form's implementation</H3></A>
<p>Because this new version of the MDI parent form never breaks the encapsulation 
of the MDI child forms, you're free to change the implementation of MDI child 
forms without affecting the rest of the application. For example, you can turn the 
Notepad-like program into an MDI image viewer application. In this case, the MDI child 
form hosts a PictureBox control, so you have to modify the implementation of all 
the properties and methods of the interface used for the parent-child communication. 
For example, the <I>PrintDoc</I> method is now implemented as follows:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PrintDoc()
    Printer.NewPage
    Printer.PaintPicture picBitmap.Picture, 0, 0
    Printer.EndDoc
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Surprisingly, you need to modify fewer than 20 lines of code to morph the 
MDI Notepad application into an image viewer application. But the most interesting 
detail is that you <I>don't need to modify one single line of code in the frmMain 
module</I>. In other words, you have created a reusable, polymorphic MDI parent form!
</p>
<p>Alternatively, if you're willing to slightly modify the parent MDI form's 
code, you can have the same MDI container work for different types of child forms at 
the same time. Figure 9-13 shows this new version of the sample MDI application, 
which hosts text documents and images at the same time. You can add new types of 
child forms or expand the interface to take additional properties and methods into account.
</p>
<p>
<A HREF="javascript:fullSize('f09ph13x.htm')"> <img src="f09ph13.JPG" width=404 height=272 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-13.</B> <i>You can reuse the frmMain.frm generic MDI form with different child forms, for example, mini word processors and image viewers.</i><!--/caption-->
</p>
<A NAME="399"><H2>The Application Wizard</H2></A>
<p>
<img src="new.jpg" width=102 height=87 border="0"></p>
</p>
<p>Visual Basic 6 comes with a revamped Application Wizard, which is more 
flexible than the one provided with Visual Basic 5 and is tightly integrated with the 
Toolbar Wizard and the Form Wizard.
</p>
<p>The Application Wizard is automatically installed by the Visual Basic 
setup procedure, so you just need to make it available in the Add-In menu by selecting 
it in the Add-In Manager window. When you run the wizard, you can choose 
from among MDI, SDI (Single Document Interface, applications based on standard 
forms), and Windows Explorer-like applications, as you can see in Figure 9-14.
</p>
<p>If you select the MDI option, you're asked to configure your menus 
(Figure 9-15): this tool is so simple to use and so intuitive that you'll probably wish you could 
have it when you're working with the standard Menu Editor.
</p>

<p>
<A HREF="javascript:fullSize('f09ph14x.htm')"> <img src="f09ph14.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-14.</B> <i>The Application Wizard: Choosing the interface.</i><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('f09ph15x.htm')"> <img src="f09ph15.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-15.</B> <i>The Application Wizard: Selecting menus.</i><!--/caption-->
</p>

<P>In the next step, you configure the program's toolbar (Figure 9-16) using 
an embedded wizard. This slick tool is also available outside the Application 
Wizard, and you'll find it in the Add-In menu under the name Toolbar Wizard.
</p>
<p>In subsequent steps, the Application Wizard asks you whether you want 
to use resource files and whether you want to add an item in the Help menu that 
points to your Web site. You can then select additional forms to be added to the 
project (Figure 9-17), choosing among four standard forms and any form templates you 
have defined previously. Finally, you can create any number of data-bound forms: in 
this case, the wizard calls the Data Form wizard, which I illustrated in <a href="#A46">Chapter 8</a>. In 
the last step, you can decide to save all the current settings to a configuration file 
so that the next time you run the Application Wizard you can speed up the 
process even more.
</p>
<p>
<A HREF="javascript:fullSize('f09ph16x.htm')"> <img src="f09ph16.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-16.</B> <i>The Application Wizard: Customizing the toolbar.</i><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('f09ph17x.htm')"> <img src="f09ph17.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-17.</B> <i>The Application Wizard: Selecting additional forms.</i><!--/caption-->
</p>

<p>While the code delivered by the Application Wizard is a good starting point 
for building your own MDI application, in my opinion it leaves much to be desired. 
The MDI application created by the wizard uses a sample MDI child form that hosts 
a RichTextBox control to build a simple word processor-like application. On 
some occasions, however, the buttons on the toolbar don't work as they should, and 
the code for setting up all common dialogs isn't properly implemented, just to name 
a few shortcomings. Unfortunately, you have no control over the code generated 
by the wizard, so each time you run the wizard you must fix the resulting code by hand.
</p>


<a name="A56"></a><h3>6.1.3 Using Drag-and-Drop</h3>

<A HREF="#A55">[Previous]</A> <A HREF="#A57">[Next]</A><P>

<A NAME="400"><H1>Using Drag-and-Drop</H1></A>
<p>Visual Basic has included drag-and-drop capabilities since its early versions, but 
only Visual Basic 5 added a new set of properties, methods, and events that let 
developers implement a standard OLE-compliant mechanism and enable 
cross-application drag-and-drop. You can recognize these properties, methods, and events because 
their names begin with <I>OLE</I>. In this section, I'll illustrate a few possible applications of 
this powerful, and underutilized, feature.
</p>

<A NAME="401"><h2>Automatic Drag-and-Drop</h2></A>

<p>Basically, a control can work as a source or as a destination of a 
drag-and-drop operation. Visual Basic supports two drag-and-drop modes, automatic or manual. 
In <I>automatic </I>mode, you just have to set a property at design time or at run time 
and let Visual Basic do everything. Conversely, in 
<I>manual </I>mode you have to respond to a number of events that occur while dragging is in progress, but in return you 
get better control over the process.
</p>
<p>Most intrinsic Visual Basic controls, as well as a few external ActiveX 
controls, support OLE drag-and-drop in one form or another. A few controls can work 
only as destinations of the drag-and-drop operations; others can work both as sources 
and destinations. Only a few intrinsic controls can work in automatic mode. You 
decide how a control will actually behave as the source of a drag-and-drop operation 
by setting its <I>OLEDragMode</I> property. Similarly, you decide how a control behaves 
as the destination of a drag-and-drop operation by setting its 
<I>OLEDropMode</I> property. Table 9-1 summarizes the degree of OLE drag-and-drop support by intrinsic 
Visual Basic controls and some external ActiveX controls.
</p>
<p>
<B>Table 9-1.</B> <i>You can classify controls according to their degree of support for OLE drag-and-drop features. Controls in the Windowless library support the same features as intrinsic controls.</i>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Controls</i></th>     
<th><i>OLEDragMode</i></th>     
<th><i>OLEDropMode</i></th>
</tr>

<tr>
<td valign="top">TextBox, PictureBox, Image, RichTextBox, MaskEdBox</td>
<td valign="top">vbManual, vbAutomatic</td>
<td valign="top">vbNone, vbManual, vbAutomatic</td>
</tr>

<tr>
<td valign="top">ComboBox, ListBox, DirListBox, FileListBox, DBCombo, DBList, TreeView, ListView, ImageCombo, DataList, DataCombo</td>
<td valign="top">vbManual, vbAutomatic</td>
<td valign="top">vbNone, vbManual</td>
</tr>

<tr>
<td valign="top">Form, Label, Frame, CommandButton, DriveListBox, Data, MSFlexGrid, SSTab, TabStrip, Toolbar, StatusBar, ProgressBar, Slider, Animation, UpDown, MonthView, DateTimePicker, CoolBar</td>
<td valign="top">Not supported</td>
<td valign="top">vbNone, vbManual</td>
</tr>
</table>
</p>

<p>If a control supports automatic drag-and-drop, you simply set its 
<I>OLEDragMode</I> or its <I>OLEDropMode</I> property (or both) to vbAutomatic. For example, if you want 
your application to support drag-and-drop of RTF text, you just need to place a 
RichTextBox control on your form and ensure that both its 
<I>OLEDragMode </I>and <I>OLEDropMode</I> properties are set to 1-vbAutomatic. If you do so, you can drag portions of text 
to and from Microsoft Word, WordPad, and most other word processors. Of course, 
you can also drag-and-drop to other RichTextBox controls in your own application, 
as well as to TextBox and MaskEdBox controls, as you can see in Figure 9-18.
</p>
<p>Other controls support the vbAutomatic setting for the 
<I>OLEDragMode </I>property. But in some cases the effect of such automatic drag-and-drop might not be what 
you expect. Just to name a few possibilities, you can drag selected items from a 
multiselect ListBox control into a multilined TextBox control, where the items are rendered 
as multiple lines of text separated by CR-LF pairs. Or you can drop a FileListBox's 
selected item onto another Windows application that supports that type of file. 
For example, use the demonstration application on the companion CD to drop a 
DOC or TXT file onto Microsoft Word. Note that although the DirListBox officially 
supports the automatic mode for <I>OLEDragMode</I>, no drag operation actually starts when 
you operate on its items.
</p>

<p>
<A HREF="javascript:fullSize('f09ph18x.htm')"> <img src="f09ph18.JPG" width=404 height=213 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-18.</B> <i>This demo shows how you can drag-and-drop text and images to and from other Windows programs. Notice how the text is rendered differently on the RichTextBox and regular TextBox controls.</i><!--/caption-->
</p>

<p>When you perform automatic drag-and-drop, your application doesn't 
receive any events and you have no control over the process. You can initiate the 
drag-and-drop operation only with the left mouse button, and by default 
its effect is a Move command. (That is, the data is moved to the destination and then is deleted from 
the source control.) If you want to perform a Copy operation, you must keep the 
Ctrl key pressed, as you would do inside Windows Explorer.
</p>

<A NAME="402"><h2>Manual Drag-and-Drop</h2></A>

<p>While automatic mode allows you to get interesting effects by simply setting 
some design-time properties, it's apparent that you need manual mode to tap the real 
power of drag-and-drop. As you'll see, this process requires you to write code in several 
event procedures, both for the source and target controls. Figure 9-19 summarizes the 
events that fire as the end user performs a drag-and-drop operation: You'll probably 
need to refer to this diagram while reading the rest of this section.
</p>

<p>
<A HREF="javascript:fullSize('f09ph19x.htm')"> <img src="f09ph19.JPG" width=404 height=372 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-19.</B> <i>All the events that fire when manual drag-and-drop is enabled.</i><!--/caption-->
</p>

<p>The demonstration application shown in Figure 9-20 consists of a RichTextBox control that works either as the source or the target for 
an OLE drag-and-drop operation. On the form you'll also find a ListBox control on 
which you can drop plain text, either from the RichTextBox control or another source 
(such as Microsoft Word). When you do this, the ListBox control will scan the text, find 
all unique words, sort them, and display the results to the user.
</p>

<p>
<A HREF="javascript:fullSize('f09ph20x.htm')"> <img src="f09ph20.JPG" width=404 height=273 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-20.</B> <i>This demonstration application shows how you can use OLE drag-and-drop capabilities to create a ListBox control that automatically searches the text you drop on it, finds unique words, and sorts them.</i><!--/caption-->
</p>

<A NAME="403"><h3>Initiating a drag-and-drop operation</h3></A>

<p>If you want a control to be able to initiate a drag-and-drop operation, you 
should set its <I>OLEDragMode</I> property to vbManual (the default value of this property for 
all controls except RichTextBox), and then start the drag process by invoking its 
<I>OLEDrag</I> method. You usually do this in the 
<I>MouseDown</I> event procedure:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rtfText_MouseDown(Button As Integer, Shift As Integer, _
    x As Single, y As Single)
    ' Start a drag operation if right button is pressed.
    If Button = 2 Then rtfText.OLEDrag
End Sub
</pre>
</td></tr>
</table>
</p>
<p>When you invoke the <I>OLEDrag</I> method, an 
<I>OLEStartDrag</I> event is fired for the source control. This event receives a DataObject object and an 
<I>AllowedEffects</I> parameter. You can think of the DataObject object as a recipient for the data you want 
to pass from the source to the target control. You store data in this object through 
its <I>SetData</I> method. As is the case with the Clipboard, you can store multiple data 
in different formats, as shown in Table 9-2. For example, a RichTextBox control is 
able to move or copy data in RTF or plain text format:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rtfText_OLEStartDrag(Data As RichTextLib.DataObject, _
    AllowedEffects As Long)
    ' Use selected text, or all text if no text is currently selected.
    If rtfText.SelLength Then
        Data.SetData rtfText.SelRTF, vbCFRTF
        Data.SetData rtfText.SelText, vbCFText
    Else
        Data.SetData rtfText.TextRTF, vbCFRTF
        Data.SetData rtfText.Text, vbCFText
    End If
    AllowedEffects = vbDropEffectMove Or vbDropEffectCopy
End Sub
</pre>
</td></tr>
</table>
</p>
<p>
<B>Table 9-2.</B> <i>All the formats supported by the DataObject object.</i>
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Meaning</i></th>
</tr>

<tr>
<td valign="top">vbCFText</td>
<td valign="top">1</td>
<td valign="top">Text</td>
</tr>

<tr>
<td valign="top">vbCFBitmap</td>
<td valign="top">2</td>
<td valign="top">Bitmap (BMP)</td>
</tr>

<tr>
<td valign="top">vbCFMetafile</td>
<td valign="top">3</td>
<td valign="top">Metafile (WMF)</td>
</tr>

<tr>
<td valign="top">vbCFEMetafile</td>
<td valign="top">14</td>
<td valign="top">Enhanced metafile (.emf)</td>
</tr>

<tr>
<td valign="top">vbCFDIB</td>
<td valign="top">8</td>
<td valign="top">Device independent bitmap (dib or bmp)</td>
</tr>

<tr>
<td valign="top">vbCFPalette</td>
<td valign="top">9</td>
<td valign="top">Color palette</td>
</tr>

<tr>
<td valign="top">vbCFFiles</td>
<td valign="top">15</td>
<td valign="top">List of files</td>
</tr>

<tr>
<td valign="top">vbCFRTF</td>
<td valign="top">-16639</td>
<td valign="top">Rich Text Format (RTF)</td>
</tr>
</table>
</p>




<P>You should assign the <I>AllowedEffects</I> parameter a value that specifies all 
the effects that you want to support for the drag-and-drop operation. You can assign 
the value 1-vbDropEffectCopy or 2-vbDropEffectMove or their sum if you want to 
support both effects, as in the preceding piece of code.</P>

<A NAME="404"><h3>Preparing to drop on the source control</h3></A>

<p>If a drag operation is currently active, Visual Basic raises an 
<I>OLEDragOver</I> event for all the controls the mouse hovers on. This event receives the DataObject object 
and the <I>Effect</I> value, as set by the source control, plus information on the mouse 
position and button state. Based on this data, you assign to the 
<I>Effect</I> parameter the one effect corresponding to the action that will be performed when the end user 
releases the mouse on this control. This value can be 0-vbDropEffectNone, 
1-vbDropEffectCopy, 2-vbDropEffectMove, or &amp;H80000000-vbDropEffectScroll. (The latter value means 
that the target control will scroll its own contents, for 
example, when the mouse is on the scrollbar of a ListBox control). The 
<I>State</I> parameter holds a value that specifies 
whether the mouse is entering or leaving the control, and can be one of the following 
values: 0-vbEnter, 1-vbLeave, or 2-vbOver.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub lstWords_OLEDragOver(Data As DataObject, Effect As Long, _
    Button As Integer, Shift As Integer, X As Single, Y As Single, _
    State As Integer)
    If Data.GetFormat(vbCFText) Then
        Effect = Effect And vbDropEffectCopy
    Else
        Effect = vbDropEffectNone
    End If
    ' As a demonstration, change the background of this ListBox when
    ' the mouse is over it.
    If State = vbLeave Then
        ' Restore background color on exit.
        lstWords.BackColor = vbWindowBackground
    ElseIf Effect &lt;&gt; 0 And State = vbEnter Then
        ' Change background color on entry.
        lstWords.BackColor = vbYellow
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
<p>The target control should test whether the DataObject object contains data 
in one of the formats the target supports. It performs this test by invoking the 
DataObject object's <I>GetFormat</I><B> 
</B>method, as in the previous code snippet. In addition, you 
should always consider the <I>Effect</I> parameter to be a bit-field value. In the preceding 
case, the statement
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Effect = Effect And vbDropEffectCopy
</pre>
</td></tr>
</table>
</p>
<p>will set its value to 0 if the source control doesn't support the Copy operation. At 
first you might think that this caution is excessive because you know that the 
RichTextBox control does support the Copy operation. But you should keep in mind that once 
you enable the lstWords control as a target control for a drag-and-drop operation, it 
can receive values from any possible source of a drag-and-drop action, inside or 
outside the application it belongs to; therefore, you must be prepared to deal with such cases.
</p>
<p>Immediately after the <I>OLEDragOver</I> event for the source 
control, Visual Basic raises an 
<I>OLEGiveFeedback</I> event for the source control. In this event, the 
source control learns which effect was selected by the target control and possibly 
modifies the mouse cursor:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub lstWords_OLEGiveFeedback(Effect As Long, _
    DefaultCursors As Boolean)
    ' If effect is Copy, use a custom cursor.
    If Effect = vbDropEffectCopy Then
        DefaultCursors = False
        Screen.MousePointer = vbCustom
        ' imgCopy is an Image control that stores a custom icon.
        Screen.MouseIcon = imgCopy.Picture
    Else
        DefaultCursors = True
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
<p>The <I>DefaultCursors</I> parameter should be explicitly set to False if you assign 
a different mouse cursor. You don't have to implement the 
<I>OLEGiveFeedback</I> event if you don't care about the cursor's shape.
</p>

<A NAME="405"><h3>Dropping data</h3></A>

<p>When the user releases the mouse button over the target control, Visual Basic 
raises an <I>OLEDragDrop</I> event for the target control. Apart from the 
<I>State</I> parameter, this event receives the same parameters as the 
<I>OLEDragOver</I> event. In this case, the 
meaning of the <I>Effect</I> parameter is slightly different because it represents the action that 
was decided by the target control.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub lstWords_OLEDragDrop(Data As DataObject, Effect As Long, _
    Button As Integer, Shift As Integer, X As Single, Y As Single)
    ' Restore the correct background color.
    lstWords.BackColor = vbWindowBackground
    ' Select Copy action if possible, otherwise select Move.
    If Effect And vbDropEffectCopy Then
        Effect = vbDropEffectCopy
    ElseIf Effect And vbDropEffectMove Then
        Effect = vbDropEffectMove
    End If
    ' In either case, ask for the data - only plain text is supported.
    Dim text As String
    text = Data.GetData(vbCFText)

    ' Code for processing the text and loading the list of unique
    ' words in the lstWords listbox (omitted)...
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Immediately after the <I>OLEDragDrop</I> event is executed, Visual Basic fires 
the source control's <I>OLECompleteDrag</I> event. You need to write code for this event 
to delete highlighted data in the source code if the action was vbDropEffectMove or 
to restore the control's original appearance if it changed during the drag-and-drop process:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rtfText_OLECompleteDrag(Effect As Long)
    If Effect = vbDropEffectMove Then
        ' If this was a Move operation, delete the highlighted text.
        rtfText.SelText = &quot;&quot;
    Else
        ' If it was a Copy command, just clear the selection.
        rtfText.SelLength = 0
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="406"><h3>Loading data on demand</h3></A>

<p>When the source control supports many formats, loading data in those formats 
into the DataObject<I> </I>object when the 
<I>OLEStartDrag</I> event fires isn't an efficient 
solution. Fortunately, Visual Basic supports another approach: Instead of loading the 
source data in the DataObject object when the drag operation begins, you just specify 
which formats the source control is willing to support.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the rtfText's OLEStartDrag event procedure
Data.SetData , vbCFRTF 
Data.SetData , vbCFText
</pre>
</td></tr>
</table>
</p>
<p>If the drag-and-drop operation isn't canceled, the target control eventually 
invokes the DataObject's <I>GetData</I> method to retrieve the data in a given format. 
When this happens, Visual Basic fires the 
<I>OLESetData</I> event for the source control:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rtfText_OLESetData(Data As RichTextLib.DataObject, _
    DataFormat As Integer)
    ' This event fires only when the target control invokes the
    ' Data's GetData method.
    If DataFormat = vbCFText Then
        If rtfText.SelLength Then
            Data.SetData rtfText.SelText, vbCFText
        Else
            Data.SetData rtfText.text, vbCFText
        End If
    ElseIf DataFormat = vbCFRTF Then
        If rtfText.SelLength Then
            Data.SetData rtfText.SelRTF, vbCFRTF
        Else
            Data.SetData rtfText.TextRTF, vbCFRTF
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
<p>This event isn't invoked if you passed data to the 
<I>SetData</I> method's first argument when the drag-and-drop operation began.
</p>

<A NAME="407"><h3>Dragging and dropping files</h3></A>

<p>As you know, Windows Explorer supports drag-and-drop of filenames, and 
many Windows applications can work as destinations of a file drag operation initiated 
inside Windows Explorer. In this section, I'll show how you can implement both 
these features&#8212;working as a source or a target for file drag-and-drop.
</p>
<p>The key to these capabilities is the DataObject's 
<I>Files</I> property. If you want your application to work as a target for a file drag-and-drop operation, you check 
whether the DataObject object contains data in vbCFFiles format, and then you retrieve 
filenames by iterating on the Files collection. For example, you can load the names 
of the dropped files into a ListBox control using this code:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>If Data.GetFormat(vbCFFiles) Then
    For i = 1 To Data.Files.Count
        lstFiles.AddItem Data.Files(i)
    Next
End If
</pre>
</td></tr>
</table>
</p>
<p>Of course, you can also open the file and display its contents. The 
demonstration program shown in Figure 9-21 implements both possibilities.
</p>

<p>
<A HREF="javascript:fullSize('f09ph21x.htm')"> <img src="f09ph21.JPG" width=404 height=328 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-21.</B> <i>The upper window is displaying the contents of the AutoDrop.Vbp file dropped by Windows Explorer, while the bottom window is displaying a list of filenames dropped by the file dialog on the right.</i><!--/caption-->
</p>

<p>Creating an application that behaves as a source for dragging and dropping 
files isn't difficult either. You just have to add items to the Files collection and set 
the vbCFFiles format. Just remember that target applications expect the Files 
collection to contain filenames with their complete paths. This code shows how you can use 
a FileListBox control as a source for a drag operation:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub File1_OLEStartDrag(Data As DataObject, AllowedEffects As Long)
    Dim i As Integer, path As String
    path = File1.path &amp; IIf(Right$(File1.path, 1) &lt;&gt; &quot;\&quot;, &quot;\&quot;, &quot;&quot;)
    ' Add all selected files to the Data.Files collection.
    Data.Files.Clear
    For i = 0 To File1.ListCount - 1
        If File1.Selected(i) Then
            Data.Files.Add path &amp; File1.List(i)
        End If
    Next
    If Data.Files.Count Then
        ' Only if we actually added files
        Data.SetData , vbCFFiles
        AllowedEffects = vbDropEffectCopy
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="408"><h3>Using custom formats</h3></A>

<p>The OLE drag-and-drop mechanism is even more flexible than I've demonstrated 
in that it also supports moving data in a proprietary format. For example, you might 
have a form that's displaying an invoice, an order, or information about a customer, 
and you want to enable the user to drag-and-drop this data on another form of your 
application. Using a custom format also enables you to easily transfer information 
among different instances of your application, and at the same time it prevents your 
accidentally dropping it on other programs. In this way, you can move confidential data 
between applications without the risk of unauthorized people peeking at it.
</p>
<p>The first step in using a custom format is registering it with Windows, 
which you do by invoking the 
<I>RegisterClipboardFormat</I> API function. This step must 
be executed by every application that needs to access data in a custom format. 
Windows guarantees that the first time this function is invoked with a given custom format 
name (<I>PersonalData</I> in the code below), a unique integer will be returned and all 
subsequent calls to that API function with the same argument will return the same 
value, even if called from other applications.
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function RegisterClipboardFormat Lib &quot;user32&quot; _
    Alias &quot;RegisterClipboardFormatA&quot; (ByVal lpString As String) As Integer
Dim CustomFormat As Integer

Private Sub Form_Load()
    CustomFormat = RegisterClipboardFormat(&quot;PersonalData&quot;)
End Sub
</pre>
</td></tr>
</table>
</p>
<p>At this point, you can store data using the <I>CustomFormat 
</I>identifier, exactly as you did with a standard format such as vbCFText or vbCFBitmap. The only 
difference is that custom data must be loaded into a Byte array before passing it to 
the <I>DataObject.SetData</I> method. The demonstration application in Figure 9-22 uses 
this technique to move or copy data about two forms:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Code in the source application
Private Sub imgDrag_OLESetData(Data As DataObject, DataFormat As Integer)
    Dim i As Integer, text As String, bytes() As Byte
    ' Build a long string made up of field contents.
    For i = 0 To txtField.UBound
        If i &gt; 0 Then text = text &amp; vbNullChar
        text = text &amp; txtField(i)
    Next
    ' Move to a byte array, and then assign it to DataObject.
    bytes() = text
    Data.SetData bytes(), CustomFormat
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('f09ph22x.htm')"> <img src="f09ph22.JPG" width=404 height=263 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 9-22.</B> <i>You can move data in a custom format between distinct forms or even between distinct instances of your application, without the risk of dropping your confidential data somewhere else.</i><!--/caption-->
</p>

<P>The target form must retrieve the Byte array, rebuild the original string, and 
then extract the value of individual fields:
</p>
<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Code in the target application
Private Sub imgDrag_OLEDragDrop(Data As DataObject, Effect As Long, _
    Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim bytes() As Byte, text() As String, i As Integer
    bytes() = Data.GetData(CustomFormat)
    ' Retrieve individual values, and then assign them to fields.
    text() = Split(CStr(bytes), vbNullChar)
    For i = 0 To txtField.UBound
        txtField(i) = text(i)
    Next
End Sub
</pre>
</td></tr>
</table>
</p>
<p>Browse the source code of the demonstration application to see more 
information about this technique.
</p>
<p>
Now that you have mastered all the techniques concerning SDI and MDI forms, 
dialog boxes, and OLE drag-and-drop, you're ready to dive into the intricacies of 
the external ActiveX controls that come with Visual Basic. These controls are covered 
in the next three chapters.
</p>

<a name="A57"></a><h2>6.2 Chapter 10 -- Windows Common Controls: Part I</h2>

<A HREF="#A56">[Previous]</A> <A HREF="#A58">[Next]</A><P>


<font size="+3">Chapter 10</font>

<A NAME="409"><h1>Windows Common Controls: Part I</h1></A>
<p>Apart from the intrinsic controls described in <a href="#A14">Chapter 3</a>, the Microsoft 
Windows common controls are probably the most widely used controls in Microsoft Visual 
Basic applications. The main reason for their popularity is that they contribute to 
creating the Windows look-and-feel more than any other group of controls. For example, 
a Windows Explorer-like application with a TreeView control on the left and a 
ListView control on the right immediately reminds users of Windows Explorer itself, 
thus making for a familiar interface.</p>

<p>Windows common controls were first introduced in Windows 95. The 
initial group of these controls included the TreeView, ListView, ImageList, Toolbar, 
StatusBar, TabStrip, and Slider controls. Visual Basic 4&#8212;the first 32-bit version of this 
language&#8212;offered an OLE Custom Control (OCX) that provided access to their features. 
After this initial release, Microsoft manufactured several new common controls as well as 
more powerful versions of the original ones. But the OCXs that came with Visual Basic 
5 (and its three service packs) were never significantly updated, which meant 
that Visual Basic programmers couldn't use these newer controls in their applications 
(with the exceptions of the new Animation and UpDown controls). Until recently, to 
use such newer controls or to fully exploit the capabilities of the original controls, 
Visual Basic developers had to resort to third-party Microsoft ActiveX controls or to 
complex API programming.</P>

<p>Visual Basic 6 has remedied this problem. It now includes all the tools you 
need to fully take advantage of the features of nearly all existing common controls. A 
few Windows common controls are still missing from the newer versions of the 
OCX files (most notably, the IP Address control), but in most cases you won't need 
to purchase any additional custom controls to give your Visual Basic applications a 
modern user interface.</P>

<p>Most of the Windows common controls come in the MsComCtl.ocx file. 
This file contains all the original common controls, plus the ImageCombo control. 
Another file, MsComCt2.ocx, includes the code for five additional controls: 
Animation, UpDown, MonthView, DateTimePicker, and FlatScrollBar. I describe these 
controls in <a href="#A67">Chapter 11</a>. Note that these two files correspond to the outdated files 
ComCtl32.ocx and ComCt232.ocx that were distributed with Visual Basic 5. Visual Basic 6 
doesn't replace the older OCX files and can peacefully coexist with Visual Basic 5 and 
applications developed with that version of the language.</P>

<p>Visual Basic 6 also includes a third OCX file, ComCt332.ocx, which adds 
support for yet another common control, the CoolBar control (also described in <a href="#A67">Chapter 11</a>). This file has been available to Visual Basic 5 developers, who had to download it 
from the Microsoft web site, but the file is now included in the Visual Basic package.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>OCX files that are distributed with Visual Basic 6 have an interesting 
feature. While the older ComCtl32.ocx and ComCt232.ocx files were just intermediaries 
between Visual Basic and the system DLLs that included the actual code for the 
controls, the newer versions are self-contained and include all the necessary code 
for manipulating the controls. Needless to say, newer files are bigger than their 
predecessors&#8212;MsComCtl.ocx is more than 1 MB&#8212;but this approach simplifies the 
distribution of Visual Basic applications and reduces the chance of conflicts with 
programs already installed on the end user's machine.</P>

<p>In this chapter, I describe the features of all the Windows common 
controls included in MsComCtr.ocx, while the <a href="#A67">next chapter</a> covers all the controls 
in MsComCt2.ocx and ComCt232.ocx. To test the code presented here, you first 
make the controls available to your Visual Basic environment. To do so, execute the 
Components command from the Project menu (or just press the Ctrl+T key 
combination) to display the Components dialog box similar to the one in Figure 10-1, and then 
select the OCXs that interest you, as shown in Figure 10-2.</P>

<p>When you load into the Visual Basic 6 environment a project built with a previous version of the language that contains references to older versions of Windows common controls, a message box appears asking whether you want to upgrade those controls with their newer versions. For the maximum compatibility with existing applications, you might decide to continue to use the older controls, even 
though upgrading to the newer versions is the best choice if you want to improve the 
application's user interface and functionality. You can turn this warning off by 
deselecting the Upgrade ActiveX Controls check box on the General tab of the Project Properties dialog box.</P>

<p>
<A HREF="javascript:fullSize('F10ph01x.htm')"> <img src="F10ph01.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-1.</B> <i>The Components dialog box, with all the Windows common controls OCXs selected.</i><!--/caption-->
</p>

<p>
<img src="F10ph02.GIF" width=382 height=323 border="0">
<p>
<!--caption--><B>Figure 10-2.</B> <i>The common controls in the Toolbox.</i><!--/caption-->



<a name="A58"></a><h3>6.2.1 The ImageList Control</h3>

<A HREF="#A57">[Previous]</A> <A HREF="#A59">[Next]</A><P>

<A NAME="410"><h1>The ImageList Control</h1></A>

<p>The ImageList control is most often used as a container for images and icons that 
are employed by other controls, such as TreeView, ListView, TabStrip, and 
ImageCombo controls. For this reason, it makes sense to describe it before any other controls. 
The ImageList control is invisible at run time, and to display one of the images it 
contains you must draw it on a form, a PictureBox control, or an Image control, or 
associate it with another control.</p>

<p>Using the ImageList control as a repository for images that are then used by 
other controls offers a number of advantages. Without this control, in fact, you would 
have to load images from disk at run time using a 
<I>LoadPicture </I>function, which slows down execution and increases the number of files to be distributed with your program, 
or an array of Image controls, which slows down form loading. It's much easier and 
more efficient to load all the images in the ImageList control at design time and then 
refer to them from the other controls or in source code.</p>

<A NAME="411"><h2>Adding Images</h2></A>

<p>The ImageList control exposes a ListImages collection, which in turn contains 
a number of ListImage objects. Each ListImage item holds an individual image. As 
with any collection, an individual ListImage object can be referenced through its 
numerical index or its string key (if it has one). Each ListImage object can hold an image 
in one of the following graphic formats: bitmap (.bmp), icon (.ico), cursor (.cur), 
JPEG (.jpg), or GIF (.gif). The latter two formats weren't supported by the ImageList 
control distributed with Visual Basic 5.</p>

<A NAME="412"><h3>Adding images at design time</h3></A>

<p>Adding images at design-time is easy. After you place an ImageList control on a 
form, right-click on it, select the Properties command from the pop-up menu, and 
switch to the Images tab, as shown in Figure 10-3. All you have to do now is click on 
the Insert Picture button and pick up your images from disk. You should associate a 
string key with each image so that you can refer to it correctly later, even if you add 
or remove other images in the future (which would affect its numerical index). Of 
course, all string keys must be unique in the collection. You can also specify a string for 
the <I>Tag</I> property of an image, for example, if you want to provide a textual 
description of the image or any other information associated with this image. Visual Basic 
never directly uses this property, so you're free to store any string data in it.</p>

<p>
<img src="F10ph03x.gif" width=419 height=315 border=0>
</p><p>
<!--caption--><B>Figure 10-3.</B> <i>The Images tab of the Properties window of an ImageList control.</i><!--/caption-->
</p>

<p>Images added to the ListImages collection can be of any size, with a caveat: 
If you're going to use these images inside another common control, all the images 
after the first one will be resized and stretched to reflect the size of the first image 
added to the control. This isn't an issue if you're going to display these images on a 
form, a PictureBox control, or an Image control.</p>

<p>If the ImageList control doesn't contain any images, you can set the size 
you want the images to be in the General tab of the Properties dialog box. Trying to 
do this when the control already contains one or more ListImage items raises an error.</p>

<A NAME="413"><h3>Adding images at run time</h3></A>

<p>Adding images at run time requires you to use the 
<I>Add</I> method of the ListImages collection, the syntax of which is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Picture]) As ListImage
</pre>
</td></tr>
</table>
</p>


<p>If you omit the <I>Index </I>argument, you add the new image at the end of the 
collection. The following code creates a new ListImage item and associates it with 
a bitmap loaded from disk:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim li As ListImage
Set li = ImageList1.ListImages.Add(, &quot;Cut&quot;, _
    LoadPicture(&quot;d:\bitmaps\cut.bmp&quot;))
</pre>
</td></tr>
</table>
</p>


<p>You don't need to assign the result value of the 
<I>Add</I> method to a ListImage object unless you want to assign a string to the 
<I>Tag</I> property of the object just created. 
Even in that case, you can do without an explicit variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With ImageList1.ListImages.Add(, &quot;Cut&quot;, LoadPicture(&quot;d:\bitmaps\cut.bmp&quot;))
    .Tag = &quot;The Cut icon&quot;
End With
</pre>
</td></tr>
</table>
</p>


<p>You can remove individual ListImage objects (added either at design time 
or at run time) by using the <I>Remove</I> method of the ListImages collection.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can use a numerical index or a string key
' to remove the associated image.
ImageList1.ListImages.Remove &quot;Cut&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can also remove all the images in one operation by using the 
collection's <I>Clear</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Remove all images.
ImageList1.ListImages.Clear
</pre>
</td></tr>
</table>
</p>


<p>You can learn the size of the images currently stored in the control by 
using the ImageList's <I>ImageWidth</I> and 
<I>ImageHeight</I> properties. These properties are in 
pixels and can be written to only if the ListImages collection is empty; after you add 
the first image, they become read-only properties.</p>

<A NAME="414"><h2>Extracting and Drawing Images</h2></A>

<p>If you associate an ImageList control with another common control, you usually 
don't have to worry about extracting and showing individual images because 
everything is done automatically for you. But if you want to manually display or print 
images, you have to learn how to use a few properties and methods from the ImageList 
control and its ListImage dependent objects.</p>

<A NAME="415"><h3>Extracting individual images</h3></A>

<p>Each ListImage object exposes a <I>Picture</I> property, which lets you extract the 
image and assign it to another control, typically a PictureBox or Image control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set Picture1.Picture = ImageList1.ListImages(&quot;Cut&quot;).Picture
</pre>
</td></tr>
</table>
</p>


<p>In general, you can use the <I>Picture</I> property of a ListImage object 
whenever you would use the <I>Picture</I> property of a PictureBox or an Image control, as in 
the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save an image to a disk file.
SavePicture ImageList1.ListImages(&quot;Cut&quot;).Picture, &quot;C:\cut.bmp&quot;
' Display an image on the current form, zooming it by a factor
' of 4 along the X-axis, and 8 along the Y-axis.
With ImageList1
    PaintPicture .ListImages(&quot;Cut&quot;).Picture, 0, 0, _
        ScaleX(.ImageWidth, vbPixels) * 4, ScaleY(.ImageHeight, vbPixels) * 8
End With
</pre>
</td></tr>
</table>
</p>


<p>Using the <I>PaintPicture</I> method, you can display any ListImage object on a 
form or in a PictureBox control, or you can print it to the Printer object. For more 
information about the <I>PaintPicture</I> method, see <a href="#A9">Chapter 2</a>.</p>

<p>ListImage objects also expose an 
<I>ExtractIcon</I> method, which creates an icon 
out of the image and returns it to the caller. You can therefore use this method 
whenever an icon is expected, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Form1.MouseIcon = ImageList1.ListImages(&quot;Pointer&quot;).ExtractIcon
</pre>
</td></tr>
</table>
</p>


<p>Unlike standard collections, keys in the ListImages collection are dealt with 
in a case-sensitive way. In other words, 
&quot;<I>Pointer</I>&quot; and 
&quot;<I>pointer</I>&quot; are assumed to be different items.</p>

<A NAME="416"><h3>Creating transparent images</h3></A>

<p>The ImageList control has a <I>MaskColor </I>property whose value determines the 
color that should be considered transparent when you're performing graphical 
operations on individual ListImage objects or when you're displaying images inside other 
controls. By default, this is the gray color (&amp;HC0C0C0), but you can change it both 
at design time in the Color tab of the Properties dialog box and at run time via code.</p>

<p>When a graphical operation is performed, none of the pixels in the image 
that are the color defined by <I>MaskColor</I> are transferred. To actually display 
transparent images, however, you must ensure that the 
<I>UseMaskColor</I> property is set to True, which is its default value. You can modify this value in the General tab of the 
Properties dialog box or at run time via code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Make white the transparent color.
ImageList1.MaskColor = vbWhite
ImageList1.UseMaskColor = True
</pre>
</td></tr>
</table>
</p>


<A NAME="417"><h3>Using the <I>Draw</I> method</h3></A>

<p>ListImage objects support the <I>Draw</I> method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Draw hDC, [x], [y], [Style]
</pre>
</td></tr>
</table>
</p>


<p>where <I>hDC </I>is the handle of a device context (typically the value returned by the 
<I>hDC</I> property of a form, a PictureBox control, or the Printer object) and 
<I>x </I>and <I>y </I>are the coordinates in pixels where the image should be displayed in the target object. 
<I>Style </I>is one of the following values: 0-imlNormal (default, draw the image without 
any change), 1-imlTransparent (use the 
<I>MaskColor</I> property to account for 
transparent areas), 2-imlSelected (draw the image dithered with the system highlight color), 
or 3-imlFocus (as imlSelected, but create a hatched effect to indicate that the image 
has the focus):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show an image in the upper left corner of a PictureBox control.
ImageList1.ListImages(&quot;Cut&quot;).Draw Picture1.hDC, 0, 0
</pre>
</td></tr>
</table>
</p>


<A NAME="418"><h3>Creating composite images</h3></A>

<p>The ImageList control also includes the ability to create composite images by 
overlaying two individual images held in ListImage objects. This can be 
accomplished using the <I>Overlay</I> method. Figure 10-4 shows two individual images and then 
what you can get by overlaying the second one on the first one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>PaintPicture ImageList1.ListImages(1).Picture, 0, 10, 64, 64
PaintPicture ImageList1.ListImages(2).Picture, 100, 10, 64, 64
PaintPicture ImageList1.Overlay(1, 2), 200, 10, 64, 64
</pre>
</td></tr>
</table>
</p>


<p>
<img src="F10ph04.GIF" width=265 height=91 border="0">
<p>
<!--caption--><B>Figure 10-4.</B> <i>The effect of the Overlay method.</i><!--/caption-->


<p>The <I>Overlay</I> method implicitly uses the 
<I>MaskColor</I> property to determine which color is to be considered as the transparent color, so you must ensure that 
the <I>UseMaskColor</I> property is set to True.</p>


<a name="A59"></a><h3>6.2.2 The TreeView Control</h3>

<A HREF="#A58">[Previous]</A> <A HREF="#A60">[Next]</A><P>

<A NAME="419"><h1>The TreeView Control</h1></A>

<p> The TreeView control is probably the first Windows common control that 
users become acquainted with because it's the control Windows Explorer is based 
on. Basically, the TreeView control displays a hierarchy of items. A plus sign beside 
an item indicates that it has one or more child items. An item that has child items 
can be expanded to show them or collapsed to hide them. This can be done 
interactively by the user or via code.</p>

<p>The Visual Basic 6 version of the TreeView control has a number of 
improvements and now supports check boxes beside each item and full row 
selection. Moreover, individual nodes can have different 
<I>Bold</I>, <I>Foreground</I>, and 
<I>Background</I> attributes.</p>

<p>The TreeView control exposes a Nodes collection, which in turn includes 
all the Node objects that have been added to the control. Each individual Node 
object exposes a number of properties that let you define the look of the control. 
Typically, a TreeView control has one single root Node object, but you can also create 
multiple Node objects at the root level.</p>

<A NAME="420"><h2>Setting Design-Time Properties</h2></A>

<p>Immediately after creating a TreeView control on a form, you should display its 
Properties dialog box (shown in Figure 10-5), which you do by right-clicking on the 
control and selecting the Properties menu item. Of course, you can also set properties 
that appear in this page at run time, but you rarely need to change the appearance of 
a TreeView control once it has been displayed to the user.</p>

<p>The <I>Style </I>property affects which graphical elements will be used inside 
the control. A TreeView control can display four graphical elements: the text 
associated with each Node object, the picture associated with each Node object, a plus or 
minus sign beside each Node object (to indicate whether the Node is in collapsed 
or expanded state), and the lines that go from each Node object to its child objects. 
The <I>Style</I> property can be assigned one of eight values, each one representing a 
different combination of these four graphical elements. In most cases, you use the 
default value, 7-tvwTreelinesPlusMinusPictureText, which displays all graphical elements.</p>

<p>
<img src="F10ph05x.gif" width=422 height=370 border=0>
</p><p>
<!--caption--><B>Figure 10-5.</B> <i>The General tab of the Properties dialog box of a TreeView control.</i><!--/caption-->
</p>

<p>The <I>LineStyle </I>property affects how lines are drawn. The value 
0-tvwTreeLines doesn't display lines among root Node objects (this is the default setting), 
whereas the value 1-tvwRootLines also displays lines among all root Nodes and makes 
them appear as if they were children of a fictitious Node located at an upper level. 
The <I>Indentation </I>property states the distance in twips between vertical dotted lines.</p>

<p>The <I>LabelEdit</I> property affects how the end user can modify the text 
associated with each Node object. If it's assigned the value 0-tvwAutomatic (the default), the 
end user can edit the text by clicking on the Node at run time; if it's assigned the 
value 1-tvwManual, the edit operation can be started only programmatically, by your 
issuing a <I>StartLabelEdit</I> method.</p>

<p>The ImageList combo box lets you select which ImageList control will be 
used to retrieve the images of individual Node objects. The combo box lists all the 
ImageList controls located on the current form.</p>

<p><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>You can associate a TreeView control (or any control) with an 
ImageList control located on another form by making the assignment at run time, as 
shown in this code:
<P><TABLE><TR><TD><PRE>
Private Sub Form_Load()
    Set TreeView1.ImageList = AnotherForm.ImageList1
End Sub
</PRE></TD></TR></TABLE></P>

<p>This technique allows you to use a group of bitmaps and icons in all the forms 
of your application without having to duplicate them and thus shrink the size of 
the EXE file. This way, you save memory and resources at run time.</P>
</BLOCKQUOTE></DIV></P>

<p>The <I>HideSelection</I> property determines whether the selected Node object 
will continue to be highlighted when the TreeView control loses the focus. The 
<I>PathSeparator</I> property states which character or string should be used in the 
<I>FullPath</I> property of the Node object. The default value for the 
<I>PathSeparator</I> property is the backslash character. For example, if you have a root Node labeled 
&quot;<I>Root&quot; </I>and a child Node labeled 
&quot;<I>FirstChild&quot;,</I> the <I>FullPath</I> property of the child Node will 
be &quot;<I>Root\FirstChild&quot;.</I></P>

<p>The <I>Sorted</I> property states whether Nodes in the control are 
automatically sorted in alphabetical order. The documentation omits an important 
detail: This property affects only how root Node objects are sorted but has no effect on the 
order of child Node objects at lower levels. If you want all the branches of the tree to 
be sorted, you should set the <I>Sorted</I> properties of all individual Node items to True.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The TreeView control that comes with Visual Basic 6 adds a few 
interesting properties not available in previous versions of the language. The 
<I>FullRowSelect </I>property, if True, causes a Node of the control to be selected if the user clicks 
anywhere on its row. (By default, this property is False, in which case an item can 
be selected only with a click over it or its plus or minus symbol.)</P>

<p>If you set the <I>Checkboxes </I>property to True, a check box appears beside 
each Node object so that the end user can select multiple Node objects.</P>

<p>By default, you need to double-click on Node items to expand or collapse 
them (or click on the plus or minus sign, if present), and you can expand and collapse 
any number of tree branches independently of one another. But if you set the 
<I>SingleSel </I>property to True, the control's behavior is different: You expand and collapse 
items with a single click&#8212;that is, as soon as you select them. Moreover, when you 
expand a Node, the item that was previously expanded is automatically collapsed.</P>

<p>The <I>Scroll</I> property determines whether the TreeView control displays a 
vertical or horizontal scroll bar if necessary. The default value is True, but you can set 
it to False to disable this behavior (even though, honestly, I can't find a reason 
why you would want to do that).</P>

<p>Finally the <I>HotTracking </I>property lets you create a Web-like user interface. If 
you set this property to True, the cursor changes into a hand when the mouse passes 
over the Node object and the TreeView control underlines the Node's 
<I>Text </I>property.</P>

<A NAME="421"><h2>Run-Time Operations</h2></A>

<p>To fully exploit the potential of the TreeView control, you must learn to deal 
with the Nodes collections and the many properties and methods of Node objects.</P>

<A NAME="422"><h3>Adding Node objects</h3></A>

<p>One of the shortcomings of the TreeView control is that you can't add items at 
design time as you can with ListBox and ComboBox controls. You can add Node objects 
only at run time using the <I>Add</I> method of the Nodes collection.The 
<I>Add </I>method's syntax is the following:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Relative],[Relationship],[Key],[Text],[Image],[SelectedImage]) As Node
</pre>
</td></tr>
</table>
</p>


<p><I>Relative</I> and <I>Relationship </I>indicate where the new Node should be inserted. 
<I>Key </I>is its string key in the Nodes collection, 
<I>Text </I>is the label that will appear in the 
control, and <I>Image </I>is the index or the string key in the companion ImageList control 
of the image that will appear beside the Node. <I>SelectedImage 
</I>is the index or key of the image that will be used when the Node is selected. For example, if you're 
creating a TreeView control that mimics Windows Explorer and its directory objects, you 
might write something like this:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim nd As Node
Set nd  = Add(, , ,&quot;C:\System&quot;, &quot;Folder&quot;, &quot;OpenFolder&quot;)
</pre>
</td></tr>
</table>
</p>


<p>To place the new Node in a given position in the tree, you must provide 
the first two arguments. The first argument specifies an existing item in the Nodes 
collection by its numerical index or string key; the second argument states the 
relationship between the Node being added and its relative. Such a relationship can 
be 0-tvwFirst, in which the new Node becomes the first item at the level of its 
relative&#8212;in other words, it becomes the first sibling of the relative Node. Or the 
relationship can be 1-tvwLast (the new Node becomes the last sibling of the relative Node); 
2-tvwNext (default, the new Node is added immediately after the relative Node, at 
the same level in the hierarchy); 3-tvwPrevious (the new Node is inserted 
immediately before the relative Node, at the same level in the hierarchy); or 4-tvwChild (the 
new Node becomes a child of the relative Node and is inserted after all existing child 
nodes).</P>

<p>Here's an example of a routine that fills a TreeView control with the 
structure of an MDB file&#8212;that is, the tables it contains and the fields for each table. The 
routine accepts a reference to the control in its second argument so that you can 
easily reuse it in your applications. The third argument passed to the routine is a 
Boolean value that states whether system tables should be displayed:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ShowDatabaseStructure(MdbFile As String, TV As TreeView, _
    ShowSystemTables As Boolean)
    Dim db As DAO.Database, td As DAO.TableDef, fld As DAO.Field
    Dim nd As Node, nd2 As Node
    ' Clear the current contents of the TreeView control.
    TV.Nodes.Clear
    ' Open the database.
    Set db = DBEngine.OpenDatabase(MdbFile)
    ' Add the root Node, and then expand it to show the tables.
    Set nd = TV.Nodes.Add(, , &quot;Root&quot;, db.Name, &quot;Database&quot;)
    nd.Expanded = True

    ' Explore all the tables in the database.
    For Each td In db.TableDefs
        ' Discard system tables if user isn't interested in them.
        If (td.Attributes And dbSystemObject) = 0 Or ShowSystemTables Then
            ' Add the table under the Root object.
            Set nd = TV.Nodes.Add(&quot;Root&quot;, tvwChild, , td.Name, &quot;Table&quot;)
            ' Now add all the fields.
            For Each fld In td.Fields
                Set nd2 = TV.Nodes.Add(nd.Index, tvwChild, , _
                    fld.Name, &quot;Field&quot;)
                Next
            End If
    Next
    db.Close
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Note that the routine doesn't include any error handler: if the file doesn't 
exist or is an invalid or corrupted MDB archive, the error is simply returned to the 
caller. It's usual to show a TreeView control with the root object already expanded in 
order to save the end user a mouse click. The routine does this by setting the root 
Node object's <I>Expanded</I> property to True.</P>

<A NAME="423"><h3>Appearance and visibility</h3></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>You can control the appearance of individual Node objects by setting their 
<I>ForeColor</I>, <I>BackColor</I>,<I> </I>and <I>Bold 
</I>properties, the effects of which are shown in Figure 10-6. 
This new feature permits you to visually convey more information about each 
Node. Typically, you set these properties when you add an item to the Nodes collection:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With TV.Nodes.Add(, , , &quot;New Node&quot;)
    .Bold = True
    .ForeColor = vbRed
    .BackColor = vbYellow
End With
</pre>
</td></tr>
</table>
</p>


<p>
<img src="F10ph06.GIF" width=257 height=97 border="0">
<p>
<!--caption--><B>Figure 10-6.</B> <i>Effects of the ForeColor, BackColor, and Bold properties of Node objects, as well as of the Checkboxes property of the TreeView control.</i><!--/caption-->


<p>Each Node object has three images associated with it, and the Node's 
current state determines which image is displayed. The 
<I>Image</I> property sets or returns the index of the default image; the 
<I>SelectedImage</I> property sets or returns the index 
of the image used when the Node is selected; the 
<I>ExpandedImage</I> property sets or returns the index of the image used when the Node is expanded. You can set 
the first two properties in the Nodes collection's 
<I>Add</I> method, but you must explicitly assign the 
<I>ExpandedImage</I> property after you've added the item to the collection.</P>

<p>You can learn whether a particular Node is currently visible by querying 
its <I>Visible </I>property. A Node item can be invisible because it belongs to a tree 
branch that's in a collapsed state or because it has scrolled away from the visible portion 
of the control. This property is read-only, but you can force the visibility state of a 
Node by executing its <I>EnsureVisible </I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Scroll the TreeView, and expand any parent Node if necessary.
If aNode.Visible = False Then aNode.EnsureVisible
</pre>
</td></tr>
</table>
</p>


<p>You can learn how many Nodes are visible in the control by executing 
TreeView's <I>GetVisibleCount </I>method.</P>

<p>You have two ways to determine whether a Node is currently the 
selected Node object in the control&#8212;either by querying its 
<I>Selected</I> property or by testing the TreeView's 
<I>SelectedItem</I> property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Check whether aNode is the Node currently selected (two
' equivalent ways).
' First way:
If aNode.Selected Then MsgBox &quot;Selected&quot;
' Second way:
If TreeView1.SelectedItem Is aNode Then MsgBox &quot;Selected&quot;

' Make aNode the currently selected Node (two equivalent ways).
' First way:
aNode.Selected = True
' Second way:
Set TreeView1.SelectedItem = aNode
</pre>
</td></tr>
</table>
</p>


<A NAME="424"><h3>Showing information about a Node</h3></A>

<p>Users expect the program to do something when they click on a Node object in 
the TreeView control&#8212;for example, to display some information related to that 
object. To learn when a Node is clicked, you have to trap the 
<I>NodeClick</I> event. You can determine which Node has been clicked by looking at the 
<I>Index</I> or <I>Key</I> property of the Node parameter passed to the event procedure. In a typical situation, you store 
information about a Node in an array of String or UDT items:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TreeView1_NodeClick(ByVal Node As MSComctlLib.Node)
    ' info() is an array of strings that hold nodes' descriptions.
    lblData.Caption = info(Node.Index) 
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>NodeClick</I> event differs from the regular 
<I>Click</I> event in that the latter fires whenever the user clicks on the TreeView control, whereas the former is 
activated only when the user clicks on a Node object.</P>
<P>The previous code snippet has a flaw: In general, the 
<I>Index</I> property of a Node object can't be trusted because it can change when other Node objects are 
removed from the Nodes collection. For this reason, you should rely exclusively on the 
<I>Key</I> property, which is guaranteed not to vary after the Node has been added to 
the collection. For example, you can use the 
<I>Key</I> property to search for an item in a 
standard Collection object, where you store information that's related to the Node. 
Here's a better technique: You store the data in the 
<I>Tag</I> property of the Node object so that you don't have to worry about removing items from the control's Node 
collection. The BrowMdb.vbp project on the companion CD includes a revised version of 
the <I>ShowDatabaseStructure</I> routine to show properties and attributes of all the Field 
and TableDef objects displayed in the TreeView control, as you can see in Figure 10-7.</P>

<p>
<A HREF="javascript:fullSize('F10ph07x.htm')"> <img src="F10ph07.JPG" width=404 height=260 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-7.</B> <i>A simple browser for Microsoft Jet databases.</i><!--/caption-->
</p>

<A NAME="425"><h3>Editing Node text</h3></A>

<p>By default, the user can click on a Node object to enter Edit mode and 
indirectly change the Node object's <I>Text</I> property. If you don't like this behavior, you can 
set the <I>LabelEdit </I>property to 1-tvwManual. In this case, you can enter Edit mode 
only by programmatically executing a <I>StartLabelEdit 
</I>method.</P>

<p>Regardless of the value of the <I>LabelEdit</I> property, you can trap the instant 
when the user begins editing the current value of the 
<I>Text</I> property by writing code in the <I>BeforeLabelEdit 
</I>event procedure. When this event fires, you can discover which 
Node is currently selected by using the TreeView's 
<I>SelectedItem</I> property, and you can cancel the operation by setting the event's 
<I>Cancel</I> parameter to True:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TreeView1_BeforeLabelEdit(Cancel As Integer)
    ' Prevent the root Node's Text property from editing.
    If TreeView1.SelectedItem.Key = &quot;Root&quot; Then Cancel = True
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Similarly, you can find out when the user has completed the editing and 
reject, if you want to, the new value of the 
<I>Text</I> property by trapping the 
<I>AfterLabelEdit</I> event. Typically, you use this event to check whether the new value follows any 
syntactical rule enforced by the particular object. For example, you can reject empty 
strings by writing the following code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TreeView1_AfterLabelEdit(Cancel As Integer, _
    NewString As String)
    If Len(NewString) = 0 Then Cancel = True
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="426"><h3>Using check boxes</h3></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>To display a check box beside each Node in the TreeView control, you simply 
need to set the control's <I>Checkboxes</I> property to True, either at design time or run 
time. You can then query or modify the state of each Node using its 
<I>Checked</I> property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Count how many Node objects are checked, and then reset all check boxes.
Dim i As Long, SelCount As Long
For i = 1 To TreeView1.Nodes.Count
    If TreeView1.Nodes(i).Checked Then
        SelCount = SelCount + 1
        TreeView1.Nodes(i).Checked = False
    End If
Next
</pre>
</td></tr>
</table>
</p>


<p>You can enforce tighter control over what happens when a Node is 
checked by writing code in the control's 
<I>NodeChecked</I> event. This event doesn't fire if 
you modify a Node's <I>Checked</I> property using code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim SelCount As Long     ' The number of selected items

Private Sub TreeView1_NodeCheck(ByVal Node As MSComctlLib.Node)
    ' Display the number of selected Nodes.
    If Node.Checked Then
        SelCount = SelCount + 1
    Else
        SelCount = SelCount _ 1
    End If
    lblStatus = &quot;Selected Items = &quot; &amp; SelCount
End Sub
</pre>
</td></tr>
</table>
</p>


<p><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>If you want to prevent the user from modifying the 
<I>Checked</I> state of a given Node object, you can't simply reset its 
<I>Checked</I> property within the 
<I>NodeCheck</I> event because all changes to this property are lost when the event procedure 
is exited. You can solve this problem by adding a Timer control on the form 
and writing this code:
<P><TABLE><TR><TD><PRE>
Dim CheckedNode As Node            ' A form-level variable

Private Sub TreeView1_NodeCheck(ByVal Node As MSComctlLib.Node)

    ' Prevent the user from checking the first Node.
    If Node.Index = 1 Then
        ' Remember which Node has been clicked on.
        Set CheckedNode = Node
        ' Let the Timer routine do the job.
        Timer1.Enabled = True
    End If
End Sub

Private Sub Timer1_Timer()
    ' Reset the Checked property, and then go to sleep.
    CheckedNode.Checked = False
    Timer1.Enabled = False
End Sub
</PRE></TD></TR></TABLE></P>

<P>This technique is more effective if the Timer's 
<I>Interval</I> property is set to a small value, such as 10 milliseconds.</P>
</BLOCKQUOTE></DIV></P>

<A NAME="427"><h2>Advanced Techniques</h2></A>

<p>The TreeView control is very flexible, but sometimes you have to resort to 
more advanced and less intuitive techniques to leverage its power.</P>

<A NAME="428"><h3>Loading Nodes on demand</h3></A>

<p>Theoretically, you can load thousands of items into a TreeView control, which is 
more than an average user is willing to examine. In practice, loading more than a 
few hundred items makes a program unacceptably slow. Take, for example, the task 
of loading a directory structure into a TreeView control the way Windows Explorer 
does it: This simple job requires a lot of time to scan the system's hard disk, and you 
simply can't have your user wait for this long. In these situations, you might need to 
resort to a <I>load on demand </I>approach.</P>

<p>Loading items on demand means that you don't add Node objects until you 
have to display them, one instant before their parent Node is expanded. You can 
determine when a Node is expanded by trapping the TreeView control's 
<I>Expand </I>event. (You can also find out when a Node object is collapsed by trapping the 
control's <I>Collapse </I>event.) The tricky detail is how to let the user know that a Node has one 
or more child objects without actually adding them. In other words, we need to 
show a plus sign beside each Node item with children.</P>

<p>It is easy to demonstrate that the TreeView common control is able to 
display a plus sign beside a Node without child Nodes: Just run Windows Explorer and 
look at the plus sign beside the icon for the A: floppy drive; it's there even if 
no subdirectories are on the diskette (and even if no diskette is in the A: drive). 
Unfortunately, the ability to display a plus sign without adding child Nodes hasn't 
been exposed in the OCX that comes with Visual Basic and requires some API 
programming. The technique I will show you, however, does the trick without any API call.</P>

<p>To show a plus sign beside a Node, all you have to do is add a child Node, 
<I>any </I>child Node. I'll call this a <I>dummy child 
Node</I>. You need to mark such a dummy Node item in an unambiguous way&#8212;for example, by storing a special value in its 
<I>Text</I> or <I>Tag</I> property. When a Node is eventually expanded, the program checks whether 
the Node has a dummy child item. If so, the code removes the dummy child and 
then adds all the actual child Nodes. As you see, the technique is simple, even if its 
implementation includes some nontrivial code.</P>

<p>Figure 10-8 shows the demonstration program at run time. Its complete 
source code is on the companion CD, so I'll just illustrate its key routines. The form 
contains the <I>tvwDir </I>TreeView control and uses the FileSystemObject hierarchy to 
retrieve the directory structure.</P>

<p>
<img src="F10ph08.GIF" width=345 height=352 border="0">
<p>
<!--caption--><B>Figure 10-8.</B> <i>A directory browser program that loads TreeView Nodes on demand.</i><!--/caption-->


<p>The following <I>DirRefresh</I> procedure is invoked from within the 
<I>Form_Load </I>event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DirRefresh()
    Dim dr As Scripting.Drive
    Dim rootNode As node, nd As Node
    On Error Resume Next
    
    ' Add the &quot;My Computer&quot; root Node (expanded).
    Set rootNode = tvwDir.Nodes.Add(, , &quot;\\MyComputer&quot;, _
        &quot;My Computer&quot;, 1)
    rootNode.Expanded = True
    ' Add all the drives; display a plus sign beside them.
    For Each dr In FSO.Drives
        ' Error handling is needed to account for not-ready drives.
        Err.Clear
        Set nd = tvwDir.Nodes.Add(rootNode.Key, tvwChild, dr.Path &amp; &quot;\&quot;, _
            dr.Path &amp; &quot; &quot; &amp; dr.VolumeName, 2)
        If Err = 0 Then AddDummyChild nd
    Next
End Sub

Sub AddDummyChild(nd As node)
    ' Add a dummy child Node if necessary.
    If nd.Children = 0 Then
        ' Dummy nodes' Text property is &quot;***&quot;.
        tvwDir.Nodes.Add nd.index, tvwChild, , &quot;***&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The previous routine ensures that the form is displayed with the 
&quot;MyComputer&quot; root Node and all the drives below it. When the user expands a Node, the 
following event fires:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub tvwDir_Expand(ByVal node As ComctlLib.node)
    ' A Node is being expanded.
    Dim nd As Node
    ' Exit if the Node had already been expanded or has no children.
    If node.Children = 0 Or node.Children &gt; 1 Then Exit Sub
    ' Also exit if it doesn't have a dummy child Node.
    If node.Child.text &lt;&gt; &quot;***&quot; Then Exit Sub
    ' Remove the dummy child item.
    tvwDir.Nodes.Remove node.Child.index
    ' Add all the subdirs of this Node object.
    AddSubdirs node
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>tvwDir_Expand </I>procedure uses the <I>Children 
</I>property of the Node object, which returns the number of its child Nodes, and the 
<I>Child </I>property, which returns a reference to its first child Node. The 
<I>AddSubdirs</I> procedure adds all the 
subdirectories below a given Node. Because each Node's 
<I>Key</I> property always holds the path corresponding to that Node, it's simple to retrieve the corresponding 
Scripting.Folder object and then iterate on its SubFolders collection:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub AddSubdirs(ByVal node As ComctlLib.node)
    ' Add all the subdirectories under a Node.
    Dim fld As Scripting.Folder
    Dim nd As Node
    ' The path in the Node is held in its key property, so it's easy
    ' to cycle on all its subdirectories.
    For Each fld In FSO.GetFolder(node.Key).SubFolders
        Set nd = tvwDir.Nodes.Add(node, tvwChild, fld.Path, fld.Name, 3)
        nd.ExpandedImage = 4
        ' If this directory has subfolders, add a plus sign.
        If fld.SubFolders.Count Then AddDummyChild nd
    Next
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Even if this code can be used only for loading and displaying a directory 
tree, you can easily modify it to work with any other type of data that you want to 
load on demand into a TreeView control.</P>
<P>A great way to use this technique is for browsing databases in a 
hierarchical format. Take the ubiquitous Biblio.Mdb as an example: You can load all the 
publishers' names in the TreeView control and show their related titles only when the user 
expands a Node. This is much faster than preloading all the data in the control and 
offers a clear view of how records are related. I've provided a sample program that 
uses this technique on the companion CD.</P>

<A NAME="429"><h3>Searching the Nodes collection</h3></A>

<p>When you need to extract information from a TreeView control, you have to 
search the Nodes collection. In most cases, however, you can't simply scan it from the first 
to the last item because this order would reflect the sequence in which Node 
objects were added to the collection and doesn't take into account the relationships among them.</P>

<p>To let you visit all the items in a TreeView control in a hierarchical order, 
each Node object exposes a number of properties that return references to its 
relatives. We have already seen the <I>Child </I>property, which returns a reference to the first 
child, and the <I>Children </I>property, which returns the number of child Nodes. The 
<I>Next </I>property returns a reference to the next Node at the same level (the next sibling 
Node), and the <I>Previous </I>property returns a reference to the previous Node at the same 
level (the previous sibling Node). The <I>FirstSibling 
</I>and the <I>LastSibling </I>properties return a reference to the first and last Node, respectively, that are at the same level as the 
Node being examined. Finally the <I>Parent</I> property returns a reference to the Node 
object one level above, and the <I>Root</I> property returns a reference to the root of the 
hierarchy tree that the Node being queried belongs to. (Remember, there can be 
multiple root Nodes.) You can use these properties to test where a given Node appears in 
the hierarchy. Here are a few examples:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Check whether a Node has no children (two possible approaches).
If Node.Children = 0 Then MsgBox &quot;Has no children&quot;
If Node.Child Is Nothing Then MsgBox &quot;Has no children&quot;
' Check whether a Node is the first child of its parent (two approaches).
If Node.Previous Is Nothing Then MsgBox &quot;First Child&quot; 
If Node.FirstSibling Is Node Then MsgBox &quot;First Child&quot;
' Check whether a Node is the last child of its parent (two approaches).
If Node.Next Is Nothing Then MsgBox &quot;Last Child&quot; 
If Node.LastSibling Is Node Then MsgBox &quot;Last Child&quot;
' Check whether a Node is the root of its own tree (two approaches).
If Node.Parent Is Nothing Then MsgBox &quot;Root Node&quot; 
If Node.Root Is Node Then MsgBox &quot;Root Node&quot; 
' Get a reference to the first root Node in the control.
Set RootNode = TreeView1.Nodes(1).Root.FirstSibling
</pre>
</td></tr>
</table>
</p>


<p>Not surprisingly, the majority of routines you write to search the Nodes 
collection are recursive. Typically, you start with a Node object, get a reference to its 
first child Node, and then recursively call the routine for all its children. The 
following routine is an example of this technique. Its purpose is to build a text string that 
represents the contents of a TreeView control or of one of its subtrees. Each line in 
the string represents a Node object, indented with 0 or more tab characters that 
reflect the corresponding nesting level. The routine can return a string for all the Nodes 
or for just the items that are actually visible (that is, those whose parents are expanded):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Convert the contents of a TreeView control into a string.
' If a Node is provided, it only searches a subtree.
' If last argument is False or omitted, all items are included.
Function TreeViewToString(TV As TreeView, Optional StartNode As Node, _
    Optional OnlyVisible As Boolean) As String
    Dim nd As Node, childND As Node
    Dim res As String, i As Long
    Static Level As Integer
    
    ' Exit if there are no Nodes to search.
    If TV.Nodes.Count = 0 Then Exit Function
    ' If StartNode is omitted, start from the first root Node.
    If StartNode Is Nothing Then
        Set nd = TV.Nodes(1).Root.FirstSibling
    Else
        Set nd = StartNode
    End If
    
    ' Output the starting Node.
    res = String$(Level, vbTab) &amp; nd.Text &amp; vbCrLf
    ' Then call this routine recursively to output all child Nodes.
    ' If OnlyVisible = True, do this only if this Node is expanded.
    If nd.Children And (nd.Expanded Or OnlyVisible = False) Then
        Level = Level + 1
        Set childND = nd.Child
        For i = 1 To nd.Children
            res = res &amp; TreeViewToString(TV, childND, OnlyVisible)
            Set childND = childND.Next
        Next
        Level = Level - 1
    End If
    
    ' If searching the whole tree, we must account for multiple roots.
    If StartNode Is Nothing Then
        Set nd = nd.Next
        Do Until nd Is Nothing
            res = res &amp; TreeViewToString(TV, nd, OnlyVisible)
            Set nd = nd.Next
        Loop
    End If
    TreeViewToString = res
End Function
</pre>
</td></tr>
</table>
</p>


<p>Figure 10-9 shows a demonstration program that uses this routine and the 
resulting string loaded into Notepad. You can embellish the 
<I>TreeViewToString</I> procedure in many ways. For instance, you can create a routine that prints the contents 
of a TreeView control (including all connecting lines, bitmaps, and so on). Using a 
similar approach, you can build a routine that saves and restores the current state of 
a TreeView control, including the <I>Expanded</I> attribute of all Node objects.</P>

<p>
<A HREF="javascript:fullSize('F10ph09x.htm')"> <img src="F10ph09.JPG" width=404 height=217 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-9.</B> <i>A demonstration program that uses the </I>TreeViewToString<I> routine.</i><!--/caption-->
</p>

<A NAME="430"><h3>Implementing drag-and-drop</h3></A>

<p>Another common operation that you might want to perform on TreeView 
controls is drag-and-drop, typically to copy or move a portion of a hierarchy. 
Implementing a drag-and-drop routine isn't simple, though. First you have to understand which 
Node the drag operation starts and ends on, and then you have to physically copy or 
move a portion of the Nodes collection. You must also prevent incorrect operations, 
as Windows Explorer does when you try to drag a directory onto one of its subfolders.</P>

<p>The TreeView control does offer a few properties and methods that are 
particularly useful for implementing a drag-and-drop routine. You can use the 
<I>HitTest </I>method to determine which Node object is located at a given pair of coordinates. 
(Typically, you use this method in a 
<I>MouseDown</I> event to pinpoint the source Node of the 
drag operation.) During the drag operation, you use the 
<I>DropHighlight</I> property to highlight the Node that's under the mouse cursor so that you can provide the user 
with a clue to the potential target Node of the operation.</P>

<p>Figure 10-10 shows a demonstration program, provided on the companion 
CD, that lets you experiment with drag-and-drop between TreeView controls or 
within the same TreeView control. The two controls on the form belong to a control 
array, so the same code works whichever is the source or the target control. </P>

<p>
<A HREF="javascript:fullSize('F10ph10x.htm')"> <img src="F10ph10.JPG" width=404 height=311 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-10.</B> <i>You can use drag-and-drop to move or copy subtrees between controls or even within the same TreeView control.</i><!--/caption-->
</p>

<p>As usual, the drag operation is started in the 
<I>MouseDown </I>event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The source control
Dim SourceTreeView As TreeView
' The source Node object
Dim SourceNode As Node
' The state of Shift key during the drag-and-drop operation
Dim ShiftState As Integer

Private Sub TreeView1_MouseDown(Index As Integer, _
    Button As Integer, Shift As Integer, x As Single, y As Single)
    ' Check whether we are starting a drag operation.
    If Button &lt;&gt; 2 Then Exit Sub
    ' Set the Node being dragged, or exit if there is none.
    Set SourceNode = TreeView1(Index).HitTest(x, y)
    If SourceNode Is Nothing Then Exit Sub
    ' Save values for later.
    Set SourceTreeView = TreeView1(Index)
    ShiftState = Shift
    ' Start the drag operation.
    TreeView1(Index).OLEDrag
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>OLEStartDrag </I>event procedure is where you decide whether you're 
moving or copying items, depending on the state of the Ctrl key:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TreeView1_OLEStartDrag(Index As Integer, _
    Data As MSComctlLib.DataObject, AllowedEffects As Long)
    ' Pass the Key property of the Node being dragged.
    ' (This value is not used; we can actually pass anything.)
    Data.SetData SourceNode.Key
    If ShiftState And vbCtrlMask Then
        AllowedEffects = vbDropEffectCopy
    Else
        AllowedEffects = vbDropEffectMove
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>In the <I>OLEDragOver </I>event procedure, you offer feedback to the user by 
highlighting the Node under the mouse in the target control. (The source and the 
target controls might coincide.)</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TreeView1_OLEDragOver(Index As Integer, _
    Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, _
    Shift As Integer, x As Single, y As Single, State As Integer)
    ' Highlight the Node the mouse is over.
    Set TreeView1(Index).DropHighlight = TreeView1(Index).HitTest(x, y)
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Finally you have to implement the <I>OLEDragDrop 
</I>routine, which is the most complex of the group. First you must figure out whether the mouse is over a 
Node in the target control. If so, the source Node becomes a child of the target Node; 
otherwise, the source Node becomes a root Node in the target control. If the source 
and target controls coincide, you must also ensure that the target Node isn't a 
child or grandchild of the source Node, which would trap you in an endless loop.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TreeView1_OLEDragDrop(Index As Integer, _
    Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, _
    Shift As Integer, x As Single, y As Single)
    Dim dest As Node, nd As Node
    ' Get the target Node.
    Set dest = TreeView1(Index).DropHighlight
    
    If dest Is Nothing Then
        ' Add the Node as the root of the target TreeView.
        Set nd = TreeView1(Index).Nodes.Add(, , , SourceNode.Text, _
            SourceNode.Image)
    Else
        ' Check that the destination isn't a descendant of the source
        ' Node.
        If SourceTreeView Is TreeView1(Index) Then
            Set nd = dest
            Do
                If nd Is SourceNode Then
                    MsgBox &quot;Unable to drag Nodes here&quot;, vbExclamation
                    Exit Sub
                End If
                Set nd = nd.Parent
            Loop Until nd Is Nothing
        End If
        Set nd = TreeView1(Index).Nodes.Add(dest.Index, tvwChild, , _ 
            SourceNode.Text, SourceNode.Image)
    End If
    nd.ExpandedImage = 2: nd.Expanded = True

    ' Copy the subtree from source to target control.
    CopySubTree SourceTreeView, SourceNode, TreeView1(Index), nd
    ' If this is a move operation, delete the source subtree.
    If Effect = vbDropEffectMove Then
        SourceTreeView.Nodes.Remove SourceNode.Index
    End If
    Set TreeView1(Index).DropHighlight = Nothing
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>CopySubTree</I> recursive procedure performs the actual Copy command. 
(A move operation consists of a copy operation followed by a delete operation.) 
It accepts a reference to source and target TreeView controls, so you can easily 
recycle it in other applications:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub CopySubTree(SourceTV As TreeView, sourceND As Node, _
    DestTV As TreeView, destND As Node)
    ' Copy or move all children of a Node to another Node.
    Dim i As Long, so As Node, de As Node
    If sourceND.Children = 0 Then Exit Sub
    
    Set so = sourceND.Child
    For i = 1 To sourceND.Children
        ' Add a Node in the destination TreeView control.
        Set de = DestTV.Nodes.Add(destND, tvwChild, , so.Text, _
            so.Image, so.SelectedImage)
        de.ExpandedImage = so.ExpandedImage
        ' Now add all the children of this Node in a recursive manner.
        CopySubTree SourceTV, so, DestTV, de
        ' Get a reference to the next sibling.
        Set so = so.Next
    Next
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You don't need a recursive procedure to delete a subtree because if you 
delete a Node object, all its child nodes are automatically deleted too.</P>


<a name="A60"></a><h3>6.2.3 The ListView Control</h3>

<A HREF="#A59">[Previous]</A> <A HREF="#A61">[Next]</A><P>

<A NAME="431"><h1>The ListView Control</h1></A>

<p>Together with the TreeView control, the ListView control has been made popular 
by Windows Explorer. Now many Windows applications use this pair of controls 
side by side, and they're therefore called Windows Explorer-like applications. In 
these applications, the end user selects a Node in the TreeView control on the left and 
sees some information related to it in the rightmost ListView control.</P>
<P>The ListView control supports four basic view modes: Icon, SmallIcon, 
List, and Report. To see how each mode is rendered, try the corresponding items in 
the Windows Explorer View menu. (The Report mode corresponds to the Details 
menu command.) To give you an idea of the flexibility of this control, you should 
know that the Windows desktop is nothing but a large ListView control in Icon mode 
with a transparent background. When used in Report mode, the ListView control 
resembles a grid control and lets you display well-organized information about each item.</P>
<P>The Visual Basic 6 version of the ListView control has many new features. It 
can display icons in column headers and grid cells; it supports hot tracking, full 
row selection, and reordering of columns; and its items can have independent 
<I>Bold</I> and <I>Color</I> attributes. The new ListView control can also show a background bitmap, 
grid lines, and check boxes beside each item.</P>
<P>The ListView control exposes two distinct collections: The ListItems 
collection comprises individual ListItem objects, each one corresponding to an item in 
the control, whereas the ColumnHeaders collection includes ColumnHeader objects 
that affect the appearance of the individual headers visible in Report mode. A third 
collection, ListSubItems, contains data for all the cells displayed in Report mode.</P>

<p>
<A HREF="javascript:fullSize('G10ph01x.htm')"> <img src="G10ph01.JPG" width=404 height=275 border=0 ALT = "Click to view at full size."> </A>
</P>

<A NAME="432"><h2>Setting Design-Time Properties</h2></A>

<p>While you can use the regular Properties window to set most properties of a 
ListView control, it's surely preferable to use a ListView control's custom Properties dialog 
box, shown in Figure 10-11.</P>

<p>
<img src="F10ph11x.gif" width=419 height=378 border=0>
</p><p>
<!--caption--><B>Figure 10-11.</B> <i>The General tab of the Properties dialog box of a ListView control.</i><!--/caption-->
</p>

<A NAME="433"><h3>General properties</h3></A>

<p>I've already referred to the <I>View </I>property, which can be one of the following 
values: 0-lvwIcon, 1-lvwSmallIcon, 2-lvwList, or 3-lvwReport. You can change this 
property at run time as well as let the user change it (typically by offering four 
options in the View menu of your application). The 
<I>Arrange </I>property lets you decide whether icons are automatically aligned to the left of the control (1-lvwAutoLeft) 
or to the top of the control (2-lvwAutoTop), or whether they shouldn't be aligned at 
all (0-lvwNone, the default behavior). This property takes effect only when the 
control is in Icon or SmallIcon display mode.</P>

<p>The <I>LabelEdit </I>property determines whether the user can edit the text 
associated with an item in the control. If this property is set to 0-lvwAutomatic, the 
edit operation can be initiated only by code using a 
<I>StartLabelEdit</I> method. The <I>LabelWrap 
</I>Boolean property specifies whether longer labels wrap on multiple lines of text 
when in Icon mode. The <I>HideColumnHeaders </I>Boolean property determines whether 
column headers are visible when in Report mode. (The default value is False, 
which makes the columns visible.) If you assign the 
<I>MultiSelect </I>property the True value, the ListView control behaves much like a ListBox control whose 
<I>MultiSelect</I> property has been set to 2-Extended.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>A few properties are new to Visual Basic 6. If you set 
<I>AllowColumnReorder </I>to True, users can reorder columns by dragging their headers when the control is 
in Report mode. You can change the appearance of the ListView control by setting 
the <I>GridLines </I>property to True (thus adding horizontal and vertical lines). The third 
new property designed to change the appearance of the ListView control, the 
<I>FlatScrollBar</I> property, seems to be buggy: If you set it to True, the scroll bars don't show. 
The ListView control shares a few new properties with the TreeView control. I've 
already described the <I>Checkboxes </I>property (which lets you display a check box beside 
each item) and the <I>FullRowSelect </I>property (for highlighting entire rows instead of a 
row's first item only). The <I>HotTracking</I> Boolean property, if True, changes the 
appearance of an item when the user moves the mouse cursor over it. The 
<I>HoverSelection </I>Boolean property, if True, lets you select an item by simply moving the mouse cursor over 
it. See Figure 10-12 for an example of what you can get with these new properties.</P>

<p>
<A HREF="javascript:fullSize('F10ph12x.htm')"> <img src="F10ph12.JPG" width=404 height=210 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-12.</B> <i>A gallery of new features of ListView controls: Check boxes, grid lines, and Bold and ForeColor properties for individual items. The alternate row effect is achieved by means of a tiled background picture.</i><!--/caption-->
</p>

<p>You can associate up to three ImageList subsidiaries with a ListView control: 
The first ImageList is used when the control is in Icon mode, the second is used 
when the control is in any other display mode, and the third is used for icons in 
column headers. You can set these associated ImageList controls at design time in the 
Image Lists tab of the Properties dialog box, or you can set them at run time by 
assigning an ImageList control to the ListView's 
<I>Icons</I>, <I>SmallIcons</I>,<I> </I>and 
<I>ColumnHeaderIcons </I>properties, respectively.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The <I>ColumnHeaders </I>property is new to Visual Basic 6 because previous 
versions of the ListView control didn't support icons in column headers:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can use the same ImageList control for different properties.
Set ListView1.Icons = ImageList1
Set ListView1.SmallIcons = ImageList2
Set ListView1.ColumnHeaderIcons = ImageList2
</pre>
</td></tr>
</table>
</p>


<p>You can automatically sort the items in the ListView control by setting a 
few properties in the Sorting tab of the Properties dialog box. Set the 
<I>Sorted </I>property to True if you want to sort items. 
<I>SortKey </I>is the index of the column that will be 
used for sorting (0 for the first column), and <I>SortOrder 
</I>is the sorting order (0-lvwAscending or 1-lvwDescending). You can also set these properties at run time.</P>

<A NAME="434"><h3>Column headers</h3></A>

<p>You can create one or more ColumnHeader objects at design time by using 
the Column Header tab of the Properties dialog box. You just have to click on the 
Insert Column button and then type the values of the 
<I>Text </I>property (which will be displayed in the header), the 
<I>Alignment </I>property (Left, Right, or Center, although the first 
column header can only be left-aligned), and the 
<I>Width </I>in twips. You can also specify a value for the 
<I>Key </I>and <I>Tag </I>properties and set the index of the icon to be used 
for this header. (It's an index referred to by the 
<I>ColumnHeaderIcons</I> property in the ImageList control, or it's 0 if this column header doesn't have any icons.)</P>

<A NAME="435"><h3>Background image</h3></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The ListView control that comes with Visual Basic 6 supports a background 
bitmap. You can load an image into the control at design time by using the Picture tab of 
the Properties dialog box and then selecting the 
<I>Picture </I>property in the leftmost list box. You can load an image in any format supported by the PictureBox control. 
Two additional properties affect how a background image is displayed in the control, 
but you can set them only in the regular Properties window. The 
<I>PictureAlignment </I>property lets you align the image in one of the four corners of the control, 
center it, or tile it to spread over the entire control's internal area. The 
<I>TextBackground </I>property determines whether the background of ListView's items is 
transparent (0lvwTransparent, the default value) or not (1-lvwOpaque); in the latter case, 
the background image will be visible only in the area not occupied by ListItem objects.</P>
<P>The background image offers a great method for displaying rows with 
alternate background colors, as shown in Figure 10-12. All you have to do is create a 
bitmap as tall as two rows and then set <I>PictureAlignment 
</I>= 5-lvwTile and <I>TextBackground </I>= 0-lvwTransparent.</P>

<A NAME="436"><h2>Run-Time Operations</h2></A>

<p>While you can define the appearance of a ListView control at design time, you 
can fill it with data only through code. In this section, I'll show how to add and 
manipulate data for this control.</P>

<A NAME="437"><h3>Adding ListItem objects</h3></A>

<p>You add new items to the ListView controls with the ListItems collection's 
<I>Add</I> method, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Text], [Icon], [SmallIcon]) As ListItem
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>is the position at which you place the new item. (If you omit 
<I>Index</I>, the item is added to the end of the collection.) 
<I>Key</I> is the inserted item's optional key in the ListItems collection, 
<I>Text</I> is the string displayed in the control, 
<I>Icon</I> is an index or a key in the ImageList control pointed to by the 
<I>Icons</I> property, and <I>SmallIcon</I> is an index or a key in the ImageList control pointed to by the 
<I>SmallIcons</I> property. All these arguments are optional.</P>

<p>The <I>Add</I> method returns a reference to the ListItem object being created, 
which you can use to set those properties whose values can't be passed to the 
<I>Add </I>method itself, as in the following example:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a new item with a &quot;ghosted&quot; appearance.
Dim li As ListItem
Set li = ListView1.ListItems.Add(, , &quot;First item&quot;, 1)
li.Ghosted = True
</pre>
</td></tr>
</table>
</p>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>ListItem objects support a number of new properties. The 
<I>Bold </I>and <I>ForeColor </I>properties affect the boldface and color attributes of the objects. The 
<I>ToolTipText </I>property allows you to define a different ToolTip for each item, and the 
<I>Checked </I>property sets or returns the state of the check box beside the item (if the 
ListView's <I>Checkboxes</I> property is True). When you have to assign multiple properties, you 
can use a <I>With </I>clause with the <I>Add </I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With ListView1.ListItems.Add(, , &quot;John Ross&quot;, 1)
    .Bold = True
    .ForeColor = vbRed
    .ToolTipText = &quot;Manager of the Sales Dept.&quot;
End With
</pre>
</td></tr>
</table>
</p>


<p>When working with ListView controls whose <I>MultiSelect 
</I>property is True, the user can select multiple items by clicking on them while pressing the Ctrl or the 
Shift key. You can modify the selection state of a ListItem object via code by assigning 
the appropriate value to the <I>Selected </I>property. With such ListView controls, you must 
also assign the <I>SelectedItem</I> property to make a ListItem the current item:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Make the first ListItem object the current one.
Set ListView1.SelectedItem = ListView1.ListItems(1)
' Select it.
ListView1.ListItems(1).Selected = True
</pre>
</td></tr>
</table>
</p>


<A NAME="438"><h3>Adding ColumnHeaders objects</h3></A>

<p>Often you don't know at design time what columns should be displayed in a 
ListView control. For example, you might be showing the result of a user-defined query, 
in which case you don't know the number and the names of the fields involved. In 
such circumstances, you must create ColumnHeader objects at run time with the 
<I>Add</I> method of the ColumnHeaders collection, which has this syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Text], [Width], [Alignment], [Icon]) _
    As ColumnHeader
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>is the position in the collection, 
<I>Key</I> is an optional key, <I>Text</I> is the 
string displayed in the header, and <I>Width</I> is the column's width in twips. 
<I>Alignment</I> is one of the following constants: 0-lvwColumnLeft, 1-lvwColumnRight, or 
2-lvwColumnCenter. <I>Icon </I>is an index or a key in the ListImage control referenced by the 
<I>ColumnHeaderIcons</I> property. With the exception of the 
<I>Tag</I> property, these are the only properties 
that can be assigned when a ColumnHeader object is created, so you can usually 
discard the return value of the <I>Add </I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Clear any existing column header.
ListView1.ColumnHeaders.Clear
' The alignment for the first column header must be lvwColumnLeft.
ListView1.ColumnHeaders.Add , , &quot;Last Name&quot;, 2000, lvwColumnLeft
ListView1.ColumnHeaders.Add , , &quot;First Name&quot;, 2000, lvwColumnLeft
ListView1.ColumnHeaders.Add , , &quot;Salary&quot;, 1500, lvwColumnRight
</pre>
</td></tr>
</table>
</p>


<A NAME="439"><h3>Adding ListSubItems</h3></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>Each ListItem object supports a ListSubItems collection, which lets you create 
values displayed in the same row as the main ListItem object when the control is in 
Report mode. This collection replaces the 
<I>SubItems</I> array that was present in previous 
versions of the control. (The array is still supported for backward compatibility.) 
You can create new ListSubItem objects using the 
<I>Add</I> method of the ListSubItems collection:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Text], [ReportIcon], [ToolTipText]) _
    As ListSubItem
</pre>
</td></tr>
</table>
</p>


<p><I>Index</I> is the position in the collection of the new item, 
<I>Key</I> is its optional key, <I>Text</I> is the string that will be displayed in the grid cell, 
<I>ReportIcon</I> is the index or the key of an icon in the ImageList control referenced by the 
<I>SmallIcons</I> property, and <I>ToolTipText</I> is the text of a ToolTip that appears when the user keeps the 
mouse hovering over this item. You can also assign individual 
<I>Bold </I>and <I>ForeColor </I>attributes to each ListSubItem:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This ListItem goes under ColumnHeader(1).
With ListView1.ListItems.Add(, , &quot;Ross&quot;, 1)
    .Bold = True
    ' This ListSubItem goes under ColumnHeader(2).
    With .ListSubItems.Add(, , &quot;John&quot;)
        .Bold = True
    End With
    ' This ListSubItem goes under ColumnHeader(3).
    With .ListSubItems.Add(, , &quot;80,000&quot;)
        .Bold = True
        .ForeColor = vbRed
    End With
End With
</pre>
</td></tr>
</table>
</p>


<p>ListSubItem objects are actually displayed only if the ListView control is in 
Report mode and only if there are enough ColumnHeader objects. For example, if 
the ColumnHeaders collection includes only three elements, the ListView control 
will display only up to three items in each row. Because the leftmost ColumnHeader 
object is located above ListItem elements, only the first two elements in the 
ListSubItems collection will be visible.</P>
<P>ListSubItem objects also support the <I>Tag </I>property, which you can use to 
store additional information associated with the items.</P>

<A NAME="440"><h3>Loading data from databases</h3></A>

<p>The ListView control can't be automatically bound to a database through 
Data, RemoteData, or an ADO Data control. In other words, if you want to load 
database data into this control you're on your own. The task of filling a ListView control 
with data read from a recordset isn't conceptually difficult, but you have to account for 
a few details. First you must retrieve the list of fields contained in the recordset 
and create a corresponding number of ColumnHeader objects of a suitable width. 
You also have to discard fields that can't be displayed in ListView controls (for 
example, BLOB fields), and you must determine the best alignment for each field (to the 
right for numbers and dates, to the left for all others). A routine that does all this, 
which you can easily reuse in your applications, is shown below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub LoadListViewFromRecordset(LV As ListView, rs As ADODB.Recordset, _
    Optional MaxRecords As Long)
    Dim fld As ADODB.Field, alignment As Integer
    Dim recCount As Long, i As Long, fldName As String
    Dim li As ListItem
    
    ' Clear the contents of the ListView control.
    LV.ListItems.Clear
    LV.ColumnHeaders.Clear
    ' Create the ColumnHeader collection.
    For Each fld In rs.Fields
        ' Filter out undesired field types.
        Select Case fld.Type
            Case adBoolean, adCurrency, adDate, adDecimal, adDouble 
                alignment = lvwColumnRight
            Case adInteger, adNumeric, adSingle, adSmallInt, adVarNumeric
                alignment = lvwColumnRight
            Case adBSTR, adChar, adVarChar, adVariant
                alignment = lvwColumnLeft
            Case Else
                alignment = -1      ' This means &quot;Unsupported field type&quot;. 
        End Select
        ' If field type is OK, create a column with the correct alignment.
        If alignment &lt;&gt; -1 Then
            ' The first column must be left-aligned.
            If LV.ColumnHeaders.Count = 0 Then alignment = lvwColumnLeft
            LV.ColumnHeaders.Add , , fld.Name, fld.DefinedSize * 200, _
                alignment
        End If
    Next
    ' Exit if there are no fields that can be shown.
    If LV.ColumnHeaders.Count = 0 Then Exit Sub

    ' Add all the records in the recordset.
    rs.MoveFirst
    Do Until rs.EOF
        recCount = recCount + 1
        ' Add the main ListItem object.
        fldName = LV.ColumnHeaders(1).Text
        Set li = LV.ListItems.Add(, , rs.Fields(fldName) &amp; &quot;&quot;)
        ' Add all subsequent ListSubItem objects.
        For i = 2 To LV.ColumnHeaders.Count
            fldName = LV.ColumnHeaders(i)
            li.ListSubItems.Add , , rs.Fields(fldName) &amp; &quot;&quot;
        Next
        If recCount = MaxRecords Then Exit Do
        rs.MoveNext
    Loop
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>LoadListViewFromRecordset </I>routine expects an ADO Recordset and an optional <I>MaxRecords </I>argument that lets you limit the number of records displayed. This is necessary, because&#8212;as opposed to what happens with bound controls, which load only the information that is actually displayed&#8212;this routine reads all the rows in the recordset, which might be a lengthy process. I suggest that you set <I>MaxRecords </I>to 100 or 200, depending on the type of connection you have to your database and the speed of your CPU.</P>
<P>Another problem you face when loading data from a database is that you 
might need to manually adjust the width of each column. The 
<I>LoadListViewFromRecordset</I> routine initializes the width of all ColumnHeader objects using the fields' 
maximum width, but in most cases values stored in database fields are considerably shorter 
than this value. Instead of leaving the burden of the manual resizing on your users, 
you can change all columns' width programmatically using the following routine:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ListViewAdjustColumnWidth(LV As ListView, _
    Optional AccountForHeaders As Boolean)
    Dim row As Long, col As Long
    Dim width As Single, maxWidth As Single
    Dim saveFont As StdFont, saveScaleMode As Integer, cellText As String
    ' Exit if there aren't any items.
    If LV.ListItems.Count = 0 Then Exit Sub
    
    ' Save the font used by the parent form, and enforce ListView's
    ' font. (We need this in order to use the form's TextWidth
    ' method.)
    Set saveFont = LV.Parent.Font
    Set LV.Parent.Font = LV.Font
    ' Enforce ScaleMode = vbTwips for the parent.
    saveScaleMode = LV.Parent.ScaleMode
    LV.Parent.ScaleMode = vbTwips
    
    For col = 1 To LV.ColumnHeaders.Count
        maxWidth = 0
        If AccountForHeaders Then
            maxWidth = LV.Parent.TextWidth(LV.ColumnHeaders(col).Text)+200
        End If
        For row = 1 To LV.ListItems.Count
            ' Retrieve the text string from ListItems or ListSubItems.
            If col = 1 Then
                cellText = LV.ListItems(row).Text
            Else
                cellText = LV.ListItems(row).ListSubItems(col - 1).Text
            End If
            ' Calculate its width, and account for margins.
            ' Note: doesn't account for multiple-line text fields.
            width = LV.Parent.TextWidth(cellText) + 200
            ' Update maxWidth if we've found a larger string.
            If width &gt; maxWidth Then maxWidth = width
        Next
        ' Change the column's width.
        LV.ColumnHeaders(col).width = maxWidth
    Next
    ' Restore parent form's properties.
    Set LV.Parent.Font = saveFont
    LV.Parent.ScaleMode = saveScaleMode
End Sub
</pre>
</td></tr>
</table>
</p>


<p>To determine the optimal width of all the values stored in a given column, 
the <I>ListViewAdjustColumnWidth </I>routine evaluates the maximum width of all the 
strings stored in that column. The problem is that the ListView control doesn't support 
the <I>TextWidth </I>method, so the routine relies on the 
<I>TextWidth</I> method exposed by the control's parent form. If a True value is passed in the second argument, the 
routine also accounts for the <I>Text </I>property of all ColumnHeader objects, so no header 
title is truncated.</P>
<P>The ListView control already allows you to automatically resize columns to 
fit their contents, even though this capability hasn't been exposed in the Visual 
Basic ActiveX control. In fact, you can interactively resize a column to fit the longest 
item it contains by double-clicking on its right border in the column header (as you 
would in the Details view mode of Windows Explorer). In the demonstration program 
on the companion CD, you'll find another version of the 
<I>ListViewAdjustColumnWidth</I> routine that does the resizing by using API calls instead of plain Visual Basic 
code. The following code sample shows how to use the 
<I>ListViewAdjustColumnWidth </I>routine to display all the records in the Orders table of the NorthWind.Mdb 
database, as shown in Figure 10-13:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
    ' WARNING: you might need to modify the DB path in the next line.
    cn.Open &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
        &amp; &quot;Data Source=C:\VisStudio\VB98\NWind.mdb&quot;
    rs.Open &quot;Orders&quot;, cn, adOpenForwardOnly, adLockReadOnly
    LoadListViewFromRecordset ListView1, rs
    ListViewAdjustColumnWidth ListView1, True
End Sub
</pre>
</td></tr>
</table>
</p>


<p>On my 233-MHz machine, this code takes about 15 seconds to complete, 
which is more than most customers are willing to wait. Therefore, you should use this 
technique judiciously and set an upper limit to the number of records that are read 
from a database.</P>

<p>
<A HREF="javascript:fullSize('F10ph13x.htm')"> <img src="F10ph13.JPG" width=404 height=275 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-13.</B> <i>This demonstration program loads NorthWind's Orders table into a ListView control and lets you sort on any field by clicking on the corresponding column's header.</i><!--/caption-->
</p>

<A NAME="441"><h3>Sorting and reordering columns</h3></A>

<p>I already explained how you can define a sort key and a sort order at design 
time. You can get the same effect at run time by setting the 
<I>Sorted</I>, <I>SortKey</I>,<I> </I>and 
<I>SortOrder </I>properties. Usually you do this when the end user clicks on a column header, an 
action that you can trap in the <I>ColumnClick 
</I>event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub ListView1_ColumnClick(ByVal ColumnHeader As _
    MSComctlLib.ColumnHeader)
    ListView1.SortKey = ColumnHeader.Index - 1
    ListView1.Sorted = True
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Things are slightly more complicated if you want to offer the ability to sort 
in either direction: The first click sorts in ascending order, and the second click sorts 
in descending order. In this case, you must check to see whether the column 
being clicked is already sorted:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub ListView1_ColumnClick(ByVal ColumnHeader As _
    MSComctlLib.ColumnHeader)
    ' Sort according to data in this column.
    If ListView1.Sorted And _
        ColumnHeader.Index - 1 = ListView1.SortKey Then
        ' Already sorted on this column, just invert the sort order.
        ListView1.SortOrder = 1 - ListView1.SortOrder
    Else
        ListView1.SortOrder = lvwAscending
        ListView1.SortKey = ColumnHeader.Index - 1
    End If
    ListView1.Sorted = True
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The ListView control is able to sort string data exclusively. If you want to 
sort on columns that hold numeric or date information, you must resort to a trick. 
Create a new ColumnHeader object, fill it with string data derived from the numbers or 
dates you want to sort on, sort on that column, and finally delete those items. Here's 
a reusable routine that does all this for you:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ListViewSortOnNonStringField(LV As ListView, ByVal ColumnIndex As _
    Integer, SortOrder As Integer, Optional IsDateValue As Boolean)
    Dim li As ListItem, number As Double, newIndex As Integer

    ' This speeds up things by a factor of 10 or more.
    LV.Visible = False
    LV.Sorted = False
    ' Create a new, hidden field.
    LV.ColumnHeaders.Add , , &quot;dummy column&quot;, 1
    newIndex = LV.ColumnHeaders.Count - 1
        
    For Each li In LV.ListItems
        ' Extract a number from the field.
        If IsDateValue Then
            number = DateValue(li.ListSubItems(ColumnIndex - 1))
        Else
            number = CDbl(li.ListSubItems(ColumnIndex - 1))
        End If
        ' Add a string that can be sorted using the Sorted property.
        li.ListSubItems.Add , , Format$(number, &quot;000000000000000.000&quot;)
    Next
    
    ' Sort on this hidden field.
    LV.SortKey = newIndex
    LV.SortOrder = SortOrder
    LV.Sorted = True
    ' Remove data from the hidden column.
    LV.ColumnHeaders.Remove newIndex + 1
    For Each li In LV.ListItems
        li.ListSubItems.Remove newIndex
    Next
    LV.Visible = True
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You can use the <I>ListViewSortOnNonStringField 
</I>routine from a <I>ColumnClick</I> event procedure, as I explained previously. The code I just showed you 
doesn't work with negative values, but the complete version on the companion CD 
solves this problem.</P>

<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
When the <I>Sorted</I> property is True, insert and remove operations are 
unbearably long. It's much better to set the 
<I>Sorted</I> property to False, do whatever 
updates you want, and then reset it to True. Depending on how many items are in 
the ListView control, you can easily speed up your routines by an order of magnitude.
</blockquote></div></P>

<p>Columns can be moved and reordered at run time. You can let the user drag 
a column to a new position by setting the <I>AllowColumnReorder 
</I>property to True. However, you shouldn't do this when your ListView control has the 
property <I>Checkboxes</I> set to True. If the user moves the first column, the control's contents 
will look pretty unusual because the check boxes will move with the first column.</P>
<P>Reordering columns from your code ensures better control over which 
columns are moved and where. In this case, you only have to assign a new value to the 
<I>Position </I>property of a ColumnHeader object. For example, you can exchange the position 
of the first two columns with this code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ListView1.ColumnHeaders(1).Position = ListView1.ColumnHeaders(1).Position _
    + 1
' You need to refresh after reordering one or more columns.
ListView1.Refresh
</pre>
</td></tr>
</table>
</p>


<A NAME="442"><h3>Searching items</h3></A>

<p>You can quickly search for a string in a ListView control using the 
<I>FindItem </I>method, which has this syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>FindItem(Search, [Where], [Start], [Match]) As ListItem
</pre>
</td></tr>
</table>
</p>


<p><I>Search </I>is the string being searched. <I>Where 
</I>specifies in which property the string will be searched: 0-lvwText for the 
<I>Text</I> property of ListItem objects, 
1-lvwSubItem for the <I>Text </I>property of ListSubItem objects, or 2-lvwTag for the 
<I>Tag </I>property of ListItem objects. <I>Start 
</I>is the index or the key of the ListItem object from which 
the search begins. <I>Match </I>can be 0-lvwWholeWord or 1-lvwPartial and defines 
whether an item that begins with the searched string makes for a successful search. 
(<I>Match </I>can be used only if <I>Where </I>= 0-lvwText.)</P>

<p>Note that you can't search in the <I>Tag </I>property of ListSubItem objects, nor 
can you restrict the search to a single column of ListSubItems. All search operations 
are case insensitive.</P>

<A NAME="443"><h3>Other properties, methods, and events</h3></A>

<p>The ListView control supports properties, methods, and events that are similar to 
those exposed by the TreeView control, so I won't describe them in detail here.</P>
<P>You can control when the user edits a value in the control using the 
<I>BeforeLabelEdit </I>and <I>AfterLabelEdit </I>events. Regardless of where the user clicks on the 
row, the only item that can actually be edited is the one in the leftmost column. If you 
want to programmatically start an edit operation, you have to make a given ListItem 
object the selected one and then invoke the <I>StartLabelEdit 
</I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ListView1.SetFocus
Set ListView1.SelectedItem = ListView1.ListItems(1)
ListView1.StartLabelEdit
</pre>
</td></tr>
</table>
</p>


<p>If the control's <I>Checkboxes </I>property is set to True, you can read and modify 
the checked state of each row through the <I>Checked 
</I>property of individual ListItem objects. You can trap the action of ticking a check box by writing code in the 
<I>ItemCheck </I>event procedure. Similarly, the 
<I>ItemClick </I>event fires when a ListItem object is clicked.</P>

<p>ListItem objects expose an <I>EnsureVisible 
</I>method that, if necessary, scrolls the contents of the control to move the item into the visible area of the control. You 
can also query the ListView's <I>GetFirstVisible 
</I>method, which returns a reference to the first visible ListItem object.</P>

<p>The ListView's <I>HitTest </I>method returns the ListItem object at the specified 
coordinates. You typically use this method in drag-and-drop operations together with 
the <I>DropHighlight </I>property, as I explained in the section devoted to the TreeView 
control. By the way, there's no simple way to determine which column the mouse is 
on when the control is in Report mode.</P>


<a name="A61"></a><h3>6.2.4 The Toolbar Control</h3>

<A HREF="#A60">[Previous]</A> <A HREF="#A62">[Next]</A><P>

<A NAME="444"><h1>The Toolbar Control</h1></A>

<p>The majority of Windows applications include one or more toolbars, which offer 
the end user the convenience of executing the most common commands with a click 
of the mouse. Toolbars should never replace menus&#8212;and for good reason: menus 
can be operated with the keyboard; toolbars can't&#8212;but they surely make a program 
more usable and give it a modern look and feel.</P>

<p>Visual Basic comes with a Toolbar control that can contain buttons and 
other controls and that can be interactively customized by the end user. The Visual Basic 
6 version adds the flat style made popular by Microsoft Internet Explorer and the 
support for building drop-down menus.</P>
<P>The Toolbar control exposes the Buttons collection, which in turn 
contains Button objects. Each Button object can be an actual push button, a separator, or 
a placeholder for another control placed on the toolbar (typically a TextBox 
control or a ComboBox control). In addition, a Button object exposes the ButtonsMenus 
collection, where each ButtonMenu object is an item of a drop-down menu. (If the 
Button object isn't a drop-down menu, this collection is empty.)</P>

<P>
<A HREF="javascript:fullSize('G10ph02x.htm')"> <img src="G10ph02.JPG" width=404 height=201 border=0 ALT = "Click to view at full size."> </A>
</P>

<A NAME="445"><h2>Setting Design-Time Properties</h2></A>

<p>In most cases, you define the appearance of a Toolbar at design time and then 
simply react to user's clicks on its buttons. You have two ways to work with a 
Toolbar at design time: by using the Toolbar Wizard or by manually setting properties. 
The two methods aren't mutually exclusive: In most cases, in fact, you might find it 
convenient to create a first version of a Toolbar control using the wizard and then 
refine it in its Properties dialog box.</P>


<A NAME="446"><h3>The Toolbar Wizard</h3></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The Toolbar Wizard is a new add-in provided with Visual Basic 6. But you won't 
find this wizard in the list of installable add-ins in the Add-In Manager dialog box. 
Instead, you have to install the Application Wizard add-in: After you do this, you'll find 
the Toolbar Wizard command in the Add-In menu. If you select this command, the 
wizard adds a new Toolbar control to the current form and lets you customize it. Or 
you can place a Toolbar control on the form yourself, and the wizard will be 
automatically activated.</P>

<p>Using the Toolbar Wizard is simple. You have a list of buttons in the 
leftmost list box (see Figure 10-14) from which you select the 
buttons you want to add to the Toolbar control. You can move items between the two 
list boxes and change their order in the toolbar by using the provided push buttons, 
or you can use drag-and-drop. The wizard also creates the companion ImageList 
control on the form. When you complete a toolbar, you'll be asked whether you 
want to save it in an .rwp profile file, which lets you speed up the creation of similar 
toolbars in future applications.</P>

<p>
<A HREF="javascript:fullSize('F10ph14x.htm')"> <img src="F10ph14.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-14.</B> <i>Creating a toolbar using the Toolbar Wizard.</i><!--/caption-->
</p>

<A NAME="447"><h3>General properties</h3></A>

<p>After you create a toolbar, you can access its Property Pages by right-clicking on 
it and choosing Properties. The General tab of the Property Pages dialog box 
includes most of the design-time properties that let you control the fine points of the 
appearance and behavior of a Toolbar control, as shown in Figures 10-15 and 10-16. 
For example, you make the following decisions: Whether the end user can customize 
the toolbar at run time (<I>AllowCustomize</I> property), whether the toolbar will wrap 
on multiple lines when the form is resized 
(<I>Wrappable</I> property), whether ToolTips are visible 
(<I>ShowTips</I> property), and what the default size of buttons 
(<I>ButtonWidth</I> and <I>ButtonHeight</I> properties) is. If necessary, buttons are automatically enlarged to 
account for their caption or image, so in most cases you don't need to edit the 
default values of the latter two properties.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>A few new properties let you access the most interesting features 
introduced in Visual Basic 6. You can create flat toolbars by setting the 
<I>Style</I> property to the value 1-tbrFlat, and you can use the 
<I>TextAlignment </I>property to modify the alignment 
of a button's caption with respect to the button's image (0-tbrTextAlignBottom or 1-tbrTextAlignRight).</P>

<p>A toolbar's button can be in three possible states: normal, disabled, or 
selected. (The selected state occurs when the mouse passes over the button if 
<I>Style</I> is 1-tbrFlat.) Instead of having three properties to point to different images of the same 
ImageList control, the Toolbar control uses a different approach: Each Button object 
exposes only one <I>Image </I>property&#8212;an index or a string key&#8212;and the state of the button 
implicitly affects which ImageList control will be used. You assign these three 
ImageList controls to the <I>ImageList</I>, 
<I>DisabledImageList</I>,<I> </I>and <I>HotImageList 
</I>properties either at design time or at run time. For example, you can mimic the behavior of Internet 
Explorer 4 by using a set of black-and-white icons for the normal state and a set 
of colorful icons for the selected state. If you don't assign the latter two properties, 
the Toolbar automatically creates a suitable image for the disabled or selected state.</P>

<p>
<img src="F10ph15x.gif" width=419 height=387 border=0>
</p><p>
<!--caption--><B>Figure 10-15.</B> <i>The General tab of the Property Pages dialog box of a Toolbar control.</i><!--/caption-->
</p>

<p>
<img src="F10ph16x.gif" width=419 height=387 border=0>
</p><p>
<!--caption--><B>Figure 10-16.</B> <i>The Buttons tab of the Property Pages dialog box of a Toolbar control.</i><!--/caption-->
</p>

<A NAME="448"><h3>Button objects</h3></A>

<p>A Toolbar control without any Button objects is useless. You can add Button 
objects using the Toolbar Wizard, as I explained previously, or you can do it in the 
Buttons tab of the Property Pages dialog box, as you can see in Figure 10-16. Each 
Button has a <I>Caption</I> property (use an empty string if you want to display only the 
icon), an optional <I>Description</I> that appears during a customization operation, a 
<I>Tag </I>property, a <I>Key</I> in the Buttons collection (optional, but use it to improve the 
readability of your code), a <I>ToolTipText</I> that appears if the Toolbar's 
<I>ShowTips </I>property is True, and an 
<I>Image</I> index or key to the associated ImageList controls.</P>
<P><I>Style</I> is the most interesting property of a Button object. This property affects the appearance and behavior of the button and can be assigned one of the following values: 0-tbrDefault (a normal button, which behaves like a push button), 1-tbrCheck (a button that stays down when pressed, much like a CheckBox control), 2-tbrButtonGroup (a button that belongs to a group in which only one item can be in the selected state, similar to an OptionButton control), 3-tbrSeparator (a separator of fixed width), 4-tbrPlaceholder (a separator whose size depends on the 
<I>Width</I> property; this style is used to make room for another control placed on the 
toolbar), or 5-tbrDropDown (a button with a down arrow beside it, which displays a 
drop-down menu when clicked).</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>When the <I>Style</I> property is set to the value 5-tbrDropDown, you can add 
one or more ButtonMenu objects to the current Button. (You can create ButtonMenu 
items regardless of the button's style, but they're visible only when the style is 
tbrDropDown.) Each ButtonMenu object has a 
<I>Text</I> property (the caption of the menu line), 
an optional <I>Key </I>in the ButtonMenus collection, and a 
<I>Tag </I>property. Unfortunately, you can't associate an image with a ButtonMenu object: Drop-down menus are 
inherently text-only, which definitely contrasts with the graphical nature of the Toolbar 
control. See Figure 10-17 for an example of a Toolbar control whose first button has 
an associated drop-down menu.</P>

<p>
<img src="F10ph17.GIF" width=319 height=154 border="0">
<p>
<!--caption--><B>Figure 10-17.</B> <i>A toolbar with a drop-down menu.</i><!--/caption-->


<A NAME="449"><h2>Run-Time Operations</h2></A>

<p>Once you have added a Toolbar control to a form, you have to trap the user's 
actions on it. You might also need to programmatically build the control at run time 
or let the user customize it and save the new layout for subsequent sessions.</P>

<A NAME="450"><h3>Creating Button and ButtonMenu objects</h3></A>

<p>You can create new Button objects at run time using the 
<I>Add</I> method of the Buttons collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Caption], [Style], [Image]) As Button
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>is the position at which the Button object will be inserted in the 
collection, <I>Key </I>is its optional string key, 
<I>Caption </I>is the text visible on the toolbar, 
<I>Style </I>determines the type of the button being added (0-tbrNormal, 1-tbrCheck, 
2tbrButtonGroup, 3-tbrSeparator, 4-tbrPlaceholder, or 5-tbrDropDown), and 
<I>Image </I>is the index or the key of an image in the three companion ImageList controls.</P>

<p>You might want to set a few additional properties when you're creating a 
Button object, such as <I>Width </I>(for placeholder buttons) and 
<I>ToolTipText</I>. Buttons whose style is tbrCheck or tbrButtonGroup can be created in a pressed state by assigning 
1-tbrPressed to the <I>Value </I>property. Here's an example of code that adds a few buttons:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A button that can be in an on or off state
Dim btn As Button
Set btn = Toolbar1.Buttons.Add(, , , tbrCheck, &quot;Lock&quot;)
btn.Value = tbrPressed
' A separator
Toolbar1.Buttons.Add, , , tbrSeparator
' Two buttons that are mutually exclusive
Set btn = Toolbar1.Buttons.Add(, , , tbrButtonGroup, &quot;Green&quot;)
Set btn = Toolbar1.Buttons.Add(, , , tbrButtonGroup, &quot;Red&quot;)
btn.Value = tbrPressed
</pre>
</td></tr>
</table>
</p>


<p>You can place any control in the toolbar by creating a Button object with 
the <I>Style </I>property set to tbrPlaceholder and then moving the control to the correct 
position. For example, let's say that you want to place the 
<I>cboFontSizes</I> control in the toolbar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a placeholder of proper width.
Dim btn As Button
Set btn = Toolbar1.Buttons.Add(, , , tbrPlaceholder)
btn.Width = cboFontSizes.Width
' Move the ComboBox control over the placeholder button.
Set cboFontSizes.Container = Toolbar1
cboFontSizes.Move btn.Left, btn.Top
</pre>
</td></tr>
</table>
</p>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>If you create a Button object whose 
<I>Style</I> property is tbrDropDown, you can add one or more items to its ButtonMenus collection by using the collection's 
<I>Add </I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add ([Index], [Key], [Text]) As ButtonMenu
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>is the position in the collection, 
<I>Key </I>is an optional key, and <I>Text </I>is 
the caption of the menu item. The piece of code below adds 
one drop-down Button object with a menu of three items.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim btn As Button
Set btn = Toolbar1.Buttons.Add(, , , tbrDropDown, &quot;New&quot;)
With btn.ButtonMenus
    .Add , , &quot;File&quot;
    .Add , , &quot;Document&quot;
    .Add , , &quot;Image&quot;
End With
</pre>
</td></tr>
</table>
</p>


<A NAME="451"><h3>Reacting to a user's actions</h3></A>

<p>When the user clicks on a button, the Toolbar control fires a 
<I>ButtonClick </I>event, so it's easy to execute a piece of code when this happens:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_ButtonClick(ByVal Button As MSComCtlLib.Button)
    Select Case Button.Key
        Case &quot;New&quot;
            Call mnuFileNew_Click
        Case &quot;Save&quot;
            Call mnuFileSave_Click
        ' And so on.
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>Visual Basic 6 introduces two new events, both of which are related to 
drop-down menus. The <I>ButtonDropDown </I>event fires when the user opens a drop-down menu. You can use this event to create or modify the menu on the fly&#8212;for example, by setting the <I>Visible </I>or <I>Enabled 
</I>property of its individual ButtonMenu items or 
by adding new menu lines:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_ButtonDropDown(ByVal Button As MSComctlLib.Button)
    ' Make the &quot;Open | Image&quot; command unavailable if necessary.
    If Button.Caption = &quot;Open&quot; Then
        Button.ButtonMenus(&quot;Image&quot;).Enabled = ImagesAreEnabled
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>ButtonMenuClick </I>event fires when the end user actually selects a 
command in a drop-down menu:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_ButtonMenuClick(ByVal ButtonMenu As 
    MSComctlLib.ButtonMenu)
    Select Case ButtonMenu.Key
        Case &quot;Document&quot;
            Call mnuFileNewDocument
        Case &quot;Image&quot;
            Call mnuFileNewImage
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="452"><h3>Customizing the Toolbar control</h3></A>

<p>You can allow for users to customize the Toolbar control if you want. You can 
choose from two ways to achieve this: You set the 
<I>AllowCustomization </I>property to True to let users enter customization mode by double-clicking on the toolbar, or you 
programmatically enter customization mode by executing the Toolbar's 
<I>Customize </I>method. The latter approach is necessary if you want to provide this capability 
only to a restricted group of users:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_DblClick()
    If UserIsAdministrator Then Toolbar1.Customize
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Whatever method you choose, you end up displaying the Customize 
Toolbar dialog box, shown in Figure 10-18.</P>

<p>
<A HREF="javascript:fullSize('F10ph18x.htm')"> <img src="F10ph18.JPG" width=404 height=170 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-18.</B> <i>The Customize Toolbar dialog box.</i><!--/caption-->
</p>

<p>When the user closes this dialog box, the Toolbar control raises a 
<I>Change </I>event. (Beware: This event occurs even if the user made no changes to the toolbar's 
layout.) Within this event procedure, you should execute a 
<I>SaveToolbar </I>method, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SaveToolbar Key, Subkey, Value
</pre>
</td></tr>
</table>
</p>


<p><I>Key </I>is the name of a Registry key, <I>SubKey 
</I>is the name of a Registry subkey, and <I>Value 
</I>is the name of a Registry value; together, these arguments define a location 
in the system Registry where the layout of the toolbar is stored. For example, you 
can use them to save different layouts depending on the application's name, the 
user currently logged in, and the particular toolbar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_Change()
    Toolbar1.SaveToolbar &quot;MyApplication&quot;, UserName, &quot;MainFormToolbar&quot;
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You restore these settings using the <I>RestoreToolbar 
</I>method, typically in the <I>Form_Load </I>event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Toolbar1.RestoreToolbar &quot;MyApplication&quot;, UserName, &quot;MainFormToolbar&quot;
End Sub
</pre>
</td></tr>
</table>
</p>


<p><div class="note"><blockquote><b>NOTE</b><hr>
Oddly, the <I>RestoreToolbar</I> method raises a 
<I>Change</I> event. This behavior is usually harmless because the code in this event procedure proceeds 
to save the toolbar again in the Registry (adding just a little overhead to the 
form-loading process). However, if the Toolbar object's 
<I>Change </I>event procedure contains other, time-consuming statements, they might slow down your code 
and even cause an unexpected error.
</blockquote></div></P>

<p>When the Customize Toolbar dialog box is active, users can delete 
existing buttons, restore buttons that had been previously deleted, or change the order 
of buttons in the toolbar. If you want to let users add buttons, you must create 
such buttons at design time, run the application, invoke the Customize Toolbar, and 
delete these extra buttons. The deleted buttons will be available in the leftmost list box 
in the Customize Toolbar dialog box in case a user wants to restore them.</P>


<a name="A62"></a><h3>6.2.5 The TabStrip Control</h3>

<A HREF="#A61">[Previous]</A> <A HREF="#A63">[Next]</A><P>

<A NAME="453"><h1>The TabStrip Control</h1></A>

<p>Tabbed dialog boxes are standard these days among Windows applications. 
Visual Basic comes with two controls for implementing them: The TabStrip common 
control and the SSTab control. In this section, I describe the TabStrip control, 
whereas <a href="#A74">Chapter 12</a> covers the SSTab control.</P>

<p>The most important thing to learn about the TabStrip control is that it 
<I>isn't </I>a container. In other words, it offers a program only the ability to display a number 
of tabs and react to users' clicks on them. It's up to the developer to make a group 
of controls visible or invisible, depending on which tab is currently selected. This 
makes working with this control at design time a tedious job and is probably the reason 
why many developers prefer the SSTab control, which is a real container control and 
can swap pages at design time as well. In my opinion, this nuisance is balanced by 
the fact that TabStrip is more powerful in other areas.</P>

<p>The TabStrip control exposes a Tabs collection, which in turn contains 
Tab objects. You must be aware of this structure to exploit all the features of this control.</P>

<A NAME="454"><h2>Setting Design-Time Properties</h2></A>

<p>After you place a TabStrip control on a form, you have to set up a few general 
properties and then add a number of tabs. You can perform both operations from 
within the Properties custom dialog box, which you display by right-clicking on the 
control and selecting the Properties menu option.</P>

<A NAME="455"><h3>General properties</h3></A>

<p>You can set all general properties from the General tab of the Property Pages 
dialog box, as shown in Figure 10-19. The first property you might want to set is 
<I>Style</I>, which lets you change the appearance of the control. In most cases, you leave it with its 
default value 0-tabTabs (the control is rendered as a collection of tabbed pages), 
but you can also set it to 1-tabButtons (tabs are replaced by buttons, and no border 
is displayed) or 2-tabFlatButtons (same as tabButtons, but buttons are flat). In the 
latter two cases, you can opt for separators among buttons by setting the 
<I>Separators </I>property to True. A few combinations of these styles are visible in Figure 10-20.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The tabFlatButton setting has appeared for the first time in Visual Basic 6, 
together with the <I>Separator </I>property. Other new Visual Basic 6 properties are 
<I>TabMinWidth</I>, <I>Placement</I>,<I> 
TabStyle</I>, <I>HotTracking</I>, and 
<I>MultiSelect</I>.</P>

<p>
<img src="F10ph19x.gif" width=419 height=315 border=0>
</p><p>
<!--caption--><B>Figure 10-19.</B> <i>The General tab of the Property Pages dialog box of a TabStrip control.</i><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('F10ph20x.htm')"> <img src="F10ph20.JPG" width=404 height=327 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-20.</B> <i>A gallery of styles for the TabStrip control.</i><!--/caption-->
</p>

<p>If you're going to add more tabs than can appear in a single line, you can 
create multiple lines of tabs by setting the <I>MultiRow 
</I>property to True. You can choose different justification styles for the tabs by setting the 
<I>TabWidthStyle </I>property to 0-tabJustified, 1-tabNonJustified, or 2-tabFixed. If you're working with tabs of 
fixed width, you can assign a suitable value to the 
<I>TabFixedWidth </I>and <I>TabFixedHeight </I>properties. If you're working with tabs of variable width, you can set a minimum 
value for their size using the <I>TabMinWidth </I>property.</P>

<p>The <I>Placement </I>property lets you decide whether tabs should appear near 
the top (default), bottom, left, or right border of the control. The 
<I>TabStyle </I>property affects the run-time behavior of TabStrip controls with multiple rows: When you 
set this property to 1-tabTabOpposite, all the rows that precede the current one are 
displayed on the opposite side of the control.</P>

<p>A few other design-time Boolean properties can affect the appearance of 
the control. You can set the <I>HotTracking </I>property to True to activate the hot 
tracking feature (but only if <I>Style </I>is tabFlatButtons). If the 
<I>Multiselect</I> property is True, the user can select multiple tabs by clicking on them while pressing the Ctrl key (but only 
if <I>Style </I>is tabButtons or tabFlatButtons). Finally, if the 
<I>ShowTips </I>property is True, the control displays the 
<I>ToolTipText </I>associated with the tab over which the user moves the mouse.</P>

<A NAME="456"><h3>Tab objects</h3></A>

<p>Once you've set the most important general properties, you can create tabs in 
the Tabs tab (sounds a bit confusing, yes? It's the second tab&#133;) of the Property 
Pages dialog box. The only property that isn't optional is the 
<I>Caption </I>property. The <I>Key </I>property is the value that identifies a tab in the Tabs collection, whereas 
<I>Tag </I>and <I>ToolTipText </I>have the usual meanings and effects.</P>

<p>You can display an icon in each tab. To do that, you have to load all the 
images into a companion ImageList control and then store a reference to this 
control in the TabStrip's <I>ImageList </I>property. At this point, you can assign a Tab's 
<I>Image </I>property the index of the image that should be displayed.</P>

<A NAME="457"><h3>Preparing the child containers</h3></A>

<p>Because the TabStrip control isn't a container control, you can't place child 
controls directly on its surface. This is probably the most serious limitation of this control: 
Even if it doesn't affect the control's run-time potential, it surely makes the 
design-time phase a little cumbersome. At run time, it's up to the programmer to show all 
the controls on the tab being clicked by the user and hide the child controls 
belonging to all other tabs.</P>

<p>In practice, the most convenient way to manage the child controls is to 
create a number of container controls on the form&#8212;for example, PictureBox or Frame 
controls. These controls should belong to a control array so that you can easily 
manipulate them as a group. It isn't really important where you place these containers 
on the form because you'll have to move and resize them at run time.</P>

<p>Let's say that you have a TabStrip control with three tabs. You create 
three PictureBox controls, such as those visible in Figure 10-21, and then place child 
controls inside each PictureBox. I suggest that you move the containers to 
different positions so that you can easily select them at design time and bring them to the 
front using the Ctrl+J key combination. Things are easier if you use containers with 
visible borders and then hide the borders at run time.</P>

<p>
<A HREF="javascript:fullSize('F10ph21x.htm')"> <img src="F10ph21.JPG" width=404 height=261 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-21.</B> <i>Using PictureBoxes to contain child controls of a TabStrip control.</i><!--/caption-->
</p>

<A NAME="458"><h2>Run-Time Operations</h2></A>

<p>In most cases, you use only a fraction of the possibilities offered by the 
TabStrip control. In fact, the majority of applications just need to show the pages defined 
at design time and never need to create new ones. In this section, I describe the 
most common actions you can perform on this control using code.</P>

<A NAME="459"><h3>Moving and resizing containers</h3></A>

<p>If you have followed my advice about using Frame or PictureBox controls as 
containers for child controls, you need to move and resize them before the form 
becomes visible. You usually do it in the <I>Form_Load 
</I>event and exploit the properties 
<I>ClientLeft</I>, <I>ClientTop</I>, 
<I>ClientWidth</I>, and <I>ClientHeight</I> of the TabStrip control to learn where 
those containers should be moved. You also need to hide containers' borders, if they 
have any. The following code snippet assumes that all PictureBox container controls 
belong to the <I>picTab </I>control array:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Dim pic As PictureBox
    For Each pic In picTab
        pic.Move TabStrip1.ClientLeft, TabStrip1.ClientTop, _
            TabStrip1.ClientWidth, TabStrip1.ClientHeight
        pic.BorderStyle = 0
    Next
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="460"><h3>Selecting the current container</h3></A>

<p>You react to the user's clicks by making the container control&#8212;the one that 
corresponds to the clicked tab&#8212;the only visible container. You can learn which tab 
has been clicked by querying the <I>SelectedItem 
</I>property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TabStrip1_Click()
    Dim pic As PictureBox
    For Each pic In picTab
        ' The expression on the right returns True for one picture box.
        ' (Control arrays are zero-based; Selected.Index is one-based.)
        pic.Visible = (pic.Index = TabStrip1.SelectedItem.Index - 1)
    Next     
End Sub
</pre>
</td></tr>
</table>
</p>


<p>When the <I>Click</I> event fires, the <I>SelectedItem 
</I>property has already been set to the tab that's now current. If you want to keep track of which tab was current 
before the click, you must store this value in a form-level variable. Alternatively, 
you can trap the user's action before the <I>Click 
</I>event in the <I>BeforeClick </I>event. This 
event offers the program an opportunity to validate data on the current tab before the 
user leaves it and possibly to cancel the click. Here's an example of this technique:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TabStrip1_BeforeClick(Cancel As Integer)
    Select Case TabStrip1.SelectedItem.Index
        Case 1
            ' Refuse to move until the user types something in this field.
            If txtUserName.Text = &quot;&quot; Then Cancel = True
        Case 2
            ' Validation code for second tab
        Case 3
            ' Validation code for third tab
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You can also select a tab programmatically, by assigning a value to 
the <I>SelectedItem</I> property. You can use one of these two syntax forms:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Both statements select the second tab.
Set TabStrip1.SelectedItem = TabStrip1.Tabs(2)
TabStrip1.Tabs(2).Selected = True
</pre>
</td></tr>
</table>
</p>


<p>The <I>BeforeClick</I> and <I>Click </I>events fire even when a tab is selected through code.</P>

<P>Multiple Tab objects can have their 
<I>Selected</I> property set to True if the 
TabStrip's <I>MultiSelect </I>property is also True. You can quickly deselect all tabs using the 
<I>DeselectAll </I>method. Finally, you can highlight one or more tabs without showing their 
contents by setting the <I>Highlighted </I>property to True:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Highlight the second tab.
TabStrip1.Tabs(2).Highlighted = True
</pre>
</td></tr>
</table>
</p>


<A NAME="461"><h3>Creating and removing Tab objects</h3></A>

<p>You can create new tabs at run time, using the 
<I>Add </I>method of the <I>Tabs</I> collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Caption], [Image]) As Tab
</pre>
</td></tr>
</table>
</p>


<p>The <I>Add</I> method's arguments are the 
<I>Index</I>, <I>Key</I>, <I>Caption</I>, and <I>Image 
</I>properties of the Tab object being created. Because this method returns a reference to 
the created object, you can set additional properties using the following technique:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With TabStrip1.Add(, , &quot;Authentication&quot;)
    .ToolTipText = &quot;Click here to change authentication settings&quot;
    .Tag = &quot;ABC123&quot;
End With
</pre>
</td></tr>
</table>
</p>


<p>You can remove an existing Tab object at run time using the Tabs 
collection's <I>Remove </I>method, and you can remove all the tabs using the collection's 
<I>Clear </I>method.</P>


<a name="A63"></a><h3>6.2.6 The StatusBar Control</h3>

<A HREF="#A62">[Previous]</A> <A HREF="#A64">[Next]</A><P>

<A NAME="462"><h1>The StatusBar Control</h1></A>

<p>Many applications employ the bottom portion of their windows for displaying 
information to the end user. The most convenient way to create this interface in 
Visual Basic is with a StatusBar control.</P>

<p>The StatusBar control exposes a Panels collection, which in turn contains 
Panel objects. A Panel object is an area of the status bar that can hold a piece of 
information in a given style. The StatusBar control offers several automatic styles (such 
as date, time, and state of shift keys), plus a generic Text style that lets you show 
any string in a Panel object. You can also have a StatusBar control work in 
SimpleText mode, whereby individual Panel objects are replaced by a wider area in which 
you can display long text messages.</P>

<A NAME="463"><h2>Setting Design-Time Properties</h2></A>

<p>The General tab of the Properties dialog box doesn't contain many interesting 
properties. In theory, you can set the 
<I>Style</I> property to 0-sbrNormal (the default) or 
1-sbrSimpleText, and you can specify the <I>SimpleText 
</I>property itself, which will therefore appear as is in the StatusBar. In practice, however, you never change the 
default settings because you rarely need to create a StatusBar control merely to show a 
text message. In that case, in fact, you'd be better off with a simpler Label control or 
a PictureBox control with <I>Align </I>= vbAlignBottom. The only other custom property 
that appears on this tab is <I>ShowTips</I>, which enables the 
<I>ToolTipText</I> property of individual Panel objects.</P>

<P>Move on to the Panels tab of the Property Pages dialog box to create one 
or more Panel objects, as shown in Figure 10-22. Each Panel object has a number of 
properties that finely determine its appearance and behavior. The most interesting 
property is <I>Style</I>, which affects what's shown inside the Panel. The default value is 
0-sbrText, which displays the string assigned to the 
<I>Text</I> property. You can use a Panel object as an indicator of the status of a particular shift key using one of the settings 
1-sbrCaps, 2-sbrNum, 3-sbrIns, or 4-sbrScrl. You can also automatically display the current 
time or date using the 5-sbrTime or 6-sbrDate setting.</P>

<p>
<A HREF="javascript:fullSize('F10ph22x.htm')"> <img src="F10ph22.JPG" width=404 height=327 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-22.</B> <I>The Panels tab of the Property Pages dialog box of a StatusBar control.</I><!--/caption-->
</p>

<p>As I mentioned previously, the <I>Text</I> property is the string that appears in 
the Panel object when <I>Style </I>is sbrText. <I>Key 
</I>is the optional key that identifies a Panel 
object in the Panels collection; <I>Tag </I>and 
<I>ToolTipText </I>have the usual meanings. The 
<I>Alignment </I>property determines the position of the Panel's contents (0-sbrLeft, 
1-sbrCenter, or 2-sbrRight). The <I>Bevel </I>property affects the type of border drawn around the 
Panel: Its default value is 1-sbrInset, but you can change it to 2-sbrRaised or opt to have 
no 3-D border with 0-sbrNoBevel.</P>

<p>The <I>MinWidth </I>property is the initial size of the Panel object in twips. 
The <I>AutoSize</I> property affects the behavior of the Panel object when the form is 
resized: 0-sbrNoAutoSize creates a fixed-size Panel. The setting 1-sbrSpring is for Panels 
that resize with the parent form. (When there are multiple Panels with this setting, all 
of them shrink or expand accordingly.) The setting 2-sbrContents is for Panels 
whose widths are determined by their contents.</P>

<p>You can display an icon or a bitmap inside a Panel. At design time, you do 
this by loading an image from disk. Note that this is an exception among common 
controls, which usually refer to images by way of a companion ImageList control. The 
reason for this practice is that you might want to load images of different sizes in each 
Panel, whereas an ImageList control can contain images only of the same width and height.</P>

<A NAME="464"><h2>Run-Time Operations</h2></A>

<p>You won't want to perform many operations on a StatusBar control at run time. 
But you might need to change the <I>Text</I> property of a given Panel object whose 
<I>Style </I>property is 0-sbrText, as in the following example:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display a message in the third panel.
StatusBar1.Panels(3).Text = &quot;Hello World!&quot;
</pre>
</td></tr>
</table>
</p>


<p>For longer messages, you can change the <I>Style 
</I>property of the StatusBar control and assign a string to its 
<I>SimpleText </I>property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display a message in the entire status bar.
StatusBar1.Style = sbrSimple
StatusBar1.SimpleText = &quot;Saving data to file...&quot;
' A lengthy operation
' ...
' Remember to restore the Style property.
StatusBar1.Style = sbrText
</pre>
</td></tr>
</table>
</p>


<A NAME="465"><h3>Creating and removing Panel objects</h3></A>

<p>You rarely create and destroy Panel objects at run time, but it's good to know 
that you can do it if you really need to. To accomplish this, use the 
<I>Add </I>method of the Panels collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Text], [Style], [Picture]) As Panel
</pre>
</td></tr>
</table>
</p>


<p>where each argument corresponds to a property of the Panel object being 
created. For example, this code creates a new Panel in the leftmost position in the 
StatusBar control:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Use Index = 1 to place this item before all other Panels.
With StatusBar1.Panels.Add(1, &quot;temporary&quot;, &quot;Hello World&quot;, sbrText)
    .Alignment = sbrCenter
    .Bevel = sbrNoBevel
    .AutoSize = sbrContents
End With
</pre>
</td></tr>
</table>
</p>


<p>You can remove a single Panel object using the 
<I>Remove </I>method of the Panels collection, and you can remove all Panel objects using the 
<I>Clear </I>method.</P>

<A NAME="466"><h3>Reacting to a user's actions</h3></A>

<p>The StatusBar control exposes a couple of custom events, 
<I>PanelClick </I>and <I>PanelDblClick</I>. As their names suggest, these events fire when the end user clicks or 
double-clicks on a Panel object. The Panel being clicked is passed as an argument to those 
events. The code below shows how you can let the user modify the 
contents of a panel by double-clicking on it.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub StatusBar1_PanelDblClick(ByVal Panel As MSComctlLib.Panel)
    Dim s As String
    If Panel.Style = sbrText Then
        s = InputBox(&quot;Enter a new text for this panel&quot;)
        If Len(s) Then Panel.Text = s
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="467"><h3>Creating animated icons</h3></A>

<p>Panel objects expose a <I>Picture </I>property. Usually, you assign this property at 
design time, but nothing prevents you from assigning images to this property 
dynamically through code. For example, you can use different images to create animated 
icons. The trick is to load all the images into an array of Image controls and then assign 
them in turn in the <I>Timer </I>event procedure of a Timer control. (See Figure 10-23.)</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Timer1_Timer()
    Static n As Integer
    ' Show the next image.
    StatusBar1.Panels(&quot;moon&quot;).Picture = imgMoon(n).Picture
    n = (n + 1) Mod 8
End Sub
</pre>
</td></tr>
</table>
</p>


<p>
<A HREF="javascript:fullSize('F10ph23x.htm')"> <img src="F10ph23.JPG" width=404 height=185 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-23.</B> <i>The demonstration program lets you interactively edit Panel text and start a simple animation.</i><!--/caption-->
</p>

<A NAME="468"><h3>Toggling the state of lock keys</h3></A>

<p>Even if the StatusBar control can display the state of the Caps, Num, Scroll, and 
Insert key, it doesn't allow users to toggle it with a click of the mouse, which is 
probably what most users would expect. Fortunately, you only need a couple of 
API functions and some code in the <I>Click</I> or 
<I>DblClick</I> event procedures to do the magic:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' API declarations.
Declare Function GetKeyboardState Lib &quot;user32&quot; (KeyState As Byte) As Long
Declare Function SetKeyboardState Lib &quot;user32&quot; (KeyState As Byte) As Long

Private Sub StatusBar1_PanelDblClick(ByVal Panel As MSComctlLib.Panel)
    Select Case Panel.Style
        Case sbrCaps:  ToggleKey vbKeyCapital
        Case sbrNum:   ToggleKey vbKeyNumlock
        Case sbrScrl:  ToggleKey vbKeyScrollLock
        Case sbrIns:   ToggleKey vbKeyInsert
    End Select
    StatusBar1.Refresh
End Sub

Sub ToggleKey(vKey As KeyCodeConstants)
    Dim keys(255) As Byte
    ' Read the current state of the keyboard.
    GetKeyboardState keys(0)
    ' Toggle bit 0 of the virtual key we're interested in.
    keys(vKey) = keys(vKey) Xor 1
    ' Enforce the new keyboard state.
    SetKeyboardState keys(0)
End Sub
</pre>
</td></tr>
</table>
</p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
While the <I>ToggleKey </I>routine always works correctly, I've found that 
on Windows NT systems the keyboard LED indicators don't change to reflect 
the new states of the toggled keys.
</blockquote></div></P>

<A NAME="469"><h3>Hosting controls on the status bar</h3></A>

<p>Even if the StatusBar control offers many properties, some things seem to be out 
of reach of the Visual Basic programmer. For example, you can't change the 
background color of individual Panel objects, nor can you show a progress bar inside a Panel, 
a feature that many Windows applications have. Fortunately, there's an easy trick 
that lets you overcome these limitations.</P>

<P>The StatusBar control can't work as a container, so you can't actually 
move another control&#8212;a ProgressBar, for 
example&#8212;<I>inside </I>a StatusBar. But you can 
move a control <I>over </I>a StatusBar, provided that you know exactly where it must appear. 
This is possible thanks to the <I>Left </I>and <I>Width 
</I>properties of the Panel object. The following code fragment moves a ProgressBar control over a specific Panel, simulates 
a growing progress bar, and then restores the original appearance of the Panel:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdProgress_Click()
    Dim deltaY As Single, pnl As Panel, v As Single
    ' Account for two pixels around the Panel.
    deltaY = ScaleY(2, vbPixels, vbTwips)
    ' Get a reference to the Panel object, and hide its bevel.
    Set pnl = StatusBar1.Panels(1)
    pnl.Bevel = sbrNoBevel
    ' Move the progress bar into position and in front of the status bar.
    ProgressBar1.Move pnl.Left, StatusBar1.Top + deltaY, _
        pnl.Width, StatusBar1.Height - deltaY
    ProgressBar1.Visible = True
    ProgressBar1.ZOrder
    
    ' Let the progress bar grow.
    For v = 1 To 100 Step 0.1
        ProgressBar1.Value = v
        DoEvents
    Next
    ' Restore original visibility state and bevel.
    ProgressBar1.Visible = False
    pnl.Bevel = sbrInset
End Sub
</pre>
</td></tr>
</table>
</p>


<p>This trick works perfectly if the form isn't resizable. In all other cases, you 
should also move the ProgressBar control when the form is resized, which you do by 
adding the proper code in the <I>Form_Resize</I> event. See the source code of the 
demonstration program on the companion CD for more details.</P>


<a name="A64"></a><h3>6.2.7 The ProgressBar Control</h3>

<A HREF="#A63">[Previous]</A> <A HREF="#A65">[Next]</A><P>

<A NAME="470"><h1>The ProgressBar Control</h1></A>

<p>The ProgressBar control is used to inform the user about the progress state of 
a lengthy operation. This control is the simplest one among those contained in 
the MsComCtl.OCX file because it doesn't have any dependent objects and it 
doesn't expose any custom events.</P>

<A NAME="471"><h2>Setting Design-Time Properties</h2></A>

<p>You have to set up a few properties at design time after you drop a ProgressBar 
control on a form; in most cases, you can accept the default values. The most 
important properties are <I>Min </I>and <I>Max</I>, which determine the minimum and maximum 
values that can be displayed by the progress bar.</P>

<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<P>The ProgressBar control that comes with Visual Basic 6 includes two new 
properties, <I>Orientation </I>and 
<I>Scrolling</I>. The former lets you create vertical progress 
bars; the latter lets you alternate between a standard segmented bar and a smoother 
bar, as you can see in Figure 10-24. You can change these values even at run time.</P>

<A NAME="472"><h2>Run-Time Operations</h2></A>

<p>There isn't much to say about run-time interaction with the ProgressBar control. 
In practice, the only thing you can do through code is set the 
<I>Value </I>property to a number in the range from 
<I>Min </I>to <I>Max</I>. Any value outside this interval fires an error 
380 &quot;Invalid property value.&quot; As I mentioned previously, the ProgressBar control 
doesn't expose any custom events.</P>

<p>
<A HREF="javascript:fullSize('F10ph24x.htm')"> <img src="F10ph24.JPG" width=404 height=304 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-24.</B> <i>The effects of the Orientation, Scrolling, Appearance, and BorderStyle properties on the ProgressBar control.</i><!--/caption-->
</p>

<p>Only two other properties affect the aspect of the 
control&#8212;<I>Appearance </I>and 
<I>BorderStyle</I>. Figure 10-24 shows a number of possible combinations of these properties.</P>


<a name="A65"></a><h3>6.2.8 The Slider Control</h3>

<A HREF="#A64">[Previous]</A> <A HREF="#A66">[Next]</A><P>

<A NAME="473"><h1>The Slider Control</h1></A>

<p>The Slider control provides a way for end users to select a numerical value in a 
range. Conceptually, it's akin to the ScrollBar control, with which it shares many 
properties and events. A major difference is that there's only one kind of Slider control, 
which can create both horizontal and vertical sliders. The Slider control can also work 
in select-range mode, allowing your users to select a range rather than a single value.</P>

<A NAME="474"><h2>Setting Design-Time Properties</h2></A>

<p>Once you drop a Slider control on a form, you should right-click it and select 
the Properties menu command. In the General tab of the Properties custom dialog 
box, you can set the <I>Min</I>, <I>Max</I>, 
<I>SmallChange</I>, and <I>LargeChange</I> properties, which 
have the same meaning and effects as in HScrollBar and VScrollBar controls. In this 
tab, you can also set the <I>SelectRange </I>property, but this operation is most often 
performed at run time. (See &quot;<A HREF="#477">Employing the SelectRange Mode</A>&quot; later in this section.)</P>

<p>In the Appearance tab, you set a few properties that are peculiar to this 
control. The <I>Orientation </I>property lets you set the direction of the slider. The 
<I>TickStyle </I>property lets you select whether the slider has unit ticks and where they 
appear. (Valid values are 0-sldBottomRight, 1-sldTopLeft, 2-sldBoth, and 3-sldNoTicks.) 
The <I>TickFrequency </I>property indirectly determines how many ticks will be displayed. 
For example, if <I>Min </I>is 0 and <I>Max </I>is 10 (the default settings), a 
<I>TickFrequency </I>that equals 2 displays 6 ticks. The 
<I>TextPosition </I>property lets you decide where the 
ToolTip appears. (See &quot;<A HREF="#476">Showing the Value as a ToolTip</A>&quot; later in this section.)</P>

<A NAME="475"><h2>Run-Time Operations</h2></A>

<p>For most practical purposes, you can deal with a Slider control at run time as if it 
were a scroll bar control: Slider controls expose the 
<I>Value </I>property and the <I>Change </I>and 
<I>Scroll </I>events, exactly as scroll bars do. The following brief sections describe 
two features of the Slider control that are missing from the scroll bar controls. </P>

<A NAME="476"><h3>Showing the value as a ToolTip</h3></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>Slider controls can display ToolTip text that follows the indicator when it's 
being dragged by the user. You can control this new Visual Basic 6 feature using two 
properties, <I>Text </I>and <I>TextPosition</I>. The former is the string that appears in the 
ToolTip window; the latter determines where the ToolTip appears with respect to the 
indicator. (Possible values are 0-sldAboveLeft and 1-sldBelowRight.) You can also set 
the <I>TextPosition </I>property at design time in the Appearance tab of the Property 
Pages dialog box.</P>

<p>You generally use these properties to show the current value in a 
ToolTip window near the indicator. To do so, you need just one statement in the 
<I>Scroll </I>event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Slider1_Scroll()
    Slider1.Text = &quot;Value = &quot; &amp; Slider1.Value
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="477"><h3>Employing the SelectRange mode</h3></A>

<p>The Slider control supports the ability to display a range instead of an individual 
value, as you can see in Figure 10-25. To display a range, you use a number of 
properties together. First of all, you enter select range mode by setting the 
<I>SelectRange </I>property to True&#8212;for example, when users click on the control while they're pressing 
the Shift key.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim StartSelection As Single 

Private Sub Slider1_MouseDown(Button As Integer, Shift As Integer, _
    x As Single, y As Single)
    If Shift = vbShiftMask Then
        ' If the shift key is being pressed, enter select range mode.
        Slider1.SelectRange = True
        Slider1.SelLength = 0
        StartSelection = Slider1.Value
    Else
        ' Else cancel any active select range mode.
        Slider1.SelectRange = False
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>
<A HREF="javascript:fullSize('F10ph25x.htm')"> <img src="F10ph25.JPG" width=404 height=345 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-25.</B> <i>You can use a Slider control to select a range, and you can also display a ToolTip beside the indicator being dragged.</i><!--/caption-->
</p>

<P>After you enter the select range mode, you can control the interval being 
highlighted by means of the <I>SelStart </I>and 
<I>SelLength </I>properties. You do this in the 
<I>Scroll </I>event procedure. Because <I>SelLength 
</I>can't be negative, you must account for two distinct cases:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Slider1_Scroll()
    If Slider1.SelectRange Then
        ' The indicator is being moved in SelectRange mode.
        If Slider1.Value &gt; StartSelection Then
            Slider1.SelStart = StartSelection
            Slider1.SelLength = Slider1.Value - StartSelection
        Else
            Slider1.SelStart = Slider1.Value
            Slider1.SelLength = StartSelection - Slider1.Value
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>



<a name="A66"></a><h3>6.2.9 The ImageCombo Control</h3>

<A HREF="#A65">[Previous]</A> <A HREF="#A67">[Next]</A><P>

<A NAME="478"><h1>The ImageCombo Control</h1></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The ImageCombo control is new to Visual Basic and is one of the few 
controls introduced in Visual Basic 6. In a nutshell, the ImageCombo control is a combo 
box that supports images and a different indentation for each individual item. This is 
the same control that Windows uses internally for its file common dialog boxes.</P>

<P>From the programmer's point of view, the main difference between 
the ImageCombo control and the standard ComboBox control is that the 
ImageCombo control uses an object-oriented architecture and exposes the ComboItems 
collection, which in turn contains ComboItem objects.</P>

<A NAME="479"><h2>Setting Design-Time Properties</h2></A>

<p>An ImageCombo control is so similar to a standard ComboBox control that it 
makes sense to describe only the few differences between them. At design time, you 
need to set only two properties. The <I>ImageList 
</I>property is a reference to the ImageList control that contains the images to be displayed beside each ComboItem object. 
The <I>Indentation </I>property sets the default indentation for all ComboItem objects, 
expressed as a number of indentation units, where each unit is 10 pixels. Individual 
ComboItem objects can provide a different value for this property, thus overwriting the 
default value set in the Properties window at design time or through code at run time.</P>

<P>Like, ComboBox controls, ImageCombo controls can be bound to a data 
source and therefore support all the usual 
<I>Data</I>xxxx properties.</P>

<A NAME="480"><h2>Run-Time Operations</h2></A>

<p>The ImageCombo control exposes many of the properties supported by the 
regular ComboBox control, including 
<I>ForeColor</I>, <I>BackColor</I>, <I>Text</I>, 
<I>SelText</I>, <I>SelStart</I>, <I>SelLength</I>, and 
<I>Locked. </I>The ImageCombo control doesn't expose any events other than the 
ones supported by ComboBox.</P>

<P>You see the difference between an ImageCombo control and a ComboBox 
control when it's time to add items to the control. The ImageCombo control 
doesn't support the <I>AddItem </I>method. Instead, you add items using the 
<I>Add</I> method of the ComboItems collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index],[Key],[Text],[Image],[SelImage],[Indentation]) As ComboItem
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>determines where the new ComboItem is inserted, 
<I>Key</I> is its key in the collection, 
<I>Text</I> is the string that appears in the control, 
<I>Image</I> is the associated image (an index or a key in the companion ImageList control), 
<I>SelImage</I> is the image displayed when the item is selected, and 
<I>Indentation</I> is the indentation level. (Each unit is 10 pixels.) This syntax allows you to add a new ComboItem and set all 
its properties in one operation. Here's a routine that loads all the drive letters and 
volume labels in an ImageCombo control, as you can see in Figure 10-26:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub LoadDrivesIntoImageCombo(ImgCombo As ImageCombo)
    Dim fso As New Scripting.FileSystemObject, dr As Scripting.Drive
    Dim drLabel As String, drImage As String
    ' Assume that the ImageCombo control is linked to an ImageList
    ' control that includes three icons with the following key names.
    ImgCombo.ComboItems.Add , , &quot;My Computer&quot;, &quot;MyComputer&quot;
    For Each dr In fso.Drives
        ' Use a different image for each type of drive.
        Select Case dr.DriveType
            Case Removable:  drImage = &quot;FloppyDrive&quot;
            Case CDRom:      drImage = &quot;CDDrive&quot;
            Case Else:       drImage = &quot;HardDrive&quot;
        End Select
        ' Retrieve the letter and (if possible) the volume label.
        drLabel = dr.DriveLetter &amp; &quot;: &quot;
        If dr.IsReady Then
            If Len(dr.VolumeName) Then drLabel = drLabel &amp; &quot;[&quot; &amp; _
                dr.VolumeName &amp; &quot;]&quot;
        End If
        ' Add an indented item to the combo.
        ImgCombo.ComboItems.Add , dr.DriveLetter, drLabel, drImage, , 2
    Next
    ' Select the current drive.
    Set ImgCombo.SelectedItem = ImgCombo.ComboItems(Left$(CurDir$, 1))
 End Sub
</pre>
</td></tr>
</table>
</p>


<p>
<img src="F10ph26.GIF" width=313 height=312 border="0">
<p>
<!--caption--><B>Figure 10-26.</B> <i>The ImageCombo demonstration program shows information about all the drives in the system.</i><!--/caption-->


<P>You can choose from two ways to select a ComboItem object through code: 
You can use the <I>SelectedItem </I>property of the ImageCombo control (as shown in the 
preceding routine), or you can set the <I>Selected 
</I>property of an individual ComboItem object:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select the current drive (alternative method).
Set ImgCombo.ComboItems(Left$(CurDir$, 1)).Selected = True
</pre>
</td></tr>
</table>
</p>


<p>An interesting effect of dealing with individual ComboItem objects is that 
you can modify their <I>Text </I>properties without having to remove and add them again, 
as you would do with a standard ComboBox:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change the text of the first item.
ImgCombo.ComboItems(1).Text = &quot;My Computer&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can delete an individual ComboItem using the 
<I>Remove</I> method of the ComboItems collection, and you can delete all the items using the collection's 
<I>Clear </I>method.</P>

<P>The ImageCombo control exposes only one custom method, 
<I>GetFirstVisible</I>, which returns a reference to the first ComboItem object in the list portion of 
the control. There isn't much that you can do with this method, however, because 
you have no way to set the first visible item and therefore you can't programmatically 
scroll the contents of the list area.</P>

<p>This concludes the description of all the controls embedded in the file 
MsComCtl.ocx. In the <a href="#A67">next chapter</a>, I'll describe all the other Windows common controls 
provided with Visual Basic 6.</P>

<a name="A67"></a><h2>6.3 Chapter 11 -- Windows Common Controls: Part II</h2>

<A HREF="#A66">[Previous]</A> <A HREF="#A68">[Next]</A><P>


<font size="+3">Chapter 11</font>

<A NAME="481"><h1>Windows Common Controls: Part II</h1></A>
<p>This chapter examines the Microsoft Windows common controls provided in 
the MsComCt2.ocx and ComCt332.ocx files. More specifically, the MsComCt2.ocx file 
embeds the Animation, UpDown, MonthView, DateTimePicker, and FlatScrollBar 
controls, whereas the ComCt332.ocx file includes only the CoolBar control. </p>


<a name="A68"></a><h3>6.3.1 The Animation Control</h3>

<A HREF="#A67">[Previous]</A> <A HREF="#A69">[Next]</A><P>

<A NAME="482"><h1>The Animation Control</h1></A>
<p>The Animation control can play back AVI files so that you can add simple 
animations to your program. This control supports only AVI files that don't include sound 
and that aren't in compressed form or that have been compressed using 
Run-Length Encoding (RLE). Any attempt to play back an AVI file that doesn't follow these 
rules brings up error message 35752, &quot;Unable to open AVI file.&quot; </p>

<p>The Animation control is especially useful for embedding simple 
animations, such as those that you find in the \Common\Graphics\AVIs subdirectory under 
the main Microsoft Visual Basic installation directory. For example, you can use 
this control to display sheets of paper that fly from one folder to another folder while 
you perform a file copy operation in the background, as shown in Figure 11-1.</p>

<p>
<A HREF="javascript:fullSize('F11ph01x.htm')"> <img src="F11ph01.JPG" width=404 height=152 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-1.</B> <i>A demonstration program provided on the companion CD-ROM lets you experiment with the Animation control.</i><!--/caption-->
</p>

<p>The Animation control exposes three main properties. Two of them, 
<I>Center</I> and <I>BackStyle</I>, can be set only at design time, and are read-only at run time. If the 
<I>Center </I>property is True, the AVI file is centered in the Animation control window 
(instead of being displayed near the upper left corner). The 
<I>BackStyle </I>property can be 0cc2BackstyleTransparent (the default setting, which displays the background 
color of the control) or 1-cc2BackstyleOpaque (displays the background of the AVI 
file). The third property, <I>AutoPlay</I>, can be set at any time. You set it to True to 
automatically start the playback of any AVI file as soon as it's loaded in the control. (If 
you make this setting, you must set <I>AutoPlay 
</I>to False through code to stop playback).</p>

<p>No design-time property determines which AVI file is loaded and displayed 
at run time. To start an animation through code, you must first open the AVI file, 
which you do using the <I>Open </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Animation1.Open &quot;d:\vb6\Graphics\AVIs\filecopy.avi&quot;
</pre>
</td></tr>
</table></p>

<p>If the <I>AutoPlay </I>property is True, the AVI file starts as soon as it has been 
loaded in the control. Otherwise, you have to start it through code with the 
<I>Play </I>method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Play [RepeatCount], [StartFrame], [EndFrame]
</pre>
</td></tr>
</table></p>

<p><I>RepeatCount</I> is the number of times the animation must run. (The default is 
-1, which repeats the animation indefinitely.) 
<I>StartFrame</I> is the starting frame of the animation (the default is 0, the first frame). 
<I>EndFrame</I> is the ending frame of the animation (the default is -1, the last frame in the AVI file).</p>

<p>You can choose from two ways to stop an animation, and you must select 
one or the other according to the method you used to start it. If the animation is in 
AutoPlay mode, you can stop it only by setting the 
<I>AutoPlay</I> property to False; if you started the animation with the 
<I>Play </I>method, you can stop it with the <I>Stop 
</I>method. If you don't plan to restart the same AVI file immediately, you can release some memory by 
executing the <I>Close </I>method, as shown in the following code (which assumes that 
the <I>AutoPlay </I>property is False):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdStart_Click()
    Animation1.Open &quot;d:\vb5\graphics\AVIs\filecopy.avi&quot;
    Animation1.Play
End Sub
Private Sub cmdStop_Click()
    Animation1.Stop
    Animation1.Close
End Sub
</pre>
</td></tr>
</table></p>

<p>The Animation control doesn't expose any custom events. This means, 
for example, that you can't find out when an animation ends.</p>


<a name="A69"></a><h3>6.3.2 The UpDown Control</h3>

<A HREF="#A68">[Previous]</A> <A HREF="#A70">[Next]</A><P>

<A NAME="483"><h1>The UpDown Control</h1></A>
<p>The UpDown control offers a simple but effective way to create those spin 
buttons that many Windows applications display to the right of numeric fields and that 
let users increment or decrement a field's value using mouse clicks. While it's a 
trivial matter to create such spin buttons yourself&#8212;using a tiny VScrollBar control, for 
example, or using two smaller buttons with <I>Style 
</I>= 1-Graphical&#8212;the UpDown control offers many advantages and is far easier to set up and use than any other solution.</p>

<p>The most intriguing characteristic of the UpDown control is that you can 
link it to another control&#8212;its <I>buddy 
control&#8212;</I>at design time, and you can even 
select which particular property of the buddy control is affected by the UpDown 
control. Add to this the ability to set the scrolling range and the increment, and you see 
that in most cases you don't even need to write code to make everything work as expected.</p>

<A NAME="484"><h2>Setting Design-Time Properties</h2></A>
<p>In the General tab of an UpDown control, you typically set the 
<I>Alignment </I>property, which determines where the UpDown control has to align with respect 
to its buddy control. (The values are 0-cc2AlignmentLeft and 
1-cc2AlignmentRight.) In this tab, you also set the 
<I>Orientation</I> property (0-cc2OrientationVertical 
or 1cc2OrientationHorizontal). The 
<I>Orientation</I> property can be set only at design 
time and is read-only at run time.</p>

<p>You select the buddy control in the Buddy tab of the Property Pages dialog 
box. (See Figure 11-2.) You can either type the control's name 
in the first field or tick the <I>AutoBuddy </I>check box. In the latter case, the UpDown 
control automatically selects the previous control in the TabIndex sequence as its 
buddy control. After you've selected a buddy control, two other fields on the Property 
Pages dialog box become available. In the BuddyProperty combo box, you 
select which property of the buddy control is affected by the UpDown control. (If you don't 
select any, the buddy control's default property is 
used.) You can set the <I>SyncBuddy </I>property to True, which causes the UpDown control to automatically modify 
the selected property in its buddy control.</p>

<p>You usually select a TextBox control as the buddy control of an UpDown 
control and <I>Text </I>as the buddy property. But nothing prevents you from connecting 
an UpDown control to other properties (for example, 
<I>Left </I>or <I>Width</I>) exposed by other 
types of controls. You can't use lightweight windowless controls as buddy controls, however.</p>

<p>
<A HREF="javascript:fullSize('F11ph02x.htm')"> <img src="F11ph02.JPG" width=404 height=293 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-2.</B> <i>The Buddy tab of the Property Pages dialog box of an UpDown control lets you select the buddy control and the buddy property.</i><!--/caption-->
</p>

<p>Finally, in the Scrolling tab of the Property Pages dialog box, you select 
the UpDown control's <I>Min </I>and <I>Max </I>properties, which identify the valid range for 
the <I>Value </I>property. The <I>Increment </I>property is the value that's added to or subtracted 
from the <I>Value </I>property when the user clicks on the UpDown control's spin buttons. 
If the <I>Wrap </I>property is set to True, the 
<I>Value </I>property wraps when it reaches the 
<I>Min </I>or <I>Max </I>value.</p>

<A NAME="485"><h2>Run-Time Operations</h2></A>
<p>If the UpDown control's <I>SyncBuddy </I>property is set to True, you don't need to 
write any code to manually change the property in the buddy control. There are 
cases, however, when you can't rely on this simple mechanism. For example, the 
UpDown control might have no buddy controls or perhaps it's supposed to affect 
multiple controls or multiple properties of the same control. (For example, you might 
need to enlarge or shrink another control by affecting its 
<I>Width </I>and <I>Height </I>properties at the same time.) In such cases, all you have to do is write code inside the 
<I>Change </I>event procedure, as you would do for a scroll bar control.</p>

<p>The UpDown control exposes two custom events that give you even more 
flexibility: The <I>DownClick </I>and <I>UpClick 
</I>events, which fire when the mouse is released 
(that is, after the <I>Change </I>event) on either one of the buttons that make up the 
UpDown control. These events fire even if the <I>Value 
</I>property has already reached its <I>Min </I>or 
<I>Max</I>, which makes <I>DownClick </I>and 
<I>UpClick</I> events useful<I> </I>when you don't want 
to enforce a limit to the range of valid values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Move all controls on the form pixel by pixel.
Private Sub UpDown1_DownClick()
    Dim ctrl As Control
    For Each ctrl In Controls
        ctrl.Top = ctrl.Top + ScaleY(1, vbPixels, vbTwips)
    Next
End Sub
Private Sub UpDown1_UpClick()
    Dim ctrl As Control
    For Each ctrl In Controls
        ctrl.Top = ctrl.Top - ScaleY(1, vbPixels, vbTwips)
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>All the properties that you set at design time can also be modified at run 
time through code, with the exception of the <I>Orientation 
</I>property. For example, you can change the buddy control and the buddy property using this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set UpDown1.BuddyControl = Text2
UpDown1.BuddyProperty = &quot;Text&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>BuddyControl </I>property can also be assigned the name of the buddy 
control, for example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
UpDown1.BuddyControl = &quot;Text2&quot;
' This syntax even works with items of control arrays.
UpDown1.BuddyControl = &quot;Text3(0)&quot;
</pre>
</td></tr>
</table></p>

<p>When you change the buddy control at run time, the UpDown control 
automatically moves to a position beside its buddy control, which shrinks to make 
room for the UpDown control.</p>


<a name="A70"></a><h3>6.3.3 The FlatScrollBar Control</h3>

<A HREF="#A69">[Previous]</A> <A HREF="#A71">[Next]</A><P>

<A NAME="486"><h1>The FlatScrollBar Control</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>The FlatScrollBar control is a replacement for the intrinsic HScrollBar and 
VScrollBar controls: You can substitute an HScrollBar or VScrollBar control with a 
FlatScrollBar control with the same name, and the program continues to work as before. 
This control can work as either a horizontal or a vertical scroll bar, according to the value 
of its <I>Orientation </I>property. This property can be also modified at run time.</p>

<p>You can set all the properties specific to the FlatScrollBar control at design 
time, as shown in Figure 11-3. This control supports three 
graphic styles: flat, tridimensional (similar to intrinsic scroll bar controls), and Track3D (a 
flat scroll bar that becomes tridimensional when the mouse passes over it, much like 
the scroll bars in Microsoft Encarta). You can select the graphic style at design 
time by setting the <I>Appearance </I>property to one of these values: 0-fsb3D, 1-fsbFlat, 
or 2fsbTrack3D.</p>

<p>
<A HREF="javascript:fullSize('F11ph03x.htm')"> <img src="F11ph03.JPG" width=404 height=257 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-3.</B> <i>The General tab of the Property Pages dialog box of a FlatScrollBar control.</i><!--/caption-->
</p>

<p>The <I>Arrows</I> property lets you selectively enable one or both arrows at the 
ends of the bar, using the values 1-cc2LeftUp or 2-cc2RightDown; the default value 
0-cc2Both enables both arrows. The <I>Min</I>, 
<I>Max</I>, <I>LargeChange</I>, <I>SmallChange</I>, and 
<I>Value </I>properties have the same meaning they have with HScrollBar and VScrollBar controls.</p>

<p>At run time, you react to users' actions on a FlatScrollBar control as you 
would do with a regular scroll bar; that is, by executing code in 
<I>Change </I>and <I>Scroll </I>events. The only property of the FlatScrollBar that you might reasonably want to modify 
at run time is <I>Arrows&#8212;</I>for example, to disable the appropriate arrow when the 
scroll bar has reached it minimum or maximum value. You usually do this in the 
<I>Change </I>event procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub FlatScrollBar1_Change()
    ' This is a horizontal FlatScrollBar.
    If FlatScrollBar1.Value = FlatScrollBar1.Min Then
        FlatScrollBar1.Arrows = cc2RightDown
    ElseIf FlatScrollBar1.Value = FlatScrollBar1.Max Then
        FlatScrollBar1.Arrows = cc2LeftUp
    Else
        FlatScrollBar1.Arrows = cc2Both
    End If
End Sub
</pre>
</td></tr>
</table></p>


<a name="A71"></a><h3>6.3.4 The MonthView Control</h3>

<A HREF="#A70">[Previous]</A> <A HREF="#A72">[Next]</A><P>

<A NAME="487"><h1>The MonthView Control</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 comes with two new common controls for dealing with dates: 
The MonthView control and the DateTimePicker control. The former is a 
calendarlike control, and the latter is a text box control for entering dates and times. The two 
are closely related in that the DateTimePicker control uses a MonthView control 
when the user drops down a calendar for selecting a date.</p>

<A NAME="488"><h2>Setting Design-Time Properties</h2></A>
<p>After you place a MonthView control on a form, you can right-click on it to 
display its custom Property Pages dialog box, shown in Figure 11-4. The 
<I>Value </I>property is the date highlighted in the control. (By the way, click on the Down arrow to the 
right of the <I>Value</I> field to get a taste of what a DateTimePicker control is.) 
<I>MinDate</I> and <I>MaxDate </I>set the range of valid dates that can be selected in the MonthView 
control; the <I>StartOfWeek </I>property determines the weekday that appears in the leftmost 
column in the calendar.</p>

<p>
<A HREF="javascript:fullSize('F11ph04x.htm')"> <img src="F11ph04.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-4.</B> <i>Setting design-time properties of a MonthView control.</i><!--/caption-->
</p>

<p>A number of Boolean properties affect the appearance and the behavior of 
the control. If <I>ShowWeekNumbers </I>is True, the MonthView control displays the 
number of weeks elapsed since the beginning of the year. If 
<I>MultiSelect</I> is True, the user is allowed to select a range of dates: In this case, the maximum number of 
consecutive days that can be selected is equal to the value of the 
<I>MaxSelCount </I>property. (The default is one week.) The 
<I>ShowToday</I> property lets you decide whether the 
Today legend should be displayed.</p>

<p>The MonthView control can display up to 12 months, and the number of 
displayed months is the product of the properties 
<I>MonthRows </I>and <I>MonthColumns</I>. By default, when the user clicks on the arrow buttons the control scrolls a number 
of months equal to the months displayed in the control, but you can modify this 
behavior by assigning a nonzero value to the <I>ScrollRate 
</I>property.</p>

<p>The MonthView control exposes many properties that are related to 
foreground and background colors, and it's easy to confuse them. Refer to Figure 11-5 to understand how you can use the 
<I>ForeColor</I>, <I>TitleForeColor</I>, 
<I>TitleBackColor</I>, <I>MonthBackColor</I>, 
and<I> TrailingForeColor </I>properties. (<I>Trailing 
days</I> are those days that belong to previous or next months.) The 
<I>MonthBackColor</I> property also affects the color of weekday names and numbers. Oddly, the control also 
exposes the standard <I>BackColor </I>property, but it doesn't appear to have any other 
effect than coloring a line of pixels near the bottom and right borders.</p>

<p>
<img src="F11ph05x.gif" width=406 height=261 border=0>
</p><p>
<!--caption--><B>Figure 11-5.</B> <i>You can modify the colors used by individual areas in a MonthView control.</i><!--/caption-->
</p>

<p>Among the many design-time properties, you might notice in particular 
the <I>DataSource</I>, <I>DataField</I>, 
<I>DataMember</I>,<I> </I>and <I>DataFormat </I>properties. In fact, 
MonthView is a data-aware control that can be bound to any 
<I>Date</I> field exposed by a standard Data control, a RemoteData control, or any ADO data source.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
If you're going to localize your application to other languages, 
you'll be glad to know that the MonthView control automatically adapts itself to 
the user's locale and correctly translates all the month and day names. There's 
only a minor bug in this implementation: The Today legend isn't localized, so 
you should set the <I>ShowToday </I>property to False and provide a legend 
elsewhere on the form.
</blockquote></div></p>

<A NAME="489"><h2>Run-Time Operations</h2></A>
<p>Users can act on the MonthView control in several ways, a few of which aren't 
immediately apparent. Most people can easily figure out that users can move to the 
next or previous month by clicking on one of the two arrows near the control's title 
and that they can select a date simply by clicking on it. Some users will even figure 
out that they can select a range of dates (if <I>MultiSelect 
</I>is True) by clicking on a date while pressing the Shift key. 
I doubt, however, that many users guess that a click on 
the month's name in the control's title displays a pop-up menu that lets them move 
to any month in the current year. Even more counter-intuitive is that a click on 
the year number displays two spin buttons that can take a user to any year, future or 
past. (See Figure 11-6.) Don't forget to mention these hidden features in your 
program's documentation, or even better, show their usage in a Label control on the same 
form as the MonthView control.</p>

<p>
<A HREF="javascript:fullSize('F11ph06x.htm')"> <img src="F11ph06.JPG" width=404 height=292 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-6.</B> <i>The demonstration program lets you experiment with all the advanced features of the MonthView control. The spin buttons in the title area appear if you click on the year number.</i><!--/caption-->
</p>

<A NAME="490"><h3>Retrieving the current Date value</h3></A>
<p>Unless you need to perform special operations, using the MonthView control in 
code is straightforward. The control exposes the 
<I>Value </I>property, which you can assign to highlight a given date or read to retrieve the day selected by the user. You don't 
even need to extract the day, month, or year portions from the 
<I>Value </I>property because the control exposes also the 
<I>Day</I>, <I>Month</I>, and <I>Year</I> properties. Conveniently, 
these properties can be assigned too&#8212;for example, you can programmatically display 
the next month using this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If MonthView1.Month &lt; 12 Then
    MonthView1.Month = MonthView1.Month + 1
Else
    MonthView1.Month = 1
    MonthView1.Year = MonthView1.Year + 1
End If
</pre>
</td></tr>
</table></p>

<p>The <I>DayOfWeek </I>property returns the weekday number of the selected date. 
Also, this property is writable, so, for example, you can highlight Monday in the 
current week using the following single statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
MonthView1.DayOfWeek = vbMonday
</pre>
</td></tr>
</table></p>

<p>Be aware, however, that <I>Day</I>, 
<I>Month</I>, <I>Year</I>, and <I>DayOfWeek </I>properties can't 
be assigned if <I>MultiSelect </I>is True.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
While experimenting with the MonthView control, I've 
discovered an unexpected behavior: If the control has the focus and you click on 
another control on the same form, the other control gets the focus but not the 
<I>Click</I> event. This might puzzle your users, much as it confused me when I realized that if 
the focus is on a MonthView control, a click on push buttons doesn't yield the 
expected results. This bug will probably be fixed in a future service pack. In 
the meantime, the workaround to this problem is really cumbersome, to say the 
least, and relies on the <I>MouseDown </I>event instead of the 
<I>Click </I>event:
</blockquote></div></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim MousePressed As Boolean       ' A form-level variable

Private Sub cmdTryMe_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    MousePressed = True
    Call DoSomething
End Sub
Private Sub cmdTryMe_MouseUp(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    MousePressed = False
End Sub
Private Sub cmdTryMe_Click()
    ' This event might be called as a response to a hot key 
    ' or a click when the focus isn't on the MonthView control.
    If Not MousePressed Then Call DoSomething
End Sub
Private Sub DoSomething()
    ' The code that must execute when the button is clicked
    MsgBox &quot;Button has been clicked!&quot;
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="491"><h3>Reacting to range selections</h3></A>
<p>You can set the <I>MinDate </I>and <I>MaxDate 
</I>property to limit the range of date values 
that the user can select. If the <I>MultiSelect 
</I>property is True, you can select a number of consecutive dates. You retrieve the selected range using the 
<I>SelStart </I>and <I>SelEnd </I>properties. (These properties return Date values.) The maximum number of days in 
the selected range depends on the value of the <I>MaxSelCount 
</I>property.</p>

<p>Each time the user selects a new date, a custom 
<I>SelChange </I>event fires. This event receives the start date and end date of the selected range and enables the 
programmer to cancel the operation. For example, you can refuse a selection that includes 
a weekend day:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub MonthView1_SelChange(ByVal StartDate As Date, _
    ByVal EndDate As Date, Cancel As Boolean)
    Dim d As Date
    ' A Date variable can be used to control a For loop.
    For d = StartDate To EndDate
        If Weekday(d) = vbSunday Or Weekday(d) = vbSaturday Then
            ' Cancel the selection if the day is Sunday or Saturday.
            Cancel = True
            Exit For
        End If
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
The MonthView control suffers from a bug. Unless the user 
has selected three or more dates, setting the 
<I>Cancel</I> parameter to True doesn't actually cancel the operation. This bug will probably be fixed in future versions 
of the control, but currently there isn't any simple workaround for it. (I'm 
currently using version 6.00.8177 of the MsComCt2.ocx file.)
</blockquote></div></p>

<p>Two other custom events, <I>DateClick </I>and 
<I>DateDblClick</I>, fire when the user selects a new date. When a user clicks on a date, your Visual Basic application 
receives a <I>SelChange </I>event and then a <I>DateClick 
</I>event. If a date is double-clicked, your code receives 
<I>SelChange</I>, <I>DateClick</I>, 
<I>DateDblClick</I>,<I> </I>and <I>DateClick </I>events, in this order, 
so you should account for the fact that a double-click also fires two 
<I>DateClick </I>events. Both events receive one argument, the date being clicked or double-clicked:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub MonthView1_DateDblClick(ByVal DateDblClicked As Date)
    Dim descr As String
    descr = InputBox(&quot;Enter a description for day &quot; &amp; _
        FormatDateTime(DateDblClicked, vbLongDate))
    If Len(descr) Then
        ' Save the description (omitted) ...
        ' ...
    End If
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="492"><h3>Finding the optimal size</h3></A>
<p>The MonthView control gives you several ways, apart from its many color 
properties, to affect the control's appearance. For example, you can show up to 12 
months in the control by assigning suitable values to the 
<I>MonthRows</I> and <I>MonthColumns </I>properties. Changing these properties at run time, however, can cause a problem 
in that you have no control over a MonthView's size (which depends on the 
number of months displayed, the font used, the presence of a border, and other settings). 
To help you determine the best values for the 
<I>MonthRows</I> and <I>MonthColumns </I>properties, the MonthView control supports the 
<I>ComputeControlSize </I>method. This method takes as arguments the number of rows and columns and returns the computed 
width and height of the corresponding MonthView control in its third and fourth argument.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Evaluate the size of a MonthView control with 2 rows and 3 columns
Dim wi As Single, he As Single
MonthView1.ComputeControlSize 2, 3, wi, he
</pre>
</td></tr>
</table></p>

<p>The <I>ComputeControlSize </I>method comes in handy when you want to display 
the highest number of months in a form. The following routine has been extracted 
from the demonstration program provided on the companion CD:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdTile_Click()
    ' Find the best value for MonthRows and MonthColumns.
    Dim rows As Integer, cols As Integer
    Dim wi As Single, he As Single
    For rows = 6 To 1 Step -1
        ' Note how we avoid creating more than 12 months.
        For cols = 12 \ rows To 1 Step -1
            MonthView1.ComputeControlSize rows, cols, wi, he
            If wi &lt;= ScaleWidth _ MonthView1.Left And _
                he &lt; ScaleHeight _ MonthView1.Top Then
                MonthView1.MonthRows = rows
                MonthView1.MonthColumns = cols
                Exit Sub
            End If
        Next
    Next
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="493"><h3>Highlighting dates</h3></A>
<p>The MonthView control lets the programmer draw attention to dates in the 
calendar by displaying them with a bold attribute. You could use this feature whenever 
the contents of the control changes by writing code in the 
<I>GetDayBold </I>event procedure, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Display all Sundays and major holidays in boldface.
Sub MonthView1_GetDayBold(ByVal StartDate As Date, _
    ByVal Count As Integer, State() As Boolean)
    Dim i As Long, d As Date
    d = StartDate
    For i = 0 To Count - 1
        If Weekday(d) = vbSunday Then
            State(i) = True          ' Mark all Sundays.
        ElseIf Month(d) = 12 And Day(d) = 25 Then
            State(i) = True          ' Xmas time.
        Else
            ' Deal here with other holidays...
        End If
        d = d + 1
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>The <I>GetDayBold </I>event receives three parameters: 
<I>StartDate </I>is a Date value that corresponds to the first day displayed in the control (this includes trailing days, 
which are the days that belong to the previous month), 
<I>Count </I>is the number of visible days, and 
<I>State </I>is a zero-based Boolean array with 
<I>Count </I>elements. Thus, to enforce a bold attribute to a given date, you only have to assign True to the corresponding item 
in the <I>State </I>array.</p>

<p>Alternatively, you can modify the bold attribute for any date that's 
currently displayed in the control by writing code outside the 
<I>GetDayBold </I>event procedure. You do this using 
<I>VisibleDays </I>and <I>DayBold </I>properties. The 
<I>VisibleDays </I>property accepts an index in the range from 1 to the number of visible days and returns 
the Date value that corresponds to that day. The problem with this property is that 
there's no easy way to know in advance how many days are visible in the control and 
therefore what the highest value for the index is. The Visual Basic documentation 
incorrectly states that the index must be in the range from 1 through 42, but this 
doesn't take into account the MonthView control's ability to display multiple months. 
The simplest way to deal with this issue is to set up an error handler, as in the 
following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
    Dim tmpDate As Date
    ' Exit the loop when the index isn't valid any longer.
    On Error GoTo EndTheLoop
    For i = 1 To 366
        ' Visit each day.
        tmpDate = MonthView1.VisibleDays(i)
    Next
EndTheLoop:
    ' Get here when the index becomes invalid.
</pre>
</td></tr>
</table></p>

<p>The <I>VisibleDays </I>property returns a Date value whose fractional portion is 
equal to the current time on your system. This undocumented behavior can get in the 
way when you compare the returned value to a Date constant or variable.</p>

<p>The <I>DayBold </I>property takes as an argument a Date value that corresponds 
to a visible day and sets or returns the bold attribute for that day. This property lets 
you mark a number of days at the same time even if you aren't processing a 
<I>GetDayBold </I>event. You typically use the <I>DayBold 
</I>property together with the <I>VisibleDays 
</I>property, as in the following piece of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdMark_Click()
    Dim i As Integer
    On Error GoTo EndOfLoop
    For i = 1 To 999
        ' Mark all Fridays.
        If Weekday(MonthView1.VisibleDays(i)) = vbFriday Then
            MonthView1.DayBold(MonthView1.VisibleDays(i)) = True
        End If
    Next
EndOfLoop:
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="494"><h3>Implementing drag-and-drop</h3></A>
<p>The MonthView control is an ideal source for drag-and-drop operations because 
it permits you to copy a date value to any other control that accepts a string 
through this mechanism. The key for a correct implementation of drag-and-drop is the 
<I>HitTest </I>method, the syntax of which is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Area = MonthView1.HitTest(X, Y, HitDate)
</pre>
</td></tr>
</table></p>

<p><I>Area </I>is an integer that indicates which area of the control the 
<I>x </I>and<I> y</I> coordinates correspond to. (See the Visual Basic documentation or the demonstration 
program's source code on the companion CD for a list of all possible return values.) When 
the function returns the value 4-mvwCalendarDay, the 
<I>HitDate </I>variable is assigned the Date value of the day in the calendar at 
<I>x</I> and<I> y</I> coordinates. With this method, 
you'll find it easy to implement an effective drag-and-drop routine. The following code 
is taken from the demonstration program shown in Figure 11-6:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Start a drag-and-drop operation.
Private Sub MonthView1_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    ' Exit if the right button isn't clicked.
    If Button &lt;&gt; vbRightButton Then Exit Sub
    ' Exit if mouse isn't over a valid date.
    If MonthView1.HitTest(X, Y, DraggedDate) &lt;&gt; mvwCalendarDay Then 
        Exit Sub
    End If
    ' Now DraggedDate contains the date to be dragged,
    ' and we can start the drag operation.
    MonthView1.OLEDrag
End Sub

Private Sub MonthView1_OLEStartDrag(Data As MSComCtl2.DataObject, _
    AllowedEffects As Long)
    ' When this event fires, DraggedDate contains a valid date.
    Data.SetData Format(DraggedDate, &quot;long date&quot;)
    AllowedEffects = vbDropEffectCopy
End Sub
</pre>
</td></tr>
</table></p>

<p>The preceding code assumes that the <I>OLEDropMode 
</I>property of the control over which the mouse button is released is set to the value 2-Automatic.</p>


<a name="A72"></a><h3>6.3.5 The DateTimePicker Control</h3>

<A HREF="#A71">[Previous]</A> <A HREF="#A73">[Next]</A><P>

<A NAME="495"><h1>The DateTimePicker Control</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>The DateTimePicker control is a text box especially designed for Date or Time 
values. The text box is subdivided into subfields, one for each individual 
component (day, month, year, hour, minute, and second). This control supports all the usual 
date and time formats (including a custom format) and the ability to return a Null 
value (if the user doesn't want to select a particular date). You can even define your 
own custom subfields.</p>

<p>At run time, end users can advance through subfields using the Left and 
Right arrow keys and can increment and decrement their values using the Up and 
Down arrow keys. They can display a drop-down calendar (if the 
<I>UpDown</I> property is set to False) or modify the current value of the highlighted component using the 
companion spin buttons (if the value of <I>UpDown 
</I>is True).</p>

<A NAME="496"><h2>Setting Design-Time Properties</h2></A>
<p>By default, a Down arrow appears to the right of the control, much like a 
regular ComboBox control: A click on the arrow drops down a calendar, which lets 
users select a date without typing any keys. If you set the 
<I>UpDown </I>property to True, however, the Down arrow is replaced by a pair of spin buttons, which let users 
increment or decrement the value of individual subfields using only the mouse.</p>

<p>The <I>CheckBox </I>property, if True, displays a check box near the left border 
of the control: Users can deselect this check box if they don't intend to actually 
select any dates. (See Figure 11-7.)</p>

<p>The DateTimePicker control shares a few properties with the MonthView 
control. For example, it exposes a <I>Value </I>property, which returns the Date value 
entered by the end user, and the <I>MinDate </I>and 
<I>MaxDate </I>properties, which define the interval of valid dates.</p>

<p>The drop-down calendar is nothing but a MonthView control that can show 
only one month at a time. Thus, the DateTimePicker control also exposes all the 
color properties of the MonthView control, even though each now has a different 
name: <I>CalendarForeColor</I>, 
<I>CalendarBackColor</I>, 
<I>CalendarTitleForeColor</I>, 
<I>CalendarTitleBackColor</I>, and 
<I>CalendarTrailingForeColor</I>. Oddly, the control doesn't expose the 
standard <I>ForeColor </I>and <I>BackColor </I>properties, so while you can modify the 
appearance of the drop-down calendar, you can't programmatically change the default colors 
of the edit portion of the control!</p>

<p>The <I>Format </I>property affects what's displayed in the control and can be one 
of the following values: 0-dtpLongDate, 1-dtpShortDate, 2-dtpTime, or 3-dtpCustom. 
If you select a custom format, you can assign a suitable string to the 
<I>CustomFormat </I>property. This property accepts the same formatting strings that you would pass 
to a <I>Format </I>function that works with date or time values. You can use this string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Date is' dddd MMM d, yyy
</pre>
</td></tr>
</table></p>

<p>to display a value such as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Date is Friday Nov 5, 1999
</pre>
</td></tr>
</table></p>

<p>As you see, you can include literal strings by enclosing them within 
single quotation marks. As I'll explain in a moment, the 
<I>CustomFormat </I>property can be used to create custom subfields too.</p>

<p>
<A HREF="javascript:fullSize('F11ph07x.htm')"> <img src="F11ph07.JPG" width=404 height=299 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-7.</B> <i>Different styles of the DateTimePicker control.</i><!--/caption-->
</p>

<p>The DateTimePicker control can be bound to a data source, so it 
exposes the usual <I>DataSource</I>, 
<I>DataMember</I>, <I>DataField</I>, and <I>DataFormat 
</I>properties. The <I>DataFormat</I> property isn't supported when the control is bound to a standard 
Data or RemoteData control, but in either case you can modify the format of the 
displayed value using the <I>Format </I>and <I>CustomFormat 
</I>properties.</p>

<A NAME="497"><h2>Run-Time Operations</h2></A>
<p>At run time, you set and retrieve the contents in the DateTimePicker control 
through the <I>Value </I>property or by means of the 
<I>Year</I>, <I>Month</I>, <I>Day</I>, 
<I>DayOfWeek</I>, <I>Hour</I>, <I>Minute</I>, and 
<I>Second </I>properties. For example, you can programmatically increment the 
month portion of a date displayed in a DateTimePicker control with the following statements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DTPicker1.Month = (DTPicker1.Month Mod 12) + 1
If DTPicker1.Month = 1 Then DTPicker1.Year = DTPicker1.Year + 1
</pre>
</td></tr>
</table></p>

<p>If <I>CheckBox </I>is True and the user has deselected the check box, all 
date-related properties return Null.</p>

<p>The DateTimePicker control exposes many of the events supported by a 
standard TextBox control, including <I>Change</I>, 
<I>KeyDown</I>, <I>KeyPress</I>, <I>KeyUp</I>, 
<I>MouseDown</I>, <I>MouseMove</I>, <I>MouseUp</I>, 
<I>Click</I>, and <I>DblClick</I>. All keyboard and mouse events refer 
to the edit portion of the control and so don't fire when a calendar has been 
dropped down.</p>

<p>When the user clicks on the Down arrow, a <I>DropDown 
</I>event fires just before the drop-down calendar actually appears&#8212;that is, if the 
<I>UpDown</I> property is False (the default value). When the user selects a date in the drop-down calendar, a 
<I>CloseUp </I>event fires. These events aren't particularly useful, however, because you don't have 
much control over the calendar itself, apart from the colors it uses. When the user selects 
a date in the drop-down calendar, the <I>Change 
</I>event fires before the <I>CloseUp </I>event.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Because of a bug in the DateTimePicker control, you can't 
assign both the <I>MinDate </I>and <I>MaxDate </I>properties at run time. When you assign 
either one, the other is assigned the date 12/31/1999. The reason for this odd 
behavior and a possible workaround are explained in article Q198880 of 
Microsoft Knowledge Base.
</blockquote></div></p>

<A NAME="498"><h3>Managing callback fields</h3></A>
<p>The most intriguing feature of the DateTimePicker control is the capability to 
define custom subfields, also known as <I>callback 
fields</I>. To define a callback field, you use a string of one or more 
<I>X</I> characters in the value assigned to the 
<I>CustomFormat </I>property. You can define multiple callback fields by using strings with 
different numbers of <I>X</I>s. For example, the following format defines a date field with two 
callback fields:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DTPicker1.CustomFormat = &quot;MMM d, yyy '(week 'XX')' XXX&quot;
</pre>
</td></tr>
</table></p>

<p>In the code sample that follows, the <I>XX </I>field is defined as the number of 
weeks since January 1, and the <I>XXX </I>field is the name of the holiday, if any, that occurs 
on the displayed date.</p>

<p>When you define a callback field, you're in charge of defining its 
maximum length, its current value, and its behavior (that is, what happens if the user 
presses a key when the caret is on it). You establish the maximum size of a callback field 
in the <I>FormatSize </I>custom event, which fires once for each callback field. If you 
have multiple fields, you must prepare a <I>Select Case 
</I>structure, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub DTPicker1_FormatSize(ByVal CallbackField As String, _
    Size As Integer)
    Select Case CallbackField
        Case &quot;XX&quot;
            ' The number of weeks since January 1st (max 2 digits)
            Size = 2
        Case &quot;XXX&quot;
            ' The name of a holiday, if any
            Size = 16
    End Select
End Sub
</pre>
</td></tr>
</table></p>

<p>When the DateTimePicker control is about to display a date, it raises a 
<I>Format </I>event for each callback field. You return the value of the callback field in 
the <I>FormattedString </I>parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub DTPicker1_Format(ByVal CallbackField As String, _
    FormattedString As String)
    Select Case CallbackField
        Case &quot;XX&quot;
            ' The number of weeks since January 1st (max 2 digits)
            FormattedString = DateDiff(&quot;ww&quot;, _
                DateSerial(DTPicker1.Year, 1, 1), DTPicker1.Value)
        Case &quot;XXX&quot;
            ' The name of a holiday, if any
            If DTPicker1.Month = 12 And DTPicker1.Day = 25 Then
                FormattedString = &quot;Christmas&quot;
            Else
                ' Deal here with other holidays.
            End If
    End Select
End Sub
</pre>
</td></tr>
</table></p>

<p>You can process all the keys pressed when the caret is on a callback field 
by writing code in the <I>CallbackKeyDown </I>event procedure. This event receives 
information about the key being pressed, the state of shift keys, and the name of the 
callback field. Typically, you process the key by assigning a new Date value to 
the <I>CallbackDate </I>parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub DTPicker1_CallbackKeyDown(ByVal KeyCode As Integer, _
    ByVal Shift As Integer, ByVal CallbackField As String, _
    CallbackDate As Date)
    If CallbackField = &quot;XX&quot; Then
        ' Move to the previous/next week when the Up/Down key is pressed.
        If KeyCode = vbKeyUp Then
            CallbackDate = DTPicker1.Value + 7
        ElseIf KeyCode = vbKeyDown Then
            CallbackDate = DTPicker1.Value - 7
        End If
    Else
        ' No keyboard support for the Holiday field
    End If
End Sub
</pre>
</td></tr>
</table></p>


<a name="A73"></a><h3>6.3.6 The Coolbar Control</h3>

<A HREF="#A72">[Previous]</A> <A HREF="#A74">[Next]</A><P>

<A NAME="499"><h1>The CoolBar Control</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>The CoolBar control has been made popular by Microsoft Internet Explorer 
and consists of a collection of bands that can host other controls, typically flat 
Toolbar, TextBox, and ComboBox controls. Users can resize and move bands at run time 
using the mouse and can even change their order. A double-click on a band's handle 
expands the band as much as possible on the row to which it belongs.</p>

<p>The CoolBar control includes a Bands collection, which in turn contains 
one or more Band objects. Each Band object can work as the container for only one 
control, and such a contained control is automatically moved and resized when the 
user moves or resizes the Band container. You can't have a windowless control as a 
child control for a Band object, but you can place a windowless control in another 
container control&#8212;for example, a PictureBox control&#8212;and make the latter a child 
control of the Band. Similarly, you can't have more than one child control per Band 
object, but you can place multiple controls inside the child PictureBox. (In this case, you 
must write the code that resizes the controls inside the PictureBox's 
<I>Resize </I>event.)</p>

<p>The CoolBar control is the only control contained in the ComCt332.ocx 
file. Visual Basic 6 is the first version that includes this control, even though the 
control has been available to Visual Basic 5 programmers for downloading from the Microsoft site.</p>

<A NAME="500"><h2>Setting Design-Time Properties</h2></A>
<p>The CoolBar control is complex and exposes so many design-time properties 
that you'll probably need some time to master all of them.</p>

<A NAME="501"><h3>General properties</h3></A>
<p>After you drop a CoolBar control on a form, first align it to the form's border. 
You do this in the regular Properties window by setting the 
<I>Align </I>property to the value 1-vbAlignTop. All the other design-time properties can be modified within the 
custom Properties dialog box.</p>

<p>The <I>Orientation </I>property lets you set the aspect of the control to 
either 0cc3OrientationHorizonal (the default value) or 1-cc3OrientationVertical. 
The <I>BandBorders</I> property can be set to False if you want to suppress the horizontal 
lines that mark the borders of each Band, but in most cases it's a better idea to leave it 
set to True.</p>

<p>Users can move and resize a Band object at run time by dragging its 
leftmost border, but you can ensure that users aren't allowed to alter the order of Band 
objects by setting the <I>FixedOrder </I>property to True. The 
<I>VariantHeight </I>Boolean<I> </I>property tells whether Band objects can have different heights: If True (the default 
value), the height of each row is determined by the largest 
<I>MinHeight </I>property of all the Band objects in that row; if False, all rows have the same height, which is determined 
by the largest <I>MinHeight </I>property of all the Band objects in the CoolBar control.</p>

<A NAME="502"><h3>Band objects</h3></A>
<p>By default, the CoolBar control has three Band 
objects, but you can add or remove Band objects in the Bands tab of the 
Property Pages dialog box, shown in Figure 11-8. Each Band can be resizable (if the 
<I>Style</I> property is 0cc3BandNormal) or not (if 
<I>Style</I> is 1cc3BandFixedSize). A band of a fixed 
width doesn't display the leftmost resize handle.</p>

<p>A Band object can display a string (the <I>Caption 
</I>property); and it has an initial width (the 
<I>Width</I> property), a minimal width (<I>MinWidth 
</I>property), and a minimal height (<I>MinHeight 
</I>property). It also exposes a <I>Key</I> property, which lets you 
retrieve the Band object from the Bands collection, and a 
<I>Tag</I> property, in which you can store any information related to the Band itself.</p>

<p>
<A HREF="javascript:fullSize('F11ph08x.htm')"> <img src="F11ph08.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-8.</B> <i>The Bands tab of the Properties dialog box of a CoolBar control. Note that the background picture doesn't work well with a child Toolbar.</i><!--/caption-->
</p>

<p>The most important property of a Band object is 
<I>Child</I>, which holds a reference to the child control that's contained in that particular Band. To move a control 
into a Band object, you must first make the control a child of the CoolBar. The 
simplest way to do that is by creating it from the Toolbox inside the CoolBar control. 
After doing that, you'll find the control's name in the list of controls that can be made 
a child of the Band.</p>

<p>By default, a row of Bands hosts as many Bands as possible, and the 
position of each Band object depends on the order of Bands and their minimum widths. 
To change the position of a Band, you can set the 
<I>NewRow </I>property to True to move a Band to the beginning of the next row. Finally you can set the 
<I>AllowVertical </I>property to False to make a Band invisible when the CoolBar control changes its 
orientation to cc3OrientationVertical.</p>

<A NAME="503"><h3>Image and color management</h3></A>
<p>The CoolBar control supports advanced management of colors and pictures. If 
the <I>Picture </I>property hasn't been assigned, the aspect of the control depends on the 
standard <I>ForeColor</I> and <I>BackColor</I> properties. If you assign a bitmap or a metafile to 
the CoolBar's <I>Picture</I> property, this image spreads over all the Bands in the control 
and the <I>BackColor </I>property is ignored.</p>

<p>To let programmers create a user interface identical to the one exposed 
by Microsoft Internet Explorer, the CoolBar control includes three additional 
properties. The <I>EmbossPicture </I>Boolean property determines whether the image should be 
dithered to two colors; if this property is True, the colors used for embossing 
depend on the <I>EmbossHighlight </I>and <I>EmbossShadow 
</I>properties. The CoolBar control uses a dithering algorithm to decide which colors in the original image should be 
rendered with the lighter or with the darker color.</p>

<p>By default, all Band objects inherit the picture set for the parent CoolBar 
control and the picture tiles across all the bands regardless of whether the bands 
are resized or moved. You can set the <I>FixedBackground 
</I>property of a Band object to False, in which case the image remains fixed when that particular band is 
moved or resized.</p>

<p>Alternatively, you can set a different image for all or some Band objects 
by setting their <I>UseCoolBarPicture</I> properties to False and assigning a valid value to 
their <I>Picture </I>properties. You can even dither the image by setting the affected 
Bands' <I>EmbossProperty </I>to True and assigning suitable values to the 
<I>EmbossHighlight </I>and <I>EmbossShadow </I>properties, much as you do with the main CoolBar control.</p>

<p>Band objects also inherit the parent CoolBar's color properties, unless you 
set the Band's <I>UseCoolBarColors </I>to False. If you do that, you can select the color 
used for a particular Band by setting its <I>ForeColor 
</I>and <I>BackColor </I>properties. (But the latter is actually used only if the band doesn't display an image.)</p>

<p>Oddly, neither the CoolBar control nor the Band control expose the 
<I>Font </I>property, so the appearance of a Band's caption depends entirely on system settings, 
with the exception of its text color (which is affected by the 
<I>ForeColor </I>property). For  greater control over text attributes, you can use a Label control and put it inside 
a PictureBox control used as a child control of the CoolBar. (Remember that 
Label controls and other lightweight controls can't be children of a Band object.)</p>

<A NAME="504"><h2>Run-Time Operations</h2></A>
<p>In most cases, you don't have to interact with a CoolBar control at run time: 
The CoolBar knows how to resize bands when the user moves them to another row 
and how to resize child controls inside each band. In a few particular 
circumstances, however, you might need to programmatically manipulate a CoolBar control.</p>

<A NAME="505"><h3>Reacting to <I>Resize </I>events</h3></A>
<p>When the user moves a Band object at run time and this action causes a row of 
bands to be created or destroyed, the CoolBar control raises a 
<I>Resize </I>event. You can take advantage of this event if you want to rearrange the position of other controls on 
the form or to programmatically hide or show Band objects.</p>

<p>But sometimes you shouldn't add code to the <I>Resize 
</I>event. For example, if the CoolBar control is itself contained in another control, the CoolBar's 
<I>Height </I>property might return incorrect values if queried from inside that event, or the 
<I>Resize </I>event might even be suppressed. For these reasons, it's preferable to write code inside 
the <I>HeightChanged </I>event procedure. This event fires when the 
<I>Height </I>property of a horizontal CoolBar or the 
<I>Width </I>property of a vertical CoolBar is modified.</p>

<p>Reacting to such events is important if the form contains other controls. 
Unless you take precautions, when the CoolBar grows in height other controls on the 
form might be covered by it. For this reason, you might want to gather all the other 
controls on the form inside a container control&#8212;for example, a PictureBox, so that 
you can move all of them by simply moving the container. If you follow this 
approach, you should also write code inside the form's 
<I>Resize </I>and PictureBox's <I>Resize </I>event procedures. This code snippet (taken from the demonstration program provided 
on the companion CD and shown in Figure 11-9) illustrates how this solution works:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Resize the PictureBox when the form resizes.
Private Sub Form_Resize()
    Picture1.Move 0, CoolBar1.Height, ScaleWidth, _
        ScaleHeight - CoolBar1.Height
End Sub

' Resize and move the PictureBox when the CoolBar's height changes.
Private Sub CoolBar1_HeightChanged(ByVal NewHeight As Single)
    ' Assumes this CoolBar is aligned to the form's top border
    Picture1.Move 0, NewHeight, ScaleWidth, ScaleHeight - NewHeight
End Sub

' Resize the controls inside the PictureBox when the latter is resized.
Private Sub Picture1_Resize()
    Label1.Move 0, 0, Picture1.ScaleWidth, Label1.Height
    Text1.Move 0, Label1.Height, Picture1.ScaleWidth, _
        Picture1.ScaleHeight - Label1.Height
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('F11ph09x.htm')"> <img src="F11ph09.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-9.</B> <i>The demonstration program shows how to deal with resizable CoolBar controls.</i><!--/caption-->
</p>

<A NAME="506"><h3>Adding Band objects</h3></A>
<p>From time to time, you might need to programmatically add Band objects at run 
time. You do this using the Bands collection's 
<I>Add</I> method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Add([Index],[Key],[Caption],[Image],[NewRow],[Child],[Visible]) As Band
</pre>
</td></tr>
</table></p>

<p>where each argument affects the Band property of the same name. The 
<I>Child </I>argument is a reference to the control that should go inside that Band. When you're 
using this technique for creating a Band object, the child control is probably being 
created dynamically, in which case you should make it a child of the CoolBar control 
before assigning it to the <I>Child </I>property of a Band object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Create a new ComboBox control.
Dim cb As ComboBox
Set cb = Controls.Add(&quot;VB.ComboBox&quot;, &quot;NewCombo&quot;)
' Make it a child of the CoolBar1 control.
Set cb.Container = CoolBar1
' Create a new Band object, assigning the ComboBox to its
' Child property.
CoolBar1.Bands.Add , &quot;NewBand&quot; , cb.Name, , , cb
</pre>
</td></tr>
</table></p>

<p>You can remove a Band object using the Bands collection's <I>Remove</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Remove the Band object created with the previous code snippet.
CoolBar1.Bands.Remove &quot;NewBand&quot;
</pre>
</td></tr>
</table></p>

<A NAME="507"><h3>Using a Toolbar control as a child control</h3></A>
<p>While a background image gives the CoolBar control an appealing appearance, 
you should be aware that it doesn't work well with some types of child controls, 
most notably Toolbar controls. In fact, the background image doesn't appear inside 
the Toolbar control, and the end result doesn't look very good. (See Figure 11-9.) 
Fortunately, there's a workaround, even though it isn't as simple as you might wish.</p>

<p>The solution I found is based on a file that, as I write this, is available on 
the Visual Studio Owner's Area of the Microsoft Web site, in the CoolBar Sample 
project. This sample project shows how to include a Toolbar control in the CoolBar 
control and uses an auxiliary TransTBWrapper module that magically creates a flat 
toolbar with a transparent background, which you can see in Figure 11-10. This 
technique was necessary because the version of the Toolbar available on the Web 
to Visual Basic 5 programmers didn't support the flat style.</p>

<p>As you know, the Visual Basic 6 Toolbar control does support the flat style, 
so you can embed it in a CoolBar control and still achieve a consistent look. The 
new Toolbar still doesn't support a transparent background, however, which prevents 
you from using a background picture in the CoolBar control. It took me some 
minutes to modify the TransTBWrapper module and have it work with the new Toolbar 
control, but the results are worth the additional effort. You can use this new version 
of the module in your own applications, but remember that this file isn't 
supported by Microsoft.</p>

<p>
<A HREF="javascript:fullSize('F11ph10x.htm')"> <img src="F11ph10.JPG" width=404 height=174 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-10.</B> <i>A better version of the demonstration program uses the TransTBWrapper module to host a child Toolbar control with a transparent background.</i><!--/caption-->
</p>

<p>To achieve the transparent background effect shown in Figure 11-10, 
prepare your program as you would normally do and then add the TransTB.Ctl file to 
your project. This file includes the TransTBWrapper ActiveX control, so you can add 
an instance of this control on the form that contains the CoolBar and Toolbar 
controls. At this point, you just need a few statements in the form's 
<I>Load </I>and <I>Unload </I>event procedures:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Form_Load()
    ' Put the toolbar wrapper controls in the CoolBar band.
    Set TransTBWrapper1.Container = CoolBar1
    ' This must be the same Band that hosts the toolbar.
    Set CoolBar1.Bands(1).Child = TransTBWrapper1
    ' Put the toolbar into the toolbar wrapper.
    Set TransTBWrapper1.Toolbar = Toolbar1
End Sub

Private Sub Form_Unload(Cancel As Integer)
    ' It is VERY important to set the wrapper's Toolbar property
    ' to Nothing before the form is unloaded.
    CoolBar1.Visible = False
    Set TransTBWrapper1.Toolbar = Nothing
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Ensure that the <I>Form_Unload 
</I>event is always executed; otherwise, you risk an application crash. For this reason, when testing the application 
inside the Visual Basic IDE <I>always </I>terminate it by unloading the main form, 
and never execute an <I>End </I>statement. (An 
<I>End</I> statement would prevent the 
<I>Unload</I> event from firing.)
</blockquote></div></p>

<p>This chapter concludes the description of all the common controls provided 
with Visual Basic. There are a few other controls that Visual Basic programmers can 
use in their programs, and these will be described in the <a href="#A74">next chapter</a>.</p>

<a name="A74"></a><h2>6.4 Chapter 12 -- Other ActiveX Controls</h2>

<A HREF="#A73">[Previous]</A> <A HREF="#A75">[Next]</A><P>


<font size="+3">Chapter 12</font>

<A NAME="508"><h1>Other ActiveX Controls</h1></A>
<p>Microsoft Visual Basic applications can exploit any ActiveX control, whether it's 
provided with the product or purchased from a third-party vendor. And of course 
you can manufacture your own ActiveX controls, as explained in <a href="#A106">Chapter 17</a>. In 
this chapter, I describe the most interesting controls included in the Visual Basic 
package. All these controls were included in Visual Basic 5.
</p>


<a name="A75"></a><h3>6.4.1 The MaskEdBox Control</h3>

<A HREF="#A74">[Previous]</A> <A HREF="#A76">[Next]</A><P>

<A NAME="509"><h1>The MaskEdBox Control</h1></A>

<p>The MaskEdBox control is a TextBox-like control with many additional features 
that are helpful, or even necessary, in building robust and bulletproof data entry 
procedures. This control is embedded in the MSMask32.ocx, so you have to distribute 
this file with all the applications that include one or more instances of the 
MaskEdBox control.
</p>

<A NAME="510"><h2>Setting Design-Time Properties</h2></A>

<p>All the custom properties of the MaskEdBox control can be set in the General tab 
of the custom Property Pages dialog box, as shown in Figure 12-1. The 
<I>MaxLength </I>property is the maximum number of characters accepted in the control; if the 
<I>AutoTab </I>property is True, the focus automatically advances to the following field after the 
user has typed the allotted number of characters. The 
<I>PromptChar</I> property sets the prompt character, that is, the symbol used as a placeholder for an input character. (The 
default is the underscore character.) The <I>AllowPrompt 
</I>Boolean property determines whether the prompt character is also a valid input character. (The default is 
False.) The <I>PromptInclude </I>property determines whether the 
<I>Text </I>property returns prompt characters.
</p>

<p>
<A HREF="javascript:fullSize('F12PH01x.htm')"> <img src="F12PH01.JPG" width=404 height=271 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-1.</B> <i>The MaskEdBox control at design time.</i><!--/caption-->
</p>

<p>The key property of the MaskEdBox control is 
<I>Mask</I>, a string that tells you which characters are allowed in each position of the control's contents. This string can 
include special characters that specify whether the required character is a digit, a 
letter, a decimal or thousand separator, or another kind of character. (See Table 
12-1 for a complete list of special characters.) For example, the following statement 
prepares a MaskEdBox control for accepting a phone number:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MaskEdBox1.Mask = &quot;(###)###-####&quot;
</pre>
</td></tr>
</table>
</p>

<p>You can specify a date and time format using the appropriate separators, 
as shown here:
</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
MaskEdBox1.Mask = &quot;##/##/##&quot;       ' A date value in mm/dd/yy format
MaskEdBox1.Mask = &quot;##:##&quot;          ' A time value in hh:mm format
</pre>
</td></tr>
</table>
</p>

<p>In this case, however, the MaskEdBox control performs only a 
character-by-character validation, and it's up to you to check that the control contains a 
valid date in the <I>Validate </I>event procedure. For this reason, it's usually preferable to 
use a DateTimePicker control for date and time entry because this control performs 
all the validation chores automatically. If the 
<I>Mask </I>property is assigned an empty string, the control behaves like a regular TextBox control.
</p>

<p><B>Table 12-1.</B> <I>Special characters in the </I>Mask<I> property of a MaskEdBox control. The actual characters accepted for decimal, thousand, date, and time separators depend on the localization settings of your system.</I>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Character</i></th>
<th><i>Description</I></th>
</tr>

<tr>
<td valign="top">#</td>
<td valign="top">Required digit.</td>
</tr>

<tr>
<td valign="top">9</td>
<td valign="top">Optional digit.</td>
</tr>

<tr>
<td valign="top">.</td>
<td valign="top">Decimal separator.</td>
</tr>

<tr>
<td valign="top">,</td>
<td valign="top">Thousand separator.</td>
</tr>

<tr>
<td valign="top">:</td>
<td valign="top">Time separator.</td>
</tr>

<tr>
<td valign="top">/</td>
<td valign="top">Date separator.</td>
</tr>

<tr>
<td valign="top">&amp;  </td>   
<td valign="top">Character placeholder. (All ANSI codes, except 
nonprintable characters, such as the tab character.)</td>
</tr>

<tr>
<td valign="top">C</td>
<td valign="top">Same as &amp;. (Ensures compatibility with Microsoft Access.)</td>
</tr>

<tr>
<td valign="top">A</td>
<td valign="top">Alphanumerical required character (a_z, A_Z, 0_9).</td>
</tr>

<tr>
<td valign="top">a</td>
<td valign="top">Alphanumerical optional character (a_z, A_Z, 0_9).</td>
</tr>

<tr>
<td valign="top">?</td>
<td valign="top">Letter placeholder (a_z, A_Z).</td>
</tr>

<tr>
<td valign="top">&gt;</td>
<td valign="top">Convert all characters that follow to uppercase.</td>
</tr>

<tr>
<td valign="top">&lt;</td>
<td valign="top">Convert all characters that follow to lowercase.</td>
</tr>

<tr>
<td valign="top">\</td>
<td valign="top">Escape symbol: the character or symbol that follows 
is treated as a literal.</td>
</tr>

<tr>
<td valign="top">(Other)</td>
<td valign="top">Any other character in the mask is treated as a literal and 
is displayed in the control as is.</td>
</tr>
</table>
</p>


<p>The <I>Format </I>property determines the appearance of the control when the 
focus leaves it. For example, you might have a date field that should be formatted 
as a long date when the user leaves the control. You can arrange this by assigning 
the <I>Format </I>property a suitable string either at design time or at run time:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MaskEdBox1.Format = &quot;mmmm dd, yyyy&quot;
</pre>
</td></tr>
</table>
</p>

<p>You can pass the <I>Format </I>property any value that you would use with the 
VBA's <I>Format </I>function, except named formats such as 
<I>scientific</I> or <I>long date</I>. You can 
also pass up to four values to format positive, negative, zero, or Null values with 
different format substrings separated by a semicolon, as in this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show two decimal digits and the thousand separator, enclose
' negative numbers within parentheses, and show &quot;Zero&quot; when &quot;0&quot;
' has been entered.
MaskEdBox1.Format = &quot;#,##0.00;(#,##0.00);Zero&quot;
</pre>
</td></tr>
</table>
</p>

<p>The fourth format substring is used when the control is bound to a 
database field that contains the Null value.
</p>

<p>The only other custom property that you can set at design time is 
<I>ClipMode</I>, which determines what happens when the user copies or cuts the contents of 
the control to the Clipboard. If this property is 0-mskIncludeLiterals, the string being 
cut or copied includes all literal characters. If the property is 1-mskExcludeLiterals, 
all literal characters are filtered out before cutting or copying the string to the 
Clipboard. This property has no effect if <I>Mask 
</I>is an empty string.
</p>

<A NAME="511"><h2>Run-Time Operations</h2></A>

<p>The MaskEdBox control is basically a supercharged TextBox control, and as such 
it supports many of the latter control's properties, methods, and events. There are a 
few differences, however, that you should take into account.
</p>

<A NAME="512"><h3>Working with the <I>Text </I>property</h3></A>

<p>The MaskEdBox control supports the <I>Text </I>property, as well as related properties 
such as <I>SelStart</I>, <I>SelLength</I>,<I> </I>and 
<I>SelText</I>. The <I>Text </I>property returns the current contents 
of the control, including all literal characters, separators, and the underscores that 
are part of the mask. To filter out such extra characters, you can use the value 
returned by the <I>ClipText </I>read-only property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Work with a date control.
MaskEdBox1.Mask = &quot;##/##/####&quot;
' Assign a date using the Text property.
MaskEdBox1.Text = &quot;12/31/1998&quot;
' Read it back with the ClipText property.
Print MaskEdBox1.ClipText          ' Displays &quot;1231998&quot;
</pre>
</td></tr>
</table>
</p>

<p>Don't forget that when you assign a value to the 
<I>Text </I>property, you're subject to the same constraints enforced when a string is entered in the control and 
that assigning an invalid string raises an error.
</p>

<p>Fortunately, to retrieve the contents of a MaskEdBox control, you don't 
have to filter out separators yourself. When the 
<I>ClipMode </I>property is True, the value returned by the 
<I>SelText </I>property doesn't include literals and separators. Even 
more interesting, if you assign a value to this property, the control behaves as if the 
string had been pasted from the Clipboard or, if you prefer, as if each character had 
been manually typed in the control. This means that you don't have to include any 
literals or separators in your assignment statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Read the contents of the control without any separator.
MaskEdBox1.ClipMode = mskExcludeLiterals
MaskEdBox1.SelStart = 0: MaskEdBox1.SelLength = 9999
MsgBox &quot;The control's value is &quot; &amp; MaskEdBox1.SelText
' Assign a new date value. (Don't worry about date separators.)
MaskEdBox1.SelText = &quot;12311998&quot;
</pre>
</td></tr>
</table>
</p>

<p>Another way to access the contents of a MaskEdBox control is through 
the <I>FormattedText </I>property, which returns the string that's displayed in the control 
when it doesn't have the input focus. If the <I>Mask 
</I>property is an empty string, this property is similar to the 
<I>Text </I>property, except that it's read-only. Note that if the 
<I>HideSelection </I>property has been set to False, the control doesn't format its contents when it 
loses the input focus; in this case, however, you can still retrieve the formatted value 
through the <I>FormattedText </I>property.
</p>

<A NAME="513"><h3>Validating user input</h3></A>

<p>The MaskEdBox control raises a <I>ValidationError 
</I>event each time the user presses an invalid key or pastes an invalid string into the control. This event receives two 
parameters: InvalidText is the value that the <I>Text 
</I>property would assume if the invalid key had been accepted, and 
<I>StartPosition </I>is the index of the first invalid 
character in this string.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MaskEdBox1_ValidationError(InvalidText As String, _
    StartPosition As Integer)
    ' StartPosition is zero-based.
    LblStatus.Caption = &quot;'&quot; &amp; Mid$(InvalidText, StartPosition + 1, 1) _
        &amp;  &quot;' is an invalid character&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The previous code snippet has a defect, though, in that it doesn't work 
correctly if the invalid character is typed at the end of the current contents of the control. 
In that case, the <I>Mid$ </I>function returns an empty string, and there's no way to 
retrieve the invalid character. For this reason, you might prefer to display a generic 
error message that doesn't contain the actual invalid character.
</p>

<p>A shortcoming of the <I>ValidationError </I>event is that it seems impossible to 
show a message box from within it. If you try to show a message box, you're caught in 
an endless loop and the event is repeatedly invoked, until you press the Ctrl+Break 
key combination. (If you're working with a compiled application, you have to force 
its termination using Ctrl+Alt+Del.)
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Starting with Visual Basic 6, the MaskEdBox control supports the standard 
<I>Validate </I>event, so it's now considerably simpler to enforce data entry validation.
</p>


<a name="A76"></a><h3>6.4.2 The CommonDialog Control</h3>

<A HREF="#A75">[Previous]</A> <A HREF="#A77">[Next]</A><P>

<A NAME="514"><h1>The CommonDialog Control</h1></A>

<p>The CommonDialog control provides an easy and convenient way to invoke the 
Color, Font, Printer, FileOpen, and FileSave Windows common dialog boxes, and it 
also allows you to display a page in a help file. This control exposes only properties 
and methods&#8212;no events. In most cases, you don't set any properties at design 
time because it's often preferable to assign all of them at run time, especially when 
you use the same control to display different dialog boxes. The control is invisible 
during the execution, so it doesn't support properties such as 
<I>Left</I>, <I>Visible</I>, or <I>TabIndex</I>. 
This control is embedded in the ComDlg32.ocx file, which has to be distributed with 
any Visual Basic application that uses it.
</p>

<p>The lack of a visible interface and the lack of events doesn't mean that this 
control is easy to use, though. As a matter of fact, using the CommonDialog control is 
a complex enterprise because it supports many options, some of which aren't 
always intuitive. Some properties have different meanings, depending on which 
common dialog box you're displaying. For example, the 
<I>Flags </I>property is a bit-field property, and the meaning of each bit is different for each of the various common dialog boxes.
</p>

<p>One of the few properties that can have the same meaning regardless of 
which common dialog box you're displaying is 
<I>CancelError</I>. If this property is True, an 
end user closing the dialog box using the Cancel key causes error 32755 (equal to 
the constant <I>cdlCancel</I>) to be raised in the calling program. The CommonDialog 
control includes intrinsic constants for all the errors that can be generated at run time.
</p>

<p>All common dialog boxes also share a few properties related to help 
support. You can display a Help button in the common dialog box and tell the 
CommonDialog control what page in what help file must be displayed when the user clicks the 
Help button. <I>HelpFile </I>is the complete name of the help file, 
<I>HelpContext </I>is the context ID of the requested page, and 
<I>HelpCommand </I>is the action that must be performed 
when the button is clicked. (It's usually assigned the value 1-cdlHelpContext.) Don't 
forget that to actually display the Help button, you must set a bit in the 
<I>Flags</I> property. The position of this bit varies with the particular common dialog box, for example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show a Help button. 
CommonDialog1.HelpFile = &quot;F:\vbprogs\DlgMaste\Tdm.hlp&quot;
CommonDialog1.HelpContext = 12
CommonDialog1.HelpCommand = cdlHelpContext
' The value for the Flags property depends on the dialog.
If ShowColorDialog Then
    CommonDialog1.Flags = cdlCCHelpButton
    CommonDialog1.ShowColor
ElseIf ShowFontDialog Then
    CommonDialog1.Flags = cdlCFHelpButton
    CommonDialog1.ShowFont
Else
    ' And so on
End If
</pre>
</td></tr>
</table>
</p>

<p>For more information about help properties, see the section &quot;<A HREF="#523">Help Windows</A>,&quot; later in this chapter.
</p>

<p>The CommonDialog control exposes six methods: 
<I>ShowColor</I>, <I>ShowFont</I>, 
<I>ShowPrinter</I>, <I>ShowOpen</I>, 
<I>ShowSave</I>, and <I>ShowHelp</I>. Each method displays a 
different common dialog box, as explained in the following sections. On the 
companion CD, you'll find a complete demonstration program (part of which is visible in Figure 
122) that shows in action all the common dialog boxes described in this section.
</p>

<A NAME="515"><h2>The Color Dialog</h2></A>
<p>The Color common dialog box lets users select a color. It also permits them to 
define new custom colors, but you can keep this privilege from users by assigning 
the 4cdlCCPreventFullOpen value to the <I>Flags 
</I>property. Alternatively, you can display the custom color section of the dialog box when the dialog appears by setting 
the 2cdlCCFullOpen bit. (Custom color choices take up the right half of the dialog 
box shown in Figure 12-2.) You can initially highlight a color in the dialog box by 
assigning its RGB value to the <I>Color </I>property and setting the 1-cdlCCRGBInit bit in the 
<I>Flags </I>property, as in the following example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Let the user change the ForeColor of the Text1 control.
With CommonDialog1
    ' Prevent display of the custom color section
    ' of the dialog.
    .Flags = cdlCCPreventFullOpen Or cdlCCRGBInit 
    .Color = Text1.ForeColor
        .CancelError = False
        .ShowColor
        Text1.ForeColor = .Color
End With
</pre>
</td></tr>
</table>
</p>

<p>When you provide an initial color, you don't need to set the 
<I>CancelError </I>property to True; if the user clicks on the Cancel 
key, the value of the <I>Color </I>property doesn't change.
</p>

<p>
<A HREF="javascript:fullSize('F12PH02x.htm')"> <img src="F12PH02.JPG" width=404 height=312 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-2.</B> <i>The Color common dialog box, with the section for creating custom colors already opened, as it appears in the demonstration program.</i><!--/caption-->
</p>

<A NAME="516"><h2>The Font Dialog</h2></A>
<p>The Font dialog box lets users select font names and attributes. You can initialize 
the value shown in the dialog box, and you can decide which attributes can be 
modified. Of course, it's also up to you to apply the new attributes to controls and 
objects in your application. An example of a Font dialog box, with all the 
options enabled, is shown in Figure 12-3.
</p>

<p>
<img src="F12ph03.GIF" width=401 height=344 border="0">
<p>
<!--caption--><B>Figure 12-3.</B> <i>The Font common dialog box.</i><!--/caption-->


<p>The font attributes can be initialized (and retrieved when the user closes 
the dialog box) through a number of properties whose names are 
self-explanatory: <I>FontName</I>, <I>FontSize</I>, 
<I>FontBold</I>, <I>FontItalic</I>, 
<I>FontUnderLine</I>, <I>FontStrikeThru</I>, and 
<I>Color</I>.
</p>

<p>When used with the Font common dialog box, the 
<I>Flags </I>property accepts all the options that are summarized in Table 12-2. You use these flags to affect what 
fonts are listed in the dialog box and to restrict user selection. One of the bits that 
you should always include is cdlCFForceFontExist. Besides, at least one of the first 
four values in Table 12-2 must be specified; otherwise, the CommonDialog control 
raises an error 24574 &quot;No fonts exist.&quot;
</p>
<p>
<B>Table 12-2.</B> <I>Values for the </I>Flags <I>property for a Font common dialog box.</i>
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>

<tr>
<td valign="top">cdlCFScreenFonts</td>
<td valign="top">Show screen fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFPrinterFonts</td>
<td valign="top">Show printer fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFBoth</td>
<td valign="top">Show both screen fonts and printer fonts. (This 
is the sum of cdlCFScreenFonts and<I> </I>cdlCFPrinterFonts.)</td>
</tr>

<tr>
<td valign="top">cdlCFWYSIWYG</td>
<td valign="top">Show only fonts that are available both on 
the screen and on the printer.</td>
</tr>

<tr>
<td valign="top">cdlCFANSIOnly</td>
<td valign="top">Restrict selection to fonts that use ANSI 
character sets.</td>
</tr>

<tr>
<td valign="top">cdlCFFixedPitchOnly</td>
<td valign="top">Restrict selection to nonproportional (fixed 
pitch) fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFNoVectorFonts</td>
<td valign="top">Restrict selection to nonvector fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFScalableOnly</td>
<td valign="top">Restrict selection to scalable fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFTTOnly</td>
<td valign="top">Restrict selection to TrueType fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFNoSimulations</td>
<td valign="top">Restrict selection to fonts that aren't GDI font 
simulations.</td>
</tr>

<tr>
<td valign="top">cdlCFLimitSize</td>
<td valign="top">Restrict selection to font size in the range 
indicated by the <I>Min </I>and <I>Max </I>properties.</td>
</tr>

<tr>
<td valign="top">cdlCFForceFontExist</td>
<td valign="top">Raise an error if user selects a font or a style 
that doesn't exist.</td>
</tr>

<tr>
<td valign="top">cdlCFEffects</td>
<td valign="top">Enable the strikethrough, underline, and color 
fields in the dialog box.</td>
</tr>

<tr>
<td valign="top">cdlCFNoFaceSel</td>
<td valign="top">Don't select font name.</td>
</tr>

<tr>
<td valign="top">cdlCFNoSizeSel</td>
<td valign="top">Don't select font size.</td>
</tr>

<tr>
<td valign="top">cdlCFNoStyleSel</td>
<td valign="top">Don't select font style. (Can be tested on exit to 
determine whether user selected a style.)</td>
</tr>

<tr>
<td valign="top">cdlCFHelpButton</td>
<td valign="top">Display the Help button.</td>
</tr>

</table>
</p>

<p>The following piece of code lets the user modify the font attributes of a 
TextBox control. It limits the user's selection to existing screen fonts and forces the font 
size in the range from 8 to 80 points:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With CommonDialog1
    .Flags = cdlCFScreenFonts Or cdlCFForceFontExist Or cdlCFEffects _
        Or cdlCFLimitSize
    .Min = 8
    .Max = 80
    .FontName = Text1.FontName
    .FontSize = Text1.FontSize
    .FontBold = Text1.FontBold
    .FontItalic = Text1.FontItalic
    .FontUnderline = Text1.FontUnderline
    .FontStrikethru = Text1.FontStrikethru
    .CancelError = False
    .ShowFont
    Text1.FontName = .FontName
    Text1.FontBold = .FontBold
    Text1.FontItalic = .FontItalic
    Text1.FontSize = .FontSize
    Text1.FontUnderline = .FontUnderline
    Text1.FontStrikethru = .FontStrikethru
End With
</pre>
</td></tr>
</table>
</p>

<p>In this particular case, you don't need to set the 
<I>CancelError </I>property to True because if the user clicks on the Cancel button the control doesn't modify 
any <I>Font</I>xxxx properties and all <I>Font</I>xxxx property values can be assigned back to 
the control without any undesirable effects.
</p>

<p>When you don't want to initialize a field with a well-defined value, you have 
a more complex problem. Consider this situation: You're writing a word processor 
application, and you display a Font common dialog box to let the user select the 
font name, size, and attributes of the selection portion of text. If the selection 
contains characters with homogeneous attributes, you can (and should) initialize the 
corresponding fields in the common dialog box. On the other hand, if the selection 
includes characters of different fonts or with different sizes or attributes, you should leave 
these fields blank. You can do this by specifying the cdlCFNoFaceSel, cdlCFNoStyleSel, 
and cdlCFNoStyleSel bits of the <I>Flags </I>property. The following code lets the user 
modify the attributes of a RichTextBox control. (I describe this control in depth later 
in this chapter.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
With CommonDialog1
    .Flags = cdlCFBoth Or cdlCFForceFontExist Or cdlCFEffects
    If IsNull(RichTextBox1.SelFontName) Then
        .Flags = .Flags Or cdlCFNoFaceSel
    Else
        .FontName = RichTextBox1.SelFontName
    End If
    If IsNull(RichTextBox1.SelFontSize) Then
        .Flags = .Flags Or cdlCFNoSizeSel
    Else
        .FontSize = RichTextBox1.SelFontSize
    End If
    If IsNull(RichTextBox1.SelBold) Or IsNull(RichTextBox1.SelItalic) Then
        .Flags = .Flags Or cdlCFNoStyleSel
    Else
        .FontBold = RichTextBox1.SelBold
        .FontItalic = RichTextBox1.SelItalic
    End If
    .CancelError = True
    .ShowFont
    If Err = 0 Then
        RichTextBox1.SelFontName = .FontName
        RichTextBox1.SelBold = .FontBold
        RichTextBox1.SelItalic = .FontItalic
        If (.Flags And cdlCFNoSizeSel) = 0 Then
            RichTextBox1.SelFontSize = .FontSize
        End If
        RichTextBox1.SelUnderline = .FontUnderline
        RichTextBox1.SelStrikeThru = .FontStrikethru
    End If
End With
</pre>
</td></tr>
</table>
</p>

<A NAME="517"><h2>The Printer Dialog</h2></A>
<p>The CommonDialog control can display two distinct dialogs: the Print Setup 
dialog box that allows users to select a printer's attributes and the standard Print dialog 
that lets users select many options of a print job, such as which portion of the 
document should be printed (all, a page range, or the current selection), the number of 
copies, and so on. See Figures 12-4 and 12-5 for examples of these common dialog boxes.
</p>

<p>
<A HREF="javascript:fullSize('F12PH04x.htm')"> <img src="F12PH04.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-4.</B> <i>The Print common dialog box.</i><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('F12PH05x.htm')"> <img src="F12PH05.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-5.</B> <i>The Print Setup common dialog box.</i><!--/caption-->
</p>

<p>You decide which dialog box appears by setting the 
<I>cdlPDPrintSetup</I> bit in the <I>Flags </I>property. The complete list of bits that can be set in the 
<I>Flags </I>property is summarized in Table 12-3.
</p>
<p><B>Table 12-3.</B> <I>Values for the </I>Flags <I>property for a printer common dialog box. Most of these bits are meaningless if you're showing a Print Setup dialog box </I>(Flags = cdlPDPrintSetup).
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>
<tr>
<td valign="top">
cdlPDPrintSetup
</td>
<td valign="top">
Display the Print Setup dialog box instead 
of the Print dialog box.
</td>
</tr>
<tr>
<td valign="top">
cdlPDNoWarning
</td>
<td valign="top">
Prevent an error message if there isn't 
any default printer.
</td>
</tr>
<tr>
<td valign="top">
cdlPDHidePrintToFile
</td>
<td valign="top">
Hide the Print To File check box.
</td>
</tr>
<tr>
<td valign="top">
cdlPDDisablePrintToFile
</td>
<td valign="top">
Disable the Print To File check box.
</td>
</tr>
<tr>
<td valign="top">
cdlPDNoPageNums
</td>
<td valign="top">
Disable the Pages option button.
</td>
</tr>
<tr>
<td valign="top">
cdlPDNoSelection
</td>
<td valign="top">
Disable the Selection option button.
</td>
</tr>
<tr>
<td valign="top">
cdlPDPrintToFile
</td>
<td valign="top">
The state of the Print To File check box. 
(Can be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDAllPages
</td>
<td valign="top">
The state of the All Pages option button. 
(Can be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDPageNums
</td>
<td valign="top">
The state of the Pages option button. (Can 
be read upon exiting)
</td>
</tr>
<tr>
<td valign="top">
cdlPDSelection
</td>
<td valign="top">
The state of the Selection option button. 
(Can be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDCollate
</td>
<td valign="top">
The state of the Collate check box. (Can 
be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDReturnDC
</td>
<td valign="top">
The <I>hDC </I>property returns the device 
context of the selected printer.
</td>
</tr>
<tr>
<td valign="top">
cdlPDReturnIC
</td>
<td valign="top">
The <I>hDC </I>property returns the 
information context of the selected printer.
</td>
</tr>
<tr>
<td valign="top">
cdlPDReturnDefault
</td>
<td valign="top">
Return default printer name.
</td>
</tr>
<tr>
<td valign="top">
cdlPDUseDevModeCopies
</td>
<td valign="top">
Set support for multiple copies.
</td>
</tr>
<tr>
<td valign="top">
cdlPDHelpButton
</td>
<td valign="top">
Display the Help button.
</td>
</tr>
</table>
</p>



<p>When you're displaying a printer dialog box, the 
<I>Min </I>and <I>Max </I>properties are the minimum and maximum valid values for page numbers whereas 
<I>FromPage </I>and <I>ToPage </I>are the actual values displayed in the dialog box. You typically set the 
latter two properties upon entering and read them back upon exiting if the 
bit cdlPDPageNums is set. The <I>Copies </I>property reflects the number of copies entered 
by the user.
</p>

<p>The <I>PrinterDefault </I>property determines whether the Visual Basic Printer 
object is automatically set to match the printer selected by the user. I recommend that 
you set this bit because it greatly simplifies subsequent print operations. If you don't 
set this bit, the only way you can retrieve information about the selected printer is 
through the Common Dialog's <I>hDC </I>property, which means that you need to perform 
your printing chores using API calls (not a simple thing to do).
</p>

<p>When you're displaying a Print Setup dialog box, the 
<I>Orientation </I>property sets and returns the orientation selected for the printer job. (The settings can 
be 1cdlPortrait or 2cdlLandscape.) Neither the 
<I>Orientation</I> nor <I>Copies</I> properties 
are correctly set under Windows NT, however.
</p>

<p>If you're showing a regular printer dialog box, you need to decide whether 
the Pages and the Selection option buttons should be enabled. For example, should 
a user want to print the contents of a TextBox control, you should enable the 
Selection option button only if the user actually selects a portion of text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
With CommonDialog1
    ' Prepare to print using the Printer object.
    .PrinterDefault = True
    ' Disable printing to file and individual page printing.
    .Flags = cdlPDDisablePrintToFile Or cdlPDNoPageNums
    If Text1.SelLength = 0 Then
         ' Hide Selection button if there is no selected text.
        .Flags = .Flags Or cdlPDNoSelection
    Else 
        ' Else enable the Selection button and make it the default
        ' choice.
        .Flags = .Flags Or cdlPDSelection
    End If
    ' We need to know whether the user decided to print.
    .CancelError = True
    .ShowPrinter
    If Err = 0 Then
        If .Flags And cdlPDSelection Then
            Printer.Print Text1.SelText
        Else
            Printer.Print Text1.Text
        End If
    End If
End With
</pre>
</td></tr>
</table>
</p>



<A NAME="518"><h2>The FileOpen and FileSave Dialogs</h2></A>

<p>The FileOpen and FileSave common dialog boxes are very similar, and in fact the 
Visual Basic documentation explains them together. While this is a reasonable approach, I 
have found that dealing with them jointly tends to hide the many subtle differences 
between these two dialog box types. For this reason, I decided to describe their common 
properties first and then focus on each type of dialog box in a separate section.
</p>

<A NAME="519"><h3>Properties in common</h3></A>

<p>You can choose from an impressive number of ways to customize the 
appearance and behavior of the FileOpen and FileSave dialog boxes. For example, the 
<I>DialogTitle </I>property determines the caption of the common dialog box, and 
<I>InitDir </I>is the directory displayed when the dialog appears. When the dialog box is invoked, the 
<I>FileName </I>property contains the name of the prompted file. And when the dialog closes, 
it contains the name of the file selected by the user. The 
<I>DefaultExt </I>property can be assigned the default extension of a filename so that the control can 
automatically return a complete name in the <I>FileName 
</I>property even if the user doesn't type the extension. Alternatively, you can set and retrieve the base filename (that is, the 
name of the file without the extension) by using the 
<I>FileTitle </I>property.
</p>

<p>You can define the file filters available to the user when browsing the 
contents of a directory. You do this by assigning the 
<I>Filter </I>property a string that contains 
<I>(description, filter) </I>pairs, with items separated by a 
pipe<I> </I>(<I>|</I>)<I> </I>character. For example, 
when working with graphic files, you can define three filters in the following way:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can specify multiple filters by using the semicolon as a delimiter.
CommonDialog1.Filter = &quot;All Files|*.*|Bitmaps|*.bmp|Metafiles|*.wmf;*.emf&quot;
</pre>
</td></tr>
</table>
</p>

<p>You decide which filter is initially selected using the 
<I>FilterIndex </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the Bitmaps filter. (Filters are one-based.)
CommonDialog1.FilterIndex = 2
</pre>
</td></tr>
</table>
</p>

<p>The real difficulty in working with FileOpen and FileSave dialog boxes is 
that they support a lot of flags, and most flags aren't adequately documented in the 
Visual Basic manuals. In some cases, I had to resort to the Windows SDK 
documentation to understand what a given flag actually does. All the flags supported by 
FileOpen and FileSave common dialog boxes are summarized in Table 12-4.
</p>
<p><B>Table 12-4.</B> <I>Values of the </I>Flags<I> property for a FileOpen or FileSave common dialog box. Note that a few bits make sense only with one of the two dialog boxes.</I>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>

<tr>
<td valign="top">cdlOFNReadOnly</td>
<td valign="top">The state of the Open As Read-Only 
check box (FileOpen only).</td>
</tr>

<tr>
<td valign="top">cdlOFNOverwritePrompt</td>
<td valign="top">Show a message before overwriting 
existing files. (FileSave only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNHideReadOnly</td>
<td valign="top">Hide the Open As Read-Only check 
box. This bit should always be set in FileSave dialog boxes.</td>
</tr>

<tr>
<td valign="top">cdlOFNNoChangeDir</td>
<td valign="top">Don't modify the current directory. (By 
default, a File dialog box changes current drive and directory to match the path of the 
file selected by the user.)</td>
</tr>

<tr>
<td valign="top">cdlOFNNoValidate</td>
<td valign="top">Accept invalid characters in filenames. 
(Not recommended.)</td>
</tr>

<tr>
<td valign="top">cdlOFNAllowMultiselect</td>
<td valign="top">Enable multiple file selection. 
(FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNExtensionDifferent</td>
<td valign="top">The extension of the selected file is 
different from the value of the <I>DefaultExt 
</I>property. (To be tested upon exiting.)</td>
</tr>

<tr>
<td valign="top">cdlOFNPathMustExist</td>
<td valign="top">Refuse filenames with invalid or 
nonexistent paths. (Highly recommended.)</td>
</tr>

<tr>
<td valign="top">cdlOFNFileMustExist</td>
<td valign="top">Refuse to select files that don't 
exist. (FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNCreatePrompt</td>
<td valign="top">If the selected file doesn't exist, ask 
whether a new file should be created. 
Automatically set cdlOFNFileMustExist<I> </I>and cdlOFNPathMustExist. (FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNShareAware</td>
<td valign="top">Ignore network sharing errors. (Not 
recommended&#8212;use only if you're willing to 
solve sharing conflicts through code.)</td>
</tr>

<tr>
<td valign="top">cdlOFNNoReadOnlyReturn</td>
<td valign="top">Refuse to select read-only files or files 
that reside in a write-protected directory.</td>
</tr>

<tr>
<td valign="top">cdlOFNExplorer  </td> 
<td valign="top">  Use a Windows Explorer-like interface 
in multiple-selection dialog boxes. (Multiple-selection FileOpen only; ignored in all 
other cases.)</td>
</tr>

<tr>
<td valign="top">cdlOFNLongNames</td>
<td valign="top">This flag <I>should </I>enable long filenames 
in multiple-selection dialog boxes that use the Windows Explorer style. However, it 
turns out that these dialog boxes always support long filenames, so this feature appears to 
be useless. (Multiple-selection FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNNoDereferenceLinks</td>
<td valign="top">Return the name and the path of the file 
selected by the user, even if this is a shortcut LNK file that points to another file. If 
this flag is omitted, when the user selects a LNK file the dialog box returns the name 
and path of the referenced file.</td>
</tr>

<tr>
<td valign="top">cdlOFNHelpButton</td>
<td valign="top">Show the Help button.</td>
</tr>

<tr>
<td valign="top">cdlOFNNoLongNames</td>
<td valign="top">Disallow long filenames.</td>
</tr>
</table>
</p>

<p>When working with a FileOpen or a FileSave dialog box, you should 
always set the <I>CancelError </I>property to True because you need a way to find out 
whether the user canceled the file operation.
</p>

<A NAME="520"><h3>The FileSave dialog</h3></A>

<p>Because the FileSave dialog box is the simpler of the two, I'll describe it first. 
Now you know enough to display a FileSave dialog box like the one shown in Figure 
12-6. The next routine accepts a reference to a TextBox control and to a 
CommonDialog control: The routine uses the latter control to ask for a filename before it saves 
the contents of a TextBox control to the selected file. It returns the name of the file 
in the third argument:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns False if the Save command has been canceled,
' True otherwise.
Function SaveTextControl(TB As Control, CD As CommonDialog, _
    Filename As String) As Boolean
    Dim filenum As Integer
    On Error GoTo ExitNow
    
    CD.Filter = &quot;All files (*.*)|*.*|Text files|*.txt&quot;
    CD.FilterIndex = 2
    CD.DefaultExt = &quot;txt&quot;
    CD.Flags = cdlOFNHideReadOnly Or cdlOFNPathMustExist Or _
        cdlOFNOverwritePrompt Or cdlOFNNoReadOnlyReturn
    CD.DialogTitle = &quot;Select the destination file &quot;
    CD.Filename = Filename
    ' Exit if user presses Cancel.
    CD.CancelError = True
    CD.ShowSave
    Filename = CD.Filename
    
    ' Write the control's contents.
    filenum = FreeFile()
    Open Filename For Output As #filenum
    Print #filenum, TB.Text;
    Close #filenum
    ' Signal success.
    SaveTextControl = True
ExitNow:

End Function
</pre>
</td></tr>
</table>
</p>

<p>You can use the <I>SaveTextControl </I>routine as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Filename As String
If SaveTextControl(RichTextBox1, CommonDialog1, Filename) Then
    MsgBox &quot;Text has been saved to file &quot; &amp; Filename
End If
</pre>
</td></tr>
</table>
</p>

<p>Upon exiting a FileSave (and also a FileOpen) dialog box, you can test 
the cdlOFNExtensionDifferent bit of the 
<I>Flags</I> property, in case you need to know 
whether the selected file has an extension different from the one assigned to the 
<I>DefaultExt </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    If CD.Flags And cdlOFNExtensionDifferent Then
        ' Process nonstandard extensions here.
    End If
</pre>
</td></tr>
</table>
</p>

<p>
<img src="F12PH06x.gif" width=426 height=264 border=0>
</p><p>
<!--caption--><B>Figure 12-6.</B> <i>The FileSave common dialog box.</i><!--/caption-->
</p>

<p>Don't forget to specify the cdlOFNHideReadOnly bit for FileSave dialog 
boxes: If you do forget, the Open As Read-Only check box will appear in the dialog 
box, which can confuse the user, who is saving a file, not opening it. Another 
convenient flag is cdlOFNNoReadOnlyReturn, which ensures that the file doesn't have the 
read-only attribute and therefore can be overwritten without raising an error.
</p>

<A NAME="521"><h3>The single-selection FileOpen dialog</h3></A>

<p>The CommonDialog control supports both single- and multiple-selection 
FileOpen dialog boxes. The former type isn't substantially different from a FileSave dialog 
box, even though you usually specify different bits for the 
<I>Flags </I>property. Here's a reusable routine that loads the contents of a text file into a TextBox control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns False if the command has been canceled, True otherwise.
Function LoadTextControl(TB As Control, CD As CommonDialog, _
    Filename As String) As Boolean
    Dim filenum As Integer
    On Error GoTo ExitNow
    
    CD.Filter = &quot;All files (*.*)|*.*|Text files|*.txt&quot;
    CD.FilterIndex = 2
    CD.DefaultExt = &quot;txt&quot;
    CD.Flags = cdlOFNHideReadOnly Or cdlOFNFileMustExist Or _
        cdlOFNNoReadOnlyReturn
    CD.DialogTitle = &quot;Select the source file &quot;
    CD.Filename = Filename
    ' Exit if user presses Cancel.
    CD.CancelError = True
    CD.ShowOpen
    Filename = CD.Filename
    
    ' Read the file's contents into the control.
    filenum = FreeFile()
    Open Filename For Input As #filenum
    TB.Text = Input$(LOF(filenum), filenum)
    Close #filenum
    ' Signal success.
    LoadTextControl = True
ExitNow:
End Function
</pre>
</td></tr>
</table>
</p>

<p>If you don't specify the cdlOFNHideReadOnly bit in the 
<I>Flag </I>property, the common dialog box includes the Open As Read-Only check box. To discover 
whether the user has clicked that check box, you test the 
<I>Flags</I> property upon exiting as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    If CD.Flags And cdlOFNReadOnly Then
        ' The file has been opened in read-only mode.
        ' (For example, you should disable the File-Save command.)
    End If
</pre>
</td></tr>
</table>
</p>

<A NAME="522"><h3>The multiple-selection FileOpen dialog</h3></A>
<p>Multiple-selection FileOpen dialog boxes are a bit more complex than 
single-selection dialog boxes. You specify that you want to open a multiple-selection file dialog 
box by setting the cdlOFNAllowMultiselect bit of the 
<I>Flags </I>property: All the files selected by the user will be concatenated in an individual string and then returned in 
the <I>FileName </I>property.
</p>

<p>Because the user can select dozens or even hundreds of files, the returned 
string can be very long. By default, however, the FileOpen dialog box can deal only 
with returned strings of 256 characters or less: If the combined length of the file 
names selected by the user exceeds this limit, the control raises an error 20476 &quot;Buffer 
too small.&quot; To circumvent this error, you can assign a higher value to the 
<I>MaxFileSize </I>property. For example, a value of 10 KB should suffice for most practical purposes:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>CommonDialog1.MaxFileSize = 10240
</pre>
</td></tr>
</table>
</p>

<p>To preserve compatibility with 16-bit programs, multiple-selection FileOpen 
dialogs return the lists of selected files using the space as a separator. Unfortunately, 
because the space is a valid character inside long filenames and therefore 
potentially confusing, all filenames are rendered in the old 8.3 MS-DOS format, and the 
dialog itself uses the outdated look visible in Figure 12-7. To work around this problem, 
you must specify the cdlOFNExplorer bit in the 
<I>Flags </I>property, which displays a modern Windows Explorer-like user interface and returns the list of selected files as 
long filenames separated by null characters. Note that the documentation is incorrect, 
and the cdlOFNLongNames flag can be safely omitted because Windows 
Explorer-like dialog boxes automatically support long filenames.
</p>

<p>
<img src="F12PH07x.gif" width=408 height=243 border=0>
</p><p>
<!--caption--><B>Figure 12-7.</B> <i>A multiple-selection FileOpen common dialog box without the cdlOFNExplorer flag uses an outdated Windows 3.x look.</i><!--/caption-->
</p>

<p>Here's a reusable routine that asks the users for multiple files and then 
places all the filenames in a string array:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns False if the command has been canceled, True otherwise.
Function SelectMultipleFiles(CD As CommonDialog, Filter As String, _
    Filenames() As String) As Boolean
    On Error GoTo ExitNow
    
    CD.Filter = &quot;All files (*.*)|*.*|&quot; &amp; Filter
    CD.FilterIndex = 1
    CD.Flags = cdlOFNAllowMultiselect Or cdlOFNFileMustExist Or _
        cdlOFNExplorer
    CD.DialogTitle = &quot;Select one or more files&quot;
    CD.MaxFileSize = 10240
    CD.Filename = &quot;&quot;
    ' Exit if user presses Cancel.
    CD.CancelError = True
    CD.ShowOpen

    ' Parse the result to get filenames.
    Filenames() = Split(CD.Filename, vbNullChar)
    ' Signal success.
    SelectMultipleFiles = True
ExitNow:
End Function
</pre>
</td></tr>
</table>
</p>

<p>After the user closes the dialog box, the 
<I>Filename</I> property might contain data in different formats, according to the number of files selected, for a couple of 
reasons.
</p>

<UL>

<p><li> If the user selected only one file, the 
<I>Filename </I>property returns the file's complete name (including the path), exactly as if this were a 
single-selection dialog box. In this case, the string doesn't contain any 
null character separators.
</li></p>

<p><li> If the user selected multiple files, the 
<I>Filename </I>property contains a number of elements, which are separated by null characters (assuming that 
the cdlOFNExplorer bit has been set). The first element is the path, 
followed by the base names of selected files (but without the path portion).
</li></p>
</ul>
<p>The following code builds on the previously defined 
<I>SelectMultipleFiles</I> routine to find out which of these two cases occurred:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Filenames() As String, i As Integer
If SelectMultipleFiles(CommonDialog1, &quot;&quot;, Filenames()) Then
    If UBound(Filenames) = 0 Then
        ' The Filename property contained only one element.
        Print &quot;Selected file: &quot; &amp; Filenames(0)
    Else
        ' The Filename property contained multiple elements.
        Print &quot;Directory name: &quot; &amp; Filenames(0)
        For i = 1 To UBound(Filenames)
            Print &quot;File #&quot; &amp; i &amp; &quot;: &quot; &amp; Filenames(i)
        Next
    End If
End If
</pre>
</td></tr>
</table>
</p>


<A NAME="523"><h2>Help Windows</h2></A>
<p>You can use the CommonDialog control to display information from HLP files. In 
this case, no dialog box appears and only a few properties are used. You should 
assign the <I>HelpFile </I>property the filename and path, and the 
<I>HelpCommand</I> property an enumerated value that tells what you want to do with that file. Depending on 
which operation you're performing, you might need to assign a value to either the 
<I>HelpKey </I>or <I>HelpContext </I>property. Table 12-5 summarizes all the supported commands.
</p>

<p><B>Table 12-5.</B> <I>All the possible values that can be assigned to the </I>HelpCommand <I>property when showing a help page.</I>
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>

<tr>
<td valign="top">cdlHelpContents</td>
<td valign="top">Show help contents page.</td>
</tr>

<tr>
<td valign="top">cdlHelpContext</td>
<td valign="top">Show the page whose context ID matches 
the value passed in the <I>HelpContext</I> property.</td>
</tr>

<tr>
<td valign="top">cdlHelpContextPopup</td>
<td valign="top">Same as cdlHelpContext, but the help page 
appears in a pop-up window.</td>
</tr>

<tr>
<td valign="top">cdlHelpKey</td>
<td valign="top">Show the page associated with the 
keyword passed in the <I>HelpKey</I> property.</td>
</tr>

<tr>
<td valign="top">cdlHelpPartialKey</td>
<td valign="top">Same as <I>cdlHelpKey</I>, but also searches for 
partial matches.</td>
</tr>

<tr>
<td valign="top">cdlHelpCommandHelp</td>
<td valign="top">Execute the help macro whose name has 
been assigned to the <I>HelpKey </I>property.</td>
</tr>

<tr>
<td valign="top">cdlHelpSetContents</td>
<td valign="top">The help page pointed to by the 
<I>HelpContext</I> property becomes the content page for the 
specified help file.</td>
</tr>

<tr>
<td valign="top">cdlHelpForceFile</td>
<td valign="top">Ensure that the help window is visible.</td>
</tr>

<tr>
<td valign="top">cdlHelpHelpOnHelp</td>
<td valign="top">Show the Help on Help page.</td>
</tr>

<tr>
<td valign="top">cdlHelpQuit</td>
<td valign="top">Close the help window.</td>
</tr>

<tr>
<td valign="top">cdlHelpIndex</td>
<td valign="top">Show help contents page (same 
as cdlHelpContents).</td>
</tr>

<tr>
<td valign="top">cdlHelpSetIndex</td>
<td valign="top">Set the current index for multi-index Help 
(same as cdlHelpSetContents).</td>
</tr>
</table>
</p>

<p>The following code snippet shows how you can display the contents 
page associated with a help file:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show the contents page of DAO 3.5 help file.
With CommonDialog1
    ' Note: The path of this file may be different on your system.
    .HelpFile = &quot;C:\WINNT\Help\Dao35.hlp&quot;
    .HelpCommand = cdlHelpContents
    .ShowHelp
End With
</pre>
</td></tr>
</table>
</p>

<p>You can also display a page associated with a keyword. If the keyword 
you provide in the <I>HelpKey </I>property doesn't match any particular page, the index of 
the help file is displayed instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With CommonDialog1
    .HelpFile = &quot;C:\WINNT\Help\Dao35.hlp&quot;
    .HelpCommand = cdlHelpKey
    .HelpKey = &quot;BOF property&quot;
    .ShowHelp
End With
</pre>
</td></tr>
</table>
</p>

<p>You can also display a page associated with a given context ID, in which 
case you assign the cdlHelpContext constant to the 
<I>HelpCommand</I> property and the context ID to the 
<I>HelpContext </I>property. Of course, you must know which context 
ID corresponds to the particular page you're interested in, but this isn't a problem if 
you're the author of the help file. For more information about help context IDs, see 
the section &quot;<A HREF="#208">Showing Help</A>&quot; in Chapter 5.
</p>


<a name="A77"></a><h3>6.4.3 The RichTextBox Control</h3>

<A HREF="#A76">[Previous]</A> <A HREF="#A78">[Next]</A><P>

<A NAME="524"><h1>The RichTextBox Control</h1></A>

<p>The RichTextBox control is one of the most powerful controls provided with 
Visual Basic. In a nutshell, it's a text box that's able to display text stored in 
<I>Rich Text Format</I> (RTF), a standard format recognized by virtually all word processors, 
including Microsoft WordPad (not surprisingly, since WordPad internally uses 
the RichTextBox control). This control supports multiple fonts and colors, left and 
right margins, bulleted lists, and more.
</p>

<p>You might need time to get used to the many features of the RichTextBox 
control. The good news is that the RichTextBox control is code-compatible with a 
regular multiline TextBox control, so you can often recycle code that you have 
written for a TextBox control. But unlike the standard TextBox control, the 
RichTextBox control has no practical limit to the number of lines of text it can contain.
</p>

<p>The RichTextBox control is embedded in the RichTx32.ocx file, which you 
must distribute with all the applications that use this control.
</p>

<A NAME="525"><h2>Setting Design-Time Properties</h2></A>

<p>You can set a few useful design-time properties in the General tab of the 
Property Pages dialog box as you can see in Figure 12-8. For example, you can type the 
name of a TXT or RTF file that must be loaded when the form is loaded and that 
corresponds to the <I>Filename </I>property.
</p>

<p>The <I>RightMargin</I> property represents the distance in twips of the right 
margin from the left border of the control. The 
<I>BulletIndent </I>is the number of twips a paragraph is indented when the 
<I>SetBullet </I>property is True. The <I>AutoVerbMenu 
</I>is an interesting property that lets you prevent the standard Edit pop-up menu from 
appearing when the user right-clicks on the control. If you want to display your own 
pop-up menu, leave this property as False. All the other properties in this General page 
are also supported by standard TextBox controls, so I won't describe them here.
</p>

<p>In the Appearance tab of the Properties dialog box, you find other 
properties, such as <I>BorderStyle </I>and 
<I>ScrollBars</I>, whose meaning should already be known to 
you. An exception is the <I>DisableNoScroll </I>property: When the 
<I>ScrollBars </I>property is assigned a value other than 0-rtfNone and you set the 
<I>DisableNoScroll </I>property to True, the RichTextBox control will always display the scroll bars, even if the current 
document is so short that it doesn't require scrolling. This is consistent with the behavior of 
most word processors.
</p>

<p>The RichTextBox control is data-aware and therefore exposes the 
usual <I>Data</I>xxxx properties that let you bind the control to a data source. In other 
words, you can write entire TXT or RTF documents in a single field of a database.
</p>

<p>
<A HREF="javascript:fullSize('F12PH08x.htm')"> <img src="F12PH08.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-8.</B> <i>The General tab of the Properties dialog box of a RichTextBox control.</i><!--/caption-->
</p>

<A NAME="526"><h2>Run-Time Operations</h2></A>
<p>The RichTextBox control exposes so many properties and methods that it makes 
sense to subdivide them in groups, according to the action you want to perform.
</p>

<A NAME="527"><h3>Loading and saving files</h3></A>
<p>You can load a text file into the control using the 
<I>LoadFile </I>method, which expects the filename and an optional argument that specifies whether the file is in RTF 
format (0-rtfRTF, the default) or plain text (1-rtfText):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Load an RTF file into the control.
RichTextBox1.LoadFile &quot;c:\Docs\TryMe.Rtf&quot;, rtfRTF
</pre>
</td></tr>
</table>
</p>

<p>The name of the file loaded by this method becomes available in the 
<I>FileName </I>property. You can also indirectly load a file into the control by assigning its name 
to the <I>FileName </I>property, but in this case you have no way of specifying the format.</p>
<p>You can save the current contents of the control using the 
<I>SaveFile</I> method, which has a similar syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save the text back into the RTF file.
RichTextBox1.SaveFile RichTextBox1.FileName, rtfRTF
</pre>
</td></tr>
</table>
</p>

<p>The <I>LoadFile </I>and <I>SaveFile </I>methods are a good solution when you want to 
load or save the entire contents of a file. At times, however, you might want to 
append the contents of the control to an existing file or store multiple portions of text in 
the same file. In such cases, you can use the <I>TextRTF 
</I>property with regular Visual Basic file commands and functions:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Store the RTF text from two RichtextBox controls in the same file.
Dim tmp As Variant
Open &quot;c:\tryme.rtf&quot; For Binary As #1
' Use an intermediate Variant variable to ease the process.
' (Don't need to store the length of each piece of data.)
tmp = RichTextBox1.TextRTF: Put #1, , tmp
tmp = RichTextBox2.Text RTF: Put #1, , tmp
Close #1

' Read the data back in the two controls.
Open &quot;c:\tryme.rtf&quot; For Binary As #1
Get #1, , tmp: RichTextBox1.TextRTF = tmp
Get #1, , tmp: RichTextBox2.TextRTF = tmp
Close #1
</pre>
</td></tr>
</table>
</p>

<p>You can use this technique to save and reload the entire contents of the 
control in plain or RTF format (using the <I>Text 
</I>and <I>TextRTF </I>properties), and you can 
even save and reload just the text that's currently selected (using the 
<I>SelText </I>and <I>SelRTF </I>properties).
</p>

<A NAME="528"><h3>Changing character attributes</h3></A>

<p>The RichTextBox control exposes many properties that affect the attributes of the 
characters in the selected text: These are 
<I>SelFontName</I>, <I>SelFontSize</I>, 
<I>SelColor</I>, <I>SelBold</I>, <I>SelItalic</I>, 
<I>SelUnderline</I>, and <I>SelStrikeThru</I>. Their names are self-explanatory, so I 
won't describe what each one does. You might find it interesting to note that all of the 
properties work as they would within a regular word processor. If text is currently 
selected, the properties set or return the corresponding attributes; if no text is currently 
selected, they set or return the attributes that are active from the insertion point onward.
</p>

<p>The control also exposes a <I>Font </I>property and all the various 
<I>Font</I>xxxx properties, but these properties affect the attributes only when the control is loaded. If 
you want to change the attribute of the entire document, you must select the 
whole document first:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change font name and size of entire contents.
RichTextBox1.SelStart = 0 
RichTextBox1.SelLength = Len(RichTextBox1.Text)
RichTextBox1.SelFontName = &quot;Times New Roman&quot;
RichTextBox1.SelFontSize = 12
' Cancel the selection.
RichTextBox1.SelLength = 0
</pre>
</td></tr>
</table>
</p>

<p>When you read the value of the <I>Sel</I>xxxx properties, you see that they 
return the attributes of the selected text but can also return Null if the selection includes 
characters with different attributes. This means that you must take precautions 
when toggling the attributes of the selected text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdToggleBold_Click()
    If IsNull(RichTextBox1.SelBold) Then
        ' Test for Null values first to avoid errors later.
        RichTextBox1.SelBold = True
    Else
        ' If not Null, we can toggle the Boolean value using
        ' the Not operator.
        RichTextBox1.SelBold = Not RichTextBox1.SelBold
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>A similar problem occurs when your application includes a toolbar 
whose buttons reflect the <I>Bold</I>, 
<I>Italic</I>, <I>Underline</I>, and other attributes of the selection. In 
this case, you need to use the <I>MixedState </I>property of the toolbar's Button objects and 
also exploit the fact that when the user selects or deselects text, the RichTextBox 
control fires a <I>SelChange </I>event:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub RichTextBox1_SelChange()
    ' Keep the toolbar's button in sync with current selection.
    If IsNull(RichTextBox1.SelBold) Then
        ToolBar1.Buttons(&quot;Bold&quot;).MixedState = True
    Else
        ToolBar1.Buttons(&quot;Bold&quot;).MixedState = False
        ToolBar1.Buttons(&quot;Bold&quot;).Value = IIf(rtfText.SelBold, _
            tbrPressed, tbrUnpressed)
    End If
    ' Add similar code that deals with Italic, Underline, and so on.
    ' ...
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The demonstration program shown in Figure 12-9 uses this technique. I 
built the skeleton of this program using the Application Wizard, but I had to manually 
edit the code generated by the wizard to account for the fact that many 
<I>Sel</I>xxxx properties can return Null values. I also included a CoolBar that hosts a transparent 
Toolbar control, using the technique described in <a href="#A67">Chapter 11</a>.
</p>

<p>
<A HREF="javascript:fullSize('F12ph09x.htm')"> <img src="F12ph09.JPG" width=404 height=319 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-9.</B> <i>The demonstration program is an MDI mini-word processor.</i><!--/caption-->
</p>

<p><I>SelProtect </I>is an interesting property that lets you protect the selected text 
from being edited. Use it when the document includes crucial data that you don't 
want the user to accidentally delete or modify. If you want nothing in the entire 
document to be modified, however, you'd better set the 
<I>Locked </I>property to True.
</p>

<A NAME="529"><h3>Changing paragraph attributes</h3></A>

<p>You can control the formatting of all the paragraphs that are included in the 
current selection. The <I>SelIndent </I>and <I>SelHangingIndent 
</I>properties work together to define the left indentation of the first line and all the following lines of a paragraph. 
The way these properties work differs from how word processors usually define 
these sorts of entities: The <I>SelIndent</I> property is the distance (in twips) of the first line 
of the paragraph from the left border, whereas the 
<I>SelHangingIndent </I>property is the indentation of all the following lines relative to the indentation of the first line. 
For example, this is the code that you must execute to have a paragraph that is 
indented by 400 twips and whose first line is indented by an additional 200 twips:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>RichTextBox1.SelIndent = 600   ' Left indentation + 1st line indentation
RichTextBox1.SelHangingIndent = -200   ' A negative value
</pre>
</td></tr>
</table>
</p>

<p>The <I>SelRightIndent </I>property is the distance of the paragraph from the right 
margin of the document (whose position depends on the 
<I>RightMargin </I>property). The following code moves the right margin about 300 twips from the right border of 
the control, and then sets a right indentation of 100 twips for the paragraphs that 
are currently selected:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' RightMargin is measured from the left border.
RichTextBox1.RightMargin = RichTextBox1.Width _ 300
RichTextBox1.SelRightIndent = 100
</pre>
</td></tr>
</table>
</p>

<p>You can control the alignment of a paragraph by means of the 
<I>SelAlignment </I>enumerated property, which can be assigned the values 0-rtfLeft, 1-rtfRight, 
or 2-rtfCenter. (The RichTextBox control doesn't support justified paragraphs.) You 
can read this property to retrieve the alignment state of all the paragraphs in the 
selection: In this case, the property returns Null if the paragraphs have different alignments.
</p>

<p>The <I>SelCharOffset </I>property lets you create superscript and subscript 
text&#8212;in other words, position characters slightly above or below the text baseline. A 
positive value for this property creates a superscript, a negative value creates a 
subscript, and a zero value restores the regular text position. You shouldn't assign this 
property large positive or negative values, though, because they would make the 
superscript or subscript text unreadable (or even invisible)&#8212;the RichTextBox 
control doesn't automatically adjust the distance between lines if they contain superscript 
or subscript text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Make the selection superscript text.
RichTextBox1.SelCharOffset = 40
' Don't forget to reduce the characters' size.
RichTextBox1.SelFontSize = RichTextBox1.SelFontSize \ 2
</pre>
</td></tr>
</table>
</p>

<p>The <I>SelBullet </I>Boolean property can be set to True to morph a normal 
paragraph into a bulleted paragraph. It returns the attribute of the paragraphs currently 
selected or Null if the selection includes paragraphs with different attributes:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Toggle the bullet attribute of the selected paragraphs.
Private Sub cmdToggleBullet_Click()
    If IsNull(RichTextBox1.SelBullet) Then
        RichTextBox1.SelBullet = True
    Else
        RichTextBox1.SelBullet = Not RichTextBox1.SelBullet
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can control the distance between the bullet and the paragraph body 
by using the <I>BulletIndent </I>property, which affects the entire document.
</p>

<A NAME="530"><h3>Managing the Tab key</h3></A>

<p>Like a real word processor, the RichTextBox control is capable of managing tab 
positions on a paragraph-by-paragraph basis. This is achieved using the two 
properties <I>SelTabCount </I>and <I>SelTabs</I>: The former sets the number of tab positions in 
the paragraphs included in the selection, and the latter sets each tab position to a 
given value. Here's a simple example that shows how you can use these properties:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add three tabs, at 300, 600, and 1200 twips from left margin.
RichTextBox1.SelTabCount = 3
' The SelTabs property is zero-based.
' Tabs must be specified in increasing order, otherwise they are ignored.
RichTextBox1.SelTabs(0) = 300
RichTextBox1.SelTabs(1) = 600
RichTextBox1.SelTabs(2) = 1200
</pre>
</td></tr>
</table>
</p>

<p>You can also read these properties to find the tab positions in selected 
paragraphs. Remember to account for Null values when the selection includes 
more paragraphs.
</p>

<p>Here's one more issue that you should consider when working with tabs: 
The Tab key inserts a tab character only if there aren't any controls on the form 
whose <I>TabStop </I>property is set to True. In all other cases, the only way to insert a tab 
character in the document is by using the Ctrl+Tab key combination.
</p>

<p>An easy way to work around this problem is to set the 
<I>TabStop</I> properties of all the controls to False when the focus enters the RichTextBox control and to 
reset them to True when the focus moves away from it. (Focus can move only when 
the user presses the hot key associated with another control or clicks on another 
control.) Here's a reusable routine that performs both jobs.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a BAS module
Sub SetTabStops(frm As Form, value As Boolean)
    Dim ctrl As Control
    On Error Resume Next
    For Each ctrl In frm.Controls
        ctrl.TabStop = value
    Next
End Sub

' In the form module that contains the RichTextBox control
Private Sub RichTextBox1_GotFocus()
    SetTabStops Me, False
End Sub
Private Sub RichTextBox1_LostFocus()
    SetTabStops Me, True
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="531"><h3>Searching and replacing text</h3></A>
<p>You can search text in a RichTextBox control by applying the 
<I>InStr </I>function to the value returned by the 
<I>Text </I>property. This control also supports the 
<I>Find </I>method, which makes the process even simpler and faster. The 
<I>Find </I>method has the following syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pos = Find(Search, [Start], [End], [Options])
</pre>
</td></tr>
</table>
</p>

<p><I>Search </I>is the string being searched. <I>Start 
</I>is the index of the character from which the search should start (the index of first character is zero). 
<I>End </I>is the index of the character where the search should end. 
<I>Options </I>is one or more of the following constants: 2-rtfWholeWord, 4-rtfMatchCase, and 8-rtfNoHighlight. If the search 
is successful, the <I>Find </I>method highlights the matching text and returns its 
position; if the search fails, it returns -1. The matching string is highlighted even if 
the <I>HideSelection </I>property is True, and the control doesn't have the focus unless 
you specify the rtfNoHighlight flag.
</p>

<p>If you omit the <I>Start </I>argument, the search starts from the current caret 
position and ends at the position indicated by the 
<I>End </I>argument. If you omit the <I>End</I> 
argument, the search starts from the position indicated by the 
<I>Start </I>argument and ends at the end of the document. If you omit both the 
<I>Start </I>and <I>End </I>arguments, the search is performed in the current selection (if there's selected text) or in the entire contents.
</p>

<p>Implementing a Search and Replace function is simple. Because the Find 
method highlights the found string, all you have to do to replace it is assign a new value 
to the <I>SelText </I>property. You can also easily write a routine that replaces all the 
occurrences of a substring and returns the number of replacements:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function RTFBoxReplace(rtb As RichTextBox, search As String, _
    replace As String, Optional options As FindConstants) As Long
    Dim count As Long, pos As Long
    Do
        ' Search the next occurrence.
        ' (Ensure that the rtfNoHighlight bit is off.)
        pos = rtb.Find(search, pos, , options And Not rtfNoHighlight)
        If pos = -1 Then Exit Do
        count = count + 1
        ' Replace the found substring.
        rtb.SelText = replace
        pos = pos + Len(replace)
    Loop
    ' Return the number of occurrences that have been replaced.
    RTFBoxReplace = count
End Function
</pre>
</td></tr>
</table>
</p>

<p>The <I>RTFBoxReplace </I>routine is considerably slower than a plain 
VBA <I>Replace </I>function, but it preserves the original attributes of the replaced string.
</p>

<A NAME="532"><h3>Moving the caret and selecting text</h3></A>

<p>The <I>Span </I>method extends the selection toward the start or the end of the 
document until a given character is found. Its syntax is the following:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Span CharTable, [Forward], [Negate]
</pre>
</td></tr>
</table>
</p>

<p><I>CharTable </I>is a string that contains one or more characters. 
<I>Forward </I>is the direction of the movement (True to move forward, False to move backward). 
<I>Negate </I>indicates where the movement terminates: If False (the default setting), it ends 
with the first character that doesn't belong to 
<I>CharTable </I>(and therefore the selection contains only characters that appear in 
<I>CharTable</I>). If True, the movement ends when any character contained in 
<I>CharTable </I>is encountered. (In this case, the 
selection contains only characters that don't appear in 
<I>CharTable.</I>) The <I>Span </I>method is useful for programmatically selecting a word or an entire sentence:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select from the caret to the end of the sentence.
' You need the CRLF to account for the paragraph's end.
RichTextBox1.Span &quot; .,;:!?&quot; &amp; vbCrLf, True, True
</pre>
</td></tr>
</table>
</p>

<p>To move the insertion point without selecting the text, you can use the 
<I>UpTo </I>method, which has the same syntax as 
<I>Span</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the caret to the end of the current sentence.
RichTextBox1.UpTo &quot; .,;:!?&quot; &amp; vbCrLf, True, True
</pre>
</td></tr>
</table>
</p>

<p>Another method that you might find useful is 
<I>GetLineFromChar</I>, which returns the line number that corresponds to a given offset from the beginning of the 
text. For example, you can use this method to display the number of the line on 
which the caret is currently located:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub RichTextBox1_SelChange()
    ' The return value from GetLineFromChar is zero-based.
    lblStatus.Caption = &quot;Line &quot; &amp; (1 + RichTextBox1.GetLineFromChar _
        (RichTextBox1.SelStart))
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can find out how many lines are in the current document by executing 
the following statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MsgBox (1 + RichTextBox1.GetLineFromChar(Len(RichTextBox1.Text))) _
    &amp; &quot; Lines&quot;
</pre>
</td></tr>
</table>
</p>

<A NAME="533"><h3>Printing the current document</h3></A>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The RichTextBox control directly supports printing through the 
<I>SelPrint </I>method, which prints the current selection or the entire document if no text is selected. 
Its syntax is the following:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SelPrint hDC, [StartDoc]
</pre>
</td></tr>
</table>
</p>

<p><I>hDC </I>is the device context of the target printer, and 
<I>StartDoc </I>is a Boolean value that determines whether the method also sends StartDoc and EndDoc commands to 
the printer. The latter argument has been introduced with Visual Basic 6, and it's 
useful when you're working with printers that don't behave in the standard way. You 
can print the entire document on the current printer with just two statements:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>RichTextBox1.SelLength = 0           ' Clear selection, if any.
RichTextBox1.SelPrint Printer.hDC    ' Send to the current printer.
</pre>
</td></tr>
</table>
</p>

<p>A drawback of the <I>SelPrint </I>method is that you don't have any control over 
print margins. The demonstration program included on the companion CD shows how 
you can overcome this limit by using a technique based on Windows API calls.
</p>

<A NAME="534"><h3>Embedding objects</h3></A>

<p>An intriguing feature of the RichTextBox control is its ability to embed OLE 
objects, which is similar to what you can do with the intrinsic OLE control. (The OLE 
control is briefly described in <a href="#A14">Chapter 3</a>.) You exploit this capacity by means of the 
<I>OLEObjects </I>collection, which holds 0 or more OLEObject items. Each OLEObject item 
corresponds to an OLE object that has been embedded in the document. You can 
programmatically embed a new OLE object through the 
<I>OLEObject</I> collection's <I>Add </I>method, 
which has the following syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add ([Index], [Key], [SourceDoc], [ClassName]) As OLEObject
</pre>
</td></tr>
</table>
</p>

<p><I>Index </I>is the position in the collection where the object will be inserted. 
<I>Key </I>is an alphabetical key that will uniquely identify the object in the collection. 
<I>SourceDoc </I>is the filename of the embedded document that will be copied into the 
RichTextBox control. (It can be omitted to insert a blank document.) 
<I>ClassName </I>is the class name of the embedded object. 
(<I>ClassName</I> can be omitted if <I>SourceDoc 
</I>is specified.) For example, you can embed a blank Microsoft Excel worksheet at the current 
caret position by executing this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This new object is associated to the &quot;Statistics&quot; key.
Dim statObj As RichTextLib.OLEObject
Set statObj = RichTextBox1.OLEObjects.Add(, &quot;Statistics&quot;, _
    , &quot;Excel.Sheet&quot;)
</pre>
</td></tr>
</table>
</p>

<p>As soon as you add an OLEObject, it becomes active and is ready for 
input. OLEObject items expose a few properties and methods that let you (partially) 
control them through code. For example, the <I>DisplayType 
</I>property determines whether the object should display its contents (0-rtfDisplayContent) or its icon (1-rtfDisplayIcon):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show the object just added as an icon.
statObj.DisplayType = rtfDisplayIcon
</pre>
</td></tr>
</table>
</p>

<p>Each embedded object supports a number of actions, called 
<I>verbs</I>. You can retrieve the verbs supported by the embedded object by using the 
<I>FetchVerbs</I> and then querying the <I>ObjectVerbs 
</I>and <I>ObjectVerbsCount </I>properties:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the list of supported verbs to the Debug window.
statObj.FetchVerbs
For i = 0 To statObj.ObjectVerbsCount _ 1
    ' These strings are printed as they might appear in a pop-up
    ' menu and can include an &amp; character.
    Debug.Print Replace(statObj.ObjectVerbs(i), &quot;&amp;&quot; , &quot;&quot;)
Next
</pre>
</td></tr>
</table>
</p>

<p>The list of supported verbs typically includes actions such as Edit or Open. 
You can execute one of these actions by using the 
<I>DoVerb</I> method, which accepts a verb name, an index in the 
<I>ObjectVerbs </I>property, or a negative value for common 
actions (-1vbOLEShow, -2vbOLEOpen, -3vbOLEHide, -4vbOLEUIActivate, 
-5vbOLEInPlaceActivate, -6vbOLEDiscardUndoState). You can determine whether a verb 
is available by testing the <I>ObjectVerbsFlags 
</I>property. For example, you can print the contents of an embedded object using this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim i As Integer
For i = 0 To statObj.ObjectVerbsCount _ 1
    ' Filter out &quot;&amp;&quot; characters.
    If Replace(statObj.ObjectVerbs(i), &quot;&amp;&quot; , &quot;&quot;) = &quot;Print&quot; Then
        ' A &quot;Print&quot; verb has been found, check its current state.
        If statObj.ObjectVerbFlags(i) = vbOLEFlagEnabled Then
            ' If the verb is enabled, start the print job.
            statObj.DoVerb i
        End If
        Exit For
    End If
Next
</pre>
</td></tr>
</table>
</p>

<p>For more information about this feature, see the Visual Basic documentation.
</p>


<a name="A78"></a><h3>6.4.4 The SSTab Control</h3>

<A HREF="#A77">[Previous]</A> <A HREF="#A79">[Next]</A><P>

<A NAME="535"><h1>The SSTab Control</h1></A>

<p>The SSTab control permits you to create tabbed dialog boxes almost the same 
way the TabStrip common control does it. The most important difference between the 
two controls is that the SSTab control is a real container, so you can place child 
controls directly on its surface. You can even switch among tabbed pages at design 
time, making the job of preparing the control much simpler and quicker than with 
the TabStrip control. Many programmers find it easier to work with the SSTab 
control because the control doesn't contain dependent objects, and the syntax of 
properties and events is more straightforward.
</p>

<p>The SSTab control is embedded in the TabCtl32.ocx file, which must 
therefore be distributed with any Visual Basic application that uses this control.
</p>

<A NAME="536"><h2>Setting Design-Time Properties</h2></A>

<p>The first thing to do after you drop an SSTab control on a form is to change 
its <I>Style </I>property from the default 0-ssStyleTabbedDialog value to the more 
modern 1-ssStylePropertyPage setting, which you can see in Figure 12-10. The tabs are 
usually displayed on the upper border of the control, but you can change this 
default setting by using the <I>TabOrientation 
</I>property.
</p>

<p>
<A HREF="javascript:fullSize('F12PH10x.htm')"> <img src="F12PH10.JPG" width=404 height=270 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-10.</B> <i>The General tab of the Property Pages dialog box of an SSTab control.</i><!--/caption-->
</p>

<p>You can add new tabs (or delete existing ones) by typing a value in 
the TabCount field (which corresponds to the <I>Tabs 
</I>property), and you can create multiple rows of tabs by setting a suitable value for the 
<I>TabsPerRow </I>property. After you have created enough tabs, you can use the spin buttons to move from tab to tab 
and modify each one's <I>TabCaption </I>property. (This property is the only field in the 
dialog box whose value depends on the Current Tab field.) Tab captions can include 
<I>&amp;</I> characters to define hot keys for a quick selection.
</p>

<p>The <I>TabHeight </I>property is the height in twips of all the tabs in the control. 
The <I>TabMaxWidth </I>property is the maximum width of a tab. (A zero width means that 
the tab is just large enough to accommodate its caption.) The 
<I>WordWrap </I>property must be True to let longer captions wrap around. If 
<I>ShowFocusRect </I>is True, a focus rectangle is displayed on the tab that has the focus.
</p>

<p>Each tab can display a little image. To set it at design time, you first set the 
current tab in the General page of the Properties dialog box, switch to the Picture 
tab, click on the Picture property in the leftmost listbox, and then select the bitmap 
or icon that you want to assign to the current tab. This bitmap can be referenced in 
code using the <I>TabPicture </I>property.
</p>

<p>After you have created the tabs you need, you can place controls on each 
one of them. This operation is simple because you can select tabs even at design 
time. But you should be aware of an important detail: From Visual Basic's standpoint, 
all the controls you place on different tabs are contained in the SSTab control. In 
other words, the container is the SSTab control, not its tab pages. This has a number 
of implications&#8212;for example, if you have two groups of OptionButton controls on 
two different tab pages of the SSTab control, you should place each group in a 
separate Frame or another container, otherwise Visual Basic sees them as a single group.
</p>

<A NAME="537"><h2>Run-Time Operations</h2></A>

<p>The main property of the SSTab control is 
<I>Tab</I>, which returns the index of the tab currently selected by the user. You can also set it to switch to another tab by 
means of code. The first tab has a 0 index.
</p>

<A NAME="538"><h3>Changing a tab's attributes</h3></A>

<p>You don't need to make a tab current to modify its attributes because most 
properties expect an index. For example, you can read or modify a tab's caption using 
the <I>TabCaption </I>property, add a picture to a tab using the 
<I>TabPicture </I>property, enable or disable a tab with the 
<I>TabEnabled </I>property, and make it visible or invisible 
using the <I>TabVisible </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change caption and bitmap of the second tab. (Tabs' indexes are 0-based.)
SSTab1.TabCaption(1) = &quot;Information&quot;
' Note: The actual path of this file might be different on your system.
filename = &quot;c:\VisStudio\Common\Graphics\Bitmaps\Assorted\balloon.bmp&quot;
SSTab1.TabPicture(1) = LoadPicture(filename)
' Make the first tab invisible.
SSTab1.TabVisible(0) = False
</pre>
</td></tr>
</table>
</p>

<p>The <I>Tabs </I>property returns the number of existing tabs:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Disable all the tabs except the current one.
For i = 0 To SSTab1.Tabs _ 1
    SSTab1.TabEnabled(i) = (i = SSTab1.Tab)
Next
</pre>
</td></tr>
</table>
</p>

<A NAME="539"><h3>Creating new tabs</h3></A>
<p>You can create new tabs at run time by increasing the value of the 
<I>Tabs </I>property. You can append the new tab in one place only: following all the existing ones.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SSTab1.Tabs = SSTab1.Tabs + 1
SSTab1.TabCaption(SSTab1.Tabs - 1) = &quot;Summary&quot;
</pre>
</td></tr>
</table>
</p>

<p>After you've created a new tab, you might want to add new controls to it. 
You can do that by dynamically creating new controls and then changing their 
<I>Container </I>properties. The control becomes a child of the tab that's currently selected:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a TextBox control.
Dim txt As TextBox
Set txt = Controls.Add(&quot;VB.TextBox&quot;, &quot;txt&quot;)
' Move it on the new tab. (You must select it first.)
SSTab1.Tab = SSTab1.Tabs - 1
Set txt.Container = SSTab1
txt.Move 400, 800, 1200, 350
txt.Visible = True
</pre>
</td></tr>
</table>
</p>

<A NAME="540"><h3>Reacting to tab selection</h3></A>
<p>The SSTab control doesn't expose any custom events. The 
<I>Click </I>event, however, receives the index of the tab that was current previously. You can use this 
argument to validate the controls on the tab that lost the focus and to reset the 
<I>Tab </I>property to cancel the focus shift:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub SSTab1_Click(PreviousTab As Integer)
    Static Active As Boolean
    If Active Then Exit Sub
    ' Prevent recursive calls.
    Active = True
    Select Case PreviousTab
        Case 0
            ' Validate controls on first tab.
            If Text1 = &quot;&quot; Then SSTab1.Tab = 0
        Case 1
            ' Validate controls on the second tab.
            ' ...
    End Select
    Active = False
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Setting the <I>Tab </I>property in code fires a 
<I>Click </I>event, so you must protect your code from recursive calls to the event procedure using a Static flag (the 
<I>Active </I>variable in the previous routine).
</p>

<A NAME="541"><h3>Managing the input focus</h3></A>
<p>You should be aware of a couple of issues concerning the way the SSTab control 
manages the input focus:
</p>

<UL>
<p><li> When the user presses the hot key that corresponds to a child 
control placed on a tab other than the current one, the input focus moves to 
that control. But the SSTab control doesn't automatically change the 
current tab to make the control visible.
</li></p>
 
<p><li> When the user moves to another tab, the input focus doesn't 
automatically move to the first control on that tab.
</li></p>
</UL>
<p>The easiest solution to the first problem is to disable all controls that aren't 
on the current tab so that they don't receive the input focus if the user presses their 
hot keys. There's no documented way to learn which controls are on which pages, 
but it's easy to demonstrate that the SSTab control moves off screen all the child 
controls that don't belong to the current tab; this is achieved by setting a negative value 
for the <I>Left </I>property of each child. You can temporarily disable all such controls 
using the following approach:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This routine can be reused for any SSTab controls in the application.
Sub ChangeTab(SSTab As SSTab)
    Dim ctrl As Control, TabIndex As Long
    TabIndex = 99999          ' A very high value.
    On Error Resume Next

    For Each ctrl In SSTab.Parent.Controls
        If ctrl.Container Is SSTab Then
            If ctrl.Left &lt; -10000 Then
                ctrl.Enabled = False
            Else
                ctrl.Enabled = True
                If ctrl.TabIndex &gt;= TabIndex Then
                    ' This control comes after our best candidate or
                    ' it doesn't support the TabIndex property.
                Else
                    ' This is the best candidate so far to get the focus.
                    TabIndex = ctrl.TabIndex
                    ctrl.SetFocus
                End If
            End If
        End If
    Next
End Sub

' Call from within the Click event procedure.
Private Sub SSTab1_Click(PreviousTab As Integer)
    ChangeTab SSTab1
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>ChangeTab </I>routine also solves the second problem, mentioned 
previously, of moving the focus to the current tab. It does this by moving the focus to the 
control with the lowest value for the <I>TabIndex 
</I>property among all the child controls on the current tab. The only thing you have to do is assign an increasing value to 
the <I>TabIndex </I>properties of the child controls of a SSTab control. For more details, see 
the source code of the demonstration application provided on the companion CD.
</p>


<a name="A79"></a><h3>6.4.5 The SysInfo Control</h3>

<A HREF="#A78">[Previous]</A> <A HREF="#A80">[Next]</A><P>

<A NAME="542"><h1>The SysInfo Control</h1></A>
<p>The SysInfo control helps Visual Basic programmers create applications that 
are compliant with the Windows logo program. One of the prerequisites for such 
applications is the ability to react to systemwide events, such as when the screen 
resolution changes or when a plug-and-play device is connected to or disconnected 
from the system.
</p>

<p>The SysInfo control is embedded in the SysInfo.ocx file, which must be 
distributed with any application that uses this control.
</p>

<A NAME="543"><h2>Properties</h2></A>

<p>The SysInfo control is pretty easy to use: It doesn't expose any design-time 
properties or support any methods. You use a SysInfo control by querying its run 
time-only properties and writing code for its events. The properties of a SysInfo control can 
be subdivided into three groups: Properties that return information on the 
operating system, those that return information on screen settings, and those that return 
information about battery status. All the properties exposed by this control are read-only.
</p>

<p>The first group includes the <I>OSPlatform</I>, 
<I>OSVersion</I>, and <I>OSBuild </I>properties. 
<I>OSPlatform </I>returns 1 if the application is being executed under Windows 95 
or Windows 98, or it returns 2 if it's being executed under Windows NT. 
<I>OSVersion </I>returns the Windows version (as a Single value). 
<I>OSBuild </I>lets you distinguish among different builds of the same version.
</p>

<p>The second group comprises these properties: 
<I>WorkAreaLeft</I>, <I>WorkAreaTop</I>, 
<I>WorkAreaWidth</I>, <I>WorkAreaHeight</I>, and 
<I>ScrollBarSize</I>. The first four properties 
return the position and the size (in twips) of the work area&#8212;that is, the portion of the 
desktop not occupied by the Windows taskbar. You can use this information to 
properly move and resize your forms. <I>ScrollBarSize 
</I>returns the system-defined width of vertical scrollbars: You can use this data to make your scroll bars look good at any 
screen resolution.
</p>

<p>The third group includes the following properties: 
<I>ACStatus</I> (0 for batteries, 1 for AC power), 
<I>BatteryFullTime </I>(the estimated battery life), 
<I>BatteryLifePercent </I>(the estimated remaining battery life as a percentage), 
<I>BatteryLifeTime </I>(the estimated remaining battery life in seconds), and 
<I>BatteryStatus </I>(1 for High, 2 for Low, 4 for Critical, 8 for Charging). All these properties return a special value 
(-1 for <I>ACStatus </I>and <I>BatteryStatus</I>, 255 for the other properties) when the requested information 
is unknown. For more information, see the source code of the demonstration 
program (shown in Figure 12-11) provided on the companion CD.
</p>

<p>
<img src="F12ph11.GIF" width=391 height=298 border="0">
<p>
<!--caption--><B>Figure 12-11.</B> <i>The demonstration program shows how to leverage all the properties and events of the SysInfo control.</i><!--/caption-->


<A NAME="544"><h2>Events</h2></A>
<p>The SysInfo control exposes 18 custom events. They can be subdivided into 
the following four groups:
</p>

<UL>
<p><li> Events that fire when a plug-and-play device is connected or 
disconnected: <I>DeviceArrival</I>, 
<I>DeviceOtherEvent</I>, <I>DeviceQueryRemove</I>, 
<I>DeviceQueryRemoveFailed</I>, 
<I>DeviceRemoveComplete</I>, and <I>DeviceRemovePending.</I>
</li></p>
<p><li> Events that fire when the hardware configuration changes: 
<I>QueryChangeConfig</I>, <I>ConfigChanged</I>, and 
<I>ConfigChangeCancelled. </I>You can cancel such changes by returning True in the 
<I>Cancel </I>parameter of a 
<I>QueryChangeConfig</I> event.
</li></p>
<p><li> Events that fire when the power state changes: 
<I>PowerQuerySuspend</I>, <I>PowerResume</I>, 
<I>PowerStatusChanged</I>, and <I>PowerSuspend</I>. For 
example, you can react to a <I>PowerSuspend </I>event by saving all critical data to disk.
</li></p>
<p><li> Events that fire when system settings change: 
<I>DisplayChanged</I>, <I>SysColorsChanged</I>, 
<I>TimeChanged</I>, <I>SettingChanged</I>, and 
<I>DevModeChanged</I>. The last event fires when the configuration of a device is modified by 
the user or another program.
</li></p>
</ul>

<p>The simplest and most useful events are 
<I>DisplayChanged</I>, <I>SysColorChanged</I>, and 
<I>TimeChanged</I>, whose names are self-explanatory. Another interesting event 
is <I>SettingChanged</I>, which receives an integer that states which particular system 
setting has been modified. For example, your application can detect when the user has 
moved or resized the Windows taskbar in the following way:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub SysInfo1_SettingChanged(ByVal Item As Integer)
    Const SPI_SETWORKAREA = 47
    If Item = SPI_SETWORKAREA Then Call Resize_Forms
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Apart from the simplest cases, however, taking advantage of 
<I>SysInfo</I> events requires a thorough knowledge of the Windows operating system.
</p>


<a name="A80"></a><h3>6.4.6 The MSChart Control</h3>

<A HREF="#A79">[Previous]</A> <A HREF="#A82">[Next]</A><P>

<A NAME="545"><h1>The MSChart Control</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The MSChart control is an external ActiveX control that lets you add charting 
capabilities to your applications. You can create two- and three-dimensional charts 
in different styles, including bars, lines, and pies. You have complete control over 
all the items in the chart, such as title, legends, footnotes, axes, data point series, 
and so on. You can even rotate the graph, add backdrop images to virtually any 
element of the chart, set up your own light sources, and place them where you want. At 
run time, users can select portions of the chart and move and resize them at will, if 
you want to provide them with this capability.
</p>

<p>The MSChart control is undoubtedly the most complicated ActiveX control 
ever provided with Visual Basic. Just to give you an idea of its complexity, consider 
that its type library includes 47 different objects, most of which have dozens of 
properties, methods, and events. A detailed description of this control would require 
100 pages of text, if not more. For this reason, I'll illustrate only a few of its major 
characteristics and provide just a few code samples. If you dare to dive into the 
intricacies of this hierarchy, you'll find Figure 12-12 some help in keeping you from 
getting lost in this maze.
</p>

<p>The topmost object of this hierarchy is MSChart, which lets you set the 
general characteristics of the chart and also exposes several custom events. All the other 
objects in the hierarchy are dependents of MSChart.
</p>

<p>The DataGrid object is where you store the data that you want to display 
graphically. The Plot object is a compound object (that is, an object with other child 
objects) that contains all the graphical information about the data series (color, 
markers, backdrop pattern, position and attributes of light sources, and so on). The 
Title, Legend, and Footnote objects are compound objects with similar structures and 
control over the features of the relevant elements of the chart (text, color, position, and so on).
</p>

<p>
<A HREF="javascript:fullSize('F12PH12x.htm')"> <img src="F12PH12.JPG" width=404 height=639 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-12.</B> <i>The top levels of the MSChart hierarchy.</i><!--/caption-->
</p>

<A NAME="546"><h2>Setting Design-Time Properties</h2></A>

<p>The MSChart control has the richest Property Pages dialog box among the 
controls provided in the Visual Basic package (see Figure 12-13), 
with eight tabs.
</p>

<p>The Chart tab is where you decide which type of graphic you want to 
display, whether you want to stack series, and whether you show legends that explain 
what each data series is. These settings correspond to the 
<I>ChartType</I>, <I>Chart3d</I>, <I>Stacking</I>, and 
<I>ShowLegend </I>properties of the MSChart object.
</p>

<p>The Axis tab is where you select the attributes of the axis of the chart: line 
width and color, whether the scale is displayed, and whether the scale is determined 
automatically by the control (the recommended setting) or manually by the 
programmer. In the latter case, you have to set minimum and maximum values and the 
frequency of divisions. Two-dimensional charts have three axes 
(<I>x</I>-axis, <I>y</I>-axis, and secondary 
<I>y</I>-axis), while three-dimensional charts have an additional fourth axis 
(<I>z</I>-axis). Your code can modify these properties using the Axis object, a child of the Plot object.
</p>

<p>
<A HREF="javascript:fullSize('F12PH13x.htm')"> <img src="F12PH13.JPG" width=404 height=282 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-13.</B> <i>The Chart tab of the Property Pages dialog box of the MSChart control.</i><!--/caption-->
</p>

<p>The AxisGrid tab lets you modify the style lines of axis grids; these settings 
correspond to the properties of the AxisGrid object, a child of the Axis object.
</p>

<p>In the Series tab, you define how each data series should be displayed. You 
can hide a series (but reserve the space for it on the chart), exclude it (this also 
reuses its space on the chart), show its markers, and draw it on the secondary 
<I>y</I>-axis. If you are drawing a two-dimensional Line chart, you can also display statistical data, 
such as minimum and maximum values, mean, standard deviation, and regression. 
You can modify these features through code by acting on the SeriesCollection and 
the Series objects.
</p>

<p>You refine the appearance of each data series in the SeriesColor tab, where 
you select the color and the style of the edge and the interior of each series. (The 
latter isn't available for Line and X-Y charts.) Your code can manipulate these 
properties through the DataPoint object.
</p>

<p>All the main objects in the control&#8212;MsChart, Plot, Title, Legend, and 
Footnote&#8212;can have a backdrop pattern. You define the color and style of each backdrop in 
the Backdrop tab of the Property Pages window. The title, the legends, and the axis in 
your graph expose a Title, and you can set its properties in the Text and the Font tabs.
</p>

<A NAME="547"><h2>Run-Time Operations</h2></A>

<p>Unless you want to give users the ability to modify some key properties of your 
charts, you can define all the key properties at design time using the Property Pages 
dialog box so that at run time you only have to feed the MSChart control the actual data 
to be displayed. You achieve this using the DataGrid object.
</p>

<p>You can think of the DataGrid object as a multidimensional array that holds 
both data and its associated labels. You define the size of the array by assigning a 
value to the DataGrid's <I>RowCount </I>and <I>ColumnCount 
</I>properties, and you define the number of labels with the 
<I>RowLabelCount </I>and <I>ColumnLabelCount </I>properties. For 
example, you might have 12 rows of data to which you add a label at every third data point:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' 12 rows of data, with a label every third row
MSChart1.DataGrid.RowCount = 12
MSChart1.DataGrid.RowLabelCount = 4
' 10 columns of data, with a label on the 1st and 6th column
MSChart1.DataGrid.ColumnCount = 10
MSChart1.DataGrid.ColumnLabelCount = 2
</pre>
</td></tr>
</table>
</p>

<p>Alternatively, you can set these four properties in one operation using the 
<I>SetSize </I>method:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Syntax is: SetSize RowLabelCount, ColLabelCount, RowCount, ColCount
MSChart1.DataGrid.SetSize 4, 2, 12, 10
</pre>
</td></tr>
</table>
</p>

<p>You define the label text using the <I>RowLabel 
</I>and <I>ColumnLabel </I>properties, which accept two arguments: the row or column number and the number of the label 
you want to assign.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Set a label every three years.
MSChart1.DataGrid.RowLabel(1, 1) = &quot;1988&quot;
MSChart1.DataGrid.RowLabel(4, 2) = &quot;1991&quot;
MSChart1.DataGrid.RowLabel(7, 3) = &quot;1994&quot;
' And so on.
</pre>
</td></tr>
</table>
</p>

<p>You can set the value of individual data points using the 
<I>SetData</I> method, which has the following syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MSChart.DataGrid.SetData Row, Column, Value, NullFlag
</pre>
</td></tr>
</table>
</p>

<p>where <I>Value </I>is a Double value and <I>NullFlag 
</I>is True if the data is Null. You can easily (and quickly) insert or delete rows or columns using a number of 
methods exposed by the DataGrid object. Among these are 
<I>InsertRows</I>, <I>DeleteRows</I>, 
<I>InsertColumns</I>, <I>DeleteColumns</I>, 
<I>InsertRowLabels</I>, <I>DeleteRowLabels</I>, 
<I>InsertColumnLabels</I>, and 
<I>DeleteColumnLabels</I>. You can also fill the grid with random values (useful for 
providing the user with visual feedback even without actual data values) with the 
method <I>RandomDataFill</I>.
</p>

<p>You can learn a lot about the MSChart control by studying the 
Chrtsamp.vbp sample project that comes with Visual Basic 6 and is shown in Figure 12-14.
</p>

<p>
<A HREF="javascript:fullSize('F12ph14x.htm')"> <img src="F12ph14.JPG" width=404 height=292 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-14.</B> <i>The sample Microsoft Chart program.</i><!--/caption-->
</p>

<p>The Visual Basic package includes other controls that you might find useful 
in your applications. Unfortunately, I don't have room to explore all of them in 
depth. The controls that I have illustrated in this chapter and in Chapters <a href="#A57">10</a> and <a href="#A67">11</a>, 
however, should suffice to help you create sophisticated Windows applications with 
great user interfaces.
</p>


<p>This chapter concludes a series dedicated to building the user interface of 
your applications. Creating a good-looking and logical user interface is a requirement 
for a successful Windows application, but appearance isn't everything. In fact, the 
real value of an application is in its ability to process data, so the majority of the 
programs you'll write in Visual Basic have to read, write, and process the information 
stored in a database. In Part III of this book, I show you how to do all that in the 
most efficient way.
</p>

<a name="A81"></a><h1>7. Part III: Database Programming</h1>
<a name="A82"></a><h2>7.1 Chapter 13 -- The ADO Object Model</h2>

<A HREF="#A80">[Previous]</A> <A HREF="#A83">[Next]</A><P>


<font size="+3">Chapter 13</font>

<A NAME="548"><H1>The ADO Object Model</H1></A>
<p>The Microsoft ActiveX Data Objects (ADO) architecture is considerably less complicated than that of the DAO or RDO object model. The relative simplicity of the ADO architecture doesn't mean that learning ADO is simple, however. Even though the ADO object model has fewer objects and collections than DAO and RDO, those elements it has are often more complex than their DAO or RDO counterparts because they expose more methods and properties. A few ADO objects also expose events, which weren't implemented in DAO.</p>

<p>Figure 13-1 depicts the complete ADO 2.0 object model. As you can see, ADO has three main independent objects&#8212;the Connection object, the Recordset object, and the Command object&#8212;each of which exposes two collections. The Connection, Recordset, and Command objects aren't related explicitly. You create relationships among them implicitly within the running code&#8212;for example, by assigning a Connection object to the <I>ActiveConnection </I>property of a Recordset object. This ability to create relationships among database objects gives you an unparalleled flexibility that's unknown to DAO and RDO developers.</p>

<p>In this chapter, I focus on the properties, methods, and events of the objects in the ADO hierarchy. (In <a href="#A90">Chapter 14</a>, I describe how you use these objects in database applications.) To demonstrate how ADO works, I've prepared an ADO Workbench application that lets you interactively create Connection, Command, and Recordset objects; execute their methods; see how their properties change; and watch their events fire. (See Figure 13-2.) The program is complex, with 10 modules and about 2000 lines of code, but you'll find it a very useful way to practice with ADO without having to write a single line of code. In fact, as I was using this program, I discovered several interesting details about ADO that I'll share with you in this chapter and in <a href="#A90">Chapter 14</a>.</p>

<p>
<A HREF="javascript:fullSize('F13ph01x.htm')"> <img src="F13ph01.JPG" width=404 height=480 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-1.</B> <i>The ADO 2.0 object model.</i><!--/caption-->
</p>

<p>One reason the ADO object model is simpler than the DAO and RDO object models is that it has fewer collections, which abound in DAO and RDO. For example, in ADO you can create any number of Connection and Recordset objects, but they are stand-alone objects and the object hierarchy won't maintain a reference to them for you. At first glance, you might believe that having to keep track of all the active objects and store them in your own collections if you want to use them later is going to make your job a bit more difficult. But when you take a closer look, you'll realize that dealing with stand-alone objects greatly simplifies the structure of your programs because in most cases you don't have to write cleanup code: When an object goes out of scope, ADO takes care of its correct termination and automatically closes open Recordsets and connections if necessary. This approach reduces memory leaking and delivers applications that require fewer resources.</p>

<p>
<A HREF="javascript:fullSize('F13ph02x.htm')"> <img src="F13ph02.JPG" width=404 height=319 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-2.</B> <i>The ADO Workbench application in action.</i><!--/caption-->
</p>

<p>As you'll see in the rest of this chapter, ADO compensates for its fewer objects by having each object expose more properties than comparable objects in the DAO and RDO models do. All main ADO objects expose a Properties collection, which includes any number of <I>dynamic properties </I>that are specific to a given OLE DB provider and that account for the particular features of that provider. You shouldn't confuse these dynamic properties, whose availability depends on the OLE DB Provider, with the <I>built-in </I>properties that use the standard dot syntax and that are always available, regardless of the provider you're using.</p>


<a name="A83"></a><h3>7.1.1 The Connection Object</h3>

<A HREF="#A82">[Previous]</A> <A HREF="#A84">[Next]</A><P>

<A NAME="549"><h1>The Connection Object</h1></A>
<p>The ADO Connection object represents an open connection to a data source. This data source might be a database, an ODBC source, or any other source for which an OLE DB provider exists. The Connection object lets you specify all the necessary parameters&#8212;for example, the server and the database names, the user's name and password, and the timeout&#8212;before opening the data source. Connection objects are also important because they serve as containers for transactions. Each connection belongs to a given client application and is closed only when you explicitly close it, when you set the object variable to Nothing, or when your application ends.</p>

<A NAME="550"><h2>Properties</h2></A>
<p>The Connection object doesn't expose many properties. Rather than list each property individually, I've grouped them according to their purposes: Preparing for the connection, managing transactions, and determining the state of the connection and what version of ADO is running.</p>

<A NAME="551"><h3>Preparing for the connection</h3></A>
<p>A group of properties lets you specify which database should be open and in which mode. All these properties can be written to before the connection is opened, but they become read-only after the connection has been established. The <I>Provider </I>property is the name of the OLE DB provider for the connection&#8212;for example, &quot;SQLOLEDB&quot; for the Microsoft SQL Server OLE DB Provider. If you leave this property unassigned, the default MSDASQL provider is used which is the OLE DB Provider for ODBC Drivers, a sort of bridge that permits you to connect to almost any relational database on earth even if an OLE DB provider hasn't been developed for it yet (provided that an ODBC driver exists for that database, of course). MSDASQL is also known by the code name &quot;Kagera.&quot;</p>

<p>Instead of assigning a value to the <I>Provider </I>property, you can pass the provider's name in the <I>ConnectionString </I>property together with other parameters the OLE DB provider expects. For example, this connection string opens the Biblio.mdb database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cn As New ADODB.Connection
cn.ConnectionString = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source=C:\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;
</pre>
</td></tr></table></p>

<p>The following connection string opens the Pubs SQL Server database on a server named &quot;ServerNT&quot;. (The connection string also contains the user's name and password.)

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.ConnectionString = &quot;Provider=SQLOLEDB;Server=ServerNT;&quot; _
    &amp; &quot;User ID=MyID;Password=MyPWD;Data Source=Pubs&quot;
</pre>
</td></tr></table></p>

<p>You shouldn't specify the provider name in the <I>ConnectionString</I> property and the <I>Provider</I> property at the same time because the results are unpredictable.</p>

<p>A simple way to build a connection string is to drop an ADO Data control on a form, open its property pages, select the Use Connection String option, and click on the Build button. A new dialog box appears, in which you can select the provider, the user name, the user password, and all the provider-dependent dynamic properties, as shown in Figure 13-3. When you've finished, the complete string connection appears in the General tab of the Properties dialog box.</p>

<p>Mastering the syntax for specifying the <I>ConnectionString </I>property can be difficult because the string can include many different arguments in the form <I>argname=value</I>. This task is made more complex by the fact that when you're connecting to an ODBC source, the <I>ConnectionString </I>property also supports ODBC attributes that can coexist with newer OLE DB attributes. Table 13-1 lists a few of the most common attributes that you can specify in this string.</p>

<p><B>Table 13-1.</B> <i>Some of the arguments you can use in the 
ConnectionString property.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Argument</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top"><I>Data Source</I></td>
<td valign="top">The name of the SQL Server or the name of the MDB database to which you want to connect. When connecting to an ODBC source, this argument can also be the name of a Data Source Name (DSN).</td>
</tr>
<tr>
<td valign="top"><I>DSN</I></td>
<td valign="top">An ODBC source name registered on the current machine; this argument can replace the <I>Data Source</I> argument.</td>
</tr>
<tr>
<td valign="top"><I>Filename</I></td>
<td valign="top">A file that contains information about the connection; this argument can be an ODBC DSN file or a Microsoft Data Link (UDL) file.</td>
</tr>
<tr>
<td valign="top"><I>Initial Catalog</I></td>
<td valign="top">The name of the default database. When connecting to an ODBC source, you can also use the <I>Database</I> argument.</td>
</tr>
<tr>
<td valign="top"><I>Password</I></td>
<td valign="top">The user's password. When connecting to an ODBC source, you can use the <I>PWD</I> argument. You don't need to pass your user ID and password if you're connecting to SQL Server and you use integrated security.</td>
</tr>
<tr>
<td valign="top"><I>Persist Security Info</I></td>
<td valign="top">True if ADO stores the user ID and the password in the data link.</td>
</tr>
<tr>
<td valign="top"><I>Provider</I></td>
<td valign="top">The name of the OLE DB provider; the default value is MSDASQL, the provider for ODBC sources.</td>
</tr>
<tr>
<td valign="top"><I>User ID</i></td>
<td valign="top">The user's name. When connecting to an ODBC source, you can use the UID argument instead.</td>
</tr>
</table></p>

<p>The <I>DefaultDatabase </I>property is the name of the default database for the connection. Many ADO dialog boxes refer to this property with the name Initial Catalog. This property isn't available until the connection has been opened, and it's read-only afterward.</p>

<p>The Connection object exposes two properties that let you tailor your application to the speed of the network and the database server. The <I>ConnectionTimeout</I> property specifies the number of seconds that ADO will wait before raising a timeout error when trying to establish a connection. (The default value is 15 seconds.) The <I>CommandTimeout </I>property specifies the number of seconds that ADO waits for a database command or a query to complete. (The default is 30 seconds.) This value is used for all the queries performed on the Connection object only; it isn't inherited by a Command object that uses the same connection. (A Command object is affected only by its own <I>CommandTimeout </I>property.)</p>

<p>
<A HREF="javascript:fullSize('F13ph03x.htm')"> <img src="F13ph03.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-3.</B> <i>You can interactively create a connection string using the custom property pages of an ADO Data control. The All page gathers all the custom properties exposed by the selected OLE DB provider (SQLOLEDB in this case).</i><!--/caption-->
</p>

<p>The <I>CursorLocation </I>property specifies whether a cursor is to be created, and if so, where. The possible values for this property are 2-adUseServer for server-side or driver-supplied cursors and 3-adUseClient for client-side cursors, including dissociated Recordsets. (Dissociated Recordsets are those that aren't associated with an active Connection object.)</p>

<p>The <I>Mode </I>property indicates the permissions on the connection. It can take a  value from the following list:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adModeRead</td>
<td valign="top">Allows read-only data access</td>
</tr>
<tr>
<td valign="top">2-adModeWrite</td>
<td valign="top">Allows write-only data access</td>
</tr>
<tr>
<td valign="top">3-adModeReadWrite</td>
<td valign="top">Allows both read and write data access</td>
</tr>
<tr>
<td valign="top">4-adModeShareDenyRead</td>
<td valign="top">Prevents other clients from opening a connection with read permissions</td>
</tr>
<tr>
<td valign="top">8-adModeShareDenyWrite</td>
<td valign="top">Prevents other clients from opening a connection with write permissions</td>
</tr>
<tr>
<td valign="top">12-adModeShareExclusive</td>
<td valign="top">Prevents other clients from opening a connection to the same data source</td>
</tr>
<tr>
<td valign="top">16-adModeShareDenyNone</td>
<td valign="top">Allows other clients to open a connection with any permissions</td>
</tr>
</table></p>

<p>If you don't assign a value to this property, it defaults to 0-adModeUnknown. You can write to this property only when the connection is closed; on an open connection, this property is read-only.</p>

<A NAME="552"><h3>Managing transactions</h3></A>
<p>The <I>IsolationLevel</I> property affects how transactions are executed in the connection. This is a bit-field property that can be the sum of one or more of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">&amp;H10-adXactChaos</td>
<td valign="top">You can't overwrite pending changes from more highly isolated transactions.</td>
</tr>
<tr>
<td valign="top">&amp;H100-adXactBrowse</td>
<td valign="top">You can view changes in other transactions even before they are committed.</td>
</tr>
<tr>
<td valign="top">&amp;H1000-adXactCursorStability</td>
<td valign="top">You can't view changes in other transactions until they have been committed.</td>
</tr>
<tr>
<td valign="top">&amp;H10000-adXactRepeatableRead</td>
<td valign="top">You can't see changes in other transactions, but you will see them if you repeat the query.</td>
</tr>
<tr>
<td valign="top">&amp;H100000-adXactIsolated</td>
<td valign="top">Transactions are isolated from other transactions.</td>
</tr>
<tr>
<td valign="top">-1-adXactUnspecified</td>
<td valign="top">The isolation level can't be determined.</td>
</tr>
</table></p>

<p>The <I>IsolationLevel </I>property is read/write, but any change you make to its value will take effect only when the next <I>BeginTrans</I> method is issued. Providers don't necessarily support all the isolation levels listed previously: If you request an unsupported isolation level, the provider usually enforces the next greater level.</p>

<p>The <I>Attributes </I>property contains two bits that affect what happens when a transaction is committed or rolled back. The bit &amp;H20000-adXactCommitRetaining automatically starts a new transaction after every <I>CommitTrans </I>method, and the bit &amp;H40000-adXactAbortRetaining starts a new transaction after every <I>RollbackTrans </I>method. Not all providers allow you to automatically start a new transaction after every <I>CommitTrans </I>and <I>RollbackTrans </I>method, however.</p>

<A NAME="553"><h3>Testing the state and the version</h3></A>
<p>The <I>State </I>property is a read-only, bit-field property that reports the current state of the connection. It can be the sum of one or more of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adStateClosed</td>
<td valign="top">The connection is closed.</td>
</tr>
<tr>
<td valign="top">1-adStateOpen</td>
<td valign="top">The connection is open.</td>
</tr>
<tr>
<td valign="top">2-adStateConnecting</td>
<td valign="top">The connection is being opened.</td>
</tr>
<tr>
<td valign="top">4-adStateExecuting</td>
<td valign="top">The connection is executing a command.</td>
</tr>
<tr>
<td valign="top">8-adStateFetching</td>
<td valign="top">A Recordset is being retrieved.</td>
</tr>
</table></p>

<p>You should query this property when you aren't sure about a Connection object's state because when the object is closed or is fetching data, many of its properties aren't usable.</p>

<p>The last property of the Connection object, <I>Version</I>, returns a read-only string that identifies the version of ADO in use. For example, under ADO 2.0, this property returns &quot;2.0.&quot;</p>

<A NAME="554"><h2>Methods</h2></A>
<p>The methods of the Connection object let you do four things: open a connection, run a command, manage transactions on the active connection, and determine the structure of the database tables.</p>

<A NAME="555"><h3>Establishing the connection</h3></A>
<p>The most important method of the Connection object is <I>Open</I>, which establishes the connection. Its syntax is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Open [ConnectionString], [UserID], [Password], [Options]
</pre>
</td></tr></table></p>

<p>The first argument has the same meaning as the <I>ConnectionString</I> property, <I>UserID </I>is the user's login name, and <I>Password </I>is the user's password. If <I>Options </I>is set to 16-adAsyncConnect, the connection is opened in asynchronous mode and it won't be available until the <I>ConnectComplete </I>event fires. All arguments are optional, but if you pass the <I>UserID </I>and <I>Password </I>arguments, you shouldn't specify them also in the <I>ConnectionString </I>argument or property. For example, the following statement opens an asynchronous connection to the Pubs database of SQL Server and specifies the &quot;sa&quot; user name with a blank password:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cn As New ADODB.Connection
cn.Open &quot;Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs;&quot; _
    &amp; &quot;User ID=sa;Password=;&quot;, , , adAsyncConnect
</pre>
</td></tr></table></p>

<p>You close an open connection using the <I>Close </I>method, which takes no arguments.</p>

<A NAME="556"><h3>Executing database commands and queries</h3></A>
<p>The <I>Execute </I>method performs an action query or a select query on the connection. The syntax of this method depends on the type of the action; if you're executing an action that doesn't return a Recordset (for example, an INSERT, UPDATE, or DELETE SQL statement), this is the correct syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Execute CommandText, [RecordsAffected], [Options]
</pre>
</td></tr></table></p>

<p><I>CommandText </I>is the name of a stored procedure, a table, or the text of an SQL query. <I>RecordsAffected</I> is a Long variable that receives the number of records that have been affected by the command. <I>Options </I>is an enumerated value that indicates how the string in <I>CommandText </I>should be interpreted and can be one of the following constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adCmdText</td>
<td valign="top">The text of an SQL query</td>
</tr>
<tr>
<td valign="top">2-adCmdTable</td>
<td valign="top">A database table</td>
</tr>
<tr>
<td valign="top">4-adCmdStoredProc</td>
<td valign="top">A stored procedure</td>
</tr>
<tr>
<td valign="top">8-adCmdUnknown</td>
<td valign="top">Unspecified; the provider will determine the correct type</td>
</tr>
<tr>
<td valign="top">512-adCmdTableDirect</td>
<td valign="top">A database table that should be opened directly (an operation that you should avoid on SQL Server databases)</td>
</tr>
</table></p>

<p>If you pass the value adCmdUnknown or omit the <I>Options </I>argument, the OLE DB provider is usually able to find out the type of the operation, but at the expense of some overhead. For this reason, you should always pass a correct value in this argument.</p>

<p>If you're executing a command that returns a Recordset, the syntax of the <I>Execute </I>method is slightly different:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Execute(CommandText, [RecordsAffected], [Options]) As Recordset
</pre>
</td></tr></table></p>

<p>You should assign the result of this method to a Recordset object so that you can later browse the results. The <I>Execute </I>command can create Recordset objects with default settings only&#8212;that is, read-only, forward-only Recordsets with the cache size equal to 1.</p>

<p>You can perform asynchronous commands by adding the 16-adAsyncExecute constant to the <I>Options </I>argument. You might also decide to populate the Recordset asynchronously by adding the value 32-adAsyncFetch. Whether or not you've specified an asynchronous option, an <I>ExecuteComplete </I>event is raised in your code when the <I>Execute </I>command completes.</p>

<p>You can cancel an asynchronous operation any time by issuing the <I>Cancel </I>method. This method doesn't take any arguments. You never need to specify which operation you want to cancel because only one asynchronous operation can be active on a given connection.</p>

<A NAME="557"><h3>Starting and committing transactions</h3></A>
<p>The <I>BeginTrans</I>, <I>CommitTrans</I>,<I> </I>and <I>RollbackTrans </I>methods let you control when a transaction begins and ends. You start a transaction by issuing a <I>BeginTrans </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>level = cn.BeginTrans
</pre>
</td></tr></table></p>

<p>This method returns the transaction level: 1 for top-level transactions that aren't nested in any other transactions, 2 for transactions nested in a top-level transaction, and so on. The <I>BeginTrans</I>, <I>CommitTrans</I>, and <I>RollbackTrans </I>methods all return an error if the provider doesn't support transactions. You can find out if the provider supports transactions by checking whether the Connection object exposes a custom property named <I>Transaction DDL</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
value = cn.Properties(&quot;Transaction DDL&quot;) 
If Err = 0 Then
    level = cn.BeginTrans
    If level = 1 Then
        MsgBox &quot;A top-level transaction has been initiated&quot;
    Else
        MsgBox &quot;A nested transaction has been initiated&quot;
    End If
Else
    MsgBox &quot;This provider doesn't support transactions&quot;
End If
</pre>
</td></tr>
</table></p>

<p>The <I>CommitTrans </I>method commits the current transaction&#8212;that is, it makes all the changes in the database permanent. Conversely, the <I>RollbackTrans </I>method rolls back the current transaction, thus undoing all changes that the code performed while the transaction was active. You can be certain that a <I>CommitTrans </I>method permanently writes data to the database only if the transaction is a top-level transaction: In all other cases, the current transaction is nested in another transaction that could be rolled back.</p>

<p>The value of the <I>Attributes </I>property affects what happens when you commit or roll back a transaction. If the <I>Attributes </I>property has the adXactCommitRetaining bit set, the provider automatically starts a new transaction immediately after a <I>CommitTrans </I>method; if the <I>Attributes</I> property has the adXactAbortRetaining bit set, the provider starts a new transaction after every <I>RollbackTrans </I>method.</p>

<A NAME="558"><h3>Determining the structure of database tables</h3></A>
<p>The only method I haven't described yet is <I>OpenSchema</I>. This method queries a data source and returns a Recordset that contains information on its structure (table names, field names, and so on). I don't expect that you'll use this method often, however, because ADO 2.1 specifications extend the ADO object model with items that let you get information about the structure of a data source using a less cryptic object-oriented approach, as I explain at the end of this chapter. If you do use this method, be aware of a bug: It doesn't work with server-side Recordsets, which unfortunately are the default in ADO. Therefore, if you use the <I>OpenSchema </I>method, remember to set the Connection's <I>CursorLocation </I>property to adUseClient before opening a Recordset.</p>

<A NAME="559"><h2>Events</h2></A>
<p>The Connection object exposes nine events. Not all the events have the same syntax, but a few patterns do recur, and it makes more sense to describe the patterns than to examine each event individually.</p>

<p>Most ADO events are grouped in pairs. For example, the Connection object exposes the <I>WillConnect </I>and <I>ConnectComplete</I> events, which fire immediately before and immediately after a connection is established, respectively. Another pair, <I>WillExecute </I>and <I>ExecuteComplete</I>, lets you run code immediately before a command is executed on the connection and immediately after it has completed. The key to these <I>Will</I>xxxx and xxxx<I>Complete </I>events is the <I>adStatus </I>parameter.</p>

<p>On entry to a <I>Will</I>xxxx event, this parameter can be 1-adStatusOK (no errors), 2-adStatusErrorsOccurred (an error has occurred), or 3-adStatusCantDeny (no errors, and the operation can't be canceled). Your event procedure can modify the value of the <I>adStatus</I> parameter to 4-adStatusCancel if you want to cancel the operation or 5-adStatusUnwantedEvent if you don't want to receive the event from the ADO object any longer. You can't use the adStatusCancel value if the event procedure receives <I>adStatus </I>equal to adStatusCantDeny.</p>

<p>The same status values are used for xxxx<I>Complete</I> events, but in this case, the operation has already been completed so you can't set <I>adStatus </I>to adStatusCancel. Even if you cancel an operation in the <I>Will</I>xxxx event, the corresponding xxxx<I>Complete</I> event will fire, but it will receive the value adStatusCancel in <I>adStatus</I>. When you cancel an operation, the program receives error 3712, &quot;Operation canceled by the user,&quot; even if you reset the Errors collection or the <I>adStatus </I>argument while inside the xxxx<I>Complete</I> event procedure.</p>

<p>You'll see that many ADO events receive in their last parameter a pointer to the object that's raising the event. This argument is never necessary in Visual Basic: Because you can trap only events coming from individual objects, you must already have a reference to the object itself. In other languages&#8212;for example, Microsoft Visual C++&#8212;you can write event procedures that trap events raised from multiple objects, in which case the object reference is necessary to figure out where the event comes from.</p>

<A NAME="560"><h3>Connection events</h3></A>
<p>Let's take a quick look at the events of the Connection object. The <I>WillConnect </I>event fires when an <I>Open </I>method has been attempted on the connection. It receives the four arguments passed to the <I>Open </I>method plus the <I>adStatus </I>parameter and a pointer to the Connection object itself:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_WillConnect(ConnectionString As String, UserID As String, _
    Password As String, Options As Long, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pConnection As ADODB.Connection)
</pre>
</td></tr></table></p>

<p>You can use this method to modify the connection string, the user ID, or the password on the fly. When a connect operation is completed&#8212;whether or not it succeeded&#8212;the Connection object raises a <I>ConnectComplete </I>event, which receives an Error object and the ubiquitous <I>adStatus </I>parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_ConnectComplete(ByVal pError As ADODB.error, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pConnection As ADODB.Connection)
</pre>
</td></tr></table></p>

<p>The Connection object also exposes the <I>Disconnect </I>event, which (obviously) fires when the connection is closed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_Disconnect(adStatus As ADODB.EventStatusEnum, _
    pConnection As Connection)
</pre>
</td></tr></table></p>

<p>Setting the <I>adStatus </I>parameter to adStatusUnwantedEvent has no effect on <I>ConnectComplete </I>and <I>Disconnect </I>events.</p>

<A NAME="561"><h3>Execution events</h3></A>
<p>The <I>WillExecute </I>event fires before any command is attempted on the connection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_WillExecute(Source As String, _
    CursorType As ADODB.CursorTypeEnum, LockType As ADODB.LockTypeEnum, _
    Options As Long, adStatus As ADODB.EventStatusEnum, _
    ByVal pCommand As ADODB.Command, _
    ByVal pRecordset As ADODB.Recordset, _
    ByVal pConnection As ADODB.Connection)
</pre>
</td></tr></table></p>

<p><I>Source </I>is an SQL string or the name of a stored procedure. <I>CursorType </I>identifies the type of cursor. (For more information about the <I>CursorType </I>property of the Recordset object, see the &quot;<A HREF="#568">Working with Cursors</A>&quot; section later in this chapter.) <I>LockType </I>is the type of lock to be enforced on the returned Recordset. (See the <I>LockType</I> property of the Recordset object.) <I>Options </I>corresponds to the argument with the same name that was passed to the <I>Execute</I> method. If the command won't return a Recordset, then <I>CursorType </I>and <I>LockType </I>parameters are set to -1. Because all these parameters are passed by reference, you can modify them if you want to. The last three arguments are pointers to the Connection, Command, and Recordset objects that are the source of the event. The <I>pConnection</I> parameter always points to the active Connection object. This event fires whenever a Connection's <I>Execute</I> method, a Command's <I>Execute </I>method, or a Recordset's <I>Open </I>method is attempted.</p>

<p>The <I>ExecuteComplete</I> event fires when the execution of a stored procedure or an SQL query comes to an end:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_ExecuteComplete(ByVal RecordsAffected As Long, _
    ByVal pError As ADODB.error, adStatus As ADODB.EventStatusEnum, _
    ByVal pCommand As ADODB.Command, ByVal pRecordset As ADODB.Recordset, _
    ByVal pConnection As ADODB.Connection)
</pre>
</td></tr>
</table></p>

<p><I>RecordsAffected </I>is the number of records that have been affected by the operation (the same value that is returned in the <I>Execute </I>method's second argument). <I>pError </I>and <I>adStatus </I>have the usual meanings. The last three parameters are pointers to the objects that are raising the event.</p>

<A NAME="562"><h3>Transaction events</h3></A>
<p>The <I>BeginTransComplete </I>event fires when a <I>BeginTrans </I>method has completed its execution. The first parameter contains the value that is about to be returned to the program&#8212;that is, the level of the transaction just initiated. The meanings of all the other arguments should be self-explanatory.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_BeginTransComplete(ByVal TransactionLevel As Long, _
    ByVal pError As ADODB.error, adStatus As ADODB.EventStatusEnum, _
    ByVal pConnection As ADODB.Connection)
</pre>
</td></tr></table></p>

<p>The syntax of the <I>CommitTransComplete</I> and <I>RollbackTransComplete</I> events is similar to that of <I>BeginTransComplete</I>, but no information about the transaction level is passed to the event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_CommitTransComplete(ByVal pError As ADODB.error, adStatus _
    As ADODB.EventStatusEnum, ByVal pConnection As ADODB.Connection)

Private Sub cn_RollbackTransComplete(ByVal pError As ADODB.error, adStatus 
    As ADODB.EventStatusEnum, ByVal pConnection As ADODB.Connection)
</pre>
</td></tr></table></p>

<A NAME="563"><h3>Other events</h3></A>
<p>The only other event exposed by the Connection object is <I>InfoMessage</I>. This event fires when the database engine sends a message or a warning or when a stored procedure executes a PRINT or RAISERROR SQL statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_InfoMessage(ByVal pError As ADODB.error, adStatus As _
    ADODB.EventStatusEnum, ByVal pConnection As ADODB.Connection)
</pre>
</td></tr></table></p>

<p>In most cases, you'll want to test the <I>pError </I>parameter or examine the elements in the Errors collection to understand what exactly happened.</p>

<A NAME="564"><h2>The Errors Collection</h2></A>
<p>The Connection object exposes the <I>Errors </I>property, which returns a collection of all the errors that have occurred on the connection itself. More precisely, each time an error occurs, the Errors collection is cleared and then filled with the errors raised by all the layers that sit between your program and the data source, including the ODBC driver (if you're using the MSDASQL OLE DB Provider) and the database engine itself. You can examine all the items in this collection to find out where the error originated and how the layers have interpreted it. You won't find ADO errors&#8212;for example, the errors that occur when you pass an invalid value to an ADO property or method&#8212;in this collection, because those errors are considered to be regular Visual Basic errors and should be managed by a standard error-trapping handler.</p>

<p>Each Error object in the collection exposes several properties that let you understand what exactly went wrong. The <I>Number</I>,<I> Description</I>, <I>HelpFile</I>, and <I>HelpContext </I>properties have the same meanings as they do in the Visual Basic Error object. The <I>Source </I>property is especially important if you want to track down where the error occurred. The <I>SQLState</I> and <I>NativeError </I>properties return information about errors in SQL data sources. An ODBC source returns errors as defined in the ODBC 3 specifications.</p>

<p>ADO clears the Errors collection when the code executes the <I>Clear </I>method. ADO clears the Errors collection of the Connection object, however, only when an error actually occurs. For this reason, you might find it convenient to manually clear the collection before invoking methods of the Connection object that can potentially raise errors.</p>


<a name="A84"></a><h3>7.1.2 The Recordset Object</h3>

<A HREF="#A83">[Previous]</A> <A HREF="#A85">[Next]</A><P>

<A NAME="565"><h1>The Recordset Object</h1></A>
<p>The Recordset object contains all the data that you read from a database or that you're about to send to it. A Recordset can include several rows and columns of data. Each row is a record, and each column is a field in the record. You can access only one row at a time, the so-called current row or current record. You navigate through a Recordset by changing the current record.</p>

<p>ADO Recordset objects are much more versatile than their DAO and RDO counterparts. For example, you can create an ADO Recordset object yourself, without being connected to a database. Or you can retrieve a Recordset from a database, close the connection, modify the data in the Recordset, and finally reestablish the connection to send all your updates to the server. (These optimistic batch updates were possible in RDO but not in DAO.) You can even save an ADO Recordset to a disk file so that you can restore it later.</p>

<p>The ADO Workbench application provided on the companion CD lets you play with the many properties of the Recordset object. You can also execute its methods and see which events fire. The application decodes the meaning of all the symbolic constants exposed by the ADODB library, as shown in Figure 13-4.</p>

<p>
<A HREF="javascript:fullSize('F13ph04x.htm')"> <img src="F13ph04.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-4.</B> <i>You can use the ADO Workbench application to look at a Recordset's properties, execute its methods, and see its events fire; other windows let you browse the Fields collection and the actual contents of the records.</i><!--/caption-->
</p>

<A NAME="566"><h2>Properties</h2></A>
<p>The Recordset object is the richest object in the ADO object model in terms of properties. Again, I'll group the properties according to their functionality rather than by name.</p>

<A NAME="567"><h3>Setting the Recordset's source</h3></A>
<p>The most significant property of the Recordset object is probably the <I>Source </I>property, which holds the name of the table, the name of the stored procedure, or the text of the SQL query used to populate the Recordset. This property is declared as Variant, which permits you to assign a Command object to it. If you assign a Command object to this property, it returns the contents of the <I>CommandText</I> property of the Command object, not a reference to the Command object itself. The <I>Source</I> property is read/write for closed Recordset objects and read-only after the Recordset has been opened. Here's an example of the <I>Source </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.3.51;Data Source=&quot; &amp; DBPATH
rs.Source = &quot;Employees&quot;
rs.Open , cn
</pre>
</td></tr></table></p>

<p>You can make your code more concise if you pass the value of this property as the first argument of the <I>Open </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Open &quot;Employees&quot;, cn
</pre>
</td></tr></table></p>

<p>When you assign an ADO Command object to the <I>Source </I>property, you can later retrieve a reference to this object through the <I>ActiveCommand </I>property.</p>

<p>To open a Recordset, you must associate it with an existing connection. You can explicitly create this Connection object and assign it to the <I>ActiveConnection </I>property, or you can create it implicitly by assigning a connection string to the <I>ActiveConnection </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:Program Files\Microsoft Visual Studio\VB98\NWind.mdb&quot;

' First method: explicit Connection object
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.3.51;Data Source=&quot; &amp; DBPATH_
Set rs.ActiveConnection = cn
rs.Source = &quot;Employees&quot;
rs.Open

' Second method: implicit Connection object
rs.ActiveConnection = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source= &quot; &amp; DBPATH
rs.Source = &quot;Employees&quot;
rs.Open
</pre>
</td></tr></table></p>

<p>When you create an implicit Connection object, you can later reference it through the <I>ActiveConnection </I>property (for example, to access the Connection's Errors collection). The <I>ActiveConnection </I>property is read-only after the record has been opened or when a Command object has been assigned to the <I>ActiveCommand </I>property.</p>

<p>Yet another way to select the location from which the Recordset should retrieve its data is with the <I>DataSource </I>and <I>DataMember </I>properties. For example, you can link a Recordset object to an ADO Data control by using the following statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set rs.DataSource = Adodc1
</pre>
</td></tr></table></p>

<p>You don't need to set any other property, nor do you have to call the <I>Open </I>method (which in fact raises an error). If the data source is a DataEnvironment object, you also need to assign a valid string to the <I>DataMember </I>property; otherwise, an error will occur when setting the <I>DataSource </I>property.</p>

<p>The Recordset's <I>State </I>property returns the current state of the Recordset as a set of bits that can be tested individually:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adStateClosed</td>
<td valign="top">The Recordset is closed.</td>
</tr>
<tr>
<td valign="top">1-adStateOpen</td>
<td valign="top">The Recordset is open.</td>
</tr>
<tr>
<td valign="top">2-adStateConnecting</td>
<td valign="top">The Recordset is connecting.</td>
</tr>
<tr>
<td valign="top">4-adStateExecuting</td>
<td valign="top">The Recordset is executing a command.</td>
</tr>
<tr>
<td valign="top">8-adStateFetching</td>
<td valign="top">The rows of the Recordset are being fetched.</td>
</tr>
</table></p>

<p>The last three values apply only when the Recordset object is executing an asynchronous method.</p>

<A NAME="568"><h3>Working with cursors</h3></A>
<p>A cursor is a set of records that represent the results of a query. Cursors can contain the actual data or just pointers to records in the database, but the mechanism that retrieves the data is transparent to the programmer. You can specify where the cursor should be created (on the client or on the server workstation), the cursor type, and the locking option.</p>

<p>The <I>CursorLocation </I>property specifies where the cursor is to be created. This property can have one of two values: 2-adUseServer or 3-adUseClient. The value of this property is inherited from the Connection object and can be changed only for closed Recordsets. When you're working with the OLE DB Provider for ODBC Drivers and for SQL Server, the default cursor is a forward-only cursor created on the server. (This type of cursor is also the most efficient.) You need to switch to client-side cursors if you want to create dissociated Recordsets and use an optimistic batch update strategy. Client-side cursors are often a good choice when you have a DataGrid control or another complex control that is bound to the Recordset. In all other cases, server-side cursors are often preferable because they offer better performance and additional cursor types.</p>

<p>The <I>CursorType </I>property tells which type of cursor should be created and is one of the following constants: 0-adOpenForwardOnly, 1-adOpenKeyset, 2-adOpenDynamic, or 3-adOpenStatic. Server-side cursors support all these options, whereas client-side cursors support only 3-adOpenStatic. But if you use a different setting for a client-side cursor, a static cursor is automatically created without raising an error.</p>

<p>A forward-only cursor is the default for server-side cursors and is available only for server-side cursors. As I just mentioned, this type of cursor is the most efficient, especially if you set <I>LockType </I>= adReadOnly and <I>CacheSize </I>= 1. Many programmers and authors refer to this last type of cursor as a &quot;noncursor.&quot; In <I>The</I> <I>Hitchhiker's Guide to Visual Basic and SQL Server</I>, William R. Vaughn defines this as a &quot;fire-hose&quot; cursor, to emphasize how fast it is at tossing data to the client application. You don't have to do anything special to use this cursor (or noncursor) because it's the default for ADO. You can navigate a forward-only Recordset only by using the <I>MoveNext </I>method. If you want to get the best performance for an application that needs to update records, you should do all your updates through SQL commands or stored procedures.</p>

<p>Dynamic cursors consist of a set of bookmarks to the actual data in the data source. Any time the client requests a record, ADO uses the bookmark to read the current value, which means that the application always reads the latest value stored by other users. Dynamic cursors are automatically updated when other users add or delete a record or change any record already in the Recordset. Not surprisingly, these cursors are the most expensive cursors in terms of performance and LAN traffic because any time you move to another record a trip to the server is required to retrieve the current values. You can always update data and perform all kinds of navigational methods on dynamic Recordsets, including using bookmarks if the provider supports them. This type of cursor is available only as server-side cursors.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Microsoft Jet Engine doesn't support dynamic cursors, so if you attempt to open dynamic cursors with the Jet OLE DB Provider you always get a keyset.
</blockquote></div></p>

<p>Keyset cursors are similar to dynamic cursors, but they don't include records added by other users. (Changes other users have made to records in the Recordset are visible, though.) You can read and modify all the records in the cursor, but you get an error if you access a record that another user has deleted. The keyset cursor is available only as a server-side cursor.</p>

<p>Static cursors create a fully scrollable snapshot of all the records identified by the <I>Source </I>property, and they are the only type possible for client-side cursors. Because a static cursor is actually a copy of the data coming from the database, changes that other users make aren't visible. Whereas these cursors are less efficient than forward-only cursors and increase the workload on the computer where they reside, their performance is reasonable and they're a good choice, especially when the Recordset doesn't include too many records. A static cursor is usually the best choice for retrieving data from a stored procedure. Depending on the provider and on other settings, this Recordset can even be updatable. You should create client-side static cursors only when the client workstation has enough memory.</p>

<p>The <I>MaxRecords </I>property sets a limit to the number of records that will be returned in the Recordset when you're working with a cursor. The default value is 0, which means that all records will be returned. This property can be written to when the Recordset is closed and is read-only when the Recordset is open.</p>

<p>The <I>CacheSize</I> property sets and returns the number of records that ADO will cache locally when working with cursors. You can adjust the value of this property to fine-tune your application, trading memory for performance. You can assign a new value to this property at any moment, but if the Recordset is already open, the new setting will be used only when ADO needs to fill the local cache&#8212;that is, when you move the pointer to the current record to point to a record that isn't in the cache.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Most programmers like cursors&#8212;especially dynamic and keyset cursors&#8212;because they're so powerful and versatile. Unfortunately, cursors are often the worst choice in terms of performance, resources, and scalability. You should use cursors only when you're working with small Recordsets or when you're using bound controls. (Bound controls need cursors to support backward and forward navigation.) When you employ cursors, remember to build the <I>Source </I>property so that you reduce the number of rows fetched and to use a WHERE clause that exploits one or more indexes. Another effective technique to improve the performance of your application is to execute a <I>MoveLast </I>method to quickly populate the Recordset and release any lock on the data source as soon as possible.
</blockquote></div></p>

<A NAME="569"><h3>Working with concurrency</h3></A>
<p>All multiuser databases enforce some type of locking strategy. Locks are necessary to prevent multiple users from performing changes on the same record at the same moment, which would probably result in an inconsistent database. Locks are extremely expensive in terms of scalability; when a lock is enforced on a record being modified by a user, no other user can access the same record. Depending on how you write your applications, a lock can significantly degrade performance and can even cause fatal errors if you don't implement a good lock-resolving strategy.</p>

<p>The <I>LockType </I>property indicates which type of lock should be enforced on the data in the database. This enumerated property can be assigned one of the following values: 1-adLockReadOnly, 2-adLockPessimistic<I>, </I>3-adLockOptimistic<I>,</I> and 4-adLockBatchOptimistic.</p>

<p>The default value for this property is adLockReadOnly, which creates nonupdatable Recordsets. This is the most efficient option because it doesn't impose a write lock on data. It's also the best choice as far as scalability is concerned. Again, a good strategy is to rely on forward-only, read-only noncursors (the default in ADO) when reading data and to do all updates through SQL statements or stored procedures.</p>

<p>When you're using pessimistic locking, ADO tries to lock the record as soon as you enter edit mode, which occurs when you modify one field in the Recordset. It releases the lock only when you issue an <I>Update </I>method or move to another record. While a record is locked, no other user can access it for writing, which severely reduces the potential for the scalability of the application. For this reason, you should <I>never </I>use pessimistic locking when the user interface of your application lets the user freely navigate in the Recordset (unless you want to block all users when any one of them takes a coffee break!). Pessimistic locking is available only for server-side cursors.</p>

<p>Optimistic locking scales up better than pessimistic locking does, but it requires more attention from the programmer. With optimistic locking, ADO locks the current record only while it's being updated, which usually takes a small amount of time.</p>

<p>Optimistic batch locking is a special mode that's available only for client-side static cursors. In optimistic batch locking, you download all the data on the client machine, let the user perform all the necessary changes (including adding and deleting records), and then resubmit all the changes in one single operation. If you decided to go with client-side cursors, optimistic batch locking is the most efficient mode because it reduces network traffic. However, you'll need to implement a strategy for handling conflicts (for example, when two users update the same record), which won't be a trivial task.</p>

<p>For more information about the various types of locking, read the &quot;<A HREF="#629">Locking Issues</A>&quot; section in Chapter 14.</p>

<A NAME="570"><h3>Reading and modifying fields' values</h3></A>
<p>The ultimate purpose in opening a Recordset is to read the values of its rows and columns and possibly to modify them. Recordsets allow you to read and write only the values in the current record, so you need to navigate through the Recordset to access all the records you're interested in.</p>

<p>You can read the values of the fields of the current record through the Fields collection. You can specify which field you're interested in by passing a numeric index or the name of the field:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the names and values of all the fields in the Recordset.
Dim i As Integer
For i = 0 To rs.Fields.Count _ 1    ' The Fields collection is zero-based.
    Print rs.Fields(i).Name &amp; &quot; = &quot; &amp; rs.Fields(i).Value
Next
</pre>
</td></tr></table></p>

<p>You can also use the <I>For Each</I> statement to iterate on all the fields. You can omit the <I>Value </I>property because it's the default property for the Field object.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim fld As ADODB.Field
For Each fld In rs.Fields
    Print fld.Name &amp; &quot; = &quot; &amp; fld
Next
</pre>
</td></tr></table></p>

<p>Unlike DAO and RDO, ADO doesn't support an <I>Edit </I>method, and you can start updating one or more fields of the current record simply by assigning new values to the Field object you want to modify. Moreover, you don't need to explicitly issue an <I>Update </I>method because ADO will automatically execute it for you when you move to another record in the Recordset. These features simplify the structure of the code that reads and updates all the records in a Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Convert the contents of the LastName field to uppercase.
rs.MoveFirst
Do Until rs.EOF
    rs(&quot;LastName&quot;) = UCase$(rs(&quot;LastName&quot;))
    rs.MoveNext
Loop
</pre>
</td></tr></table></p>

<p>You can determine the editing status of a Recordset by querying its <I>EditMode </I>property, which returns one of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adEditNone</td>
<td valign="top">No editing operation is in progress.</td>
</tr>
<tr>
<td valign="top">1-adEditInProgress</td>
<td valign="top">One or more fields have been modified, but 
new values haven't been saved yet.</td>
</tr>
<tr>
<td valign="top">2-adEditAdd</td>
<td valign="top">A new record has been added, but it hasn't 
been saved to the database yet.</td>
</tr>
<tr>
<td valign="top">3-adEditDelete</td>
<td valign="top">The current record has been deleted.</td>
</tr>
</table></p>

<A NAME="571"><h3>Setting and retrieving the position in the Recordset</h3></A>
<p>A number of properties help you understand where you are in the Recordset so that you can enable or disable certain operations or set bookmarks to quickly return to a record you've visited previously. The property in this group that you'll probably use most frequently is <I>EOF</I>, which returns True when the pointer to the current record is positioned after the end of the Recordset. You typically use this property when looping on all the records in the Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Count all employees hired before January 1, 1994.
rs.MoveFirst
Do Until rs.EOF
    If rs(&quot;HireDate&quot;) &lt; #1/1/1994# then count = count + 1
    rs.MoveNext
Loop
</pre>
</td></tr></table></p>

<p><I>BOF </I>is a similar property. It returns True when the record pointer is positioned before the beginning of the Recordset. It's often crucial to know the values of <I>EOF </I>and <I>BOF </I>properties: When either one returns True, most of the Recordset's methods and properties return an error because there's no current record. For example, you can't retrieve a Field's value if the current record is before the beginning or after the end of the Recordset. If both <I>BOF</I> and <I>EOF</I> properties are True, the Recordset is empty.</p>

<p>The <I>Bookmark </I>property lets you retrieve a Variant value that identifies the current record; you can later move back to this record simply by reassigning the same value to the <I>Bookmark </I>property, as this code demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim mark As Variant
mark = rs.Bookmark              ' Remember where you are.
rs.MoveLast                     ' Move to the last record.
rs(&quot;HireDate&quot;) = #12/10/1994#   ' Assign a new value to the HireDate field.
rs.Bookmark = mark              ' Return to the marked record.
</pre>
</td></tr></table></p>

<p>ADO bookmarks are stored internally as Double values. Even if they are numeric values, you shouldn't assume that you can compare them as if they were numbers. The only arithmetic operation that makes sense with bookmarks is a test for equality, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the names of the employees who were hired on the same
' day as (or later than) the employee whose record is current in the Recordset.
Dim mark As Double, curHireDate As Date
mark = rs.Bookmark: curHireDate = rs(&quot;HireDate&quot;)
rs.MoveFirst
Do Until rs.EOF
    If rs.Bookmark &lt;&gt; mark Then
        ' Don't consider the current employee.
        If rs(&quot;HireDate&quot;) &gt;= curHireDate Then Print rs(&quot;LastName&quot;)
    End If
    rs.MoveNext
Loop
' Move the record pointer back to the record that was current.
rs.Bookmark = mark
</pre>
</td></tr></table></p>

<p>Moreover, bookmarks can be compared for equality only if they come from the same Recordset object or from a clone Recordset. (See the description of the <I>Clone</I> method later in this chapter.) In all other cases, you shouldn't compare the <I>Bookmark </I>properties of two distinct Recordset objects, even if they are pointing to the same rowset in the same database. For more information about comparing bookmarks, see the description of the <I>CompareBookmarks </I>method in the section &quot;<A HREF="#578">Navigating the Recordset</A>,&quot; later in this chapter.</p>

<p>The <I>RecordCount </I>read-only property returns the number of records in the Recordset. Depending on the database engine, the provider, and the type of Recordset, this property can also return -1. This property isn't supported by forward-only Recordsets, for example. If the property is supported, reading its value forces ADO to perform an implicit <I>MoveLast </I>method, so this operation can add a lot of overhead if used with large Recordsets.</p>

<p>The <I>AbsolutePosition </I>property sets or returns a Long value that corresponds to the ordinal position of the current record in the Recordset. (The first record returns 1; the last record returns RecordCount.) It can also return one of the following values: -1-adPosUnknown (position is unknown), -2-adPosBOF (BOF condition), or -3-adPosEOF (EOF condition).</p>

<p>You should never use this property in place of the record number or, worse, instead of the <I>Bookmark</I> property because the <I>AbsolutePosition</I> property varies when records are added to or removed from the Recordset. The most reasonable way to use this property is when you want to provide a scroll bar or a Slider control that lets the user quickly move in the Recordset. In this case, you should set the scroll bar's <I>Min </I>property to 1 and its <I>Max </I>property to <I>rs.RecordCount</I> and then add this code in the scroll bar's <I>Change </I>or <I>Scroll </I>event procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub HScrollBar1_Change()
    On Error Resume Next
    rs.AbsolutePosition = HScrollBar1.Value
End Sub
</pre>
</td></tr></table></p>

<p>Remember that a scroll bar's <I>Max </I>value can't be higher than 32,767; if you have to deal with more records than that, you should either scale that value or use a Slider control.</p>

<p>Each Recordset is subdivided into pages, and each page can contain a fixed number of records (except the last page, which can be filled only partially). The <I>PageSize </I>property returns the number of records in each page, whereas the <I>PageCount </I>property returns the number of pages in the Recordset. The <I>AbsolutePage </I>property sets or returns the page number of the current record. This property is conceptually similar to the <I>AbsolutePosition</I> property (and supports the same negative values to indicate unknown, BOF, and EOF conditions), but it works with page numbers instead of record numbers. It's most useful when you're implementing advanced strategies to buffer records being read from the database.</p>

<A NAME="572"><h3>Sorting and filtering records</h3></A>
<p>You can sort the records in a Recordset by assigning a field list to the <I>Sort </I>property, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Sort the Recordset on the LastName and FirstName fields.
rs.Sort = &quot;LastName, FirstName&quot;
</pre>
</td></tr></table></p>

<p>The first field name is the primary sort key, the second field name is the secondary sort key, and so on. By default, records are sorted in ascending order for the selected keys; however, you can opt for descending order by using the <I>DESC </I>qualifier:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Sort in descending order on the HireDate field. (The employees hired
' most recently should be listed first.) 
rs.Sort = &quot;HireDate DESC&quot;
</pre>
</td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The documentation incorrectly states that you should use the <I>ASCENDING</I> and <I>DESCENDING</I> qualifiers. It turns out, however, that they cause an error 3001. This bug will probably be fixed in a future version of ADO.
</blockquote></div></p>

<p>This property doesn't affect the order of the records in the data source, but it does affect the order of the records in the Recordset. You can restore the original order by assigning an empty string to this property. I found out that the <I>Sort </I>method works only with client-side static cursors, at least with the OLE DB providers for ODBC, Microsoft Jet, and SQL Server. If you sort on fields that aren't indexed, ADO creates a temporary index for them and deletes the index when you close the Recordset or assign an empty string to the <I>Sort </I>property.</p>

<p>You can filter the records in a Recordset by using the <I>Filter </I>property. You can assign three types of values to this property: an SQL query string, an array of bookmarks, or a constant that indicates which records should appear in the Recordset. The most intuitive way to use this property is to assign it an SQL string. This string is similar to the WHERE clause of a SELECT command, but you have to omit the WHERE. A few examples are shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Filter out all employees hired before January 1, 1994.
rs.Filter = &quot;HireDate &gt;= #1/1/1994#&quot;
' Include only employees born in the 1960s.
rs.Filter = &quot;birthdate &gt;= #1/1/1960# AND birthdate &lt; #1/1/1970#&quot;
' Filter in only employees whose last names start with the letter C.
rs.Filter = &quot;LastName LIKE 'C*'&quot;
</pre>
</td></tr></table></p>

<p>You can use the comparison operators (&lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;) and the LIKE operator, which supports the * and % wildcards but only at the end of the string argument. You can connect simpler statements using AND and OR logical operators, but you can't perform other operations (such as string concatenations). You can group simpler expressions using parentheses. If a field name contains spaces, you must enclose the name within square brackets. You can use the <I>Filter </I>property in this way with server-side cursors if the provider supports filtering; in all other cases, you should use client-side cursors. Because ADO performs the filtering, you should stick to ADO syntax rules; for example, date values must be enclosed in # symbols, strings must be enclosed in single quotes, and quotes embedded in a string must be doubled. (Here's a brief tip: Use the <I>Replace </I>function to prepare the string quickly.)</p>

<p>If you want to filter a group of records that can't be specified using a simple SQL string, you can pass an array of bookmarks to the <I>Filter </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Filter out those employees who were hired when they were over age 35.
ReDim marks(1 To 100) As Variant
Dim count As Long
' Prepare an array of bookmarks. (Assume that 100 bookmarks are enough.)
Do Until rs.EOF
    If Year(rs(&quot;HireDate&quot;)) - Year(rs(&quot;BirthDate&quot;)) &gt; 35 Then
        count = count + 1
        marks(count) = rs.Bookmark
    End If
    rs.MoveNext
Loop
' Enforce the new filter using the array of bookmarks.
ReDim Preserve marks(1 To count) As Variant
rs.Filter = marks
</pre>
</td></tr></table></p>

<p>Finally, you can assign the <I>Filter </I>property one of these enumerated constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adFilterNone</td>
<td valign="top">Remove the current filter (same as assigning an empty string).</td>
</tr>
<tr>
<td valign="top">1-adFilterPendingRecords</td>
<td valign="top">In batch update mode, view only records that have been modified but not sent to the server yet.</td>
</tr>
<tr>
<td valign="top">2-adFilterAffectedRecords</td>
<td valign="top">View records affected by the most recent <I>Delete</I>, <I>Resync</I>, <I>UpdateBatch</I>, or <I>CancelBatch </I>method.</td>
</tr>
<tr>
<td valign="top">3-adFilterFetchedRecords</td>
<td valign="top">View only the records in the local cache.</td>
</tr>
<tr>
<td valign="top">5-adFilterConflictingRecords</td>
<td valign="top">In batch update mode, view only the records that failed to be committed to the server.</td>
</tr>
</table></p>

<p>Setting the <I>Filter </I>property to the value 2-adFilterAffectedRecords is the only way to see the records that have been deleted.</p>

<A NAME="573"><h3>Other properties</h3></A>
<p>The <I>MarshalOption </I>property affects how you send back rows to the server. It can be assigned two enumerated constants: 0-adMarshalAll (ADO sends all the rows to the server, which is the default) or 1-adMarshalModifiedOnly (ADO sends only the records that have been modified). This property is available only on client-side ADOR Recordsets, which are described in the &quot;<A HREF="#967">Remote Data Services</A>&quot; section in Chapter 19.</p>

<p>The <I>Status </I>property is a bit-field value that returns the status of the current record after a batch update operation or another bulk operation has completed. You can test its individual bits using the enumerated properties listed in Table 13-2.</p>

<p>The only Recordset property I haven't yet described is <I>StayInSync</I>, which applies to the child Recordsets of a hierarchical Recordset object. To understand what this property does, you must consider that hierarchical Recordsets expose Field objects that contain child Recordset objects. By default, ADO automatically updates these child Recordsets when the record pointer of the parent Recordset moves to another record. This default behavior is what you want in the vast majority of cases, but at times you'd like to save the contents of a child Recordset for later; and in a sense, you want to detach it from its parent Recordset. Well, you can separate the parent and child Recordsets by setting the child Recordset's <I>StayInSync </I>property to False. Another way to reach the same result is to use the <I>Clone </I>method to create a copy of the child Recordset: If you use this method, the cloned Recordset won't be updated when the parent Recordset moves to another record. For more information, see the section &quot;<a href="#658">Heirarchical Recordsets</a>&quot; in Chapter 14.</p>

<A NAME="574"><h2>Methods</h2></A>
<p>The Recordset object exposes several methods. Again, I'll describe them in groups, according to their purpose.</p>

<p><B>Table 13-2.</B> <i>The constants to use when testing the 
Status property.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">adRecOK</td>
<td valign="top">0</td>
<td valign="top">The record was successfully updated.</td>
</tr>
<tr>
<td valign="top">adRecNew</td>
<td valign="top">1</td>
<td valign="top">The record is new.</td>
</tr>
<tr>
<td valign="top">adRecModified</td>
<td valign="top">2</td>
<td valign="top">The record was modified.</td>
</tr>
<tr>
<td valign="top">adRecDeleted</td>
<td valign="top">4</td>
<td valign="top">The record was deleted.</td>
</tr>
<tr>
<td valign="top">adRecUnmodified</td>
<td valign="top">8</td>
<td valign="top">The record wasn't modified.</td>
</tr>
<tr>
<td valign="top">adRecInvalid</td>
<td valign="top">&amp;H10</td>
<td valign="top">The record wasn't saved because 
its bookmark is invalid.</td>
</tr>
<tr>
<td valign="top">adRecMultipleChanges</td>
<td valign="top">&amp;H40</td>
<td valign="top">The record wasn't saved because 
it would affect multiple records.</td>
</tr>
<tr>
<td valign="top">adRecPendingChanges</td>
<td valign="top">&amp;H80</td>
<td valign="top">The record wasn't changed 
because it refers to a pending insert.</td>
</tr>
<tr>
<td valign="top">adRecCanceled</td>
<td valign="top">&amp;H100</td>
<td valign="top">The record wasn't saved because 
the operation was canceled.</td>
</tr>
<tr>
<td valign="top">adRecCantRelease</td>
<td valign="top">&amp;H400</td>
<td valign="top">The record wasn't saved because 
of existing record locks.</td>
</tr>
<tr>
<td valign="top">adRecConcurrencyViolation</td>
<td valign="top">&amp;H800</td>
<td valign="top">The record wasn't saved because 
optimistic concurrency was in use.</td>
</tr>
<tr>
<td valign="top">adRecIntegrityViolation</td>
<td valign="top">&amp;H1000</td>
<td valign="top">The record wasn't saved because 
it would violate integrity constraints.</td>
</tr>
<tr>
<td valign="top">adRecMaxChangesExceeded</td>
<td valign="top">&amp;H2000</td>
<td valign="top">The record wasn't saved 
because there were too many pending changes.</td>
</tr>
<tr>
<td valign="top">adRecObjectOpen</td>
<td valign="top">&amp;H4000</td>
<td valign="top">The record wasn't saved because of 
a conflict with an open storage object.</td>
</tr>
<tr>
<td valign="top">adRecOutOfMemory</td>
<td valign="top">&amp;H8000</td>
<td valign="top">The record wasn't saved because 
of an out-of-memory error.</td>
</tr>
<tr>
<td valign="top">adRecPermissionDenied</td>
<td valign="top">&amp;H10000</td>
<td valign="top">The record wasn't saved because 
the user had insufficient permissions.</td>
</tr>
<tr>
<td valign="top">adRecSchemaViolation</td>
<td valign="top">&amp;H20000</td>
<td valign="top">The record wasn't saved because 
it doesn't match the structure of the database.</td>
</tr>
<tr>
<td valign="top">adRecDBDeleted</td>
<td valign="top">&amp;H40000</td>
<td valign="top">The record had already been 
deleted from the database.</td>
</tr>
</table></p>

<A NAME="575"><h3>Opening and closing the Recordset</h3></A>
<p>If you want to read the data in a Recordset, you must open it first, which you do with the <I>Open </I>method:

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Open [Source], [ActiveConnection], [CursorType], [LockType], [Options]
</pre>
</td></tr></table></p>

<p>The arguments of the <I>Open </I>method have the same meaning as the properties with the same names: <I>Source </I>is the name of a table or a stored procedure, an SQL query, or a reference to an ADO Command object; <I>ActiveConnection </I>is a reference to an ADO Connection object or to a connection string that identifies the provider and the data source; <I>CursorType </I>specifies which type of cursor you want to create (forward-only, static, keyset, or dynamic); and <I>LockType </I>is the type of locking you want to enforce (read-only, pessimistic, optimistic, or optimistic batch). <I>Options </I>is the only argument that doesn't correspond to a <I>Recordset</I> property: It explains to ADO what you're passing in the <I>Source </I>argument and can be one of the following enumerated constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adCmdText</td>
<td valign="top">Textual SQL query</td>
</tr>
<tr>
<td valign="top">2-adCmdTable</td>
<td valign="top">Database table</td>
</tr>
<tr>
<td valign="top">4-adCmdStoredProc</td>
<td valign="top">Stored procedure</td>
</tr>
<tr>
<td valign="top">8-adCmdUnknown</td>
<td valign="top">Unspecified; the provider will determine the 
correct type</td>
</tr>
<tr>
<td valign="top">256-adCmdFile</td>
<td valign="top">A persistent Recordset</td>
</tr>
<tr>
<td valign="top">512-adCmdTableDirect</td>
<td valign="top">A database table opened directly</td>
</tr>
</table></p>

<p>Even if in most cases the provider can understand what the source of the Recordset is without your help, you can often speed up the <I>Open</I> method by assigning a correct value to this argument.</p>

<p>All these arguments are optional. However, ADO can't open the Recordset if you don't provide enough information. For example, you can omit the <I>Source </I>argument if you've assigned a value to the <I>Source </I>property, and you can omit the <I>ActiveConnection</I> argument if you've assigned a value to the <I>ActiveConnection</I> property or if you're using an ADO Command object as the source for this Recordset (in which case the <I>ActiveConnection </I>argument is inherited from that Command object). If you omit the third or fourth argument, by default, the <I>Open </I>method creates a forward-only, read-only Recordset, which is the most efficient Recordset type that ADO supports. You can't specify the cursor position in the <I>Open</I> method, and if you want to create a client-side cursor, you must assign the adUseClient constant to the <I>CursorLocation </I>property before opening the Recordset. Below are a few examples that show the <I>Open </I>method in action.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\VB98\NWind.mdb&quot;
' All the following examples use these variables.
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
Dim connString As String, sql As String
connString = &quot;Provider=Microsoft.Jet.OLEDB.3.51;Data Source=&quot; &amp; DBPATH

' Open the Recordset using an existing Connection object.
cn.Open connString
rs.Open &quot;Employees&quot;, cn, adOpenStatic, adLockReadOnly, adCmdTable

' Open the Recordset using a Connection object created on the fly.
' This creates a forward-only, read-only Recordset.
rs.Open &quot;Employees&quot;, connString, , , adCmdTable
' After the Recordset has been opened, you can query the properties
' of the implicit Connection object.
Print &quot;Current Connection String = &quot; &amp; rs.ActiveConnection.ConnectionString

' Select only the employees who were born in the 1960s or later.
sql = &quot;SELECT * FROM Employees WHERE BirthDate &gt;= #1/1/1960#&quot;
rs.Open sql, connString, , , adCmdText
</pre>
</td></tr></table></p>

<p>You can also open a record that you previously saved to a disk file using the <I>Save </I>method: In this case, the first argument of the <I>Open </I>method is the complete name and path of the file, and you should pass the adCmdFile constant to the 
<I>Options </I>argument.</p>

<p>The <I>Options </I>argument supports two more constants for asynchronous operations. The value 16-adAsyncExecute executes the query asynchronously: The control goes back to the application immediately, and ADO continues to populate the Recordset until the local cache is filled with data. The value 32-adAsyncFetch tells ADO that after filling the local cache with data, it should fetch the remaining records asynchronously. When all the records have been retrieved, ADO fires a <I>FetchComplete </I>event.</p>

<p>You can cancel an asynchronous operation at any moment by issuing a <I>Cancel </I>method. If no asynchronous operations are pending, this method does nothing and no error is raised.</p>

<p>When you're done with a Recordset, you should close it using its <I>Close </I>method. This method doesn't take any argument. ADO automatically closes a Recordset when no more variables are pointing to it. When a Recordset is closed, ADO releases all the locks and the memory allocated to its cursor (if it has one). You can't close a Recordset if an edit operation is in progress (that is, if you modified the value of one or more fields and haven't committed the changes). You can reopen a closed Recordset by using the same or different values for its <I>Source</I>, <I>CursorType</I>, <I>MaxRecords</I>, <I>CursorPosition</I>, and <I>LockType </I>properties. (These properties are read-only while the Recordset is open.)</p>

<p>You can create a Recordset also by using the <I>Clone </I>method to create a copy of an existing Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rs2 As ADODB.Recordset
Set rs2 = rs.Clone(LockType)
</pre>
</td></tr></table></p>

<p>The optional <I>LockType </I>argument tells which type of lock you want to enforce on the new Recordset. The cloned record can be opened only with the same lock type as the original record has (in this case, you just omit the argument) or in read-only mode (you pass the adLockReadOnly constant). Cloning a Recordset is more efficient than creating another Recordset against the same data source. Any modified value in one Recordset is immediately visible to all its clones regardless of their cursor type, but all the Recordsets in the group can be scrolled and closed independently from one another. If you issue a <I>Requery </I>method against the original Recordset, its clones aren't synchronized any longer. (The opposite isn't true, however: If you <I>Requery </I>the clones, they are still synchronized with the original Recordset.) Keep in mind that only Recordsets that support bookmarks can be cloned and that you can compare bookmarks defined in a Recordset and its clones.</p>

<A NAME="576"><h3>Refreshing the Recordset</h3></A>
<p>ADO offers two methods for repopulating a Recordset without closing and reopening it. The <I>Requery </I>method reexecutes the Recordset query. This method is especially useful with parameterized queries against an SQL Server database when you aren't using a Command object because it tells ADO to reuse the temporary stored procedure that SQL Server created when the Recordset was opened the first time. The <I>Requery </I>method accepts the adAsyncExecute option to run the query asynchronously. When the query completes, a <I>RecordsetChangeComplete </I>event fires. The <I>Requery</I> method lets you reexecute the query, but you can't modify any property that affects the type of the cursor (<I>CursorType</I>, <I>CursorLocation</I>, <I>LockType</I>, and so on) because these properties are read-only when the Recordset is open. To change these properties, you must close and then reopen the Recordset.</p>

<p>The <I>Resync </I>method refreshes the Recordset from the underlying database without actually reexecuting the query. Its syntax is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Resync [AffectRecords], [ResyncValues]
</pre>
</td></tr></table></p>

<p><I>AffectRecords </I>tells which records should be refreshed and can be one of the following constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adAffectCurrent</td>
<td valign="top">Refreshes the current record only</td>
</tr>
<tr>
<td valign="top">2-adAffectGroup</td>
<td valign="top">Refreshes the records that satisfy the current 
<I>Filter </I>property, which should have been assigned one of 
the supported enumerated constants</td>
</tr>
<tr>
<td valign="top">3-adAffectAll</td>
<td valign="top">Refreshes the entire Recordset (the default)</td>
</tr>
</table></p>

<p><I>ResyncValues </I>can be one of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adResyncUnderlyingValues</td>
<td valign="top">Reads the most recent values 
from the database and puts them in the <I>UnderlyingValue 
</I>properties of the Field objects</td>
</tr>
<tr>
<td valign="top">2-adResyncAllValues</td>
<td valign="top">Reads the most recent values and 
puts them in the <I>Value </I>properties of the 
Field objects (the default)</td>
</tr>
</table></p>

<p>The effect of these two options is completely different: adResyncUnderlyingValues preserves the old data and doesn't cancel pending changes; adResyncAllValues cancels pending changes (as if a <I>CancelBatch</I> method had been issued).</p>

<p>Because the <I>Resync </I>method doesn't reexecute the query, you'll never see new records added by other users in the meantime. This method is especially useful with forward-only or static cursors when you want to be sure you're working with the most recent values. Any conflict during the resynchronization process&#8212;for example, another user has deleted a record&#8212;fills the Errors collection with one or more warnings. When using client-side cursors, this method is available only for updatable Recordsets.</p>

<A NAME="577"><h3>Retrieving data</h3></A>
<p>To read the values of the current record, you simply query the Fields collection as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print employee's first and last name.
Print rs.Fields(&quot;FirstName&quot;).Value, rs.Fields(&quot;LastName&quot;).Value
</pre>
</td></tr></table></p>

<p>Because <I>Fields </I>is the default property for the Recordset object, you can omit it and access the field simply by using its name or its index. Similarly, you can drop the <I>Value </I>property because it's the default member of the Field object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Print rs(&quot;FirstName&quot;), rs(&quot;LastName&quot;)
</pre>
</td></tr></table></p>

<p>You display the values of all the fields in the current record by iterating on the Fields collection. You can use the Field's index in a <I>For&#8230;Next </I>loop or a Field object variable in a <I>For Each&#8230;Next </I>loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The first method uses a regular For&#8230;Next loop.
For i = 0 To rs.Fields.Count _ 1
    Print rs.Fields(i).Name &amp; &quot; = &quot; &amp; rs(i)
Next

' The second method uses a For Each&#8230;Next loop.
Dim fld As ADODB.Field
For Each fld In rs.Fields
    Print fld.Name &amp; &quot; = &quot; &amp; fld.Value
Next
</pre>
</td></tr></table></p>

<p>ADO also offers more efficient ways to retrieve data. The <I>GetRows </I>method returns a two-dimensional array of Variants, where each column corresponds to a record in the Recordset and each row corresponds to a field in the record. This method has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>varArray = rs.GetRows([Rows], [Start], [Fields])
</pre>
</td></tr></table></p>

<p><I>Rows </I>is the number of records you want to read; use -1 or omit this argument if you want to retrieve all the records in the Recordset. <I>Start</I> is a bookmark that indicates the first record to be read; it can also be one of the following enumerated constants: 0-adBookmarkCurrent (the current record), 1-adBookmarkFirst (the first record), or 2-adBookmarkLast (the last record).</p>

<I>Fields </I>is an optional array of field names that serves to restrict the quantity of data to read. (You can also specify a single field name, a single field index, or an array of field indexes.) When you set <I>Rows</I> to a value less than the number of records in the Recordset, the first unread record becomes the current record. If you omit the <I>Rows</I> argument or set it to -1-adGetRowsRest or to a value greater than the number of records still unread, the <I>GetRows</I> method reads all the records and leaves the Recordset in the EOF condition, without raising any error.</p>

<p>When processing the data in the target Variant array, you should remember that data is stored somewhat counterintuitively: The first subscript in the array identifies the Recordset's field (which is usually thought of as a column), and the second subscript identifies the Recordset's record (which is usually thought of as a row). Here's an example that loads three fields from all the records in the Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim values As Variant, fldIndex As Integer, recIndex As Integer
values = rs.GetRows(, , Array(&quot;LastName&quot;, &quot;FirstName&quot;, &quot;BirthDate&quot;))
For recIndex = 0 To UBound(values, 2)
    For fldIndex = 0 To UBound(values)
        Print values(fldIndex, recIndex),
    Next
    Print
Next
</pre>
</td></tr></table></p>

<p>The <I>GetRows </I>method is usually noticeably faster than an explicit loop that reads one record at a time, but if you use this method you must ensure that the Recordset doesn't contain too many records; otherwise, you can easily fill up all your physical memory with a very large Variant array. For the same reason, be careful not to include any BLOB (Binary Large Object) or CLOB (Character Large Object) fields in the field list; if you do, your application will almost surely bomb, especially with larger Recordsets. Finally, keep in mind that the Variant array returned by this method is zero-based; the number of returned records is <I>UBound(values,2)+1</I>, and the number of returned fields is <I>UBound(value, 1)+1</I>.</p>

<p>The <I>GetString </I>method is similar to <I>GetRows</I>, but it returns multiple records as a single string. <I>GetString</I> has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>GetString([Format], [NumRows], [ColDelimiter], [RowDelimiter], [NullExpr])
</pre>
</td></tr></table></p>

<p><I>Format </I>is the format for the result. <I>GetString </I>potentially supports more formats, but the only format currently supported is 2-adClipString, so you don't really have any choice. <I>NumRows </I>is the number of rows to retrieve. (Use -1 or omit this argument to read all the remaining records.) <I>ColDelimiter</I> is the delimiter character for the columns. (The default is the Tab character.) <I>RowDelimiter</I> is the delimiter character for the records. (The default is the carriage return.) <I>NullExpr </I>is the string to be used for Null fields. (The default is the empty string.) The documentation states that the last three arguments can be used only if <I>Format </I>= adClipString, but this warning doesn't make much sense because, as I just mentioned, this format is the only one currently supported. Here's an example that uses the <I>GetString </I>method to export data in a semicolon-delimited text file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim i As Long
Open &quot;datafile.txt&quot; For Output As #1
For i = 0 To rs.Fields.Count _ 1          ' Export field names.
    If i &gt; 0 Then Print #1, &quot;;&quot;;
    Print #1, rs.Fields(i).Name;
Next
Print #1, &quot;&quot;
rs.MoveFirst                              ' Export data.
Print #1, rs.GetString(, , &quot;;&quot;, vbCrLf);  ' Don't add an extra CR-LF here.
Close #1
</pre>
</td></tr></table></p>

<p>The <I>GetString </I>method doesn't permit you to export only a subset of the fields, nor does it permit you to modify the order of the exported fields. If you need these additional capabilities, you should use the <I>GetRows </I>method and build the result string yourself.</p>

<A NAME="578"><h3>Navigating the Recordset</h3></A>
<p>When you open a Recordset, the current record pointer points to the first record unless the Recordset is empty (in which case, both the <I>BOF </I>and <I>EOF </I>properties return True). To read and modify values in another record, you must make that record the current record, which you usually do by executing one of the <I>Move</I>xxxx methods exposed by the Recordset object. <I>MoveFirst</I> moves to the first record in the Recordset, <I>MoveLast </I>moves to the last record, <I>MovePrevious </I>moves to the previous record, and <I>MoveNext </I>moves to the next record. You typically provide users with four buttons that let them navigate the Recordset. Executing a <I>MovePrevious </I>method when <I>BOF </I>is True or executing a <I>MoveNext </I>method when <I>EOF </I>is True raises an error; therefore, you have to trap these conditions before moving to the previous or next record:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdFirst_Click()
    rs.MoveFirst
End Sub

Private Sub cmdPrevious_Click()
    If Not rs.BOF Then rs.MovePrevious
End Sub

Private Sub cmdNext_Click()
    If Not rs.EOF Then rs.MoveNext
End Sub

Private Sub cmdLast_Click()
    rs.MoveLast
End Sub
</pre>
</td></tr></table></p>

<p>The <I>MoveFirst </I>and <I>MoveNext </I>methods are commonly used in loops that iterate on all the records in the Recordset, as shown in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.MoveFirst
Do Until rs.EOF
    total = total + rs(&quot;UnitsInStock&quot;) * rs(&quot;UnitPrice&quot;)
    rs.MoveNext
Loop
Print &quot;Total of UnitsInStock * UnitPrice = &quot; &amp; total
</pre>
</td></tr>
</table></p>

<p>ADO also supports a generic <I>Move </I>method, whose syntax is:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Move NumRecords, [Start]
</pre>
</td></tr>
</table></p>

<p><I>NumRecords </I>is a Long value that specifies the number of records to skip toward the end (if positive) or the beginning (if negative) of the Recordset. The move is relative to the record identified by the <I>Start </I>argument, which can be a bookmark value or one of the following enumerated constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adBookmarkCurrent</td>
<td valign="top">The current record</td>
</tr>
<tr>
<td valign="top">1-adBookmarkFirst</td>
<td valign="top">The first record in the Recordset</td>
</tr>
<tr>
<td valign="top">2-adBookmarkLast</td>
<td valign="top">The last record in the Recordset</td>
</tr>
</table></p>

<p>As you can see below, the <I>Move </I>method embodies the functionality of the four <I>Move</I>xxxx methods I've described previously.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Move 0, adBookmarkFirst           ' Same as MoveFirst
rs.Move _1                           ' Same as MovePrevious
rs.Move 1                            ' Same as MoveNext
rs.Move 0, adBookmarkLast            ' Same as MoveLast
rs.Move 10, adBookmarkFirst          ' Move to the tenth record.
rs.Move -1, adBookmarkLast            ' Move to the next to the last record.
rs.Move 0                            ' Refresh the current record.
</pre>
</td></tr></table></p>

<p>If you specify a negative offset that points to a record before the first record, the <I>BOF </I>property becomes True and no error is raised. Similarly, if you specify a positive offset that points to a record after the last record, the <I>EOF </I>property is set to True and no error is raised. Interestingly, you can specify a negative offset even with forward-only Recordsets: If the target record is still in the local cache, no error occurs. (You can't use <I>MovePrevious </I>with forward-only Recordsets, regardless of whether the previous record is in the cache.)</p>

<p>You can also navigate a Recordset using the <I>Bookmark </I>and <I>AbsolutePosition </I>properties. ADO also provides a <I>CompareBookmarks</I> method that lets you compare bookmarks coming from the same Recordset or from a cloned Recordset. This method has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>result = CompareBookmarks(Bookmark1, Bookmark2)
</pre>
</td></tr></table></p>

<p><I>result </I>can receive one of these values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adCompareLessThan</td>
<td valign="top">The first bookmark refers to a record that precedes the record the second bookmark refers to.</td>
</tr>
<tr>
<td valign="top">1-adCompareEqual</td>
<td valign="top">The two bookmarks point to the same record.</td>
</tr>
<tr>
<td valign="top">2-adCompareGreaterThan</td>
<td valign="top">The first bookmark refers to a record that follows the record the second bookmark refers to.</td>
</tr>
<tr>
<td valign="top">3-adCompareNotEqual</td>
<td valign="top">The two bookmarks refer to different records, but the provider can't determine which one comes first.</td>
</tr>
<tr>
<td valign="top">4-adCompareNotComparable</td>
<td valign="top">The bookmarks can't be compared.</td>
</tr>
</table></p>

<A NAME="579"><h3>Updating, inserting, and deleting records</h3></A>
<p>ADO differs from DAO and RDO in that the <I>Update </I>method isn't really necessary: All you have to do to modify a record is assign a new value to one or more Field objects and then move to another record. The ADO <I>Update </I>method supports the capability to update multiple fields at once, using the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Update [fields] [, values]
</pre>
</td></tr></table></p>

<p><I>fields </I>is a Variant containing a single field name, a field index, or an array of field names or indexes. <I>values </I>is a Variant containing a single value or an array of values. These arguments are optional, but you can't omit just one of the two: If provided, they must contain the same number of arguments. The following example demonstrates how you can update multiple fields using this syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Update four fields in one operation.
rs.Update Array(&quot;FirstName&quot;, &quot;LastName&quot;, &quot;BirthDate&quot;, &quot;HireDate&quot;), _
    Array(&quot;John&quot;, &quot;Smith&quot;, #1/1/1961#, #12/3/1994#)
</pre>
</td></tr></table></p>

<p>Because an update operation is automatically performed if one or more fields in the current record have been modified, ADO provides the <I>CancelUpdate</I> method to cancel such changes and leave the current record unmodified. You can use the <I>Update </I>and <I>CancelUpdate </I>methods together to offer the user a chance to confirm or cancel changes to the current record:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If rs.EditMode = adEditInProgress Then
    If MsgBox(&quot;Do you want to commit changes?&quot;, vbYesNo) = vbYes Then
        rs.Update
    Else
        rs.CancelUpdate
    End If
End If
</pre>
</td></tr></table></p>

<p>You can add new records to the Recordset with the <I>AddNew </I>method. This method is similar to the <I>Update </I>method in that it supports two syntax forms, with or without arguments. If you don't pass an argument, you create a new record at the end of the Recordset and you're supposed to assign values to its fields using the Fields collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.AddNew
rs(&quot;FirstName&quot;) = &quot;Robert&quot;
rs(&quot;LastName&quot;) = &quot;Doe
rs(&quot;BirthDate&quot;) = #2/5/1955#
rs.Update
</pre>
</td></tr></table></p>

<p>You don't need an explicit <I>Update</I> method after an <I>AddNew </I>method&#8212;any <I>Move</I>xxxx method will do. In the second syntax form, you pass the <I>AddNew</I> method a list of fields and a list of values; in this case, no update is necessary because values are immediately committed to the database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This statement has the same effect as the previous code snippet.
rs.AddNew Array(&quot;FirstName&quot;, &quot;LastName&quot;, &quot;BirthDate&quot;), _
    Array(&quot;Robert&quot;, &quot;Doe&quot;, #2/5/1955#)
</pre>
</td></tr></table></p>

<p>After you commit changes with an <I>Update </I>method, the record you've just added becomes the current record. If you issue a second <I>AddNew </I>method, you commit changes automatically to the record added just before, as if you had executed a <I>Move</I>xxxx method. Depending on the type of cursor, it's possible that the record you've added doesn't appear in the Recordset immediately and that you'll have to execute a <I>Requery </I>method to see it.</p>

<p>You can delete the current record by executing the <I>Delete </I>method. This method accepts an optional argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Delete [AffectRecords]
</pre>
</td></tr></table></p>

<p>If <I>AffectRecords </I>is 1-adAffectCurrent or is omitted, only the current record is deleted. When you delete a record, it's still the current record but it can't be accessed any longer, so you'd better move on to another record:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Delete
rs.MoveNext
If rs.EOF Then rs.MoveLast
</pre>
</td></tr></table></p>

<p>You can delete a group of records by assigning an enumerated constant to the <I>Filter </I>property and then issuing a <I>Delete </I>method with the <I>AffectRecords </I>argument set to 2-adAffectGroup:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' After a batch update attempt, delete all the records that failed
' to be transferred to the server.
rs.Filter = adFilterConflictingRecords
rs.Delete adAffectGroup
rs.Filter = adFilterNone        ' Remove the filter.
</pre>
</td></tr></table></p>

<p>You should nest your delete operations in a transaction if you want to give your users the chance to undelete them.</p>

<A NAME="580"><h3>Finding records</h3></A>
<p>The <I>Find </I>method provides a simple way to move to a record in the Recordset that matches search criteria. This method has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Find Criteria, [SkipRecords], [SearchDirection], [Start]
</pre>
</td></tr></table></p>

<p><I>Criteria </I>is a string that contains the search condition, which consists of a field name followed by an operator and a value. The supported operators are = (equal), &lt; (less than), &gt; (greater than), and LIKE (pattern matching). The value can be a string enclosed by single quotes, a number, or a date value enclosed by # characters. <I>SkipRecord </I>is an optional number that indicates how many records should be skipped before starting the search: Positive values skip forward (toward the end of the Recordset), and negative values skip backward (toward the beginning of the Recordset). <I>SearchDirection </I>indicates the direction in which the search must proceed; you can use the values 1-adSearchForward (the default) or -1-adSearchBackward. <I>Start</I> is an optional bookmark that specifies the record from which the search should begin. (The default is the current record.)</p>

<p>In most cases, you can omit all the arguments except the first one, which results in a search that starts from the current record (included) and goes toward the end of the database. If the search is successful, the record that matches the search criteria becomes the current record; if the search fails, the current record is past the last record in the Recordset (or before the first record, if <I>Search </I>= adSearchBackward). Passing a nonzero value to the <I>SkipRecord </I>argument is necessary when you want to restart the search after you've found a match, as the following code snippet demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Search all the employees who were hired after January 1, 1994.
rs.MoveFirst
rs.Find &quot;HireDate &gt; #1/1/1994#&quot;
Do Until rs.EOF
    Print rs(&quot;LastName&quot;), rs(&quot;BirthDate&quot;), rs(&quot;HireDate&quot;)
    ' Search the next record that meets the criteria, but skip the current one. 
    rs.Find &quot;HireDate &gt; #1/1/1994#&quot;, 1
Loop
</pre>
</td></tr></table></p>

<p>The LIKE operator accepts two wildcard symbols: * (asterisk) matches zero or more characters, and _ (underscore) matches exactly one character. Comparisons aren't case sensitive and aren't affected by the <I>Option Compare </I>directive. Here are a few examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Find &quot;FirstName LIKE 'J*'&quot;    ' Matches &quot;Joe&quot; and &quot;John&quot;.
rs.Find &quot;FirstName LIKE 'J__'&quot;   ' Matches &quot;Joe&quot; but not &quot;John&quot;.
rs.Find &quot;FirstName LIKE '*A*'&quot;   ' Matches &quot;Anne&quot;, &quot;Deborah&quot;, and &quot;Maria&quot;.
rs.Find &quot;FirstName LIKE '*A'&quot;    ' This gives an error: a bug?
</pre>
</td></tr></table></p>

<A NAME="581"><h3>Updating records in batch mode</h3></A>
<p>If you open a Recordset with the adLockBatchOptimistic option, all the rules stated so far about record updating are void. When working with optimistic batch updates, you're actually working with a cursor on the client workstation. You can read it even if the connection with the server doesn't exist anymore, and you can modify it without committing the changes to the server (not immediately at least). In optimistic batch mode, the implicit or explicit <I>Update </I>method affects only the local cursor, not the real database. This helps keep the network traffic to a minimum and greatly improves overall performance.</p>

<p>When you're ready to commit the changes to the database on the server, you issue an <I>UpdateBatch </I>method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>UpdateBatch [AffectRecords]
</pre>
</td></tr>
</table></p>

<p>You should assign the <I>AffectRecords </I>argument one of the constants listed below.</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adAffectCurrent</td>
<td valign="top">Updates only the current record</td>
</tr>
<tr>
<td valign="top">2-adAffectGroup</td>
<td valign="top">Updates all the modified records that satisfy the current <I>Filter</I> property, which must have been assigned one of the supported enumerated constants</td>
</tr>
<tr>
<td valign="top">3-adAffectAll</td>
<td valign="top">Updates all modified records in the Recordset (the default)</td>
</tr>
<tr>
<td valign="top">4-adAffectAllChapters</td>
<td valign="top">Updates all the chapters in a hierarchical Recordset</td>
</tr>
</table></p>

<p>The adAffectAll setting is hidden in the ADODB type library. If you issue the <I>UpdateBatch </I>method while in edit mode, ADO commits the changes to the current record and then proceeds with the batch update.</p>

<p>The Visual Basic documentation states that if there is a conflict and one or more records can't be successfully updated, ADO fills the Errors collection with warnings but doesn't raise an error in the application. ADO raises an error only if all the records fail to update. Some tests prove, however, that when there is one conflicting record, the error &amp;H80040E38, &quot;Errors occurred,&quot; is returned to the application. You can then set the <I>Filter</I> property to the adFilterConflictingRecords value to see which records weren't updated successfully.</p>

<p>You can cancel a batch update using the <I>CancelBatch </I>method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>CancelBatch [AffectRecords]
</pre>
</td></tr></table></p>

<p><I>AffectRecords </I>has the same meaning here as it has with the <I>UpdateBatch </I>method. If the Recordset hasn't been opened with the adLockBatchOptimistic option, any value other than 1-adAffectCurrent raises an error. If you're in edit mode, the <I>CancelBatch </I>method cancels the updates to the current record first and then cancels the changes to the records affected by the <I>AffectRecords </I>argument. After a <I>CancelBatch </I>method is completed, the current record position might be undetermined, so you should use the <I>Move</I>xxxx method or the <I>Bookmark </I>property to move to a valid record.</p>

<p>When performing batch update operations on the client machine, you don't need to keep the connection to the database active. In fact, you can set the Recordset's <I>ActiveConnection </I>property to Nothing, close the companion Connection object, let your user browse and update the data, and then reestablish the connection when he or she is ready to post the updates to the database. For more information about batch updates, see the section &quot;<a href="#631">Optimistic Client-Batch Updates</a>&quot; in Chapter 14.</p>

<A NAME="582"><h3>Implementing persistent Recordsets</h3></A>
<p>One of the most intriguing features of the ADO Recordset object is that you can save it to a regular disk file and then reopen it when necessary. This feature is advantageous in many situations&#8212;for example, when you're performing batch updates or when you want to postpone the processing of a Recordset. You don't even need to reopen the Recordset with the same application that saved it. For example, you can save a Recordset to a file and later process it with a report application that sends the output to a printer during off hours. The key to this capability is the <I>Save </I>method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Save [FileName], [PersistFormat]
</pre>
</td></tr></table></p>

<p>The first argument is the name of the file in which the Recordset should be saved, and the second argument is the format in which the Recordset should be saved. ADO 2.0 supports only the Advanced Data TableGram (ADTG), so you should specify the constant 0-adPersistADTG or omit the argument. Although the syntax of the <I>Save </I>method is rather intuitive, it includes some subtle details that you must account for when you're working with persistent Recordsets:</p>

<UL>
<p><li>In general, persistent Recordsets should use client-side cursors, so you should change the value of the <I>CursorLocation </I>property, whose default value is adUseServer. Some providers might support this capability with server-side cursors, however.</li></p>

<p><li>You need to specify the filename only the first time you save the Recordset to a file; in all subsequent saves, you must omit the first argument if you want to save to the same data file. If you don't omit the argument, a run-time error occurs.</li></p>

<p><li>An error occurs if the file already exists, so you should test for its existence before issuing the <I>Save </I>method and manually delete it if necessary.</li></p>

<p><li><I>Save </I>doesn't close the Recordset, so you can continue to work with it and save the most recent changes by issuing additional <I>Save </I>methods without the <I>FileName </I>argument. The file is closed only when the Recordset is also closed; in the meantime, other applications can read the file but can't write to it.</li></p>

<p><li>After you've saved to a file, you can specify a different filename to save to a different file; however, this operation doesn't close the original file. Both files remain open until the Recordset is closed.</li></p>

<p><li>If the <I>Filter </I>property is in effect, only the records that are currently visible are saved. This feature is useful for postponing the processing of records that failed to be committed to the database during a batch update operation.</li></p>

<p><li>If the <I>Sort</I> property isn't an empty string, the records will be saved in the sorted order.</li></p>

<p><li>If the <I>Save </I>method is issued while an asynchronous operation is in progress, the method doesn't return until the asynchronous operation is completed.</li></p>

<p><li>After a <I>Save </I>operation, the current record will be the first record in the Recordset.</li></p>
</UL>

<p>When opening a persistent Recordset, you should use the adCmdFile value in the <I>Option </I>argument of the <I>Open </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save a Recordset to a file, and then close both the file
' and the Recordset.
rs.Save &quot;C:\datafile.rec&quot;, adPersistADTG
rs.Close
'...
' Reopen the persistent Recordset.
rs.Open &quot;C:\datafile.rec&quot;, , , , adCmdFile
</pre>
</td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Because the ADTG is a binary format, you can't easily edit a Recordset that has been saved in this format. The ADODB type library already includes the hidden constant 1-adPersistXML, even though this constant isn't supported in ADO 2.0. The good news is that ADO 2.1 fully supports Recordset persistence in XML format; this option is tantalizing because XML is a text-based format, and so you can edit the saved file using an editor.
</blockquote></div></p>

<A NAME="583"><h3>Managing multiple Recordsets</h3></A>
<p>ADO Recordsets support multiple queries in the <I>Source </I>property or in the <I>Source </I>argument of the <I>Open</I> method if the provider also supports multiple queries. You specify multiple SELECT queries, or even SQL action queries, by using the semicolon as a separator, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Open &quot;SELECT * FROM Employees;SELECT * FROM Customers&quot;
</pre>
</td></tr></table></p>

<p>When the <I>Open </I>method completes its execution, the Recordset object contains all the records from the first query, and you can process these records as you would with a regular Recordset. When you're done with the records, you can retrieve them from the second query using the <I>NextRecordset </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim RecordsAffected As Long
Set rs = rs.NextRecordset(RecordsAffected)
</pre>
</td></tr></table></p>

<p>The argument is optional; if specified, it should be a Long variable. This variable receives the number of records that have been affected by the current operation (which might also be an SQL command that doesn't return a Recordset). Although the syntax permits you to assign the result of the <I>NextResult </I>method to another Recordset variable, as of this writing, no provider supports this functionality and the original contents of the Recordset are always discarded. If this functionality becomes available, it will be possible to assign each Recordset object to a distinct object variable and process all the Recordsets simultaneously.</p>

<p>Here are a few details to be aware of when you're working with multiple Recordsets:</p>

<UL>
<p><li>Each query is executed only when the <I>NextRecordset </I>method requests it; therefore, if you close the Recordset before processing all the pending commands, the corresponding queries or action commands are never executed.</li></p>

<p><li>If a row-returning query doesn't return any record, the resulting Recordset is empty. You can test this condition by checking whether both the <I>BOF </I>and <I>EOF </I>properties return True.</li></p>

<p><li>If the pending SQL command doesn't return any row, the resulting Recordset will be closed. You can test this condition with the <I>State </I>property.</li></p>

<p><li>When no more commands are pending, the <I>NextRecordset </I>method returns Nothing.</li></p>

<p><li>You can't call the <I>NextResult </I>method if an edit operation is in progress; to avoid errors, you should issue an <I>Update </I>or <I>CancelUpdate </I>method first.</li></p>

<p><li>If one or more of the SQL commands or queries require parameters, you should fill the Parameters collection with all the required parameter values, and they should be in the order expected by the commands or queries.</li></p>

<p><li>The provider must support multiple queries. For example, the provider for Microsoft Jet databases doesn't support them. The providers for SQL Server seem to support this functionality only with static client-side cursors or with server-side &quot;cursorless&quot; Recordsets.</li></p>
</UL>

<p>Here's an example of a code framework that you can use when working with multiple Recordsets:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim RecordsAffected As Long
rs.Open
Do 
    If rs Is Nothing Then 
        ' No more Recordsets, so exit.
        Exit Do 
    ElseIf (rs.State And adStateOpen) = 0 Then
        ' It was a non-row-returning SQL command.
        ...
    Else
        ' Process the Recordset here.
        ...
    End If
    Set rs.NextRecordset(RecordsAffected)
Loop
</pre>
</td></tr></table></p>

<A NAME="584"><h3>Testing for features</h3></A>
<p>Not all types of Recordsets support all the features that I've described so far. Instead of having you guess which features are supported and which aren't, the ADO Recordset object exposes the <I>Supports </I>method, which accepts a bit-field argument and returns True only if the Recordset supports all the features indicated in the argument. For example, you can test whether the Recordset supports bookmarks using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If rs.Supports(adBookmark) Then currBookmark = rs.Bookmark
</pre>
</td></tr></table></p>

<p>The argument to the <I>Supports </I>method can include one or more of the constants listed in Table 13-3. You don't need to issue multiple <I>Supports </I>methods if you want to test multiple features:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If rs.Supports(adAddNew Or adDelete Or adFind) Then
    ' The Recordset supports the AddNew, Delete, and Find methods.
End If
</pre>
</td></tr></table></p>

<p>Don't forget that if this method returns True you're only sure that ADO supports the requested operation, not that the OLE DB provider necessarily supports it under all circumstances.</p>

<B>Table 13-3.</B> <i>The arguments for the Supports method.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">adHoldRecords</td>
<td valign="top">&amp;H100</td>
<td valign="top">Support for reading more records or changing the next retrieve position without committing pending changes</td>
</tr>
<tr>
<td valign="top">adMovePrevious</td>
<td valign="top">&amp;H200</td>
<td valign="top">Support for the <I>MoveFirst</I> and <I>MovePrevious</I> methods and for <I>Move </I>and <I>GetRows </I>with backward moves</td>
</tr>
<tr>
<td valign="top">adBookmark</td>
<td valign="top">&amp;H2000</td>
<td valign="top">Support for the <I>Bookmark </I>property</td>
</tr>
<tr>
<td valign="top">adApproxPosition</td>
<td valign="top">&amp;H4000</td>
<td valign="top">Support for the <I>AbsolutePosition </I>and <I>AbsolutePage </I>properties</td>
</tr>
<tr>
<td valign="top">adUpdateBatch</td>
<td valign="top">&amp;H10000</td>
<td valign="top">Support for the <I>UpdateBatch </I>and <I>CancelBatch </I>methods</td>
</tr>
<tr>
<td valign="top">adResync</td>
<td valign="top">&amp;H20000</td>
<td valign="top">Support for the <I>Resync </I>method</td>
</tr>
<tr>
<td valign="top">adNotify</td>
<td valign="top">&amp;H40000</td>
<td valign="top">Support for notifications</td>
</tr>
<tr>
<td valign="top">adFind</td>
<td valign="top">&amp;H80000</td>
<td valign="top">Support for the <I>Find </I>method</td>
</tr>
<tr>
<td valign="top">adAddNew</td>
<td valign="top">&amp;H1000400</td>
<td valign="top">Support for the <I>AddNew </I>method</td>
</tr>
<tr>
<td valign="top">adDelete</td>
<td valign="top">&amp;H1000800</td>
<td valign="top">Support for the <I>Delete </I>method</td>
</tr>
<tr>
<td valign="top">adUpdate</td>
<td valign="top">&amp;H1008000</td>
<td valign="top">Support for the <I>Update </I>method</td>
</tr>
</table></p>

<A NAME="585"><h2>Events</h2></A>
<p>The ADO Recordset object exposes 11 events. These events allow you to take complete control of what's happening behind the scenes. By writing code for these events, you can leverage asynchronous queries, trap the instant when a field or a record is modified, and even add data when the user reaches the end of the Recordset. The ADO Workbench application is especially helpful when watching events because it automatically converts all the enumerated constants to their symbolic names.</p>

<A NAME="586"><h3>Data retrieval events</h3></A>
<p>The <I>FetchProgress </I>event is fired periodically during a lengthy asynchronous operation. You can use it to show the user a progress bar that indicates the percentage of records retrieved:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_FetchProgress(ByVal Progress As Long, _
    ByVal MaxProgress As Long, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>The <I>Progress </I>parameter is the number of records retrieved so far. <I>MaxProgress </I>is the total number of expected records. <I>adStatus</I> is the usual status parameter. <I>pRecordset </I>is a reference to the Recordset object that is raising the event. (In Visual Basic, you never need to use this argument because you already have a reference to the Recordset.)</p>

<p>When the retrieval of records is completed, ADO fires a <I>FetchComplete</I> event. If the <I>adStatus </I>parameter is equal to adStatusErrorsOccurred, you can query the error through the <I>pError </I>parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_FetchComplete(ByVal pError As ADODB.error, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
End Sub
</pre>
</td></tr></table></p>

<A NAME="587"><h3>Navigation events</h3></A>
<p>Each time the current record changes, a <I>WillMove </I>event fires, soon followed by a <I>MoveComplete </I>event, as you can see in the code below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_WillMove(ByVal adReason As ADODB.EventReasonEnum, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>The <I>adReason </I>parameter tells why this event has been fired. It can be one of the constants listed in Table 13-4. Unless <I>adStatus </I>is set to adStatusCantDeny<I>,</I> you can cancel the operation by assigning the value adStatusCancel to <I>adStatus</I>.</p>

<p>When the move operation has completed (or when it has been canceled), a <I>MoveComplete </I>event fires:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_MoveComplete(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal pError As ADODB.error, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>The <I>adReason </I>and <I>adStatus </I>parameters have the same meanings as they have in the <I>WillMove </I>event: If <I>adStatus </I>is equal to adStatusErrorOccurred, the <I>pError </I>object contains information about the error; otherwise, <I>pError </I>is Nothing. You can cancel further notifications by setting <I>adStatus </I>to adStatusUnwantedEvent.</p>

<p><B>Table 13-4.</B> <i>The values of the adReason parameter in Recordset's events.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Constant</i></th>
</tr>
<tr>
<td valign="top">1</td>
<td valign="top">adRsnAddNew</td>
</tr>
<tr>
<td valign="top">2</td>
<td valign="top">adRsnDelete</td>
</tr>
<tr>
<td valign="top">3</td>
<td valign="top">adRsnUpdate</td>
</tr>
<tr>
<td valign="top">4</td>
<td valign="top">adRsnUndoUpdate</td>
</tr>
<tr>
<td valign="top">5</td>
<td valign="top">adRsnUndoAddNew</td>
</tr>
<tr>
<td valign="top">6</td>
<td valign="top">adRsnUndoDelete</td>
</tr>
<tr>
<td valign="top">7</td>
<td valign="top">adRsnRequery</td>
</tr>
<tr>
<td valign="top">8</td>
<td valign="top">adRsnResynch</td>
</tr>
<tr>
<td valign="top">9</td>
<td valign="top">adRsnClose</td>
</tr>
<tr>
<td valign="top">10</td>
<td valign="top">adRsnMove</td>
</tr>
<tr>
<td valign="top">11</td>
<td valign="top">adRsnFirstChange</td>
</tr>
<tr>
<td valign="top">12</td>
<td valign="top">adRsnMoveFirst</td>
</tr>
<tr>
<td valign="top">13</td>
<td valign="top">adRsnMoveNext</td>
</tr>
<tr>
<td valign="top">14</td>
<td valign="top">adRsnMovePrevious</td>
</tr>
<tr>
<td valign="top">15</td>
<td valign="top">adRsnMoveLast</td>
</tr>
</table></p>

<p>When the program attempts to move past the end of the Recordset, possibly as a result of a <I>MoveNext </I>method, an <I>EndOfRecordset </I>error fires:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_EndOfRecordset(fMoreData As Boolean, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>ADO lets you add new records to the Recordset when this event fires. If you want to take advantage of this opportunity, just execute an <I>AddNew </I>method, fill the Fields collection with data, and then set the <I>fMoreData </I>parameter to True to let ADO know that you've added new records. As usual, you can cancel the operation that caused the move by setting the <I>adStatus</I> parameter to adStatusCancel, unless the <I>adStatus </I>parameter contains the value adStatusCantDeny.</p>

<A NAME="588"><h3>Update events</h3></A>
<p>Any time ADO is about to modify one or more fields in a Recordset, it fires the <I>WillChangeField </I>event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_WillChangeField(ByVal cFields As Long, _
    ByVal Fields As Variant, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p><I>cFields </I>is the number of fields that are about to be modified, and <I>Fields </I>is an array of Variants that contains one or more Field objects with pending changes. You can set <I>adStatus </I>to adStatusCancel to cancel the pending update operation, unless it contains the adStatusCantDeny value.</p>

<p>When the update operation is completed, ADO fires a <I>FieldChangeComplete </I>event, which receives the same parameters plus the pError object that lets you investigate any error raised in the meantime (if <I>adStatus </I>is equal to adStatusErrorOccurred):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_FieldChangeComplete(ByVal cFields As Long, _
    ByVal Fields As Variant, ByVal pError As ADODB.error, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>When one or more records are about to change, ADO fires a <I>WillChangeRecord </I>event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_WillChangeRecord(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal cRecords As Long, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p><I>adReason </I>is one of the enumerated constants listed in Table 13-4, <I>cRecords </I>is the number of records that are going to be modified, and <I>adStatus </I>is the parameter that you can set to adStatusCancel to cancel the operation (unless the <I>adStatus</I> parameter contains the adStatusCantDeny value).</p>

<p>When the update operation is completed, ADO fires a <I>RecordChangeComplete </I>event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_RecordChangeComplete( _
    ByVal adReason As ADODB.EventReasonEnum, ByVal cRecords As Long, _
    ByVal pError As ADODB.error, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>All the parameters have the same meanings as they do in the <I>WillChangeRecord </I>event. If <I>adStatus </I>is adStatusErrorOccurred, you can query the <I>pError </I>object to find out what went wrong, and you can reject further notifications by setting <I>adStatus </I>to adStatusUnwantedEvent. These two events can occur because of an <I>Update</I>, <I>UpdateBatch</I>, <I>Delete</I>, <I>CancelUpdate</I>, <I>CancelBatch</I>, or <I>AddNew </I>method. During this event, the <I>Filter </I>property is set to the value adFilterAffectedRecords and you can't change it.</p>

<p>Whenever ADO is about to perform an operation that's going to change the contents of the Recordset as a whole&#8212;such as <I>Open</I>, <I>Requery</I>, and <I>Resync </I>methods&#8212;a <I>WillChangeRecordset </I>event fires:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_WillChangeRecordset( _
    ByVal adReason As ADODB.EventReasonEnum,
    adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p><I>adReason</I> is one of the constants listed in Table 13-4, and <I>adStatus </I>has the usual meaning. If this parameter isn't equal to adStatusCantDeny, you can cancel the operation by setting it to the value adStatusCancel.</p>

<p>When the update operation is complete, ADO fires a <I>RecordsetChangeComplete </I>event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_RecordsetChangeComplete( _
    ByVal adReason As ADODB.EventReasonEnum, _
    ByVal pError As ADODB.error, _
    adStatus As ADODB.EventStatusEnum, ByVal pRecordset As ADODB.Recordset)
</pre>
</td></tr></table></p>

<p>The parameters here mean the same as they do in the <I>WillChangeRecordset </I>event. One undocumented behavior you should keep in mind is that with a forward-only Recordset, the <I>WillChangeRecordset</I> and <I>RecordsetChangeComplete</I> events also fire whenever you execute the <I>MoveNext </I>method because you're working with a cursorless Recordset; each time you move to another record, ADO re-creates the Recordset object. In general, with any Recordset that doesn't support bookmarks, these events fire whenever the local cache has to be refilled (with a frequency that therefore depends on the <I>CacheSize </I>property).</p>


<a name="A85"></a><h3>7.1.3 The Field Object</h3>

<A HREF="#A84">[Previous]</A> <A HREF="#A86">[Next]</A><P>

<A NAME="589"><h1>The Field Object</h1></A>
<p>The Recordset object exposes the Fields collection, which in turn contains one or more Field objects. Each Field object represents one column in the data source and exposes 12 properties and 2 methods.</p>

<A NAME="590"><h2>Properties</h2></A>
<p>The properties of a Field object can be divided into two distinct groups: properties that describe the attributes and the characteristics of the field (and that are available also when the Recordset is closed) and properties that describe the contents of a field in the current record. (These properties are available only when the Recordset is open and the current record isn't invalid.)</p>

<A NAME="591"><h3>Describing the field's characteristics</h3></A>
<p>All the properties that describe the Field object's characteristics (which are also known as <I>metadata </I>properties) are read/write if you're adding the Field object to a stand-alone Recordset and read-only after the Recordset has been opened.</p>

<p>The <I>Name </I>property is the name of the database column the Field object takes data from and writes data to. Because this property is also the key associated with the Field object in the Fields collection, you can refer to a particular field in one of three ways, using the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Full syntax
rs.Fields(&quot;LastName&quot;).Value = &quot;Smith&quot;
' Fields is the Recordset's default property.
rs(&quot;LastName&quot;).Value = &quot;Smith&quot;  
' Value is the Field's default property.
rs(&quot;LastName&quot;) = &quot;Smith&quot;
</pre>
</td></tr></table></p>

<p>You usually enumerate the fields in a Recordset using a <I>For&#8230;Next </I>or <I>For Each&#8230;Next </I>loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For i = 0 To rs.Fields.Count _ 1
    lstFieldNames.AddItem rs.Fields(i).Name
Next
</pre>
</td></tr></table></p>

<p>The <I>Type </I>property returns an enumerated constant that defines which kind of values can be stored in the field. All the types that ADO supports are listed in Table 13-5, but you should be aware that not all OLE DB providers and database engines support all these data types. The <I>Type</I> property also indirectly affects <I>NumericScale</I>, <I>Precision</I>, and <I>DefinedSize</I>.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
A few constants in Table 13-5 apply only to Parameter objects (which are described later in this chapter)&#8212;at least, this is what the Visual Basic documentation states. I found, however, that some of these values are also used for Field objects. For example, the <I>Type </I>property of a string field in an MDB database returns the value adVarChar.
</blockquote></div></p>

<p><B>Table 13-5.</B> <i>The constants used for the Type property of the Field, Parameter, and Property objects.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">adEmpty</td>
<td valign="top">0</td>
<td valign="top">No value specified</td>
</tr>
<tr>
<td valign="top">adSmallInt</td>
<td valign="top">2</td>
<td valign="top">2-byte signed integer</td>
</tr>
<tr>
<td valign="top">adInteger</td>
<td valign="top">3</td>
<td valign="top">4-byte signed integer</td>
</tr>
<tr>
<td valign="top">adSingle</td>
<td valign="top">4</td>
<td valign="top">Single-precision floating point value</td>
</tr>
<tr>
<td valign="top">adDouble</td>
<td valign="top">5</td>
<td valign="top">Double-precision floating point value</td>
</tr>
<tr>
<td valign="top">adCurrency</td>
<td valign="top">6</td>
<td valign="top">Currency value</td>
</tr>
<tr>
<td valign="top">adDate</td>
<td valign="top">7</td>
<td valign="top">Date value (stored in a Double value, in the same format as Visual Basic's Date variables)</td>
</tr>
<tr>
<td valign="top">adBSTR</td>
<td valign="top">8</td>
<td valign="top">Null-terminated Unicode string</td>
</tr>
<tr>
<td valign="top">adIDispatch</td>
<td valign="top">9</td>
<td valign="top">Pointer to an <I>IDispatch</I> interface of an OLE object</td>
</tr>
<tr>
<td valign="top">adError</td>
<td valign="top">10</td>
<td valign="top">32-bit error code</td>
</tr>
<tr>
<td valign="top">adBoolean</td>
<td valign="top">11</td>
<td valign="top">Boolean value</td>
</tr>
<tr>
<td valign="top">adVariant</td>
<td valign="top">12</td>
<td valign="top">Variant value</td>
</tr>
<tr>
<td valign="top">adIUnknown</td>
<td valign="top">13</td>
<td valign="top">Pointer to an <I>IUnknown</I> interface of an OLE object</td>
</tr>
<tr>
<td valign="top">adDecimal</td>
<td valign="top">14</td>
<td valign="top">Numeric value with fixed precision and scale</td>
</tr>
<tr>
<td valign="top">adTinyInt</td>
<td valign="top">16</td>
<td valign="top">1-byte signed integer</td>
</tr>
<tr>
<td valign="top">adUnsignedTinyInt</td>
<td valign="top">17</td>
<td valign="top">1-byte unsigned integer</td>
</tr>
<tr>
<td valign="top">adUnsignedSmallInt</td>
<td valign="top">18</td>
<td valign="top">2-byte unsigned integer</td>
</tr>
<tr>
<td valign="top">adUnsignedInt</td>
<td valign="top">19</td>
<td valign="top">4-byte unsigned integer</td>
</tr>
<tr>
<td valign="top">adBigInt</td>
<td valign="top">20</td>
<td valign="top">8-byte signed integer</td>
</tr>
<tr>
<td valign="top">adUnsignedBigInt</td>
<td valign="top">21</td>
<td valign="top">8-byte unsigned integer</td>
</tr>
<tr>
<td valign="top">adGUID</td>
<td valign="top">72</td>
<td valign="top">Globally Unique Identifier (GUID)</td>
</tr>
<tr>
<td valign="top">adBinary</td>
<td valign="top">128</td>
<td valign="top">Binary value</td>
</tr>
<tr>
<td valign="top">adChar</td>
<td valign="top">129</td>
<td valign="top">String value</td>
</tr>
<tr>
<td valign="top">adWChar</td>
<td valign="top">130</td>
<td valign="top">Null-terminated Unicode character string</td>
</tr>
<tr>
<td valign="top">adNumeric</td>
<td valign="top">131</td>
<td valign="top">Exact numeric value with fixed precision and scale</td>
</tr>
<tr>
<td valign="top">adUserDefined</td>
<td valign="top">132</td>
<td valign="top">User-defined variable</td>
</tr>
<tr>
<td valign="top">adDBDate</td>
<td valign="top">133</td>
<td valign="top">Date value in format &quot;yyyymmdd&quot;</td>
</tr>
<tr>
<td valign="top">adDBTime</td>
<td valign="top">134</td>
<td valign="top">Time value in format &quot;hhmmss&quot;</td>
</tr>
<tr>
<td valign="top">adDBTimeStamp</td>
<td valign="top">135</td>
<td valign="top">Date and time stamp in format &quot;yyyymmddhhmmss&quot; plus a fraction in billionths</td>
</tr>
<tr>
<td valign="top">adChapter</td>
<td valign="top">136</td>
<td valign="top">Chapter (a dependent Recordset in a hierarchical Recordset)</td>
</tr>
<tr>
<td valign="top">adVarNumeric</td>
<td valign="top">139</td>
<td valign="top">Variable-length exact numeric value with fixed precision and scale</td>
</tr>
<tr>
<td valign="top">adVarChar</td>
<td valign="top">200</td>
<td valign="top">String value (Parameter object only)</td>
</tr>
<tr>
<td valign="top">adLongVarChar</td>
<td valign="top">201</td>
<td valign="top">Long variable-length character string (Parameter object only)</td>
</tr>
<tr>
<td valign="top">adVarWChar</td>
<td valign="top">202</td>
<td valign="top">Null-terminated Unicode character string (Parameter object only)</td>
</tr>
<tr>
<td valign="top">adLongVarWChar</td>
<td valign="top">203</td>
<td valign="top">Long variable-length Unicode character string (Parameter object only)</td>
</tr>
<tr>
<td valign="top">adVarBinary</td>
<td valign="top">204</td>
<td valign="top">Binary value (Parameter object only)</td>
</tr>
<tr>
<td valign="top">adLongVarBinary</td>
<td valign="top">205</td>
<td valign="top">Long variable-length binary data (Parameter object only)</td>
</tr>
</table></p>

<p>The <I>DefinedSize </I>property returns the maximum capacity that was defined when the field was created. The <I>NumericScale </I>property indicates the scale of numeric values (in other words, the number of digits to the right of the decimal point that will be used to represent the value). The <I>Precision </I>property is the degree of precision for numeric values in a numeric Field object (that is, the maximum total number of digits used to represent the value). The <I>Attributes </I>property is a bit-field value that returns information about the field. It can contain one or more of the constants listed in Table 13-6.</p>

<p><B>Table 13-6.</B> <i>Constants used for the Attributes 
property of the Field object.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">adFldMayDefer</td>
<td valign="top">2</td>
<td valign="top">A deferred field&#8212;that is, a field whose value is retrieved only when the field is explicitly referenced in the code. BLOB and CLOB fields are often fields of this type.</td>
</tr>
<tr>
<td valign="top">adFldUpdatable</td>
<td valign="top">4</td>
<td valign="top">The field is updatable.</td>
</tr>
<tr>
<td valign="top">adFldUnknownUpdatable</td>
<td valign="top">8</td>
<td valign="top">The provider can't determine whether the field is writable.</td>
</tr>
<tr>
<td valign="top">adFldFixed</td>
<td valign="top">&amp;H10</td>
<td valign="top">The field contains fixed-length data.</td>
</tr>
<tr>
<td valign="top">adFldIsNullable</td>
<td valign="top">&amp;H20</td>
<td valign="top">The field accepts Null values.</td>
</tr>
<tr>
<td valign="top">adFldMayBeNull</td>
<td valign="top">&amp;H40</td>
<td valign="top">The field can contain Null values (but doesn't necessarily accept them).</td>
</tr>
<tr>
<td valign="top">adFldLong</td>
<td valign="top">&amp;H80</td>
<td valign="top">The field is a long binary field (for example, a BLOB or a CLOB), and you can use the <I>AppendChunk </I>and <I>GetChunk </I>methods on it.</td>
</tr>
<tr>
<td valign="top">adFldRowID</td>
<td valign="top">&amp;H100</td>
<td valign="top">The field contains a record identifier that can't be written to and that has no meaningful value except for identifying the row (for example, a record number or a unique identifier).</td>
</tr>
<tr>
<td valign="top">adFldRowVersion</td>
<td valign="top">&amp;H200</td>
<td valign="top">The field contains some kind of date stamp or time stamp that is used to track record updates.</td>
</tr>
<tr>
<td valign="top">adFldCacheDeferred</td>
<td valign="top">&amp;H1000</td>
<td valign="top">The field is cached the first time it is read from the database, and all subsequent reads fetch the data from the cache.</td>
</tr>
<tr>
<td valign="top">adFldKeyColumn</td>
<td valign="top">&amp;H8000</td>
<td valign="top">The field is part of the key.</td>
</tr>
</table></p>

<A NAME="592"><h3>Describing the field's value</h3></A>
<p>The <I>Value </I>property sets or returns the contents of the field. It is also the default property of the Field object, so you can omit it if you want to:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Fields(&quot;BirthDate&quot;) = #4/12/1955#
</pre>
</td></tr></table></p>

<p>The <I>ActualSize</I> property is a read-only property that returns the number of bytes taken by the current value in the field. Don't confuse this property with the <I>DefinedSize </I>property, which returns the declared maximum length of the field. This property is especially useful with BLOB and CLOB fields. If the provider can't determine the size of the field, it returns that value -1. (The Visual Basic documentation states that in this case this property returns the constant adUnknown; however, this constant doesn't appear in the ADODB type library.)</p>

<p>The <I>OriginalValue</I> property returns the value that was in the field before any changes were made. If you're in immediate update mode, this is the value that the <I>CancelUpdate </I>method uses to restore the field's contents; if you're in batch update mode, this is the value that was valid after the last <I>UpdateBatch </I>method and is also the value that the <I>CancelBatch </I>method uses to restore the field's contents.</p>

<p>The <I>UnderlyingValue </I>property is the value that is currently stored in the database. This value might be different from the <I>OriginalValue </I>property if another user has updated the field since you last read it. A <I>Resync </I>method would assign this value to the <I>Value </I>property. You typically use this property together with the <I>OriginalValue </I>property to resolve conflicts arising from batch updates.</p>

<p>You can assign the <I>DataFormat </I>property a StdDataFormat object so that you can control how values coming from the data source are formatted in the field. For more information on this property, see the section, &quot;<a href="#346">The <I>DataFormat</I> Property</a>&quot; in Chapter 8.</p>

<A NAME="593"><h2>Methods</h2></A>
<p>The Field object supports only two methods, both of which are used only with large binary fields such as BLOB or CLOB fields. (These are the fields whose <I>Attributes </I>property has the adFldLong<I> </I>bit set.) Because these fields can be several kilobytes&#8212;or even hundreds of kilobytes&#8212;long, writing to them and reading them back in smaller chunks is often more practical.</p>

<p>The <I>AppendChunk </I>method writes a chunk of data to a Field and expects a Variant argument that contains the data to be written. Usually, you write the contents of a file in chunks of 8 KB or 16 KB, and in most cases, you want to store a large amount of data that you have in a file, such as a long document or a bitmap. Here's a reusable routine that moves the contents of a file into a field that supports the <I>AppendChunk </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub FileToBlob(fld As ADODB.Field, FileName As String, _
    Optional ChunkSize As Long = 8192)
    Dim fnum As Integer, bytesLeft As Long, bytes As Long
    Dim tmp() As Byte
    ' Raise an error if the field doesn't support GetChunk.
    If (fld.Attributes And adFldLong) = 0 Then
        Err.Raise 1001, , &quot;Field doesn't support the GetChunk method.&quot;
    End If
    ' Open the file; raise an error if the file doesn't exist.
    If Dir$(FileName) = &quot; &quot; Then Err.Raise 53, ,#&quot;File not found&quot;
    fnum = FreeFile
    Open FileName For Binary As fnum
    ' Read the file in chunks, and append data to the field.
    bytesLeft = LOF(fnum)
    Do While bytesLeft
        bytes = bytesLeft
        If bytes &gt; ChunkSize Then bytes = ChunkSize
        ReDim tmp(1 To bytes) As Byte
        Get #1, , tmp
        fld.AppendChunk tmp
        bytesLeft = bytesLeft - bytes
    Loop
    Close #fnum
End Sub
</pre>
</td></tr></table></p>

<p>The first time you call this method for a given field, it overwrites the current contents of the field; each subsequent call to this method simply appends data to the current value of the field. If you read or write another field in the record and then go back and restart appending data with the <I>AppendChunk </I>method, ADO assumes that you're appending a brand new value and overwrites the field's contents. ADO also overwrites the contents of the field when you start to work with another field in a Recordset clone, but not when you work with a field in another Recordset that isn't a clone of the current one.</p>

<p>You can use the <I>GetChunk </I>method to read back the data stored in a Field that contains a long binary value. This method takes one argument: the number of bytes that must be read from the Field object. The problem with this method is that if you read too many bytes, ADO will pad the returned string with spaces. Such spaces are usually something you don't want to retrieve, especially when you're working with images or other binary data. For this reason, you should test the <I>ActualSize </I>property to ensure that you don't read more bytes than necessary. I've prepared a reusable routine that does this testing for you automatically:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub BlobToFile(fld As ADODB.Field, FileName As String, _
    Optional ChunkSize As Long = 8192)
    Dim fnum As Integer, bytesLeft As Long, bytes As Long
    Dim tmp() As Byte
    ' Raise an error if the field doesn't support GetChunk.
    If (fld.Attributes And adFldLong) = 0 Then
        Err.Raise 1001, , &quot;Field doesn't support the GetChunk method.&quot;
    End If
' Delete the file if it exists already, and then open a new one for writing.
    If Dir$(FileName) &lt;&gt; &quot;&quot; Then Kill FileName
    fnum = FreeFile
    Open FileName For Binary As fnum
    ' Read the field's contents, and write the data to the file 
    ' chunk by chunk.
    bytesLeft = fld.ActualSize
    Do While bytesLeft
        bytes = bytesLeft
        If bytes &gt; ChunkSize Then bytes = ChunkSize
        tmp = fld.GetChunk(bytes)
        Put #fnum, , tmp
        bytesLeft = bytesLeft - bytes
    Loop
    Close #fnum
End Sub
</pre>
</td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The <I>FileToBlob</I> and <I>BlobtoFile</I> routines are included in the library of functions in the companion CD, as are most of the other routines int hsi chapter and <a href="#A90">Chapter 14</a>.
</blockquote></div></p>

<p>Multiple <I>GetChunks </I>methods continue to retrieve data starting from where the previous <I>GetChunk </I>method left off. But if you read or write the value of another field in the same Recordset (or in a clone of the Recordset), the next time you execute a <I>GetChunk</I> method on the original field ADO will restart from the beginning of the field. Also, remember that BLOB fields should be the last fields in SELECT queries against SQL Server data sources.</p>

<A NAME="594"><h2>The Fields Collection</h2></A>
<p>You can use the Fields collection in two distinct ways. The simplest and most intuitive way is by iterating on its items to retrieve information about the fields of a Recordset&#8212;for example, when you want to create a list of field names and values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Error trapping accounts for values, such as BLOB fields, that
' can't be converted to strings.
On Error Resume Next      
For i = 0 To rs.Fields.Count - 1
    lstFields.AddItem rs.Fields(i).Name &amp; &quot; = &quot; &amp; rs.Fields(i).Value
Next
</pre>
</td></tr></table></p>

<p>The Fields collection also supports the <I>Append </I>method, which creates a new Field object and appends it to the collection. This method is useful when you want to manufacture a Recordset object in memory without necessarily connecting it to a data source (not immediately at least). You can use this method only with client-side Recordsets (<I>CursorLocation </I>= adUseClient) and only if the Recordset is closed and isn't currently associated with a Connection (<I>ActiveConnection </I>= Nothing). The <I>Append </I>method has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Append(Name, Type, [DefinedSize], [Attrib]) As Field
</pre>
</td></tr></table></p>

<p>The arguments define the properties of the Field object being created. The following reusable routine creates a new stand-alone Recordset that has the same field structure of another Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function CopyFields(rs As ADODB.Recordset) As ADODB.Recordset
    Dim newRS As New ADODB.Recordset, fld As ADODB.Field
    For Each fld In rs.Fields
        newRS.Fields.Append fld.Name, fld.Type, fld.DefinedSize, _
            fld.Attributes
    Next
    Set CopyFields = newRS
End Function
</pre>
</td></tr></table></p>

<p>Here's another routine that creates a new stand-alone record that not only duplicates the field structure of an existing Recordset but also duplicates all the records that it contains (but without being a clone Recordset):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function CopyRecordset(rs As ADODB.Recordset) As ADODB.Recordset
    Dim newRS As New ADODB.Recordset, fld As ADODB.Field
    Set newRS = CopyFields(rs)
    newRS.Open     ' You must open the Recordset before adding new records.
    rs.MoveFirst
    Do Until rs.EOF
        newRS.AddNew                        ' Add a new record.
        For Each fld In rs.Fields           ' Copy all fields' values.
            newRS(fld.Name) = fld.Value     ' Assumes no BLOB fields
        Next
        rs.MoveNext
    Loop 
    Set CopyRecordset = newRS
End Function
</pre>
</td></tr></table></p>

<p>The Fields collection also supports the <I>Delete </I>method, which removes a field in a stand-alone record before opening it, and the <I>Refresh </I>method.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Alas, it seems that you can't create hierarchical stand-alone Recordsets. In fact, if you try to create a Field whose <I>Type</I> property is adChapter, an error arises.
</blockquote></div></p>


<a name="A86"></a><h3>7.1.4 The Command Object</h3>

<A HREF="#A85">[Previous]</A> <A HREF="#A87">[Next]</A><P>

<A NAME="595"><h1>The Command Object</h1></A>
<p>The ADO Command object defines a command or a query that you can execute on a data source. Command objects are useful when you plan to execute the same command or query several times (on the same or on a different data source) and when you want to run stored procedures or parameterized queries. Recall from earlier in this chapter that you can execute SQL queries and commands using the <I>Execute </I>method of a Connection object or the <I>Open </I>method of a Recordset object. In a real application, you're more likely to use Command objects for these tasks. When you're working with SQL Server, for example, Command objects automatically reuse the temporary stored procedure that SQL Server creates the first time you execute it, and you can pass different arguments each time you execute the query.</p>

<p>You can create stand-alone Command objects that aren't associated with a Connection object, and you can then establish the connection by assigning a valid connection object to the <I>ActiveConnection </I>property. By doing so, you can reuse the same command on multiple connections.</p>

<A NAME="596"><h2>Properties</h2></A>
<p>The Command object supports nine properties, but only two of them are really necessary for carrying out a query or a command.</p>

<A NAME="597"><h3>Setting the query</h3></A>
<p>The most important property of the Command object is <I>CommandText</I>, which sets or returns the SQL command or query, the name of a table, or the name of a stored procedure. If you use an SQL query, it should be in the dialect of the database engine you're connecting to. Depending on the string that you assign to this property and on the particular provider you're using, ADO might change the contents of this property. For this reason, after assigning a value to <I>CommandText</I>, you might be wise to read it back to check the actual value that will be used for the query. Here's an example of how you use this property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cmd As New ADODB.Command
cmd.CommandText = &quot;SELECT * FROM Employees WHERE BirthDate &gt; #1/1/1960&quot;
</pre>
</td></tr>
</table></p>

<p>If you're going to repeat the query or the command with different arguments, it's convenient to prepare a parameterized Command object, which you do by inserting ? (question mark) symbols in the <I>CommandText </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cmd As New ADODB.Command
cmd.CommandText = &quot;SELECT * FROM Employees WHERE BirthDate &gt; ? &quot; _
    &amp; &quot;AND HireDate &gt; ?&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>CommandText </I>property tells the Command object what to do, and the <I>ActiveConnection</I> property specifies on which data source the command should be carried out. This property can be assigned a connection string (that follows the syntax of the <I>ConnectionString </I>of the Connection object) or a Connection object that already points to a data source. When you set this property to Nothing, you disconnect the Command object and release all the resources allocated on the server. If you attempt to run the <I>Execute </I>method before assigning a connection string or a Connection object to this property, a run-time error occurs. An error also occurs if you assign a closed Connection object to this property. Some providers require you to set this property to Nothing before switching to another connection.</p>

<p>You can share the connection among multiple ADO Command objects only if you assign the same Connection object to their <I>ActiveConnection </I>properties. Simply assigning the same connection string creates distinct connections. Here's an 
example that leverages this capability:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
' Create the first Command object.
Dim cmd As New ADODB.Command, rs As New ADODB.Recordset
cmd.ActiveConnection = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source= &quot; &amp; DBPATH
cmd.CommandText = &quot;SELECT FirstName, LastName FROM Employees&quot;
Set rs = cmd.Execute()
' Create a second Command object on the same database connection.
Dim cmd2 As New ADODB.Command, rs2 As New ADODB.Recordset
Set cmd2.ActiveConnection = cmd.ActiveConnection
cmd2.CommandText = &quot;SELECT * FROM Customers&quot;
Set rs2 = cmd2.Execute()
</pre>
</td></tr>
</table></p>

<p>Setting the <I>ActiveConnection </I>property to Nothing can affect the Parameters collection. More precisely, if the provider has populated the Parameters collection automatically, the collection will be cleared when the <I>ActiveConnection </I>is set to Nothing. If the Parameters collection has been manually populated through code, setting the <I>ActiveConnection </I>to Nothing doesn't affect it.</p>

<A NAME="598"><h3>Optimizing the execution</h3></A>
<p>The <I>CommandType </I>property lets you optimize execution speed by indicating what the <I>CommandText </I>string contains. It can be one of the following enumerated constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adCmdText</td>
<td valign="top">The text of an SQL query.</td>
</tr>
<tr>
<td valign="top">2-adCmdTable</td>
<td valign="top">A database table.</td>
</tr>
<tr>
<td valign="top">4-adCmdStoredProc</td>
<td valign="top">A stored procedure.</td>
</tr>
<tr>
<td valign="top">8-adCmdUnknown</td>
<td valign="top">The provider will determine the correct type (the default).</td>
</tr>
<tr>
<td valign="top">512-adCmdTableDirect</td>
<td valign="top">A database table opened directly.</td>
</tr>
</table></p>

<p>If you don't specify a value for this property, or if you use adCmdUnknown, you force ADO to figure out by itself what the <I>CommandText </I>string is, an operation that usually adds considerable overhead. The adCmdStoredProc option can also improve performance because it prevents ADO from creating a temporary stored procedure before executing the query. If the value you assign to the <I>CommandType </I>property doesn't match the type of the <I>CommandText </I>string, a run-time error occurs.</p>

<p>The <I>Prepared </I>property lets you leverage the real power of the Command object. When this property is True, the provider creates a compiled (prepared) version of the query passed in the <I>CommandText </I>property and then uses it to run the query each time this command is reexecuted. Creating a compiled procedure takes some time, so you should set this property to True only if you plan to execute the query two or more times. If the data source doesn't support prepared statements, what happens depends on the provider: It can raise an error, or it can just ignore the assignment.</p>

<p>The <I>CommandTimeout </I>property sets or returns the number of seconds ADO will wait when a command executes before raising an error. The default value is 30 seconds. If you set this property to 0, ADO will wait forever. This value isn't inherited from the <I>CommandTimeout</I> property of the Connection object to which the Command object is connected. In addition, not all providers support this property.</p>

<p><I>State </I>is a read-only property that can be queried to understand what the Command is currently doing. It can return the value 0-adStateClosed (the Command object is inactive) or 4-adStateExecuting (the Command object is executing a command).</p>

<A NAME="599"><h2>Methods</h2></A>
<p>The most important method of the Command object is the <I>Execute</I> method, which runs the query or the command stored in the <I>CommandText </I>property. This method is similar to the Connection object's <I>Execute</I> method, but the syntax is slightly different because the text of the query can't be passed as an argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Execute([RecordsAffected], [Parameters], [Options]) As Recordset
</pre>
</td></tr></table></p>

<p>If the <I>CommandText </I>property contains a row-returning query, the <I>Execute</I> method returns an open Recordset (which doesn't necessarily contain any row, however). Conversely, if the <I>CommandText </I>property specifies an action query, this method returns a closed Recordset. In the latter case, you can effectively use <I>Execute </I>as a procedure instead of as a function and ignore its return value.</p>

<p>If you pass a Long variable as the <I>RecordsAffected </I>argument, the <I>Execute </I>method returns in the variable the number of records that were affected by the action query command. This argument is optional, so you aren't obliged to pass anything, and it doesn't return any meaningful value with row-returning queries. If you're running a parameterized command or query, <I>Parameters </I>is a Variant that contains the value of a parameter or an array of all the expected parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
Dim cmd As New ADODB.Command, rs As New ADODB.Recordset
cmd.ActiveConnection = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source= &quot; &amp; DBPATH
cmd.CommandText = &quot;SELECT * FROM Employees WHERE BirthDate &gt; ? &quot; _
    &amp; &quot;AND HireDate &gt; ?&quot;
cmd.CommandType = adCmdText
' You can pass multiple parameters without using a temporary array.
Set rs = cmd.Execute(, Array(#1/1/1960#, #1/1/1994#))
</pre>
</td></tr>
</table></p>

<p>The parameters you pass in this way are valid only for the current execution of the command, and they don't affect the Parameters collection. If you omit one or more arguments in the <I>Execute </I>method, ADO uses the corresponding values in the Parameters collection. Here's an example that passes only the second argument and implicitly uses the first item in the Parameters collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set rs = cmd.Execute(, Array(, #1/1/1994#))
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Although you can pass any number of parameters using this method, you can't retrieve output parameters in this way. If you want to execute a stored procedure with output parameters, you can retrieve their values only by using the Parameters collection.
</blockquote></div></p>

<p>The <I>Option </I>argument can contain the same value that you assign to the <I>CommandType </I>property plus one or more of the following constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">16-adAsyncExecute</td>
<td valign="top">Runs the command asynchronously in a separate thread</td>
</tr>
<tr>
<td valign="top">32-adAsyncFetch</td>
<td valign="top">Fetches the results asynchronously for Recordsets based on client-side cursors</td>
</tr>
<tr>
<td valign="top">64-adAsyncFetchNonBlocking</td>
<td valign="top">Similar to adAsyncFetch, but the calling program is never blocked</td>
</tr>
<tr>
<td valign="top">128-adExecuteNoRecords</td>
<td valign="top">Specifies that a command of type adCmdText or adCmdStoredProc is an action query and doesn't return a Recordset</td>
</tr>
</table></p>

<p>There are subtle differences among the adAsyncExecute<I>, </I>adAsyncFetch, and adAsyncFetchNonBlocking options. All of them execute the command asynchronously and set AffectedRecords to -1 because when the method returns, the command hasn't completed yet and ADO doesn't know how many records will be affected. If you specify adAsyncExecute, the command is executed asynchronously, and when the provider completes it, ADO fires an <I>ExecutionComplete </I>event in your program. If you specify adAsyncFetch on a Recordset based on a client-side cursor, when the execution of the command completes, ADO starts fetching the result rows asynchronously: When the code asks for a row that hasn't been retrieved yet, the application is blocked until the data is available (and when this occurs, a <I>FetchComplete </I>event fires). The adAsyncFetchNonBlocking option is similar to adAsyncFetch but with an important difference: When the code asks for a row that hasn't been retrieved yet, the application isn't blocked and the Recordset's <I>EOF </I>property is set to True. The code can therefore try again later or wait for the <I>FetchComplete </I>event to determine when data is finally available.</p>

<p>You can cancel the execution of an asynchronous operation by using the Command object's <I>Cancel </I>method. This method raises an error if no asynchronous option was specified for the most recent <I>Execute </I>method.</p>

<p>The third method the Command object supports is <I>CreateParameter</I>. With this method, you can create the Parameters collection entirely in code, without a round-trip to the server. The syntax of this method is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>CreateParameter([Name], [Type], [Direction], [Size], [Value]) As Parameter
</pre>
</td></tr>
</table></p>

<p>Each argument you pass to this method is assigned to a property of the Parameter object being created. We'll go over these properties in more detail in the next section.</p>


<a name="A87"></a><h3>7.1.5 The Parameter Object</h3>

<A HREF="#A86">[Previous]</A> <A HREF="#A88">[Next]</A><P>

<A NAME="600"><h1>The Parameter Object</h1></A>
<p>A Parameter object represents a parameter in the parameterized command or stored procedure on which a Command object is based. In theory, a provider might not support parameterized commands, but in practice, all major providers do. Parameter objects can represent input values for a command or a query or output values or return values from a stored procedure. All the Parameter objects related to a Command object are contained in the Command's Parameters collection.</p>

<p>ADO is really smart at dealing with the Parameters collection. It automatically builds the collection when you reference the <I>Parameters </I>property of a Command object. But ADO also gives you the capability to create the collection yourself through code, which is something that isn't possible in DAO or RDO. Usually you can get better performance if you create the Parameters collection yourself because you save ADO a round-trip to the server just to determine the names and the types of all the parameters. On the other hand, if you want ADO to retrieve all the parameters' names and attributes, you only have to perform the <I>Refresh </I>method of the Parameters collection of a Command object, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cmd.Parameters.Refresh
</pre>
</td></tr>
</table></p>

<p>Calling the <I>Refresh </I>method is optional, however, because if you access the Parameters collection without having created its elements yourself, ADO will refresh the collection automatically.</p>

<A NAME="601"><h2>Properties</h2></A>
<p>The Parameter object exposes nine properties. Most of them are similar to properties with the same names as those exposed by the Field object. Because of the similarities, I won't describe these properties in depth here. For example, each Parameter object has a <I>Name</I>, <I>Type</I>, <I>Precision</I>, and <I>NumericScale</I> property, exactly as Field objects have. Table 13-5 lists all the possible values for the <I>Type </I>property. (Notice that Parameter objects support a few types that Field objects don't support.)</p>

<p>The Parameter object also supports the <I>Value </I>property. This property is also the default for this object, so you can omit it if you want to:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cmd.Parameters(&quot;StartHireDate&quot;) = #1/1/1994#
</pre>
</td></tr>
</table></p>

<p>The <I>Direction </I>property specifies whether the Parameter object represents an input parameter, an output parameter, or the return value from a stored procedure. It can be one of the following enumerated constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adParamUnknown</td>
<td valign="top">Unknown direction</td>
</tr>
<tr>
<td valign="top">1-adParamInput</td>
<td valign="top">An input parameter (the default)</td>
</tr>
<tr>
<td valign="top">2-adParamOutput</td>
<td valign="top">An output parameter</td>
</tr>
<tr>
<td valign="top">3-adParamInputOutput</td>
<td valign="top">An input/output parameter</td>
</tr>
<tr>
<td valign="top">4-adParamReturnValue</td>
<td valign="top">A return value from a stored procedure</td>
</tr>
</table></p>

<p>This property is read/write, which is useful when you're working with a provider that can't determine the direction of the parameters in a stored procedure.</p>

<p>The <I>Attributes </I>property specifies a few characteristics of the Parameter object. This is a bit-field value that can be the sum of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">16-adParamSigned</td>
<td valign="top">The parameter accepts signed values.</td>
</tr>
<tr>
<td valign="top">64-adParamNullable</td>
<td valign="top">The parameter accepts Null values.</td>
</tr>
<tr>
<td valign="top">128-adParamLong</td>
<td valign="top">The parameter accepts long binary data.</td>
</tr>
</table></p>

<p>The <I>Size </I>property sets and returns the maximum size of the value of a Parameter object. If you're creating a Parameter object of a variable-length data type (for example, a string type), you must set this property before appending the parameter to the Parameters collection; if you don't, an error occurs. If you've already appended the Parameter object to the Parameters collection and you later change its type to a variable-length data type, you must set the <I>Size </I>property before invoking the <I>Execute </I>method.</p>

<p>The <I>Size</I> property is also useful if you let the provider automatically populate the Parameters collection. When the collection includes one or more variable-length items, ADO can allocate memory for those parameters based on their maximum potential dimension, which might cause an error later. You can prevent such errors by explicitly setting the <I>Size </I>property to the correct value before executing the command.</p>

<A NAME="602"><h2>Methods</h2></A>
<p>The only method the Parameter object supports is <I>AppendChunk</I>. This method works exactly as it does in the Field object, so I won't repeat its description here. You can test the adParamLong bit of the Parameter object's <I>Attributes </I>property to test whether the parameter supports this method.</p>

<A NAME="603"><h2>The Parameters Collection</h2></A>
<p>Each Command object exposes a <I>Parameters </I>property that returns a reference to a Parameters collection. As I mentioned earlier in the chapter, you can let ADO automatically populate this collection or you can save ADO some work by creating Parameter objects and adding them manually to the collection. You add objects manually with the <I>CreateParameter </I>method of the Command object in conjunction with the <I>Append </I>method of the Parameters collection, as this code demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
Dim cmd As New ADODB.Command, rs As New ADODB.Recordset
cmd.CommandText = &quot;Select * From Employees Where BirthDate &gt; ? &quot; _
    &amp; &quot;AND HireDate &gt; ?&quot;
cmd.ActiveConnection = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source= &quot; &amp; DBPATH
' You can use a temporary Parameter variable.
Dim param As ADODB.Parameter
Set param = cmd.CreateParameter(&quot;BirthDate&quot;, adDate, , , #1/1/1960#)
cmd.Parameters.Append param
' Or you can do everything in one operation. 
cmd.Parameters.Append cmd.CreateParameter(&quot;HireDate&quot;, adDate, , , _
    #1/1/1993#)
Set rs = cmd.Execute(, , adCmdText)
</pre>
</td></tr>
</table></p>

<p>Parameterized queries and commands are especially useful when you're going to perform the operation more than once. In all subsequent operations, you need to modify only the values of the parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can reference a parameter by its index in the collection.
cmd.Parameters(0) = #1/1/1920#
' But you deliver more readable code if you reference it by its name.
cmd.Parameters(&quot;HireDate&quot;) = #1/1/1920#
Set rs = cmd.Execute()
</pre>
</td></tr>
</table></p>

<p>You can use the <I>Delete </I>method of the Parameters collection to remove items from it, and you can use its <I>Count </I>property to determine how many elements it contains. When the Command object refers to a stored procedure that has a return value, <I>Parameters(0) </I>always refers to the return value.</p>


<a name="A88"></a><h3>7.1.6 The Property Object</h3>

<A HREF="#A87">[Previous]</A> <A HREF="#A89">[Next]</A><P>

<A NAME="604"><h1>The Property Object</h1></A>
<p>The Connection, Recordset, Command, and Field objects expose Properties collections, which contain all the dynamic properties that the ADO provider has added to the built-in properties that are referenced using the standard dot syntax. You can't add dynamic properties yourself; thus, the Properties collection exposes only the <I>Count </I>and <I>Item </I>properties and the <I>Refresh </I>method.</p>

<p>Dynamic properties are important in advanced ADO programming because they often provide supplemental information about an ADO object. Sometimes you can even modify the behavior of a provider by assigning different values to such dynamic properties. Each provider can expose a different set of dynamic properties, even though the OLE DB specifications list a few properties that should have the same meaning across different providers. Here's a routine that fills a ListBox control with the values of all the dynamic properties associated with the object passed as an argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ListCustomProperties(obj As Object, lst As ListBox)
    Dim i As Integer, tmp As String
    On Error Resume Next
    lst.Clear
    For i = 0 To obj.Properties.Count - 1
        lst.AddItem obj.Properties(i).Name &amp; &quot; = &quot; &amp; obj.Properties(i)
    Next
End Sub
</pre>
</td></tr></table></p>

<p>The Properties collection contains one or more Property objects, which expose four properties: <I>Name</I>, <I>Value</I>, <I>Type</I>, and <I>Attributes</I>. The <I>Type </I>property can be an enumerated value chosen from those listed in Table 13-5. The <I>Attributes </I>property is a bit-field value given by the sum of one or more of the following constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">1-adPropRequired</td>
<td valign="top">The user must specify a value for this property before the data source is initialized.</td>
</tr>
<tr>
<td valign="top">2-adPropOptional</td>
<td valign="top">The user doesn't need to specify a value for this property before the data source is initialized.</td>
</tr>
<tr>
<td valign="top">512-adPropRead</td>
<td valign="top">The user can read the property.</td>
</tr>
<tr>
<td valign="top">1024-adPropWrite</td>
<td valign="top">The user can assign a value to the property.</td>
</tr>
</table></p>

<p>If the <I>Attributes</I> property returns the value 0-adPropNotSupported, it means that the provider doesn't support this property.</p>


<a name="A89"></a><h3>7.1.7 ADO 2.1 DDL and Security Extensions</h3>

<A HREF="#A88">[Previous]</A> <A HREF="#A90">[Next]</A><P>

<A NAME="605"><h1>ADO 2.1 DDL and Security Extensions</h1></A>
<p>The beauty of ADO is that it is an extensible architecture. It's not the monolithic (and overly complex) object model that DAO is. Microsoft can easily add new features to ADO without breaking existing applications and without forcing developers to learn a new object model at each new release. In fact, although ADO 2.1 contains several improvements to the ADO 2.0 model, all the new features are provided in the form of distinct object trees that are linked dynamically&#8212;that is, at run time&#8212;to the object in the standard ADO hierarchy.</p>

<p>In the remainder of this chapter, I'll illustrate the objects in the Microsoft Extension 2.1 for DDL and Security (ADOX) library, which extends the standard ADODB library with data definition language capabilities, giving you, for example, the ability to enumerate the tables, views, and stored procedures in a database as well as the ability to create new ones. This library also contains security objects that permit you to determine and modify the permissions granted to an individual or to groups of users. ADO 2.1 contains other extensions, such as the ADOMD library for online analytical processing (OLAP) operations and the support for Microsoft Jet replications, but I won't cover those topics in this book.</p>

<p>Figure 13-5 depicts the ADOX hierarchy. This object tree includes more items than ADODB, but the relationships among the nodes are still fairly intuitive. Whereas the standard ADO library deals mostly with the data in databases, the ADOX library is interested only in the structure of the tables, the views, and the procedures stored in the database as well as in the users and the groups of users that can access these items. Working with the ADOX library is simple because you don't have to account for recordsets, cursors, timeout errors, locks, transactions, and all the usual issues you have to resolve when writing a standard database application based on ADO. All the objects in the hierarchy also support the Properties collection, which includes all the dynamic properties.</p>

<p>
<A HREF="javascript:fullSize('F13ph05x.htm')"> <img src="F13ph05.JPG" width=404 height=480 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-5.</B> <i>The ADOX object model. The Catalog object can be linked to an existing ADODB.Connection object through the Catalog's </i>ActiveConnection<i> property.</i><!--/caption-->
</p> 

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Not all providers support all the DDL capabilities mentioned in this section. For example, a provider might support the enumeration of database objects but not the creation of new ones. For this reason, it is essential for you to make sure that all the code that accesses these objects is protected against unanticipated errors.
</blockquote></div></p>

<A NAME="606"><h2>The Catalog Object</h2></A>
<p>The Catalog object is the entry point of the ADOX hierarchy. It represents the database and includes all the tables, stored procedures, views, users, and groups of users. The Catalog object allows you to perform two distinct operations: enumerate the objects in an existing database or create a new database from scratch.</p>

<p>When you just want to explore an existing database, you have to create a stand-alone ADODB.Connection object, open it, and then assign it to the <I>ActiveConnection </I>property of the Catalog object. By doing so, you link the ADODB and the ADOX hierarchies together:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;
Dim cn As New ADODB.Connection, cat As New ADOX.Catalog
' Open the connection.
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;Data Source=&quot; &amp; DBPATH 
' Link the catalog to the connection.
Set cat.ActiveConnection = cn
</pre>
</td></tr></table></p>

<p>After you've linked the Catalog object to an open Connection object, you can enumerate the objects in the database by using the Tables, Procedures, Views, Groups, and Users collections:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Fill a list box with the names of the stored procedures in the database.
Dim proc As ADOX.Procedure
For Each proc In cat.Procedures
    List1.AddItem proc.Name
Next
</pre>
</td></tr></table></p>

<p>On the companion CD, you'll find a complete project that lists all the objects in a Catalog and the values of all their properties, as shown in Figure 13-6.</p>

<p>The Catalog object exposes two methods, <I>GetObjectOwner </I>and <I>SetObjectOwner</I>, which let you read and modify the owner of a database object, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next      ' Not all providers support this capability.
owner = cat.GetObjectOwner(&quot;Authors&quot;, adPermObjTable)
</pre>
</td></tr></table></p>

<p>When you create a new (empty) database, you don't need a stand-alone Connection object. Instead, you can carry out the task by using the Catalog object's <I>Create </I>method. This method takes as its only argument the connection string that defines both the provider and the database name:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The next line fails if the database already exists.
cat.Create &quot;Provider=Microsoft.Jet.OLEDB.4.0;User ID=Admin;&quot; _
    &amp; &quot;Data Source=C:\Microsoft Visual Studio\Vb98\BiblioCopy.mdb&quot;
</pre>
</td></tr></table></p>

<p>The <I>Create </I>method isn't supported by the OLE DB providers for SQL Server, Oracle, and ODBC drivers.</p>

<p>Regardless of whether you've created a new database or opened an existing one, you can add or remove objects using the Catalogs collections. For example, here's the code that creates a new table with two fields and adds it to the database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tbl As New ADOX.Table
tbl.Name = &quot;Customers&quot;                     ' Create a table.
tbl.Columns.Append &quot;CustID&quot;, adInteger     ' Add two fields.
tbl.Columns.Append &quot;Name&quot;, adWVarChar, 50
cat.Tables.Append tbl                      ' Append the table to
                                           ' the collection.
</pre>
</td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F13ph06x.htm')"> <img src="F13ph06.JPG" width=404 height=328 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-6.</B> <i>This ADOX application shows all the objects in a Catalog and the relationships among them.</i><!--/caption-->
</p>

<A NAME="607"><h2>The Table Object</h2></A>
<p>The Table object is the most complex object in the ADOX hierarchy. It exposes four simple properties&#8212;<I>Name</I>, <I>Type</I>, <I>DateCreated</I>, and <I>DateModified</I>&#8212;and the Columns, Indexes, Keys, and Properties collections. These names are fairly self-explanatory, so I won't describe them in depth. The Table object doesn't expose any methods.</p>

<p>All the tables in the database are contained in the Tables collection. This collection exposes the usual <I>Item </I>and <I>Count </I>properties and the <I>Append</I>, <I>Delete</I>, and <I>Refresh </I>methods. For example, you can enumerate all the tables in the database and all the columns in each table by using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tbl As ADOX.Table, col As ADOX.Column
For Each tbl in cat.Tables
    Print &quot;TABLE &quot; &amp; tbl.Name
    Print &quot;Created on &quot; &amp; tbl.DateCreated
    Print &quot;Modified on &quot; &amp; tbl.DateModified
    Print &quot;Field List ------&quot;
    For Each col In tbl.Columns
        Print &quot;   &quot; &amp; col.Name
    Next
Next
</pre>
</td></tr></table></p>

<p>You can't append or delete tables using the OLE DB providers for Oracle and ODBC drivers.</p>

<A NAME="608"><h2>The Column Object</h2></A>
<p>The Column object and the corresponding Columns collection appear in several places in the ADOX hierarchy, namely, as a dependent object of the Table, Index, and Key objects. The Column object exposes several properties, even though not all of them make sense in all cases. When the Column object is a dependent of a Table object, you can read the <I>Name</I>, <I>Type</I>, <I>DefinedSize</I>, <I>NumericScale</I>, and <I>Precision </I>properties, which have the same meaning as the properties with the same names exposed by the ADODB.Field object. The Column object also supports the <I>Attributes </I>bit-field property, which can be 1-adColFixed or 2-adColNullable.</p>

<p>If the Column object is a dependent of a Key object, you can also set or retrieve the <I>RelatedColumn</I> property, which specifies the name of the related field in the related table. If the Column object is a dependent of an Index object, you can set the <I>SortOrder</I> property with the values 1-adSortAscending or 2-adSortDescending.</p>

<p>You can add a Column object to a table, an index, or a key by using the <I>Append </I>method of the respective Columns<I> </I>collections. This method takes as arguments the name of the column, its type, and (optionally) the value of the <I>DefinedSize </I>property of the Column object to be created:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add two fields to the Customers table.
Dim tbl As ADOX.Table
Set tbl = cat.Tables(&quot;Customers&quot;)
tbl.Columns.Append &quot;CustID&quot;, adInteger
tbl.Columns.Append &quot;Name&quot;, adVarChar, 255
</pre>
</td></tr></table></p>

<A NAME="609"><h2>The Index Object</h2></A>
<p>You can enumerate the indexes of a table through its Indexes collection. The Index object exposes a few properties whose names are self-explanatory: <I>Name</I>, <I>Clustered </I>(True if the index is clustered), <I>Unique </I>(True if the index is unique), and <I>PrimaryKey </I>(True if the index is the primary key for the table). The only property that requires a more detailed description is <I>IndexNulls</I>, which specifies whether records with Null values appear in the index. This property can take one of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adIndexNullsAllow</td>
<td valign="top">Null values are accepted.</td>
</tr>
<tr>
<td valign="top">1-adIndexNullsDisallow</td>
<td valign="top">The index raises an error if a key column has a Null value.</td>
</tr>
<tr>
<td valign="top">2-adIndexNullsIgnore</td>
<td valign="top">Columns with Null values are ignored and are not added to the index.</td>
</tr>
<tr>
<td valign="top">4-adIndexNullsIgnoreAny</td>
<td valign="top">In a multicolumn index, records are not indexed if any of the index columns has a Null value.</td>
</tr>
</table></p>

<p>To add an index to a table, you create a stand-alone Index object, set its properties as required, add one or more items to its Columns collection, and finally add the Index to the Indexes collection of a Table object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tbl As ADOX.Table, ndx As New ADOX.Index
' Create a new index.
ndx.Name = &quot;YearBorn_Author&quot;
ndx.Unique = True
' Append two columns to it.
ndx.Columns.Append &quot;Year Born&quot;
ndx.Columns(&quot;Year Born&quot;).SortOrder = adSortDescending
ndx.Columns.Append &quot;Author&quot;
' Add the index to the Authors table.
Set tbl = cat.Tables(&quot;Authors&quot;)
tbl.Indexes.Append ndx
</pre>
</td></tr></table></p>

<p>You can modify all the properties of an Index object only before the Index is appended to the Indexes collection of a Table object. When you add a field to the Columns collection of an Index object, an error occurs if the column doesn't already exist in the Table object or if the Table object hasn't already been added to the Tables collections of the Catalog object.</p>

<A NAME="610"><h2>The Key Object</h2></A>
<p>The Key object represents a key column in a table. You can enumerate the Keys collection of a Table object to determine its key columns, or you can use the collection's <I>Append </I>method to add new keys. When a key hasn't yet been appended to the collection, you can set its <I>Name </I>and <I>Type </I>properties. The <I>Type </I>property defines the type of the key and can be one of the following values: 1-adKeyPrimary (the primary key), 2-adKeyForeign (a foreign key), or 3-adKeyUnique (a unique key).</p>

<p>If the key is a foreign key, three other properties come into play. The <I>RelatedTable </I>property contains the name of the related table, and the <I>UpdateRule </I>and <I>DeleteRule </I>properties determine what happens to the foreign key if the record in the related table is updated or deleted, respectively. The <I>UpdateRule </I>and <I>DeleteRule </I>properties can contain one of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adRINone</td>
<td valign="top">No action is taken.</td>
</tr>
<tr>
<td valign="top">1-adRICascade</td>
<td valign="top">Changes are cascaded.</td>
</tr>
<tr>
<td valign="top">2-adRISetNull</td>
<td valign="top">The key is assigned a Null value.</td>
</tr>
<tr>
<td valign="top">3-adRISetDefault</td>
<td valign="top">The key is assigned its default value.</td>
</tr>
</table></p>     

<p>Each Key object exposes a Columns collection, which contains all the columns that make up the key. The following code shows how you can add a new key to a table:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a foreign key to the Orders table, and make the key point
' to the EmployeeID field of the Employees table.
Dim tbl As ADOX.Table, key As New ADOX.Key
Set tbl = cat.Tables(&quot;Orders&quot;)
' Create the key, and set its attributes.
key.Name = &quot;Employee&quot;
key.Type = adKeyForeign
key.RelatedTable = &quot;Employees&quot;
key.UpdateRule = adRICascade
' Add a column to the key, and set its RelatedColumn attribute.
key.Columns.Append tbl.Columns(&quot;EmployeeId&quot;)
key.Columns(&quot;EmployeeId&quot;).RelatedColumn = &quot;EmployeeId&quot;
' Append the key to the table's Keys collection.
tbl.Keys.Append key
</pre>
</td></tr></table></p>

<A NAME="611"><h2>The View and Procedure Objects</h2></A>
<p>The View object and the Procedure object are similar. They represent a view and a stored procedure in the database, respectively. They also expose the same set of four properties: <I>Name</I>, <I>DateCreated</I>, <I>DateModified</I>, and <I>Command</I>. The <I>Command </I>property provides the maximum flexibility to these objects, without making the ADOX hierarchy more complex than strictly required. In fact, the <I>Command </I>property returns a reference to an ADODB.Command object that can execute the view or the stored procedure, so you can determine the underlying SQL command as well as the name and the type of any parameters using this Command object's properties. The following code example demonstrates how you can extract this information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cmd As ADODB.Command
Set cmd = cat.Views(&quot;All Titles&quot;).Command
MsgBox cmd.CommandText
</pre>
</td></tr></table></p>

<p>You also use the auxiliary Command object when you want to create a new view or a stored procedure, as shown in the following code snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;
Dim cn As New ADODB.Connection, cmd As New ADODB.Command
' Note the version number of the Jet OLE DB Provider.
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;Data Source=&quot; &amp; DBPATH
Set cmd.ActiveConnection = cn 
cmd.CommandText = &quot;Select * From Authors Where [Year Born] = [Year]&quot;
cmd.Parameters.Append cmd.CreateParameter(&quot;Year&quot;, adInteger, adParamInput)
' Open the Catalog, and create the new procedure. 
Set cat.ActiveConnection = cn
cat.Procedures.Append &quot;AuthorsByYear&quot;, cmd
</pre>
</td></tr></table></p>

<p>Views aren't supported by the OLE DB Provider for SQL Server. The providers for ODBC and Oracle support them, but you can only enumerate them&#8212;you can't add or delete individual View objects. None of these providers can create or delete Procedure objects.</p>

<A NAME="612"><h2>The Group and User Objects</h2></A>
<p>The Catalog object exposes the Groups and Users collections, which include the groups of users and the individual users that can access some or all of the objects in the database. These two objects are tightly connected to each other in that each User object exposes a Groups collection (all the groups the user belongs to), and each Group object exposes a Users collection (all the users that belong to that group).</p>

<p>You can retrieve the permissions assigned to a User object or a Group object using their <I>GetPermissions </I>method. Because this method returns a bit-field value, you must use the AND Boolean operator to understand which operations are allowed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Displays which permissions on the Customers table
' have been granted to the users in the Guests group.
Dim grp As ADOX.Group, permissions As Long
Set grp = cat.Groups(&quot;Guests&quot;)
permissions = grp.GetPermissions(&quot;Customers&quot;, adPermObjTable)
If permissions And adRightExecute Then Print &quot;Execute&quot;
If permissions And adRightRead Then Print &quot;Read&quot;
If permissions And adRightUpdate Then Print &quot;Update&quot;
If permissions And adRightInsert Then Print &quot;Insert&quot;
If permissions And adRightDelete Then Print &quot;Delete&quot;
If permissions And adRightReference Then Print &quot;Reference&quot;
If permissions And adRightCreate Then Print &quot;Create&quot;
If permissions And adRightWriteDesign Then Print &quot;Design&quot;
If permissions And adRightWithGrant Then Print &quot;Grant Permissions&quot;
</pre>
</td></tr></table></p>

<p>The <I>SetPermission</I> method lets you set, grant, deny, or revoke permissions on a given database object to a User or a Group:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Revoke the Guests group the permission to read the Customers table.
cat.Users(&quot;Guests&quot;).SetPermissions &quot;Customers&quot;, adPermObjTable, _
    adAccessRevoke, adRightRead
' Give the Managers group full permissions on the Employees table.
cat.Users(&quot;Managers&quot;).SetPermissions &quot;Employees&quot;, adPermObjTable, _
    adAccessSet, adRightFull
</pre>
</td></tr></table></p>

<p>The Groups and the Users collections aren't supported by the OLE DB Provider for SQL Server, Oracle, and ODBC drivers.</p>

<p>In this chapter, I described all the objects in the ADO hierarchy and their many properties, methods, and events. Although I've shown you how to use ADO to carry out some complex tasks, I haven't yet illustrated in practice how you can build complete database applications that exploit ADO's most advanced features. We'll focus on how to use these objects in <a href="#A90">Chapter 14</a>.</p>

<a name="A90"></a><h2>7.2 Chapter 14 -- ADO at Work</h2>

<A HREF="#A89">[Previous]</A> <A HREF="#A91">[Next]</A><P>


<font size="+3">Chapter 14</font>

<A NAME="613"><h1>ADO at Work</h1></A>
<p>ADO is so rich, powerful, and flexible that I decided to devote two chapters to 
it. <a href="#A82">Chapter 13</a> contains an in-depth description of its objects and their properties, 
methods, and events. In this chapter, I show you how to put in practice those 
concepts and also how to work around a few ADO quirks that could make your 
programming efforts harder than strictly necessary.</p>

<p>A preliminary note: ADO is an evolving technology, and the good news is 
that Microsoft is committed to continuously improving it. It's therefore possible that 
a few problems I encountered will have been resolved by the time you read 
these pages. Moreover, ADO behavior is heavily affected by the underlying OLE DB 
provider, so many problems can depend on which database you're connecting to 
and can also disappear if you install a more recent version of the provider. When 
possible, I tried the code with several providers, but I surely couldn't test all the possible 
combinations. Take this into account when you test the code I show you in this chapter.</p>


<a name="A91"></a><h3>7.2.1 Setting Up a Connection</h3>

<A HREF="#A90">[Previous]</A> <A HREF="#A92">[Next]</A><P>

<A NAME="614"><h1>Setting Up a Connection</h1></A>

<p>The great flexibility of the ADO programming model is apparent from the very first 
action you perform in every database-oriented application. that is, setting up 
a connection to your database. In fact, while the most obvious choice is to create 
a stand-alone Connection object, it surely isn't the only available one. For example, 
you can also create a stand-alone Recordset object and assign a connection string to 
its <I>Open </I>method. Or you can create a stand-alone Command object and assign a 
connection string to its <I>ActiveConnection </I>property. You don't even need to create 
an ADO object to establish the connection, if you use the ADO Data control or 
the DataEnvironment designer.</p>

<A NAME="615"><h2>Building the Connection String</h2></A>

<p>Regardless of the object you use to connect to an ADO data source, you must 
build a connection string. This will be the string that you assign to the 
<I>ConnectionString</I> property of a Connection object or to the 
<I>ActiveConnection </I>property of a Recordset or Command object, or it will be the string that you pass to the 
<I>Execute </I>method of a Connection object or to the 
<I>Open </I>method of a Recordset object. So you need 
to understand how to correctly build this string and how to exploit all the options 
you have.</p>

<p>The connection string can contain one or more elements in the 
form <I>argument=value</I>. The list of valid arguments depends on the provider to which 
you're connecting, but two arguments are always supported: the 
<I>Provider </I>and the <I>File Name</I>. For a list of supported arguments, see Table 13-1 in <a href="#A82">Chapter 13</a>.</p>

<p>Determining which arguments are valid with which provider is the most 
difficult job in building a connection string. When I began to explore this 
unknown territory, I found that the best approach was to drop an ADO Data control on 
a form, set a connection using its property pages, and then see the final value of 
the <I>ConnectionString </I>property. I also discovered that I could modify the values in 
the All property page, and my settings were reflected in the 
<I>ConnectionString </I>property.</p>

<p>The simplest way to connect to any database is based on Microsoft Data 
Link files (I explained how to create these files in &quot;<a href="#342">The Binding Mechanism</a>&quot; section 
in <a href="#A46">Chapter 8</a>). The UDL file contains all the information needed by ADO to connect 
to the database, including the name of the provider, and you only need to use the 
<I>File Name </I>argument. In fact, if you use both the 
<I>Provider </I>and <I>File Name </I>arguments, 
you get an error. The following example assumes that you have prepared a UDL file 
that points to the Biblio.mdb database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cn As New ADODB.Connection
cn.Open "File Name=C:\Program Files\Common Files\System\ole db" _
    &amp; "\Data Links\Biblio.udl"
</pre>
</td></tr>
</table></p>


<p>You can also use the <I>File Name </I>argument to point to a file-based DSN, in 
which case you're implicitly using the default MSDASQL provider for ODBC sources:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.Open "File Name=C:\Program Files\Common Files\ODBC\Data Sources\" _
    &amp; "Pubs.dsn"
</pre>
</td></tr>
</table></p>


<p>If you're using a user or system ODBC Data Source Name, you simply have 
to specify its name with a <I>Data Source </I>or 
<I>DSN </I>argument. The following code assumes that you've created a system or user DSN that points to the Pubs database 
on Microsoft SQL Server and shows how you can open a Recordset without first 
creating an explicit Connection object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rs As New ADODB.Recordset
rs.Open "Authors", "Provider=MSDASQL.1;User ID=sa;Data Source=Pubs"
' You can omit the name of the provider because it's the default.
rs.Open "Authors", "DSN=Pubs"
</pre>
</td></tr>
</table></p>


<p>If you aren't using DSNs or UDL files, you must build the connection 
string yourself. This is the ADO equivalent of a DSN-less connection: On one hand, it 
simplifies the installation of the application (because you don't have to create the 
DSN or UDL file on your customer's machine); on the other, it makes the 
programmer's job a little harder. When connecting to a Microsoft Jet database, you need only 
the name of the provider and the path of the MDB database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.Open "Provider=Microsoft.Jet.OLEDB.3.51;" _
    &amp; "Data Source=E:\Microsoft Visual Studio\VB98\Biblio.mdb
</pre>
</td></tr>
</table></p>


<p>The job is a bit more complex when you're connecting to an SQL Server 
database either through the dedicated OLE DB provider or through the default 
MSDASQL provider. This is the connection string to connect to the Pubs database on the 
SQL Server located on the MyServer workstation, using Windows NT integrated security:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.Open "Provider=SQLOLEDB.1;Integrated Security=SSPI;" _
    &amp; " Data Source=MyServer;Initial Catalog=Pubs;"
</pre>
</td></tr>
</table></p>


<p>In this case, <I>Data Source </I>is the name of the server, and you specify that you want 
to use integrated security by setting the <I>Integrated Security 
</I>argument to the <I>SSPI </I>value. The following statement opens a connection to the same SQL Server database, 
this time using an explicit user ID and password:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.Open "Provider=SQLOLEDB.1;Data Source=MyServer;User ID=sa;" _
    &amp; "Password=mypwd;Initial Catalog=Pubs"
</pre>
</td></tr>
</table></p>


<p><I>Connection Timeout </I>is another handy connection string argument. You 
usually don't need it when you're opening a connection using a Connection object 
because this object exposes the <I>ConnectionTimeout 
</I>property that lets you set a timeout when opening the connection. You do need it, however, when you create an 
implicit Connection object in the <I>Open </I>method of a Recordset or the 
<I>Execute </I>method of a Command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Open "Authors", "Provider=SQLOLEDB.1;Data Source=MyServer;User ID=sa;" _
    &amp; "Connection Timeout=10;Initial Catalog=Pubs"
</pre>
</td></tr>
</table></p>


<p>When you're working with an SQL Server source, you can use many 
additional arguments to fine-tune your connection. For example, the 
<I>PacketSize</I> argument sets the size of data block sent through the network. (The default is 4096 bytes.) The 
<I>Use Procedure for Prepare </I>argument specifies whether ADO should create stored 
procedure by default. The possible values are 0=No, 1-Yes And Drop Them When 
You Disconnect (the default), or 2=Yes And Drop Them When You Disconnect And 
As Appropriate While You're Connected. The <I>Locale Identifier 
</I>argument sets the international locale. The 
<I>Network Address </I>and <I>Network Library </I>arguments should be 
specified when you're accessing SQL Server with a method other than named pipes; 
the <I>Workstation ID </I>argument identifies the machine from which you're connecting.</p>

<p>If you're connecting through the default MSDASQL provider, you must 
specify several additional arguments, the most important of which is the ODBC driver 
that you want to use:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.ConnectionString = "Provider=MSDASQL.1;User ID=sa;" _ 
    &amp;"ExtendedProperties=""DRIVER= SQL Server;SERVER=ServerNT;"_
    &amp;"MODE=Read;WSID=P2;DATABASE=pubs"""
</pre>
</td></tr>
</table></p>


<p>As you see, when working with the OLE DB Provider for ODBC you can 
insert the same ODBC argument list you used with RDO by enclosing it between 
double quotes and assigning it to the <I>Extended Properties 
</I>argument. This string is passed to the provider without ADO trying to interpret it. When you're using this argument 
in a Visual Basic statement, as in the previous statement, you must use two 
consecutive double quotes characters. As I mentioned previously, however, you can also 
pass arguments using the old ODBC syntax and ADO interprets them correctly anyway:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can omit the Provider argument because you're using MSDASQL.
cn.ConnectionString = "DRIVER={SQL Server};SERVER= 
     MyServer;"_&amp;"UID=sa;DATABASE=pubs"
</pre>
</td></tr>
</table></p>


<p>You can pass a user's name and password using either the ADO syntax 
(<I>User Id </I>and <I>Password </I>arguments) or the ODBC syntax 
(<I>UID </I>and <I>PWD </I>arguments). If you pass both, the ADO syntax wins.</p>

<p>When working with the Microsoft Jet OLE DB Provider, you can pass 
additional login information, either in the connection string or as dynamic properties of 
the Connection object. Jet <I>OLEDB:System Database 
</I>is the path and name of the file with the information on the workgroup, 
<I>Jet OLEDB:Registry Path </I>is the Registry key that 
holds values for the Jet engine, and <I>Jet OLEDB:Database Password 
</I>is the database password:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.Properties("Jet OLEDB:Database Password") = "mypwd"
</pre>
</td></tr>
</table></p>


<A NAME="616"><h2>Opening the Connection</h2></A>

<p>After you have built a correct connection string, the operations you must perform 
to actually open the connection depend on the object you want to use.</p>

<A NAME="617"><h3>Explicit Connection objects</h3></A>

<p>Most often you build a connection using a stand-alone Connection object, which 
you can reuse for all the queries and commands on that data source during the life of 
your application. You should assign reasonable values to the Connection object's 
<I>Mode </I>and <I>ConnectionTimeout </I>properties and also to its 
<I>Provider </I>property (unless the connection string contains the 
<I>Provider</I> or <I>File Name</I> argument):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Prepare to open a read-only connection.
Dim cn As New ADODB.Connection
cn.ConnectionTimeout = 30    ' Default for this property is 15 seconds.
cn.Mode = adModeRead         ' Default for this property is adModeUnknown.
</pre>
</td></tr>
</table></p>


<p>At this point, you can choose from several ways to open the connection. You 
can assign the connection string to the <I>ConnectionString 
</I>property and then invoke the <I>Open </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.ConnectionString = "Provider=SQLOLEDB.1;Data Source=MyServer;" _
    &amp; "Initial Catalog=Pubs"
' The second and third arguments are the user name and the password.
cn.Open , "sa", "mypwd"
</pre>
</td></tr>
</table></p>


<p>Alternatively, you can pass the connection string as the first argument to 
the <I>Open </I>method. In the following example, the user name and the password are 
embedded in the connection string, so you shouldn't specify them as separate 
arguments. (If you do so, the results are unpredictable.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cn.Open "Provider=SQLOLEDB.1;Data Source=MyServer;User ID=sa;" _
    &amp; "Password=mypwd;Initial Catalog=Pubs"
</pre>
</td></tr>
</table></p>


<p>You should know one more thing about the <I>ConnectionString 
</I>property: If you assign a value to it and then open the connection, reading its value back will 
probably return a different string, one that often contains many additional values put 
there by the provider. This is perfectly normal. When you eventually close the 
Connection object, the <I>ConnectionString </I>property will be restored to the value that you 
originally assigned to it.</p>

<A NAME="618"><h3>Implicit Connection objects</h3></A>

<p>From time to time, you might prefer not to create a stand-alone Connection 
object and instead directly use a Recordset or Command object. This is mostly a matter 
of programming style, however, because even if you don't explicitly create a 
Connection object, ADO does it for you. So you aren't actually saving any resources, 
either on the server or the client workstation. The only savings you get is in terms of 
lines of code. For example, you need only two statements to execute an SQL query on 
any database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rs As New ADODB.Recordset
rs.Open "Authors", "Provider=SQLOLEDB.1;Data Source=MyServer;User ID=sa;" _
    &amp; "Password=mypwd;Initial Catalog=Pubs"
</pre>
</td></tr>
</table></p>


<p>You can use a similar technique to open an implicit connection with a 
Command object, but in this case you need to write more code because you must set 
the <I>ActiveConnection </I>and <I>CommandText 
</I>properties before opening the connection and carrying out command with the 
<I>Execute </I>method, as you can see in the code here.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cmd As New ADODB.Command
cmd.ActiveConnection = "Provider=SQLOLEDB.1;Data Source= 
     MyServer;" _&amp;"userID=sa;Password=mypwd;Initial Catalog=Pubs"
cmd.CommandText = "DELETE FROM Authors WHERE State = 'WA'"
cmd.Execute
</pre>
</td></tr>
</table></p>


<p>When you open a connection with a Recordset or Command object in one 
of the ways described previously, you can access the implicit Connection object that 
ADO creates for you by querying the Recordset's or Command's 
<I>ActiveConnection </I>property, as in the following code snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the errors in the connection created by the previous example.
Dim er As ADODB.Error
For Each er In cmd.ActiveConnection.Errors
    Debug.Print er.Number, er.Description
Next
</pre>
</td></tr>
</table></p>


<p>When you open an implicit Connection object using a Recordset or 
Command object, you inherit all the default values for the Connection object's properties. 
This is often too limiting and is a good reason to prefer explicit Connection objects. 
By default, ADO uses a <I>ConnectionTimout</I> equal to 15 seconds and creates 
server-side, forward-only, and read-only cursors with 
<I>CacheSize</I>=1 (also called noncursors).</p>

<A NAME="619"><h3>The Properties collection</h3></A>

<p>I haven't yet covered one important aspect of the Connection object: What 
happens if the information in the connection string isn't sufficient to set up the 
connection? If you're working with the standard OLE DB provider for an ODBC source, 
this behavior can be controlled by the dynamic <I>Prompt 
</I>property, which appears in the Connection's Properties collection. This property can be set to the following 
values: 1adPromptAlways (always displays the login dialog box), 2-adPromptComplete 
(displays the login dialog box only if some required values are missing in the 
connection string), 3-adPromptCompleteRequired (similar to adPromptComplete, but the 
user can't enter any optional value), and 4-adPromptNever (never displays the login 
dialog box). The default value for this property is adPromptNever: If the connection 
string doesn't include enough information to carry out the operation, no login dialog 
box is displayed and the application receives an error. Use the following code to 
change this default behavior:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the login dialog box if necessary.
Dim cn As New ADODB.Connection
cn.Properties("Prompt") = adPromptComplete
cn.Open "Provider=MSDASQL.1;Data Source=Pubs"
</pre>
</td></tr>
</table></p>


<p>The <I>Prompt </I>dynamic property works in this way with the MSDASQL provider only.</p>

<p>The Properties collection contains many other interesting bits of 
information. For example, your application can determine the name and the version of the 
database it's working with by using the <I>DBMS Name 
</I>and <I>DBMS Version </I>dynamic properties and the name of the server by using the 
<I>Data Source Name </I>property. Another group of properties returns information about the provider: 
<I>Provider Name </I>returns the name of the DLL, 
<I>Provider Friendly Name </I>is the string that you see when 
selecting the provider from the list of all the OLE DB providers installed on the machine, 
and <I>Provider Version </I>is a string that identifies its version. You might want to print this 
information to a log file if your application isn't working properly on a customer's 
machine.</p>

<A NAME="620"><h2>Asynchronous Connections</h2></A>

<p>All the connection examples you've seen so far have one thing in common: 
They're performed synchronously. This means that the Visual Basic program won't 
execute the statement that follows the <I>Open 
</I>method until the connection is established, 
the connection times out, or another error occurs. In the meantime, the application 
won't respond to a user's actions, which is a situation that you should avoid, especially 
if you set a high value for the <I>ConnectionTimeout 
</I>property.</p>

<p>Fortunately, ADO solves this problem in a simple and elegant way. In fact, 
you can keep the Visual Basic program from waiting by passing the adAsyncConnect 
value to the <I>Options </I>argument of the <I>Open 
</I>method. When you open a connection asynchronously, you must determine when the connection is ready (or when an 
error occurs). This can be achieved in two ways: by polling the Connection's 
<I>State </I>property or by using events. Polling the 
<I>State </I>property is the simplest solution, but it's 
often inadequate if you need to perform complex operations while the connection is 
being attempted:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cn As New ADODB.Connection
On Error Resume Next
cn.Open "Provider=sqloledb;Data Source=MyServer;Initial Catalog=pubs;" _
    &amp;"UserID=sa;Password=;", , , adAsyncConnect
' State is a bit-field value, so you need the And operator to test one bit.
Do While (cn.State And adStateConnecting)
    ' Perform your operations here.
    ...
    ' Let the user interact with the program's user interface.
    DoEvents
Loop
' Check whether the connection has been successful.
If cn.State And adStateOpen Then MsgBox "The connection is open."
</pre>
</td></tr>
</table></p>


<p>A better solution is to use the <I>ConnectComplete 
</I>event. You declare the Connection object variable using the 
<I>WithEvents </I>keyword and create a new instance of 
it when you're ready to open the connection, as you can see in the code below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents cn As ADODB.Connection

Private Sub cmdConnect_Click()
    Set cn = New ADODB.Connection
    cn.ConnectionTimeout = 20
    cn.Open "Provider=sqloledb;Data Source=MyServer;" _
        &amp; "Initial Catalog=pubs;", "sa", , adAsyncConnect
End Sub

Private Sub cn_ConnectComplete(ByVal pError As ADODB.Error, adStatus As _
    ADODB.EventStatusEnum, ByVal pConnection As ADODB.Connection)
    If adStatus = adStatusOK Then
        MsgBox "The connection is open"
    ElseIf adStatus = adStatusErrorsOccurred Then
        MsgBox "Unable to open the connection" &amp; vbCr &amp; Err.Description
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The Connection object also fires the <I>WillConnect 
</I>event, though its usefulness is limited. For example, you can use it to modify the connection string to specify 
the provider you're connecting to (instead of modifying the string in multiple points 
of the application's source code), or you can give users the ability to select a server, 
enter their password, and so on:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cn_WillConnect(ConnectionString As String, UserID As String, _
    Password As String, Options As Long, adStatus As _
    ADODB.EventStatusEnum, ByVal pConnection As ADODB.Connection)
    If UserID &lt;&gt; "" And Password = "" Then
        ' Ask for user's password.
        Password = InputBox("Please enter your password")
        If Password = "" Then 
            ' If not provided, cancel the command if possible.
            If adStatus &lt;&gt; adStatusCantDeny Then adStatus = adStatusCancel
        End If
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>When you're working with the <I>WillConnect 
</I>event, keep in mind that its parameters exactly match the values assigned to the corresponding arguments of the 
<I>Open </I>method. This implies, for example, that the 
<I>UserID </I>and <I>Password </I>parameters both receive an empty string if the user name and password were passed in the 
connection string. If you set the <I>adStatus </I>parameter to the adStatusCancel value, an error 
is returned to the <I>Open </I>method and the connection isn't even attempted.</p>
<p>The <I>WillConnect </I>and <I>ConnectComplete </I>events fire when the connection 
isn't opened in asynchronous mode, and the 
<I>ConnectComplete</I> fires also if you canceled the operation in the 
<I>WillConnect </I>event. In this case, the <I>ConnectComplete 
</I>event receives <I>adStatus </I>set to adStatusErrorsOccurred and 
<I>pErrorNumber </I>set to error 3712, &quot;Operation has been canceled by the user.&quot;</p>


<a name="A92"></a><h3>7.2.2 Processing Data</h3>

<A HREF="#A91">[Previous]</A> <A HREF="#A93">[Next]</A><P>

<A NAME="621"><h1>Processing Data</h1></A>

<p>After you've successfully opened a connection, your next step will probably be 
to read some records from the data source. You can accomplish this in several 
ways, but all of them involve the creation of a Recordset object.</p>

<A NAME="622"><h2>Opening a Recordset Object</h2></A>

<p>Before you open a Recordset, you must decide which records you want to 
retrieve, which type of cursor you want to create (if any), the cursor's location, and so on.</p>

<A NAME="623"><h3>The source string</h3></A>

<p>The most important property of a Recordset object is its 
<I>Source </I>property, which indicates which records should be retrieved. This property can be the name of a 
database table or view, the name of a stored procedure, or the text of a SELECT 
command. When you're working with file-based Recordsets, the 
<I>Source </I>property can also be the name and path of a file. (File-based Recordsets are described later in this 
chapter.) Here are a few examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select a different source, based on an array of option buttons.
Dim rs As New ADODB.Recordset
If optSource(0).Value Then          ' Database table
    rs.Source = "Authors"
ElseIf optSource(1).Value Then      ' Stored procedure
    rs.Source = "reptq1" 
ElseIf optSource(2) Then            ' SQL query
    rs.Source = "SELECT * FROM Authors" WHERE au_lname LIKE 'A*'"
End If
</pre>
</td></tr>
</table></p>


<p>When you open a Recordset, you must specify the connection that you 
want used. You can do this in at least four ways:</p>
<UL>

<p><li>You create a stand-alone Connection object with all the properties 
you want (connection timeout, user name and password, and so on), you 
open it, and then you assign it to the Recordset's <I>ActiveConnection </I>property before opening the Recordset.</li></P>
 
<p><li>You create a stand-alone Connection object as described in the 
previous point and pass it as the second argument of the Recordset's <I>Open </I>method. The effects of this sequence are identical, but it lets you save one statement.</li></P>

<p><li>You pass a connection string as the second argument of the 
Recordset's <I>Open </I>method. In this scenario, ADO creates an implicit Connection 
object that you can later access through the Recordset's 
<I>ActiveConnection </I>property. This method is the most concise of the four, in that it requires only one executable statement.</li></P>

<p><li>You create a stand-alone Connection object as shown in the first 
two points. Then you pass the source string as the first argument to its 
<I>Execute </I>method and assign the 
  returned value to a Recordset variable. This means of specifying a connection 
  is the least flexible of the group because you have little control over the 
  type of the returned Recordset.</li></P>           
</UL>

<p>I'll describe a few other ways to open a Recordset, based on the 
Command object, in the &quot;<a href="#635">Using Command Objects</a>&quot; section, later in this chapter. Here are 
some code examples, all of which open the Authors table of the Pubs database on the 
SQL Server named P2:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Method 1: explicit Connection assigned to the ActiveConnection property.
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.ConnectionTimeout = 5
cn.Open "Provider=sqloledb;Data Source=P2;Initial Catalog=pubs;", "sa"
Set rs.ActiveConnection = cn
rs.Open "Authors"

' Method 2: explicit Connection passed to the Open method.
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.ConnectionTimeout = 5
cn.Open "Provider=sqloledb;Data Source=P2;Initial Catalog=pubs;", "sa"
rs.Open "Authors", cn

' Method 3: implicit Connection created in the Recordset's Open method.
' Note that you need to embed additional connection attributes (such as
' connection timeout and user ID) in the connection string.
Dim rs As New ADODB.Recordset
rs.Open "Authors", "Provider=sqloledb;Data Source=P2;" _
    &amp; "Initial Catalog=pubs;User ID=sa;Connection Timeout=10"

' Method 4: the Execute method of the Connection object. By default, it 
' opens a server-side forward-only, read-only Recordset with CacheSize=1.
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.Open "Provider=sqloledb;Data Source=P2;Initial Catalog=pubs;", "sa"
Set rs = cn.Execute("Authors")
</pre>
</td></tr>
</table></p>


<p>Notice a substantial difference among all these approaches: The first, the 
second, and the fourth methods let you easily share the same connection among 
multiple Recordsets, whereas if you open multiple Recordsets using the third method 
each Recordset would use a different connection even if you use the same connection 
string for all of them.</p>

<div class="tip"><blockquote>
<b>TIP</b><hr>
If you have used a connection string to open a Recordset and then 
you want to reuse the same implicit Connection object to open another 
Recordset, you can exploit the <I>ActiveConnection</I> property of the first Recordset, as follows:
<p>
<table><tr><td>
<pre>' Open a new Recordset on the same connection as "rs".
Dim rs2 As New ADODB.Recordset
rs2.Open "Publishers", rs.ActiveConnection
</pre>
</td></tr></table>
</p>
</blockquote></div>

<p>You can pass many types of strings to the <I>Open 
</I>method or the <I>Source </I>property and let ADO determine what they represent. This has a price, however, 
because you force ADO to send one or more queries to the database just to find out 
whether the source string is the name of a table, a view, a stored procedure, or the text of 
an SQL command. You can avoid these additional trips to the server by assigning a 
correct value to the last argument of the <I>Open 
</I>method, as in the following examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select a different source, based on an array of option buttons.
If optSource(0).Value Then          ' Database table
    rs.Open "Publishers", , , , adCmdTable
Else optSource(1).Value Then        ' Stored procedure
    rs.Open "reptq1", , , , adCmdStoredProc
ElseIf optSource(2) Then            ' SQL query
    rs.Open "SELECT * FROM Authors", , , , adCmdText
End If
</pre>
</td></tr>
</table></p>


<A NAME="624"><h3>Cursors and concurrency</h3></A>

<p>Recordsets can greatly differ in functionality and performance. For example, 
a Recordset can be updatable or read-only; it can support only the MoveNext 
command or be fully scrollable. Another key difference is in whether the Recordset 
contains the actual data or is just a collection of bookmarks that are used to retrieve the 
data from the database when necessary. It goes without saying that a client-side 
Recordset based on bookmarks takes fewer resources in the client application but might 
generate more network traffic when new data needs to be retrieved. Incidentally, 
this makes it almost impossible to compare the performance of different data 
retrieval techniques because they depend on too many factors.</p>

<p>The kinds of operations supported by a Recordset heavily depend upon 
the cursor on which the Recordset is based. Cursors are a collection of records that 
can be stored and maintained by the server database or by the client application. As 
you know from <a href="#A82">Chapter 13</a>, ADO supports four types of cursors: forward-only 
read-only, static, keyset, and dynamic.</p>

<p>Cursors aren't very popular among professional programmers because of 
their appetite for resources and CPU time. Moreover, cursors often use locks on the 
database, which further reduces their scalability. Most heavy-duty client/server 
applications rely on cursorless Recordsets for retrieving data, and then update and 
insert records using SQL commands or, even better, stored procedures.</p>

<p>So, what are cursors good for? For one, when you're retrieving small sets of data&#8212;some hundreds of records, for example&#8212;a cursor is a reasonable choice. 
Cursors are also necessary when you want to enable your users to browse data and 
scroll back and forth through it, and you must use a cursor when your user interface is 
based on bound controls. In some cases, you're more or less forced to use cursors 
(in particular, client-side cursors) because a few interesting ADO features are 
available only with them. For example, persistent file-based Recordsets and 
hierarchical Recordsets can be based only on client-side static cursors, and you can use the 
<I>Sort </I>method only on this type of Recordset.</p>

<p>If you decide that cursors meets your requirements, you should at least 
attempt to reduce their overhead, which you do by adopting some simple but effective 
techniques. First, reduce the number of records in the cursor using an appropriate 
WHERE clause, and consider using the <I>MaxRecords 
</I>property to avoid huge cursors. Second, move to the last row of the Recordset as soon as possible, in order to free the 
locks on the data pages and index pages on the server. Third, always set the 
Recordset's <I>CursorLocation</I>, <I>CursorType</I>,<I> </I>and <I>LockType </I>properties so that the cursor isn't 
more powerful (and therefore less efficient) than what you actually need.</p>

<p>Speaking of <I>CursorType</I> and <I>LockType</I>, you should remember from <a href="#A82">Chapter 
13</a> that you can also set these properties by passing values to the third and fourth 
arguments of the <I>Open </I>method, as the following code demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Open a server-side dynamic cursor. 
' (Assumes that the ActiveConnection property has been set already.)
rs.CursorType = adOpenDynamic
rs.Open "SELECT * FROM Authors", , , , adCmdText

' Open a server-side keyset cursor, with a single statement.
rs.Open "SELECT * FROM Authors", , adOpenKyset, adLockOptimistic, adCmdText
</pre>
</td></tr>
</table></p>


<p>You can create client-side static cursors by simply setting the 
<I>CursorLocation </I>to adUseClient before opening the Recordset. This property, in fact, seems to 
have a higher priority than <I>CursorType</I>: Whatever cursor type you specify in the latter 
property or as an argument to the <I>Open </I>method, ADO always creates a Recordset 
based on a static cursor, which is the only cursor available on the client side:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Open a client-side static cursor.
rs.CursorLocation = adUseClient
rs.CursorType = adOpenStatic        ' This statement is optional.
rs.Open "SELECT * FROM Authors", , , , adCmdText
</pre>
</td></tr>
</table></p>


<p>Client-side static cursors offer a decent scalability because they use 
resources from each client and not from the server. The only resource used on the server is 
the open connection, but later in this chapter I'll show how you can work around 
this issue, using dissociated Recordsets and optimistic batch updates.</p>

<p>Server-side cursors have their advantages. They let you use less powerful 
client workstations and offer more choices in terms of cursor types and locking 
options. For example, a keyset or dynamic cursor can reside only on the server, 
server-side static cursors can be read-write, and client-side static cursors can only be 
read-only or use optimistic batch updates. Another point in favor of cursors is that SQL 
Server lets you have multiple active statements on a connection only if you're using 
serverside cursors. On the other hand, server-side cursors drain resources from the 
server, so scalability is often an issue. Each cursor you create on the server uses room in 
the TempDB database, so you must ensure that TempDB can accommodate all the 
cursors requested by client applications. Finally, server-side cursors usually generate 
high network traffic because each time the client needs a different record, a round-trip 
to the server is performed.</p>

<div class="tip"><blockquote>
<B>TIP</B><hr>
The Visual Basic documentation incorrectly states that the Recordset 
returned by a Connection object's <I>Execute </I>method is always a 
server-side cursorless Recordset. The truth is that you can also create client-side 
static cursors if you set the Connection's <I>CursorLocation 
</I>property to adUseClient before creating the Recordset:
<p><table><tr><td>
<pre>' This code creates a client-side static cursor.
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.Open "Provider=sqloledb;Data Source=P2;" &amp; _
    "Initial Catalog=pubs;", "sa"
cn.CursorLocation = adUseClient
Set rs = cn.Execute("Authors")
</pre>
</td></tr></table></p>
<p>I didn't find a way, however, to have an <I>Execute 
</I>method return a server-side cursor other than the default noncursor.</p>
</blockquote></div>

<A NAME="625"><h3>Stand-alone Recordset objects</h3></A>

<p>ADO Recordset objects are much more flexible than DAOs and RDOs, in that 
you don't even need an open connection to create a Recordset. In fact, ADO 
provides support for two different types of Recordsets: stand-alone Recordsets created 
from scratch and file-based Recordsets.</p>

<p>Stand-alone Recordsets are conceptually simple. You create a new 
Recordset object, append one or more fields to its Fields collection, and finally open it. What 
you get is a client-side Recordset based on a static cursor and optimistic batch locking:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Creates a dissociated Recordset with three fields
Dim rs As New ADODB.Recordset
rs.Fields.Append "FirstName", adChar, 40, adFldIsNullable
rs.Fields.Append "LastName", adChar, 40, adFldIsNullable
rs.Fields.Append "BirthDate", adDate
rs.Open
</pre>
</td></tr>
</table></p>


<p>After you have opened the Recordset, you can add records to it and you 
can even assign it to the <I>Recordset</I> property of an ADO Data control or to the 
<I>DataSource </I>property of any bound control. This lets you bind a control to data of any type, 
even if it isn't stored in a database. For example, you can display the contents of a 
semicolon-delimited text file in a DataGrid control, as shown in Figure 14-1, by using the 
following code. (See on the companion CD for the complete application.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rs As New ADODB.Recordset
Dim lines() As String, fields() As String
Dim i As Long, j As Long
    
' Open the Publishers.dat text file.
Open "Publishers.dat" For Input As #1
' Read the contents of the file, and process each individual line.
lines() = Split(Input(LOF(1), 1), vbCrLf)
Close #1
' Process the first line, which contains the list of fields.
fields() = Split(lines(0), ";")
For j = 0 To UBound(fields)
    rs.fields.Append fields(j), adChar, 200
Next
rs.Open
    
' Process all the remaining lines.
For i = 1 To UBound(lines)
    rs.AddNew
    fields() = Split(lines(i), ";")
    For j = 0 To UBound(fields)
        rs(j) = fields(j)
    Next
Next
' Display the recordset in the DataGrid control.
rs.MoveFirst
Set DataGrid1.DataSource = rs
</pre>
</td></tr>
</table></p>


<p>Using similar code, you can display the contents of a two-dimensional array 
of strings, of an array of User Defined Type structures, or even less traditional 
data sources, such as information coming from the serial port or an HTML page 
downloaded from the Internet.</p>

<p>ADO also supports saving the contents of a client-side Recordset to a disk file. This 
capability can greatly increase the functionality and the performance of your applications. For 
example, you can create local copies of small lookup tables and update them 
only when necessary. Or you can save a Recordset to a directory and let another 
program create a report out of it, possibly during off-hours. Or you can enable your 
users to save the current state of the application&#8212;including any Recordset being 
processed&#8212;and restore it in a later session. I have described file-based Recordset 
in detail in the "Implementing Persistent Recordsets" section in <a href="#A82">Chapter 13</a>.</p>

<p>
<A HREF="javascript:fullSize('F14ph01x.htm')"> <img src="F14ph01.JPG" width=404 height=207 border=0 ALT = "Click to view at full size."></a>
<p>
<!--caption--><B>Figure 14-1.</B> <I>You can bind data-aware controls to any type of data, using stand-alone Recordsets.</I><!--/caption-->


<A NAME="626"><h2>Basic Operations on a Database</h2></A>

<p>The ultimate purpose in connecting to a database is to read the data it contains 
and possibly modify it. As you'll see in a moment, ADO offers several ways to 
perform these tasks.</p>

<A NAME="627"><h3>Read records</h3></A>

<p>After you've created a Recordset, reading the data in it is as simple as iterating on 
all its records using a <I>Do&#8230;Loop </I>structure similar to the following one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Fill a list box with the names of all the authors.
Dim rs As New ADODB.Recordset
rs.Open "Authors", "Provider=sqloledb;Data Source=P2;" _
    &amp; "Initial Catalog=pubs;User ID=sa;Connection Timeout=10"
Do Until rs.EOF
    lstAuthors.AddItem rs("au_fname") &amp; " " &amp; rs("au_lname")
    rs.MoveNext
Loop
rs.Close
</pre>
</td></tr>
</table></p>


<p>The previous code works regardless of the type of Recordset you're working with, 
because all Recordsets&#8212;including cursorless ones&#8212;support the 
<I>MoveNext </I>method. You can reference the values in the current record using the more 
verbose syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Fields("au_fname").Value
</pre>
</td></tr>
</table></p>


<p>but in most cases you'll omit both <I>Fields 
</I>(the default property for the Recordset 
object) and <I>Value </I>(the default property for the Field object) and use the most concise form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs("au_fname")
</pre>
</td></tr>
</table></p>


<p>Reading the <I>Value </I>property of a Field object might fail if the field is a large 
binary object (BLOB), such as an image or a long memo stored in a database field. In 
this situation, you should retrieve the value using the Field object's 
<I>GetChunk </I>method, as described in the &quot;<a href="#589">The Field Object</a>&quot; section in Chapter 13. Similarly, you 
should write data to a BLOB field using the <I>AppendChunk 
</I>method.</p>

<p>ADO supports two other ways to retrieve data from an open Recordset. The 
first one is based on the <I>GetRows </I>method, which returns a Variant containing a 
two-dimensional array of values. The second one is based on the 
<I>GetString </I>method, which returns a long string where fields and records are separated using the characters 
you specify. In general, these methods are <I>much 
</I>faster than using a loop based on the <I>MoveNext 
</I>method, even though the actual speed improvement depends on 
many factors, including the type of cursor and the system memory available on the 
client machine. You can find a description of these methods in the &quot;<a href="#577">Retrieving Data</a>&quot; 
section of Chapter 13.</p>

<A NAME="628"><h3>Insert, delete, and update records</h3></A>

<p>Provided that the Recordset is updatable, you can insert new records using the 
Recordset's <I>AddNew </I>method. Use the <I>Supports 
</I>method to determine whether you can add new records to the Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If rs.Supports(adAddNew) Then. . .
</pre>
</td></tr>
</table></p>


<p>I've shown how you can use the <I>AddNew </I>method to add records to a 
stand-alone Recordset, and the same technique applies to a regular Recordset. If you've 
grown up with DAO and RDO, you might find ADO's 
<I>AddNew </I>method disconcerting at first because it doesn't require that you confirm the addition of the new record. In fact, 
any operation that moves the record pointer to another record&#8212;including 
another <I>AddNew</I> 
method&#8212;confirms the insertion of the new record. If you want to cancel 
the operation, you must call the <I>CancelUpdate 
</I>method, as this code demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.AddNew
rs.Fields("Name") = "MSPress"
rs.Fields("City") = "Seattle"
rs.Fields("State") = "WA"
If MsgBox("Do you want to confirm?", vbYesNo) = vbYes Then
    rs.Update
Else
    rs.CancelUpdate
End If
</pre>
</td></tr>
</table></p>


<p>Remember that you can't close a Recordset if an <I>AddNew</I> method hasn't been resolved with an <I>Update </I>method (implicit or explicit) or a <I>CancelUpdate </I>method.</p>

<p>Another feature of the <I>AddNew </I>method that's missing in DAO and RDO is 
its ability to pass an array of field names and values. To give you an idea of which 
sort of speed improvement you can get using this feature, I rewrote the loop that 
adds new records in the code snippet shown in the &quot;<a href="#625">Stand-Alone Recordset 
Objects</a>&quot; section, earlier in this chapter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Build the FieldNames() variant array. (You need to do this only once.)
ReDim fieldNames(0 To fieldMax) As Variant
For j = 0 To fieldMax
    fieldNames(j) = fields(j)
Next
' Process the text lines, but use an array of values in AddNew.
For i = 1 To UBound(lines)
    fields() = Split(lines(i), ";")
    ReDim fieldValues(0 To fieldMax) As Variant
    For j = 0 To UBound(fields)
        fieldValues(j) = fields(j) ' Move values into the Variant arrays. 
    Next
    rs.AddNew fieldNames(), fieldValues()
Next
</pre>
</td></tr>
</table></p>


<p>While the amount of code is more or less the same, passing arrays of field 
names and values to the <I>AddNew </I>method makes this code run about 
<I>three times faster </I>than the original loop. This gives you an idea of the overhead you incur whenever 
you reference an item in the Fields collection.</p>

<p>ADO lets you modify field values in the current record without explicitly 
entering edit mode. In fact, unlike DAO and RDO, ADO Recordset objects expose 
no <I>Edit </I>method and you implicitly enter edit mode when you modify a field's value:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Increment unit prices of all products by 10%.
Do Until rs.EOF
    rs("UnitPrice") = rs("UnitPrice") * 1.1
    rs.MoveNext
Loop
</pre>
</td></tr>
</table></p>


<p>If you aren't sure whether ADO has initiated an edit operation, you can 
query the <I>EditMode</I> property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If rs.EditMode = adEditInProgress Then. . .
</pre>
</td></tr>
</table></p>


<p>The <I>Update </I>method is similar to 
<I>AddNew</I> in that it also supports a list of 
field names and values. This feature is especially convenient when the same subset 
of values must be inserted in multiple records. Don't forget that the 
<I>Update </I>method might not be supported by the Recordset, depending on its type, location, and 
concurrency option. When in doubt, use the <I>Supports 
</I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If rs.Supports(adUpdate) Then. . .
</pre>
</td></tr>
</table></p>


<p>The syntax of the <I>Delete </I>method is simple: Depending on the argument you 
pass to this method, you can either delete the current record (the default) or all the 
records that are currently visible because of an active 
<I>Filter </I>property. In most cases, you'll use the default option. Remember that after you invoke this method, the current 
record becomes invalid, so you should move the record pointer to point to a valid 
record immediately after the delete operation:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Delete
rs.MoveNext
If rs.EOF The rs.MoveLast
</pre>
</td></tr>
</table></p>


<A NAME="629"><h3>Locking issues</h3></A>

<p>Even if the Recordset is updatable, you can't be sure that the 
<I>Update </I>method will succeed. In fact, an updatable record might be (possibly temporarily) made 
nonupdatable because it's being edited by another user. This is an issue only when 
you open the Recordset using a locking option other than the 
adLockReadOnly value. If you open a Recordset in read-only mode, you're not using locks at all and can 
happily go back and forth through your Recordset (only forth, if not scrollable) 
without caring about locking.</p>

<p>Different users can access the same set of records using different lock 
options. For example, user A might use pessimistic locking and user B might use 
optimistic locking. In this case, user A might lock the record even if user B is already editing 
it, in which case user B will be locked out until user A completes the update 
operation. If you use pessimistic locking, you should trap errors only when you start editing 
the record, whereas if you use optimistic locking you should trap errors only when 
you implicitly or explicitly update the record. If you're using optimistic batch locking, 
you must solve update conflicts, as I explain later in this chapter.</p>

<p>When you're using pessimistic locking and your edit operation fails, you 
get an error &amp;H80004005, &quot;Couldn't update; currently locked by user 
<I>&lt;username&gt; </I>on machine 
<I>&lt;machinename&gt;.</I>&quot; You get the same error when the Update command 
fails for a Recordset opened with optimistic locking. In both cases, you should 
implement a strategy for solving these locking problems: Typically you can either retry 
automatically after a while or notify the user that the edit or update operation failed and 
let him or her decide whether the command should be attempted again:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Update strategy for optimistic locking.
On Error Resume Next
Do
    Err.Clear
    rs.Update
    If Err = 0 Then
        Exit Do
    ElseIf MsgBox("Update command failed:" &amp; vbCr &amp; Err.Description, _
        vbRetryCancel + vbCritical) = vbCancel Then
        Exit Do
    End If
Loop
</pre>
</td></tr>
</table></p>


<P><DIV CLASS="CAUTION"><BLOCKQUOTE>
<B>CAUTION</B><HR>
The OLE DB Provider for Microsoft Jet version 3.51 has a 
serious bug: If you're using optimistic locking and the implicit or explicit 
<I>Update </I>method fails, you get a cryptic error &amp;H80040E21, &quot;Errors occurred.&quot; This isn't very 
helpful. What's worse with optimistic updates, however, is that you get this error 
only the first time you attempt the update operation. If you retry the update later 
and the record is still locked, you get no error and the code incorrectly assumes 
that the update succeeded. This bug has been fixed in version 4.0 of the 
provider, which returns the correct error code &amp;H80004005. The OLE DB Provider for 
SQL Server 6.5 also returns the incorrect error code, but at least the error 
correctly persists if you retry the <I>Update </I>operation again on the same locked record.</blockquote></div>
</P>
<p> Many database
engines&#8212;including Microsoft Jet and SQL Server 6.5 and earlier&#8212;don't support locking at the record level and use locks that affect entire pages 
that can contain multiple records. (For example, Microsoft Jet supports 2-KB pages.) 
This means that a record can be locked even if it isn't being updated by a user but 
merely because a user has locked another record in the same page. Microsoft SQL Server 
7 and Oracle databases support record-level locking. The locking mechanism also 
works on pages of indexes, so you might be prevented from updating a record 
because another user has locked the index page that contains a pointer to the record 
you're working with.</p>


<A NAME="630"><h3>Updates through SQL commands</h3></A>

<p>As you know, the most efficient Recordsets are those built on forward-only, 
read-only noncursors, which are nonupdatable Recordsets. Even if you opt for other types 
of cursors, for a better scalability I advise you to open the Recordset in read-only 
mode, which avoids locking and delivers applications that scale better. You must, 
however, implement a strategy for adding, inserting, and deleting records if such 
operations are needed. If the Recordset isn't updatable, your only choice is to send an 
SQL command to the database or to execute a stored procedure that you've created 
previously. In this section, I show you how to use plain SQL commands without 
parameters. The concepts, by the way, can be applied to other circumstances as well, 
which you'll see when I describe parameterized queries in the &quot;<A HREF="#638">Parameterized Commands and Queries</A>&quot; section, later in this chapter.</p>

<p>If you're working with a read-only Recordset, you can update an individual 
row using an UPDATE command as long as you can uniquely identify the current 
record. Usually you do that using the value of the primary key in the WHERE clause:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Ask the end user for a new price for each product that costs more
' than $40.
Dim rs As New ADODB.Recordset, cn As New ADODB.Connection
Dim newValue As String
cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=C:\Program Files\Microsoft Visual Studio\VB98\NWind.mdb"
rs.Open "Products", cn
Do Until rs.EOF
    If rs("UnitPrice") &gt; 40 Then
        ' In a real-world application, you will surely use a better UI.
        newValue = InputBox("Insert a new price for product " &amp; _
            rs("ProductName"), , rs("UnitPrice"))
        If Len(newValue) Then
            cn.Execute "UPDATE Products SET UnitPrice=" &amp; newValue &amp; _
                " WHERE ProductID =" &amp; rs("ProductID")
        End If
    End If
    rs.MoveNext
Loop
</pre>
</td></tr>
</table></p>


<p>Deleting a record using an SQL command is similar, but you have to use 
the DELETE command instead:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>' Ask users if they want to selectively delete suppliers from Italy. 
Dim rs As New ADODB.Recordset, cn As New ADODB.Connection
cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=E:\Microsoft Visual Studio\VB98\NWind.mdb"
rs.Open "Suppliers", cn
Do Until rs.EOF
    If rs("Country") = "Italy" Then
        If MsgBox("Do you want to delete supplier " &amp; rs("Company Name") _
            &amp; "?", vbYesNo) = vbYes Then
            cn.Execute "DELETE FROM Suppliers WHERE SupplierID =" _
                &amp; rs("SupplierID")
        End If
    End If
    rs.MoveNext
Loop
</pre>
</td></tr>
</table></p>
<p>Update and delete operations can fail for several 
reasons, so you should always protect them from unanticipated errors. For 
example, the previous DELETE command fails if the deleted record is referenced 
by any record in the Products table, unless a cascading delete relationship has 
been established between the two tables.</p>

<p>Adding new records requires an INSERT 
INTO command:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>cn.Execute "INSERT INTO Employees (LastName, FirstName, BirthDate) " _
    &amp; "VALUES ('Smith', 'Robert', '2/12/1953')"
</pre></td></tr></table></p>
<p>When you retrieve the values from controls, you must 
build the SQL string programmatically, as in this code:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>cn.Execute "INSERT INTO Employees (LastName, FirstName, BirthDate) " _
    &amp; "VALUES ('" &amp; txtLastName &amp; "', '" &amp; txtFirstName _
    &amp; "', '" &amp; txtBirthDate &amp; "')"
</pre></td></tr></table></p>
<p>You can write less code and make it more readable by 
defining a routine that replaces all the placeholders in a string:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>' Replace all @n arguments with provided values.
Function ReplaceParams(ByVal text As String, ParamArray args() As Variant)
    Dim i As Integer
    For i = LBound(args) To UBound(args)
        text = Replace(text, "@" &amp; Trim$(i + 1), args(i))
    Next
    ReplaceParams = text
End Function
</pre></td></tr></table></p>
<p>Here's how you can rewrite the previous INSERT command 
using the <I>ReplaceParams </I>routine:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>sql = "INSERT INTO Employees (LastName, FirstName, BirthDate) " _
    &amp; "VALUES ('@1', '@2', '@3')
cn.Execute ReplaceParams(sql, txtLastName, txtFirstName, txtBirthDate)
</pre></td></tr></table></p>
<A NAME="631"><h2>Optimistic Client-Batch Updates</h2></A><p>Until now, I haven't described in detail how optimistic 
batch updates work for a reason: They require a completely different programming 
logic and deserve a section of their own.</p>
<A NAME="632"><h3>Disconnecting the Recordset</h3></A><p>In a nutshell, ADO lets you create Recordsets on which you can 
perform all the commands you want to&#8212;including deletes, inserts, and updates&#8212;without immediately affecting the original rows in the database. You can 
even disconnect the Recordset from the database by setting its <I>ActiveConnection </I>property to Nothing and optionally 
close the companion Connection object. When you're finally ready to confirm the 
updates to the database, you simply have to reconnect the Recordset and issue an 
UpdateBatch command. Or you can use the <I>CancelBatch 
</I>method to cancel the pending changes. The following snippet is similar to a 
code example you saw in the previous section, but it uses optimistic batch 
updates instead of UPDATE SQL commands:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>Dim rs As New ADODB.Recordset, cn As New ADODB.Connection
' Open the recordset with optimistic batch locking.
cn.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=C:\Microsoft Visual Studio\VB98\NWind.mdb"
cn.Open
rs.CursorLocation = adUseClient
rs.Open "Products", cn, adOpenStatic, adLockBatchOptimistic
' Disconnect the recordset from the data source and free the connection.
Set rs.ActiveConnection = Nothing
cn.Close

Do Until rs.EOF
    If rs("UnitPrice") &gt; 40 Then
        ' In a real-world application, you'll surely use a better UI.
        newValue = InputBox("Insert a new price for product " &amp; _
            rs("ProductName"), , rs("UnitPrice"))
        If Len(newValue) Then rs("UnitPrice") = newValue
    End If
    rs.MoveNext
Loop

' Ask for confirmation of all changes.
If MsgBox("Send updates to the database?", vbYesNo) = vbYes Then
    ' Reestablish the connection, and send the updates.
    cn.Open 
    Set rs.ActiveConnection = cn
    rs.UpdateBatch
Else
    rs.CancelBatch
End If
</pre></td></tr></table></p>
<p>Notice how the program closes the connection while it 
isn't being used by the Recordset and reopens it only if necessary. This detail 
can probably improve the scalability of your application more than any other 
technique you've seen so far.</p>
<A NAME="633"><h3>Resolving the conflicts</h3></A><p>The previous code example omits an essential part of any optimistic 
batch update routine&#8212;conflict handling. In fact, the <I>optimistic</I> in the name means that you <I>hope </I>that no other user has updated the same record 
while you were processing the Recordset locally. In practice, you must always 
trap errors and resolve any conflicts manually. These conflicts can occur 
because the records you've updated have been deleted by another user in the 
meantime, or because the fields that you've updated have been updated by another 
user. By default, ADO signals a conflict only if two users modify the same 
field, not when they modify different fields in the same record. For the best 
results, you should ensure that the table being updated has a primary key. 
Otherwise, you might accidentally update more records than you meant to.</p>
<p>To see which records caused the conflicts, you set the 
<I>Filter </I>property to the value 
adFilterConflictingRecords and then loop on the Recordsets, testing each 
record's <I>Status </I>property:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>' A skeletal code that resolves batch update conflicts
On Error Resume Next
rs.UpdateBatch
rs.Filter = adFilterConflictingRecords
If rs.RecordCount &gt; 0 Then
    ' Resolve the conflicts here.
End If
' Go back to the regular recordset.
rs.Filter = adFilterNone
</pre></td></tr></table></p>
<p>Next, you need a way to solve the conflicts you've 
found. First of all, you can visit each record in the Recordset and query its <I>Status </I>property. If it returns the value adRecModified, 
it means that another user has changed the same fields that the current user has 
edited, whereas it returns the value adRecDeleted if the record has been 
deleted. Often, the adRecConcurrencyViolation bit is set in case of errors. See 
Table 13-2 in Chapter 13 for the complete list of values that can be returned by 
the <I>Status </I>property. Keep in mind that this is a 
bit-field value, so you should test individual bits using the And operator, as 
in this code:</p>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>If rs.Status And adRecModified Then. . .
</pre></td></tr></table></p>
<p>If a record has been modified, you must decide what to 
do. Unfortunately, there are no universally valid rules. Automatic 
conflict-solving strategies are always dangerous; usually the best thing to do 
is to let users decide. To let them reach a meaningful decision, however, you 
should display the new value that has been stored in the database. 
Unfortunately, simply querying the Field object's <I>UnderlyingValue</I> property won't work because it returns 
the same value as the <I>OriginalValue </I>property (that 
is, the value that was in that field when the Recordset was opened). To achieve 
the correct value for the <I>UnderlyingValue </I>property, 
you must run the Recordset's <I>Resync </I>method.</p>
<P>You can pass the <I>Resync 
</I>method two optional arguments. The first argument determines which records 
are resynchronized, and can be one of the following values: adAffectAllChapters 
(the default, affect all records), adAffectGroup (affect only the records made 
visible by the current filter), or adAffectCurrent (affect only the current 
record). For our purposes, the adAffectGroup value is usually the best choice. 
The second argument to the <I>Resync </I>method determines 
how Field object's properties are affected: The value we need is 
adResyncUnderlyingValues, which sets the <I>UnderlyingValue 
</I>property to the value read from the database. If you mistakenly use the 
adResyncAllValues for the second argument (the default), you overwrite the <I>Value </I>property and therefore lose what the user has 
entered. The following code puts all these concepts together and displays the 
list of all the conflicting records, with details about the involved fields:</P>
<p>
<table cellPadding=5 width="95%">
  
  <tr>
    <td><pre>On Error Resume Next
rs.UpdateBatch
rs.Filter = adFilterConflictingRecords
If rs.RecordCount Then
    Dim fld As ADODB.Field
    ' Resync the Recordset to retrieve correct values for UnderlyingValue.
    rs.Resync adAffectGroup, adResyncUnderlyingValues
    ' Loop on all the conflicting records. Note that setting the Filter
    ' property implicitly performs a MoveFirst method.
    Do Until rs.EOF
        Print "Conflict on record: " &amp; rs("ProductName")
        For Each fld In rs.Fields
            ' Display fields whose local and underlying values don't match.
            If fld.Value &lt;&gt; fld.UnderlyingValue Then
                Print "Field: " &amp; fld.Name _
                    &amp; "- Original value = " &amp; fld.OriginalValue _
                    &amp; "- Value now in database = " &amp; fld.UnderlyingValue _
                    &amp; "- Local value = " &amp; fld.Value
            End If
        Next
        rs.MoveNext
    Loop
End If
rs.Filter = adFilterNone
</PRE></TD></TR></TABLE></P>
<p>ADO signals a conflict even if the underlying value is 
equal to the local value. In other words, ADO signals a conflict if two users 
attempted to store the same value in the same field of a record. After you or 
your users have all the information needed to reach a decision, you should 
resolve the conflict in one of the following ways:</P>

<UL>
<p><li>You can accept the value currently in the database, which you do by assigning the Field's <I>UnderlyingValue 
  </I>property to its <I>Value </I>property.</li></P>
<p><li>You can force the local value into the database, by 
  reexecuting the <I>UpdateBatch </I>method. In this case, 
  no error will be raised unless another user has modified those fields (or 
  other fields) in the meantime.</li></P>
</ul>
  <p>To watch optimistic batch updates in action, run two 
  instances of the BatchUpd project on the companion CD, modify the same records 
  in both instances, and then click on the Update button. In the first instance, 
  you get an OK message; in the other instance, you get an error and have the 
  opportunity to browse conflicting records, resynchronize the Recordset, and 
  see the relevant properties of all fields, which are visible in Figure 14-2. 
  The application works with the Pubs SQL Server database and with the 
  Biblio.mdb Jet database.</P>
  
<p>
<A HREF="javascript:fullSize('F14ph02x.htm')"> <img src="F14ph02.JPG" width=404 height=276 border=0 ALT = "Click to view at full size."></a>
<p>
<!--caption--><B>Figure 14-2.</B> <I>The Optimistic Batch Updates demonstration program.</I><!--/caption-->


<A NAME="634"><h3>The <I>Update Criteria</I> property</H3></A>
  <p>As I've mentioned before, ADO by default raises a 
  conflict when different users modify the same field: In other words, if two 
  users read the same record but modify different fields, no error occurs. This 
  behavior is very dangerous and might lead to inconsistencies in the database. 
  Fortunately, you can change this default action through the <I> 
  Update Criteria </I>dynamic property of the Recordset 
  object. This property affects the fields used by ADO to locate the record to 
  be updated. You can set this property to one of the following four values: 
  0-adCriteriaKey (ADO uses only the primary key), 1-adCriteriaAllCols (ADO uses 
  all the columns in the Recordset), 2-adCriteriaUpdCols (the default, ADO uses 
  the key and the updated fields), and 3-adCriteriaTimeStamp. (ADO uses a 
  TIMESTAMP column, if available; otherwise, it uses adCriteriaAllCols.)</P>
  <p>Because <I>Update Criteria </I>is 
  a dynamic property, you set it through the Properties collection, as in the 
  following example:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>rs.Properties("Update Criteria") = adCriteriaTimeStamp
</PRE></TD></TR></TABLE></P>
  <p>In general, setting this property to the value 
  adCriteriaTimeStamp offers the best performance if the table includes a 
  TIMESTAMP field; otherwise, this setting reverts to adCriteriaAllCols, which 
  is the least efficient of the group (although it's also the safest one). Note 
  that you don't need to retrieve the TIMESTAMP field just to use the 
  adCriteriaTimeStamp setting. For more information, see article Q190727 in the 
  Microsoft Knowledge Base.</P>
<A NAME="635">  <h2>Using Command Objects</H2></A>  <p>We've seen how you can execute commands with a 
  Connection's <I>Execute </I>method and retrieve a set of 
  records using a Recordset's <I>Open </I>method. You can 
  write many useful applications with just those two simple techniques, but you 
  need the power of the Command object for more demanding tasks. Command objects 
  are the best choice when you want to run parameterized queries and are the 
  only viable solution when you want to call stored procedures with parameters 
  and return values.</P>
<A NAME="636">  <h3>Action commands</H3></A>

<p>A Command object represents a command that you intend 
  to perform on a data source. You need an open connection to actually perform 
  the command, but you don't need to have it available when you create the 
  Command object. In other words, you can create a stand-alone Command and set 
  its properties and then associate it with an open Connection object through 
  the Command's <I>ActiveConnection</I> property, which 
  works similarly to the Recordset property of the same name. Here's an example 
  of a simple Command that performs an UPDATE SQL statement on the Publishers 
  table of the Pubs SQL Server's sample database:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Prepare the Command object's properties.
Dim cmd As New ADODB.Command
cmd.CommandText = "UPDATE Publishers SET city = 'London' " _
    &amp; "WHERE Pub_ID = '9999'"
cmd.CommandTimeout = 10
cmd.CommandType = adCmdText          ' This saves ADO some work.

' When you're ready, open the connection and fire the command.
Dim cn As New ADODB.Connection
Dim recs As Long
cn.Open "Provider=sqloledb;Data source=p2;user id=sa;initial catalog=pubs"
Set cmd.ActiveConnection = cn
cmd.Execute recs
Print "RecordsAffected = " &amp; recs
</PRE></TD></TR></TABLE></P>
  <p>Alternatively, you can assign a string to the 
  Command's <I>ActiveConnection </I>property, in which case 
  ADO creates an implicit Connection object for you. I recommend that you not 
  use this latter technique because it gives you little control on the 
  Connection itself&#8212;for example, you can't trap events from it&#8212;but here's an 
  example of this technique for those of you who like concise code:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>cmd.ActiveConnection = "Provider=sqloledb;Data Source=p2;User Id=sa;" _
    &amp; "Initial Catalog=pubs"
cmd.Execute recs
</PRE></TD></TR></TABLE></P>
<A NAME="637">  <h3>Row-returning queries</H3></A>  <p>You can use a Command object to run a row-returning 
  query in three distinct ways. They're equivalent, and you can choose one 
  depending on the particular task or your coding style. In the first technique, 
  you simply assign a Recordset object the return value of a Command's <I>
  Execute </I>method:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' This code assumes that Command's properties have been set correctly.
Dim rs As ADODB.Recordset
cmd.CommandText = "SELECT * FROM Publishers WHERE country = 'USA'"
Set rs = cmd.Execute
' At this point, the Recordset is already open.
</PRE></TD></TR></TABLE></P>
  <p>Using the second technique, you assign the Command 
  object to a Recordset's <I>Source </I>property, as in the 
  following code:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Set rs.Source = cmd
rs.Open
</PRE></TD></TR></TABLE></P>
  <p>The third technique is the most concise of the 
  group:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>rs.Open cmd
</PRE></TD></TR></TABLE></P>
  <p>When you pass a Command object to a Recordset's <I> 
  Open </I>method, the Recordset inherits the Command's 
  active connection. For this reason, if you also pass a distinct Connection 
  object or a connection string to the <I>Open </I>method, 
  an error occurs. You also get an error if you pass a Command object that isn't 
  associated with an open connection. After you have associated a Command with a 
  Recordset, you can get a reference to the original Command using the 
  Recordset's <I>ActiveCommand </I>property. Don't try to 
  assign a Command to this property, however, because it's read-only.</P>
<A NAME="638">  <h3>Parameterized commands and queries</H3></A>  <p>In the code you've seen so far, there is no advantage 
  in using Command objects instead of plain SQL commands. The real power of 
  these objects becomes apparent when the command or the query contains one or 
  more parameters. For example, let's say that you often have to select 
  publishers in a given country. This is how you can prepare such a query using 
  a Command object:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cmd As New ADODB.Command, rs As ADODB.Recordset
cmd.ActiveConnection = "Provider=sqloledb;Data source=p2;user id=sa;" _
    &amp; "initial catalog=pubs"
' Use question marks as placeholders for parameters.
cmd.CommandText = "SELECT * FROM Publishers WHERE country = ?"
' You can pass CommandType as the Execute's third argument.
Set rs = cmd.Execute(, "USA", adCmdText)
</PRE></TD></TR></TABLE></P>
  <p>When you create multiple parameters, you must pass 
  their values in an array of Variants, which you can do using an <I>Array </I>function:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>cmd.CommandText = "SELECT * FROM Publishers WHERE country = ? " _
    &amp; " AND Pub_Name LIKE ?"
' Note that the LIKE operator follows the SQL Server syntax.
Set rs = cmd.Execute(, Array("USA", "N%"), adCmdText)
</PRE></TD></TR></TABLE></P>
  <p>You can write more elegant code if you assign 
  parameters' values through the Parameters collection:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>cmd.Parameters.Refresh            ' Create the collection (optional).
cmd.Parameters(0) = "USA"
cmd.Parameters(1) = "N%"
Set rs = cmd.Execute()
</PRE></TD></TR></TABLE></P>
  <p>The Parameters collection's <I>
  Refresh </I>method is optional because as soon as you 
  reference any property or method of the collection (except <I>
  Append</I>), ADO parses the query text and builds the 
  collection for you, at the expense of some overhead. Fortunately, it isn't 
  difficult to create the collection yourself and save this overhead, using the 
  Command's <I>CreateParameter </I>method:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Create the collection of parameters. (Do this only once.)
With cmd.Parameters
    .Append cmd.CreateParameter("Country", adChar, adParamInput, 20)
    .Append cmd.CreateParameter("Name", adChar, adParamInput, 20)
End With
' Assign a value to parameters.
cmd.Parameters("Country") = "USA"
cmd.Parameters("Name") = "N%"
Set rs = cmd.Execute()
</PRE></TD></TR></TABLE></P>
  <p>The Command object's <I> 
  Prepared</I> property plays a key role in optimizing your 
  parameterized queries. If this property is True, ADO creates a temporary 
  stored procedure on the server the first time you invoke the <I> 
  Execute </I>method of the Command object. This adds a 
  little overhead to the first execution, but it noticeably speeds up all 
  subsequent calls. The temporary stored procedure is automatically deleted when 
  the connection is closed. One note: By tracing SQL calls, I found that this 
  property doesn't work very well with SQL Server 6.5 SP3 or earlier.</P>
<A NAME="639">  <h2>Using the DataEnvironment Designer</H2></A>  <p>You can greatly simplify your coding by using 
  Connection and Command objects defined at design time through the 
  DataEnvironment designer. As you'll see in a moment, the amount of necessary 
  code is dramatically reduced because most of the properties of these objects 
  can be set interactively at design time, using a RAD approach that isn't 
  conceptually different from what you routinely do with forms and controls.</P>
<A NAME="640">  <h3>Connections and commands</H3></A>  <p>You can use a reference to a Connection object to open 
  a database, start a transaction, and so on. In many cases, however, you don't 
  even need to explicitly open a connection because the run-time instance of the 
  DataEnvironment will do it for you whenever you reference a Command object 
  that's a child of that connection. In practice, you reference a Connection 
  only if you need to set some of its properties&#8212;for example, the user name and 
  the password:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' This code assumes that Data Environment1 has a Connection object named "Pubs"
' and a Command object named ResetSalesReport under it.
Dim de As New DataEnvironment1
de.Pubs.Open userid:="sa", Password:="mypwd"
de.ResetSalesReport
</PRE></TD></TR></TABLE></P>
  <p>Remember that you can decide whether a login dialog 
  box is shown to the user by setting the <I> 
  RunPromptBehavior</I> property appropriately. All the 
  Command objects you have defined at design time become methods of the 
  DataEnviromment. The following code example directly executes the Command 
  object, without first explicitly opening the Connection because all the login 
  information has been specified at design time:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' You can hardly write code more concise than this!
DataEnvironment1.ResetSalesReport
</PRE></TD></TR></TABLE></P>
  <p>The previous two code snippets differ significantly in 
  this respect: The former explicitly creates an instance&#8212;named <I>de</I>&#8212;of the DataEnvironment1 designer, while the 
  latter uses its global name. It turns out that Visual Basic manages 
  DataEnvironment designers a bit like form designers, in that you can use the 
  class name as a variable. (This detail is covered in <a href="#A53">Chapter 9</a>.) Keep this in 
  mind because you might accidentally create more instances of the designer 
  without realizing that you're wasting memory and resources. </P>
  <p>At run-time, the DataEnvironment designer object 
  exposes three collections: Connections, Commands, and Recordsets. You can use 
  them to let your users select the query they want to run against the 
  database:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Fill a list box with the names of all supported Commands.
' BEWARE: just referencing the Commands collection opens the connection.
Dim cmd As ADODB.Command
For Each cmd In DataEnvironment1.Commands
    List1.AddItem cmd.Name
Next
</PRE></TD></TR></TABLE></P>
<A NAME="641">  <h3>Recordsets</H3></A>  <p>An instance of the designer exposes a collection of 
  Connections and Commands and also exposes one Recordset object for each 
  Command that returns a result set. The name of this Recordset is formed using 
  the <I>rs</I> prefix followed by the name of the Command 
  that generates it. For example, if you have defined a Command object named 
  Authors that performs a query, the DataEnvironment object will also expose a 
  property named <I>rsAuthors </I>of type Recordset. By 
  default, this Recordset is closed, so before using it you need to run the 
  associated Command:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Fill a list box with authors' names.
Dim de As New DataEnvironment1
de.Authors                      ' Run the query.
Do Until de.rsAuthors.EOF
    List1.AddItem de.rsAuthors("au_fname") &amp; " " &amp; de.rsAuthors("au_lname")
    de.rsAuthors.MoveNext
Loop
de.rsAuthors.Close
</PRE></TD></TR></TABLE></P>
  <p>Alternatively, you can explicitly open the Recordset 
  object. This latter technique is more flexible because you can set the 
  Recordset's properties before opening it:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim rs As ADODB.Recordset
' Get a reference to the Recordset, and open it with an optimistic lock.
Set rs = DataEnvironment1.rsAuthors
rs.Open LockType:=adLockOptimistic
Do Until rs.EOF
    List1.AddItem rs("au_fname") &amp; " " &amp; rs("au_lname")
    rs.MoveNext
Loop
rs.Close
</PRE></TD></TR></TABLE></P>
  <p>Of course, you can declare the <I> 
  rs </I>variable using the <I> 
  WithEvents </I>keyword so that you can trap all the 
  events raised by the Recordset object.</P>
<A NAME="642">  <h3>Parameterized queries</H3></A>  <p>If a Command object expects one or more parameters, 
  you can just pass them after the Command name. To test this feature, create a 
  Command object named AuthorsByState under a Connection object to the Pubs SQL 
  Server database, based on the following query:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>SELECT au_lname, au_fname, address, city, zip, state FROM authors 
    WHERE (state =?)
</PRE></TD></TR></TABLE></P>
  <p>and then run this code:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>DataEnvironment1.AuthorsByState "CA"
' Show the results in a DataGrid control.
Set DataGrid1.DataSource = DataEnvironment1.rsAuthorsByState
</PRE></TD></TR></TABLE></P>
  <p>Things are more complex when you're running a 
  parameterized stored procedure because ADO sometimes is unable to determine 
  the right type for its parameters, and you probably have to adjust what the 
  DataEnvironment designer displays in the Parameters tab of the Command 
  object's Property Pages dialog box. Also, if you're working with SQL Server 
  6.5, be sure that you've installed its Service Pack 4 (which you can find on 
  the Visual Studio CD), which has fixed several problems in this area. Let's 
  say that you need to call an SQL Server stored procedure named <I> 
  SampleStoredProc</I>, which takes one input parameter and 
  one output parameter and has a return value. This is what the Visual Basic 
  documentation suggests:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim outParam As Long, retValue As Long
retValue = DataEnvironment1.SampleStoredProc(100, outParam)
Set DataGrid1.DataSource = DataEnvironment1.rsSampleStoredProc 
Print "Output parameter = " &amp; outParam
Print "Return value = " &amp; retValue
</PRE></TD></TR></TABLE></P>
  <p>I found many problems using this syntax. Even worse, 
  you can't use this approach when you want to omit one or more parameters. To 
  work around these problems, you can resort to the Parameters collection of the 
  ADO Command object. To get a reference to this object, you must query the 
  DataEnvironment's <I>Commands </I>property, as in the 
  following piece of code:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>With DataEnvironment1.Commands("SampleStoredProc")
    ' This is the "royalty" parameter.
    .Parameters(1) = 100                 
    Set DataGrid1.DataSource = .Execute
    ' Retrieve the output parameter.
    Print "Output parameter = " &amp; .Parameters(2)
    ' The return value is always in Parameters(0).
    Print "Return value = " &amp; .Parameters(0)
End With
</PRE></TD></TR></TABLE></P>
  <p>An important point: When you use the Commands 
  collection to retrieve the ADO Command object, you're in a sense bypassing the 
  Recordset-returning mechanism offered by the DataEnvironment designer. For 
  this reason, you can retrieve the Recordset only by reading the return value 
  of the <I>Execute</I> method, and you can't rely on the 
  <I>rsSampleStoredProc </I>property of the designer. 
  Finally, you can also pass input parameters directly to the <I>
  Execute </I>method and retrieve output parameters and 
  return values using the Parameters collection:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim recordsAffected As Long
With DataEnvironment1.Commands("SampleStoredProc")
    ' The array of parameters passed to the Execute method must account for
    ' the return value, which is always the first parameter.
    Set DataGrid1.DataSource = .Execute(recordsAffected, Array(0, 100))
    Print "Output parameter = " &amp; .Parameters(2)
    Print "Return value = " &amp; .Parameters(0)
End With
</PRE></TD></TR></TABLE></P>
<A NAME="643">  <h3>Reusable modules</H3></A>  <p>Up to this point, I've illustrated the virtues of the 
  DataEnvironment designer to create Connection, Command, and Recordset objects 
  that you can use from code without having to define them at run time. However, 
  you shouldn't forget that you can also write code <I> 
  inside </I>the designer itself. This code might respond 
  to events raised by the Connection and Recordset objects created by the 
  DataEnvironment itself. In addition, you can add public properties, methods, 
  and events as you can do with any type of class module. These capabilities let 
  you encapsulate some complex programming logic inside a DataEnvironment module 
  and reuse it in many other applications.</p>
  <p> One possible use for such public 
  properties is to offer meaningful names for the parameters that you should 
  pass to a Command's Parameters collection, as in the following code:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Inside the DataEnvironment module
Public Property Get StateWanted() As String
    StateWanted = Commands("AuthorsByState").Parameters("State")
End Property

Public Property Let StateWanted(ByVal newValue As String)
    Commands("AuthorsByState").Parameters("State") = newValue
End Property
</PRE></TD></TR></TABLE></P>
  <p>Here's another example&#8212;a property named <I> 
  InfoText</I>, which gathers all the output coming from 
  the Connection's <I>InfoMessage </I>event:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private m_InfoText As String

Public Property Get InfoText() As String
    InfoText = m_InfoText
End Property

Public Property Let InfoText(ByVal newValue As String)
    m_InfoText = newValue
End Property

' Add a new text line to the InfoText property.
Private Sub Connection1_InfoMessage(ByVal pError As ADODB.Error, _
    adStatus As EventStatusEnum, ByVal pConnection As ADODB.Connection)
    m_InfoText = m_InfoText &amp; "pError = " &amp; pError.Number &amp; " - " &amp; _
        pError.Description &amp; vbCrLf
End Sub
</PRE></TD></TR></TABLE></P>
<A NAME="644">  <h3>The dark side of the DataEnvironment object</H3></A>  <p>I was thrilled when I first saw the DataEnvironment 
  object in action, and I think I have expressed my enthusiasm many times in 
  these pages. But it wouldn't be fair if I failed to mention that the 
  DataEnvironment designer still has a few serious problems, which sometimes 
  prevent it from being used in production applications. Here's a brief list of 
  my disappointing discoveries:</P>
  <UL>
    <p>
    <li>The DataEnvironment isn't very good at dealing with 
    parameterized stored procedures, especially those that take output 
    parameters and return a value. In particular, sometimes you can't call these 
    procedure using the Command's name as a method of the DataEnvironment 
    object&#8212;as in the <I>
    DataEnvironment1.SampleStoredProc</I> example I showed 
    you previously&#8212;and you're forced to pass parameters through the Command's 
    Parameters collection. 
    </li></P>
    <p>
    <li>When you use the DataEnvironment designer as a data 
    source for one or more bound controls, you can't rely on the automatic 
    connection mechanism provided by the DataEnvironment. In fact, if the 
    connection fails, no error is returned to the program: You'll just find no 
    data in bound controls and won't be given a clue about what went wrong. If 
    the Connection object's <I>RunPromptBehavior 
    </I>property is set to adPromptNever (the preferred setting for most 
    real-world applications), your users have no way to correct the problem. For 
    this reason, you should always test to see whether the connection is open in 
    the <I>Form_Load </I>event procedure, as in this code: 
    </li></P>
    <p>
    <table cellPadding=5 width="95%">
      
      <tr>
        <td><pre>Private Sub Form_Load()
    If (DataEnv1.Connection1.State And adStateOpen) = 0 Then
        ' In a real application you'll do something smarter
        ' than just showing a message box.
        MsgBox "Unable to open the connection", vbCritical
    End If
End Sub
</PRE></TD></TR></TABLE></P>
    <P>
    <li>In general, you can't be sure that the data source 
    path entered at design time will match your users' directory structures. So 
    you must provide a means of configuring the application with the correct 
    path&#8212;by reading it from a Registry or an INI file, for example&#8212;and then 
    enforcing it before showing data coming from the database, as in the 
    following code:</li></p> 
    <p>
    <table cellPadding=5 width="95%">
      
      <tr>
        <td><pre>Private Sub Form_Load()
    If (DataEnv1.Connection1.State And adStateOpen) = 0 Then
        Dim conn As String
        conn = "Provider=Microsoft.Jet.OLEDB.3.51;"_
            &amp; "Data Source=???"
        ' ReadDataBasePathFromINI is defined elsewhere.
        conn = Replace(conn, "???", ReadDataBasePathFromINI())
        DataEnv1.Connection1.ConnectionString = conn
        DataEnv1.Connection1.Open
    End If
End Sub
</PRE></TD></TR></TABLE></P>
    <p>
    <li>Under some circumstances, the DataEnvironment 
    object opens more connections than it really needs. For example, if you have 
    two or more instances of the same DataEnvironment designer, each instance 
    opens a distinct connection. If you don't pay attention to this behavior, 
    you might easily consume all the available connections, especially if you're 
    working with SQL Server Developer Edition (which allows a lower number of 
    connections than the "real" product). 
    </li></P>
    <p>
    <li>While the DataEnvironment designer behaves like a 
    class module in most regards, its implementation shows a few dangerous 
    quirks. For example, I found that if you use the global DataEnvironment 
    instance to implicitly open a Connection, that connection is <I>
    never </I>closed while the program is executing. More 
    precisely, a trip to the SQL Server trace confirms that the connection is 
    indeed closed, but this seems to happen after the program has already 
    terminated its execution. It's a minor detail, but it implies that you can't 
    rely on the Connection's <I>Disconnect</I> event to 
    execute your cleanup code. Even more inexplicable is this: The global 
    DataEnviroment instance doesn't even receive a <I> 
    Terminate </I>event, as all objects do when the 
    application terminates, so you can't count on this event to close the 
    connection in an orderly way. This bug manifests itself both in the IDE and 
    in compiled programs.</LI></P></UL>
  <p>The bottom line is this: Don't blindly assume that the 
  DataEnvironment designer will work as expected, and always test its behavior 
  in "extreme" conditions, such as when connections aren't guaranteed or are 
  scarce.</P>

<a name="A93"></a><h3>7.2.3 Advanced Techniques</h3>

<A HREF="#A92">[Previous]</A> <A HREF="#A94">[Next]</A><P>

<A NAME="645">  <h1>Advanced Techniques</H1></A>  <p>Now that you're familiar with the basic techniques for 
  data retrieval in ADO, let's tackle a few advanced topics, such as 
  asynchronous operations and hierarchical Recordsets.</P>
<A NAME="646">  <h2>Recordset Events</H2></A>  <p>If you've worked with RDO, you might believe that you 
  need to cope with events only when you're performing asynchronous operations. 
  The truth is that, while events play a pivotal role in asynchronous 
  operations, they can be useful on many other occasions. In fact, ADO fires 
  events whether or not the operation is asynchronous. I illustrate asynchronous 
  queries and fetch operations in the next section, but here I want to introduce 
  a few Recordset events that you might find useful when doing synchronous 
  operations.</P>
  <p>The Recordset object exposes 11 events, comprising 4 
  pairs of <I>Will/Complete </I>events plus the <I> 
  FetchProgress</I>, <I> 
  FetchComplete</I>, and <I>
  EndOfRecordset </I>events. The Visual Basic documentation 
  isn't very helpful, and you can learn how events really work only by writing 
  sample code or playing with the ADO Workbench program introduced in <a href="#A82">Chapter 13</a>. I had to do both to discover a few undocumented (or 
  insufficiently-documented) bits of information about events. For example, I 
  found that ADO sometimes fires more events than I expected, as I'll show in a 
  moment. First, let's start with the basics. </P>
  <p>ADO can fire the following pairs of <I>
  Will/Complete </I>Recordset's events:</P>
  <UL>
    <p>
    <li>A <I> 
    WillChangeField/FieldChangeComplete </I>pair of events 
    when you modify the value of a field using the Field object (but not when 
    you're using an SQL command or stored procedure). 
    </li></P>
    <p>
    <li>A <I>
    WillChangeRecord/RecordChangeComplete </I>pair of 
    events when an operation modifies one or more records&#8212;for example, as a 
    consequence of an <I>Update</I>, <I> 
    UpdateBatch</I>, <I>AddNew, </I>or 
    <I>Delete </I>method. 
    </li></P>
    <p>
    <li>A <I>WillMove/MoveComplete 
    </I>pair of events when another record becomes the current record. It can be 
    caused by a <I>Move</I>xxxx, <I> 
    Open</I>, <I>AddNew</I>, or <I> 
    Requery </I>method, or an assignment to the <I> 
    Bookmark or AbsolutePage </I>property. 
    </li></P>
    <p>
    <li>A <I>
    WillChangeRecordset/RecordsetChangeComplete </I>pair of 
    events when an operation affects the entire Recordset&#8212;for example, an <I>
    Open</I>, <I>Requery</I>, or <I>
    Resync </I>method. 
    </LI></P></UL>
  <p>While the syntax of these events differs, they have a 
  lot in common. For example, all of them receive an <I>
  adStatus </I>parameter. On entry to a <I>
  Will</I>xxxx event, the <I>adStatus 
  </I>parameter can be adStatusOK or adStatusCantDeny: In the former case, you 
  can set it to adStatusCancel if you want to cancel the operation that causes 
  the event. All xxxx<I>Complete</I> events receive the <I>
  adStatus</I> parameter and a <I> 
  pError </I>parameter containing information about errors 
  that have occurred.</P>
<A NAME="647">  <h3>Field validation</H3></A>  <p>The ability to cancel the operation that caused the 
  event is especially useful when you want to validate the value of a field: 
  Instead of spreading the validation code all over the program, you just write 
  it in the <I>WillChangeField </I>event. This event 
  receives the number of fields in the <I>cFields 
  </I>parameter and an array of Field objects in the <I> 
  Fields</I> parameter. The following code example shows 
  how you can use this event to validate values being stored in fields:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub rs_WillChangeField(ByVal cFields As Long, 
    ByVal Fields As Variant, adStatus As ADODB.EventStatusEnum, 
    ByVal pRecordset As ADODB.Recordset)
    Dim fld As ADODB.Field, i As Integer
    ' If we can't cancel this event, there's no point in
    ' validating fields.
    If adStatus = adStatusCantCancel Then Exit Sub
    ' Note that we can't use a For Each loop.
    For i = 0 To UBound(Fields)
        Set fld = Fields(i)
        Select Case fld.Name
            Case "FirstName", "LastName"
                ' These fields can't be empty strings or Null.
                If (fld.Value &amp; "") = "" Then adStatus = adStatusCancel
            Case "GrandTotal"
                ' This field must be positive.
                If fld.Value &lt; 0 Then adStatus = adStatusCancel
            ' Add Case blocks for other fields here.
        End Select
    Next
End Sub
</PRE></TD></TR></TABLE></P>
  <p>The <I>WillChangeField </I>event 
  fires also if you're assigning the same value that is already contained in the 
  field. You can probably save ADO some time&#8212;especially on networks with a 
  narrow bandwidth&#8212;if you catch this case and cancel the operation. Just keep 
  in mind that the main program should be ready to deal with the error 
  &amp;H80040E4E: &quot;The change was canceled during notification; no columns are 
  changed.&quot;</P>
  <p>It would be great if you could trap incorrect values 
  and fix them in the <I>WillChangeField </I>event 
  procedure. Unfortunately, it seems impossible to <I> 
  modify </I>the value of a field within this event: You 
  can only accept or reject the value set by the main program. This event 
  receives multiple fields when the main program has called an <I>
  Update </I>method with a list of fields' names and 
  values. You don't really need the <I>cFields 
  </I>parameter because you can use <I>UBound(Fields)+1</I> 
  instead.</P>
  <p>The <I>FieldChangeComplete 
  </I>event has limited use, at least as far as field validation is concerned. 
  You might use it to update values on screen if you aren't using bound 
  controls. If you're using bound controls, you might want to use this event to 
  update other (unbound) controls that contain calculated values. Be aware, 
  however, that this event&#8212;and all the xxxx<I>Complete</I> 
  events, for that matter&#8212;fires even if the corresponding operation was 
  canceled by the program or because of an error raised by ADO. For this reason, 
  you should always check the <I>adStatus </I>parameter 
  first:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub rs_FieldChangeComplete(ByVal cFields As Long, _
    ByVal Fields As Variant, ByVal pError As ADODB.Error, 
    adStatus As ADODB.EventStatusEnum, ByVal pRecordset As ADODB.Recordset)
    If adStatus &lt;&gt; adStatusErrorsOccurred Then
        ' Update your unbound controls here.
    End If
End Sub
</PRE></TD></TR></TABLE></P>
  <p>If you have absolutely no use for this event, you can 
  (slightly) improve execution speed by asking ADO not to fire it again:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub rs_FieldChangeComplete(&amp; )
    ' This event will be invoked only once.
    adStatus = adStatusUnwantedEvent
End Sub
</PRE></TD></TR></TABLE></P>
<A NAME="648">  <h3>Record validation</H3></A>  <p>In general, individual field validation isn't 
  sufficient to ensure that the database contains valid data. As a rule, you 
  need to validate all fields just before the record is written to the database. 
  This is the ideal job for the <I>WillChangeRecord</I> 
  event.</P>
  <p>On entry to this event, <I>adReason </I>holds a 
  value that indicates why the record is being changed, and <I>
  cRecords</I> holds the number of affected records. (For a 
  list of values that <I>adReason </I>can receive, see 
  Table 13-4 in <a href="#A82">Chapter 13</a>.) The first time you update a field in the current 
  record, ADO fires a <I>WillChangeRecord </I>event (and 
  its <I>RecordChangeComplete </I>companion event) with <I>
  adReason </I>set to adRsnFirstChange, to give you the 
  opportunity to prepare for a record update (and possibly reject it). When the 
  record is ready to be written to the database, ADO fires another <I>  WillChangeRecord/RecordChangeComplete </I>pair of events, 
  this time with a more specific value in <I>adReason</I>. 
  You should take values in Table 13-4 with a grain of salt, however. For 
  example, I noticed that even if the record is updated because of a <I>  MoveNext</I> method, the<I> 
  WillChangeRecord </I>event receives <I>adReason </I>equal 
  to adRsnUpdate. This is the implicit <I>Update </I>method 
  that ADO invokes for you when you change one or more fields and then move to 
  another record.</P>
  <p>Inside the <I>WillChangeRecord 
  </I>event, you can't modify the value of the Recordset's fields, so you can't 
  use this event to provide default values to fields, automatically fix invalid 
  values, force to uppercase or lowercase, and so on. You can only test the 
  fields' values and reject the update operation as a whole if you find some 
  value incorrect or incomplete. Because of the extra event fired when the first 
  field is being modified, you must always test the value of the <I> 
  adReason </I>parameter:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub rs_WillChangeRecord(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal cRecords As Long, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
    If adReason &lt;&gt; adRsnFirstChange Then
        ' These two fields can't both be empty strings.
        If rs("CustAddress") = "" And rs("ShipAddress") = "" Then
            adStatus = adStatusCancel
        End If
    End If
End Sub
</PRE></TD></TR></TABLE></P>
<A NAME="649">  <h3>Displaying data with unbound controls</H3></A>  <p>If your application displays data without using bound 
  controls, you must write the code that retrieves data from the Recordset and 
  shows it on screen as well as code that moves data from a control to the 
  database. Typically, you use the <I>WillMove </I>event to 
  move data from controls to the database and use the <I>
  MoveComplete </I>event to move data from the database to 
  controls. Let's start with the latter event, the code for which is shown here.</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Assumes that the form contains two TextBox controls.
Private Sub rs_MoveComplete(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal pError As ADODB.Error, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
    ' Move data from the Recordset to on-screen controls.
    txtFirstName.Text = rs("FirstName")
    txtLastName.Text = rs("LastName")
    ' Clear the controls' "modified" flag.
    txtFirstName.DataChanged = False
    txtLastName.DataChanged = False
End Sub
</PRE></TD></TR></TABLE></P>
  <p>As you see in the preceding code snippet, you can use 
  the <I>DataChanged </I>property even in unbound controls. 
  In fact, this property is perfectly functional with regular controls in that 
  Visual Basic automatically sets it to True when the contents of the control 
  changes. The only substantial difference is in how the <I> DataChanged </I>property is reset: When you're using 
  bound controls, Visual Basic resets this property to False automatically, but 
  when you're using unbound controls you must do that manually. You can then 
  test the value of the <I>DataChanged </I>property in the 
  <I>WillMove </I>event to understand whether you really 
  need to move values from the on-screen controls to the database:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub rs_WillMove(ByVal adReason As ADODB.EventReasonEnum, _
    adStatus As ADODB.EventStatusEnum, ByVal pRecordset As ADODB.Recordset)
    ' Move data to Recordset only if user modified the controls' contents.
    If txtFirstName.DataChanged Then rs("FirstName") = txtFirstName.Text
    If txtLastName.DataChanged Then rs("LastName") = txtLastName.Text
End Sub
</PRE></TD></TR></TABLE></P>
  <p>In a more robust implementation of this concept, you 
  should test the <I>adReason </I>parameter and react 
  accordingly. For example, you can decide whether you should save values to the 
  database when the Recordset<I> </I>is being closed. Or 
  you can load default values in controls when the <I>
  MoveComplete </I>event has fired because of an <I>
  AddNew </I>method. Unlike <I>
  WillChangeField </I>and <I>
  WillChangeRecord </I>events, the <I> 
  WillMove </I>event does permit you to assign values to 
  the Recordset's fields, so you can use this event to provide default values or 
  calculated fields:</P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' In the WillMove event
If txtCountry.Text = "" Then rs("country") = "USA"
</PRE></TD></TR></TABLE></P>
<A NAME="650">  <h3>Dealing with multiple events</H3></A>  <p>One single operation on the Recordset fires a lot of 
  (nested) events. For example, the following table shows which events fire 
  because of a simple sequence of methods:</P>
  <P>
  <TABLE cellPadding=5 width="95%">
    
    <TR>
      <th><i>Method</i></th>
      <th><i>Events&nbsp;</i></th></TR>
    <TR>
      <TD noWrap vAlign=top>rs.Open </TD>
      <TD vAlign=top>WillExecute<br> 
        WillMove (adReason = adRsnMove)<br>
        MoveComplete (adReason = adRsnMove)<br> 
        ExecuteComplete</TD></TR>
    <TR>
      <TD noWrap vAlign=top>rs("FirstName") = "John" </TD>
      <TD vAlign=top>WillChangeRecordset (adReason = 
        adRsnMove)<br>RecordsetChangeComplete (adReason = 
        adRsnMove)<br>WillMove (adReason = adRsnMove)<br> 
        MoveComplete (adReason = adRsnMove)<br>
        WillChangeRecord (adReason = adRsnFirstChange)<br>
        WillChangeField <br>
        FieldChangeComplete RecordChangeComplete (adReason 
        = adRsnFirstChange) </TD></TR>
    <TR>
      <TD noWrap vAlign=top>rs("LastName") = "Smith" </TD>
      <TD vAlign=top>WillChangeField<br>
        ChangeFieldComplete</TD></TR>
    <TR>
      <TD noWrap vAlign=top>rs.MoveNext </TD>
      <TD vAlign=top>WillMove (adReason = 
        adRsnMoveNext)<br>WillChangeRecord (adReason = 
        adRsnUpdate)<br>RecordChangeComplete (adReason = 
        adRsnUpdate)<br>WillChangeRecordset (adReason = 
        adRsnMove)<br>RecordsetChangeComplete (adReason = 
        adRsnMove)<br>MoveComplete (adReason = 
        adRsnMoveNext) </TD></TR></TABLE></P>
  <p>For the most part, the preceding sequence is clear and 
  reasonable. It offers, however, a few surprises. For example, the <I> 
  MoveNext </I>method fires a <I>
  WillChangeRecordset/RecordsetChangeComplete </I>pair of 
  events. This shouldn't happen, according to the Visual Basic documentation. 
  There's some evidence that this extra pair of events has to do with ADO 
  filling the local cache. In fact, if you set <I>CacheSize 
  </I>to a value greater than 1&#8212;say 4&#8212;these events are fired every four <I> 
  MoveNext </I>operations. In other words, each time ADO 
  refills the local cache it rebuilds the Recordset object. Store this 
  information somewhere in your long-term memory&#8212;someday it might prove 
  useful.</P>
  <p>Other events can't be explained so easily. For 
  example, why does the assignment to the <I>FirstName</I> 
  field fire an extra <I>WillMove/MoveComplete </I>pair of 
  events? After all, the first record is already the current record, isn't it? 
  Honestly, I can't answer this one. Just pay attention to what code you write 
  inside <I>WillMove</I> and <I> 
  MoveComplete </I>events because it might execute more 
  often than you expect.</P>
  <p>See what happens to the previous sequence if you 
  cancel one event. For example, if you set <I>adStatus 
  </I>to adStatusCancel in the <I>WillMove </I>event that 
  immediately follows the <I>MoveNext </I>method, all the 
  other events are suppressed and ADO fires only the matching <I> 
  MoveComplete </I>event. On the other hand, if you cancel 
  the command in the <I>WillChangeRecord </I>event, ADO 
  suppresses only the <I>WillChangeRecordset</I>/<I>
  RecordsetChangeComplete </I>pair of events. In general, 
  after you set <I>adStatus </I>to adStatusCancel, this 
  value goes unmodified through all the subsequent events, until the error is 
  returned to the main program.</P>
<A NAME="651">  <h2>Asynchronous Operations</H2></A>  <p>ADO offers several types of asynchronous operations, 
  all of which help to make your application more responsive to the user. I 
  already showed that you can set up an asynchronous connection, so it's time to 
  see how you can execute a lengthy command without having your code wait until 
  ADO completes it. </P>
<A NAME="652">  <h3>Asynchronous commands</H3></A>  <p>The simplest form of asynchronous operation is a 
  command performed through the Connection object. In this case, all you have to 
  do is pass the adAsyncExecute value to the <I>Options 
  </I>argument of the Connection's <I>Execute </I>method, 
  as in the following example: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, recs As Long
cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=E:\Microsoft Visual Studio\VB98\Biblio.mdb"
cn.Execute "DELETE FROM Publishers WHERE State = 'WA'", _
    recs, adAsyncExecute
Debug.Print recs &amp; " records affected"        ' Displays _1.
</PRE></TD></TR></TABLE></P>
  <p>When you run a command in this way, ADO fires a <I> 
  WillExecute </I>event before returning the control to the 
  statement that follows the <I>Execute </I>statement. 
  Because the command hasn't completed yet, the <I>recs 
  </I>variable receives the special value -1. This is the syntax of the <I>
  WillExecute </I>event: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub cn_WillExecute(Source As String, _
    CursorType As ADODB.CursorTypeEnum, LockType As ADODB.LockTypeEnum, _
    Options As Long, adStatus As ADODB.EventStatusEnum, _
    ByVal pCommand As ADODB.Command, ByVal pRecordset As ADODB.Recordset, _
    ByVal pConnection As ADODB.Connection)
    MsgBox "About to execute command " &amp; Source
End Sub
</PRE></TD></TR></TABLE></P>
  <p>Because all arguments are passed by reference, you can 
  modify them if it makes sense to do so. You can also cancel the command, by 
  setting the <I>adStatus </I>parameter to the value 
  adStatusCancel<I>,</I> unless it's already set to the 
  value adStatusCantDeny: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Put this code inside the WillExecute event.
If adStatus &lt;&gt; adStatusCantDeny Then
    If MsgBox("About to execute statement " &amp; Source &amp; vbCr &amp; "Confirm?", _
        vbYesNo + vbInformation) = vbNo Then
        adStatus = adStatusCancel
    End If
End If
</PRE></TD></TR></TABLE></P>
  <p>When the ADO completes the command, an <I> 
  ExecuteComplete </I>event fires, with the actual number 
  of affected records in its first parameter: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Private Sub cn_ExecuteComplete(ByVal RecordsAffected As Long, _
    ByVal pError As ADODB.Error, adStatus As ADODB.EventStatusEnum, _
    ByVal pCommand As ADODB.Command, ByVal pRecordset As ADODB.Recordset, _
    ByVal pConnection As ADODB.Connection)
    If adStatus = adStatusOK Then
        MsgBox "Execution of the command has been completed" &amp; vbCr _
            &amp; RecordsAffected &amp; " record(s) were affected", vbInformation
    ElseIf adStatus = adStatusErrorsOccurred Then
        MsgBox "Execution error: " &amp; pError.Description, vbCritical
    End If
End Sub
</PRE></TD></TR></TABLE></P>
  <p>In the<I> WillExecute </I>event, 
  you can determine whether you're executing a row-returning command by checking 
  the value in <I>CursorType </I>or <I> 
  LockType</I>: If either contains -1, this is an action 
  command. When the <I>ExecuteComplete </I>event fires 
  because of a Recordset's <I>Open </I>statement, you find 
  a reference to the Recordset object in <I>pRecordset</I>, 
  which isn't very exciting because you already have a reference to the 
  Recordset being opened. The <I>pRecordset </I>parameter 
  is more useful when you complete a row-returning <I> 
  Execute </I>command of a Connection's object because it 
  contains the results of the query. So, for instance, you can assign it to an 
  ADO Data control or process it in any way you prefer. </P>
  <p>As you would expect, the <I>
  pCommand </I>parameter in the <I> 
  WillExecute</I> event contains a reference to a Command 
  object if the event has been fired because of a Command's <I>
  Execute </I>method; otherwise, the parameter contains 
  Nothing. Interestingly, even if you aren't using a Command object, ADO 
  manufactures a temporary Command object to perform the query and passes a 
  reference to this temporary object in the <I>pCommand 
  </I>parameter of the <I>ExecuteComplete </I>event. This 
  temporary object lets you retrieve information such as the <I> 
  Source </I>string, which isn't otherwise available after 
  the query has completed: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' In the ExecuteComplete event
' The next statement works with *any* type of command or query.
Debug.Print "Statement " &amp; pCommand.CommandText &amp; " has been completed"
</PRE></TD></TR></TABLE></P>
  <p>A more interesting (and advanced) use for this 
  capability is repeating a command or a query that failed, for example, because 
  of a timeout. In a situation like this, you simply run the Command object's <I> 
  Execute </I>method and pay some attention to reentrancy 
  problems. </P>
  <div class=tip>
  <blockquote><B>TIP</B>
    <hr>
     While the database is executing the command, your application can continue 
    its execution as usual. If you need to know whether the operation has 
    completed, you might set a global flag from the <I>
    ExecuteComplete </I>event or, more simply, test the 
    Connection's <I>State</I> property. Because this 
    property is a bit field, you should use the AND operator, as in the 
    following line of code: 
    <p>
    <table>
      
      <tr>
        <td><pre>If cn.State And adStateExecuting Then. . .</PRE></TD></TR></TABLE></P>
    <p>When you're working with SQL Server databases, you 
    should be aware that you can generally execute multiple asynchronous 
    commands only if there's no pending transaction and the active command is an 
    action query or is a recordset-returning query that creates a client-side 
    cursor. If these conditions are met, SQL Server silently creates a new 
    connection to serve the new command; otherwise, an error occurs. 
  </P></BLOCKQUOTE></DIV>
<A NAME="653">  <h3>Asynchronous fetches</H3></A>  <p>ADO gives you an additional degree of control over 
  asynchronous queries with the adAsyncFetch value. You can pass this value to a 
  Connection's <I>Execute </I>method and to a Recordset's 
  <I>Open </I>or <I>Requery 
  </I>methods. While the adAsyncExecute value tells ADO that the query should be 
  performed asynchronously, the adAsyncFetch value informs ADO that it should 
  fetch data from the data source to the Recordset in asynchronous mode. 
  Accordingly, ADO executes the query and immediately fills the local cache with 
  the first group of result records and then fetches all remaining records 
  asynchronously. </P>
  <P>If the fetch operation takes some time, ADO fires a <I>
  FetchProgress </I>event, which you can use to display a 
  progress bar to your end users. When the fetch is complete, ADO fires a <I>
  FetchComplete </I>event. For more information about the 
  adAsyncFetch and adAsychFetchNonBlocking options, see the description of the 
  Command's <I>Execute </I>method in <a href="#A82">Chapter 13</a>. </P>
<A NAME="654">  <h2>Stored Procedures</H2></A>  <p>Client/server applications based on SQL Server or 
  Oracle implement much of their functionality using <I>
  stored procedures</I>. A stored procedure is a procedure 
  written in the SQL dialect of the hosting database and is compiled to improve 
  execution speed. Stored procedures let the developer enforce better security 
  while improving performance, just to mention a couple of outstanding 
  advantages. As you'll see in a moment, both ADO and Visual Basic 6 Enterprise 
  Edition have a lot to offer when you're working with stored procedures. </P>
<A NAME="655">  <h3>The SQL Editor and the T-SQL Debugger</H3></A>  <p>If you open the DataView window and select a data link 
  to an SQL Server or Oracle database, you'll find a subfolder named Stored 
  Procedures, inside of which is the list of all the stored procedures available 
  for that database. You can open the node corresponding to a stored procedure 
  to see its return value and arguments (if any), and you can double-click on an 
  argument node to see its properties. The property window of a parameter 
  displays the ADO data type for that parameter, which is vital information when 
  you have to create the Parameters collection of the Command object that runs 
  this stored procedure. </P>
  <P>Double-click on the name of a stored procedure to 
  bring up the SQL Editor, which lets you edit a stored procedure without 
  leaving the Visual Basic IDE. You can use this editor to create triggers as 
  well. Curiously, there's a minor bug in this feature's implementation: When 
  you display the SQL Editor, the Data View window's font is changed to match 
  the font in the editor, as you can see in Figure 14-3. 
  It's a rather harmless bug, and I even found a use for it: When I'm teaching a 
  class and someone complains that the DataView window is hardly readable, I 
  bring up the Stored Procedure Editor and immediately close it, just to switch 
  to a larger font. </P>
  <P>As if the integrated editor weren't enough, if you're 
  working with SQL Server (but not with Oracle) you can debug your stored 
  procedures right in the Visual Basic environment. This works even with remote 
  servers and uses OLE Remote Automation to physically connect to the database. 
  You can also use the T-SQL Debugger add-in to execute system or batch stored 
  procedures. The T-SQL Debugger lets you set breakpoints, step in and out of 
  nested procedures, watch local and global variables, display the call stack, 
  and so on. When you're developing a complex application, this feature alone 
  can save you dozens of hours. </P>
  <p>Setting up the TSQL Debugger isn't intuitive, so here 
  are a few tips that should prove useful. First, the debugger works only with 
  SQL Server 6.5 Service Pack 3 or later. (Visual Basic 6 comes with SQL Server 
  6.5 Service Pack 4.) Second, you must tick the SQL Server Debugging option 
  when you're installing BackOffice immediately after you've installed Visual 
  Basic 6 Enterprise Edition. Third, the SQL Server service should be configured 
  to log in as a user with sufficient permissions; logging in as a Windows NT 
  system account won't work. Finally, ensure that OLE Remote Automation is 
  working and correctly configured on your machine. </P>
  <p>You can invoke the editor from the SQL Editor or from 
  the Add-Ins menu if you have installed and activated the T-SQL Debugger 
  add-in. In the latter instance, you have to specify a DSN and the database 
  you're logging in to, as shown in Figure 14-4, but you 
  can also debug batch stored procedures. If you want to debug stored procedures 
  and triggers when they're invoked by your code, select the T-SQL Debugging 
  Options command in the Tools menu and tick the Automatically Step Into Stored 
  Procedures Through RDO And ADO Connections option. (See Figure 14-5.) </P>
<p>
<A HREF="javascript:fullSize('F14ph03x.htm')"> <img src="F14ph03.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."></a>
<p>
<!--caption--><B>Figure 14-3.</B> <I>Visual Basic 6 Enterprise Edition lets you edit SQL Server stored procedures and even debug them.</I><!--/caption--> 




<p>
<A HREF="javascript:fullSize('F14ph04x.htm')"> <img src="F14ph04.JPG" width=404 height=305 border=0 ALT = "Click to view at full size."></a>
<p>
<!--caption--><B>Figure 14-4.</B> <I>The T-SQL Debugger add-in.</I><!--/caption--> 

  
<p>
<img src="F14ph05.GIF" width=402 height=260 border="0">
<p>
<!--caption--><B>Figure 14-5.</B> <i>The T-SQL Debugger Options dialog box. Notice that the timeout value is in milliseconds.</I><!--/caption-->


<A NAME="656">  <h3>Parameterized stored procedures</H3></A>
<p>I've already shown you how you can use ADO Command 
  objects to run parameterized SQL queries and how you can build their 
  Parameters collection or let ADO build them for you. Working with 
  parameterized stored procedures isn't much different, provided that you're 
  alert to some quirks. </P>
  <p>You can let ADO automatically build the Command's 
  Parameters collection. You do this by simply referencing the Parameters 
  collection in code or by issuing an explicit Parameters.Refresh command. This 
  solution has many benefits, including fewer errors in your code because ADO 
  correctly retrieves the names and the types of all the parameters and 
  automatically accounts for the return value by creating a Parameter object 
  whose name is RETURN_VALUE. A particular advantage of this solution is that if 
  you later modify the type of a parameter, you don't have to change your Visual 
  Basic code. Unfortunately, ADO needs a trip to the server to retrieve 
  information about the stored procedure. This extra command is performed only 
  the first time you reference the Parameters collection, however, so in most 
  cases this overhead is negligible as long as you keep the Command object alive 
  for the entire session. A potential problem is that ADO might be confounded by 
  output parameters and mistakenly believe that they're input/output parameters. 
  If this happens, you can simply set the parameter's <I> 
  Direction </I>property to a correct value. Conveniently, 
  this property is read/write even after the parameter has been added to the 
  collection. </P>
  <p>If you want to save ADO a trip to the server, you can 
  build the Parameters<I> </I>collection yourself. The 
  following code example invokes the <I>byroyalty</I> 
  stored procedure that comes with the sample SQL Server Pubs database: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, cmd As New ADODB.Command
Dim rs As ADODB.Recordset
' Establish the connection.
cn.Open "Provider=sqloledb;Data source=p2;user id=sa;initial catalog=pubs"
Set cmd.ActiveConnection = cn
' Define the stored procedure.
cmd.CommandText = "byroyalty"
cmd.CommandType = adCmdStoredProc
' Save ADO some work by creating the parameter yourself.
cmd.Parameters.Append cmd.CreateParameter("@percentage", adInteger, _
    adParamInput)
' Set a value to this parameter, and execute the query.
cmd.Parameters("@percentage") = 100
Set rs = cmd.Execute()
</PRE></TD></TR></TABLE></P>
  <p>When you're manually building the Parameters 
  collection, you must pay attention to an important detail: If the stored 
  procedure returns a value, it must be the first parameter. To see how you can 
  work with return values and output parameters, double-click on the <I>byroyalty</I> stored procedure in the DataView window to 
  bring up the SQL Editor and modify the text of the procedure as follows. 
  (Added or modified code is in boldface.) </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>CREATE PROCEDURE <B>byroyalty2</B> @percentage int<B>, @totalrecs Int Output</B>
AS
<B>select @totalrecs= count(*) from titleauthor </B>
select au_id from titleauthor
where titleauthor.royaltyper = @percentage
<B>return (@@rowcount)</B>
</PRE></TD></TR></TABLE></P>
  <p>Here's the Visual Basic code that prepares the 
  Parameters collection, runs the query, and prints the results: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>cmd.CommandText = "byroyalty2"
cmd.CommandType = adCmdStoredProc
' Create the Parameters collection
With cmd.Parameters
    .Append cmd.CreateParameter("RETVAL", adInteger, adParamReturnValue)
    .Append cmd.CreateParameter("@percentage", adInteger, adParamInput)
    .Append cmd.CreateParameter("@totalrecs", adInteger, adParamOutput)
End With
' Set a value for input parameters, and run the stored procedure.
cmd.Parameters("@percentage") = 100
Set rs = cmd.Execute()
' Dump the contents of the recordset.
Do Until rs.EOF
    Print "Au_ID=" &amp; rs("au_id")
    rs.MoveNext
Loop
rs.Close
' Print the values of the output parameter and the return value.
Print "Records in titleauthor = " &amp; cmd.Parameters("@totalrecs")
Print "Records returned by the query = " &amp; cmd.Parameters("RETVAL")
</PRE></TD></TR></TABLE></P>
  <p>Here are a couple of points worth noting. First, you 
  can use any name for the return value parameter as long as it's the first item 
  in the collection. Second, and most important, you must close the Recordset 
  (or set it to Nothing to have it closed by ADO) before accessing return values 
  and output parameters. This holds true for forward-only, read-only Recordsets 
  returned by SQL Server and can possibly apply to other cursor types and 
  providers. According to official documentation, ADO reads output parameters 
  and the return value only once from the provider, so if you try to read them 
  before they're available you won't have a second chance. </P>
<A NAME="657">  <h3>Multiple result sets</H3></A>  <p>The next great feature of ADO is its ability to work 
  with multiple result sets. In <a href="#A82">Chapter 13</a>, I explained how you can use the <I>NextRecordset </I>method, but here I'll show you 
  practical examples. This is the Visual Basic code that you can use to explore 
  multiple result sets: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' This code assumes that all properties have been correctly initialized.
Set rs = cmd.Execute()
Do Until rs Is Nothing
    If rs.State = adStateClosed Then
        Print "---- Closed Recordset
    Else
        Do Until rs.EOF
            For Each fld In rs.Fields
                Print fld.Name &amp; "="; fld &amp; ", ";
            Next
            Print
            rs.MoveNext
        Loop
        Print "---- End of Recordset"
    End If
    Set rs = rs.NextRecordset
Loop
</PRE></TD></TR></TABLE></P>
  <p>To see how SQL Server and ADO deal with a stored 
  procedure, right-click on the Stored Procedures folder in the DataView window, 
  select the New Stored Procedure menu command, and then enter the following 
  code in the SQL Editor: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Create Procedure PubsByCountry As
Select pub_name From Publishers where country='USA'    
Select pub_name From Publishers where country='France'    
Select pub_name From Publishers where country='Germany'    
Select pub_name From Publishers where country='Italy'    
</PRE></TD></TR></TABLE></P>
  <p>When you run the <I>PubsByCountry</I> stored procedure using the Visual Basic 
  code that I showed you previously, you get the result shown below. </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>pub_name=New Moon Books
pub_name=Binnet &amp; Hardley   
pub_name=Algodata Infosystems             
pub_name=Five Lakes Publishing            
pub_name=Ramona Publishers  
pub_name=Scootney Books     
---- End of Recordset
pub_name=Lucerne Publishing 
---- End of Recordset
pub_name=GGG&amp;G              
---- End of Recordset
---- End of Recordset
</PRE></TD></TR></TABLE></P>
  <p>The last SELECT statement returns a Recordset object 
  that doesn't contain any records. If you then execute the <I>
  NextRecordset </I>method one more time, you get Nothing 
  and the loop exits. Let's see another example of a query that returns multiple 
  Recordsets. This is the source code of the <I>reptq1 
  </I>stored procedure that comes with the Pubs sample database: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>CREATE PROCEDURE reptq1 AS
select pub_id, title_id, price, pubdate from titles
where price is NOT NULL order by pub_id
COMPUTE avg(price) BY pub_id
COMPUTE avg(price)
</PRE></TD></TR></TABLE></P>
  <p>This is the output that the previous routine produces 
  when you execute the <I>reptq1 </I>stored procedure. As 
  you see, the first <I>COMPUTE</I> statement generates a 
  separate Recordset for each publisher, whereas the second <I> 
  COMPUTE</I> statement generates a final Recordset with 
  the average price for all the publishers: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>pub_id=0736, title_id=BU2075, price=2.99, pubdate=6/30/91, 
pub_id=0736, title_id=PS2091, price=10.95, pubdate=6/15/91, 
pub_id=0736, title_id=PS2106, price=7, pubdate=10/5/91, 
pub_id=0736, title_id=PS3333, price=19.99, pubdate=6/12/91, 
pub_id=0736, title_id=PS7777, price=7.99, pubdate=6/12/91, 
---- End of Recordset
avg=9.784, 
---- End of Recordset
pub_id=0877, title_id=MC2222, price=19.99, pubdate=6/9/91, 
pub_id=0877, title_id=MC3021, price=2.99, pubdate=6/18/91, 
pub_id=0877, title_id=PS1372, price=21.59, pubdate=10/21/91, 
pub_id=0877, title_id=TC3218, price=20.95, pubdate=10/21/91, 
pub_id=0877, title_id=TC4203, price=11.95, pubdate=6/12/91, 
pub_id=0877, title_id=TC7777, price=14.99, pubdate=6/12/91, 
---- End of Recordset
avg=15.41, 
---- End of Recordset
pub_id=1389, title_id=BU1032, price=19.99, pubdate=6/12/91, 
pub_id=1389, title_id=BU1111, price=11.95, pubdate=6/9/91, 
pub_id=1389, title_id=BU7832, price=19.99, pubdate=6/22/91, 
pub_id=1389, title_id=PC1035, price=22.95, pubdate=6/30/91, 
pub_id=1389, title_id=PC8888, price=20, pubdate=6/12/94, 
---- End of Recordset
avg=18.976, 
---- End of Recordset
avg=14.7662, 
---- End of Recordset
</PRE></TD></TR></TABLE></P>
  <p>In theory, you might retrieve multiple result sets and 
  assign them to different Recordset variables, or at least the syntax of the <I> 
  NextRecordset </I>method seems to make it possible. 
  Unfortunately, as of this writing no OLE DB provider supports this capability, 
  so you're forced to retrieve and process one Recordset at a time. Or you can 
  use the <I>Clone </I>method (if the Recordset is capable 
  of being cloned) to retrieve all Recordsets, assign them to items of an array, 
  and process them later: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, rs As ADODB.Recordset
' We can reasonably assume that 100 Recordset items will suffice.
Dim recs(100) As ADODB.Recordset, recCount As Integer
' Open the connection, and retrieve the first Recordset.
cn.Open "Provider=sqloledb;Data source=p2;user id=sa;" _
    &amp; "initial catalog=pubs"
Set rs = New ADODB.Recordset
rs.Open "PubsByCountry", cn
' Retrieve all Recordsets, and clone them.
Do
    recCount = recCount + 1
    Set recs(recCount) = rs.Clone
    Set rs = rs.NextRecordset
Loop Until rs Is Nothing
' Now the recs() array contains one clone for each Recordset.
</PRE></TD></TR></TABLE></P>
  <p>Unfortunately, it seems impossible to use this 
  technique to update fields in the database: Any attempt to send data back to 
  SQL Server through the Recordsets now stored in the <I>
  recs() </I>array raises an error &amp;H80004005, 
  &quot;Insufficient base table information for updating or refreshing.&quot; You can't 
  even disconnect the Recordset and close the connection because all the 
  Recordsets in the array are immediately closed, even if the original Recordset 
  was configured to use optimistic batch updates. In short, you can store cloned 
  Recordsets in an array, but in practice this is only useful when you want to 
  process their contents at the same time (for example, when you want to compare 
  the records in them). Here are a few additional tips concerning multiple 
  result sets:</P>
  <ul>
    <p>
    <li>Multiple statements that aren't row-returning 
    commands generate closed Recordsets. You should test for this using the <I>
    State </I>property. 
    </li></P>
    <p>
    <li>All the queries following the first one are 
    executed when you invoke the <I>NextRecordset 
    </I>method; if you close the Recordset before retrieving all the pending 
    result sets, the corresponding queries will never execute.
    </li></P>
    <p>
    <li>If you specify the adAsyncFetch option, only the 
    first Recordset is retrieved asynchronously; all the subsequent ones are 
    fetched synchronously. 
    </li></P>
    <P>
    <LI>All the Recordsets created by the NextRecordset 
    command use the same cursor type and location as the original one. Most of 
    the time, you'll need a client-side cursor to process multiple SQL 
    statements or server-side cursorless Recordsets.
    </li></P>
	<p><LI>Don't use an auto-instancing variable for 
    the Recordset object, otherwise the <I>Is Nothing 
    </I>test will never be successful. 
    </LI></P></UL>
<A NAME="658">  <h2>Hierarchical Recordsets</H2></A>  <p>If I were asked to choose the feature of ADO that has 
  impressed me most, I would undoubtedly pick the ability to create hierarchical 
  Recordset objects. Hierarchical Recordsets can contain child Recordset 
  objects, much like a folder can contain other folders. For example, you can 
  create a Recordset from the Publishers table, where each record contains data 
  about an individual publisher plus a child Recordset that contains the list of 
  titles published by that company. Each record in this child Recordset can 
  contain information about each title, plus another child Recordset that 
  contains data about that book's authors, and so on. You can nest hierarchical 
  Recordset objects without any limit&#8212;theoretically, anyway&#8212;to the number of 
  nesting levels. Creating hierarchical Recordsets is also known as <I>data shaping</I>.</P>
  <p>You can build hierarchical Recordsets in two distinct 
  ways. The easiest method is to interactively build a Command object at design 
  time using the DataEnvironment designer, as I showed you in <a href="#A46">Chapter 8</a>. The 
  more difficult technique&#8212;which is also the more flexible one&#8212;is to create 
  the hierarchical Recordset through code at run time. </P>
<A NAME="659">  <h3>The MSDataShape provider</H3></A>  <p>The first thing to do when creating a hierarchical 
  Recordset is to select the right provider. You need a specific provider 
  designed for doing data shaping. This provider will in turn connect to the OLE 
  DB provider that actually accesses the data source. Currently, the only 
  provider that offers data shaping capabilities is the MSDataShape provider, 
  but in theory any vendor might create another provider of this type in the 
  future. When you're working with the MSDataShape provider, you specify the 
  actual data source using the <I>Data Provider 
  </I>argument in the connection string: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection
cn.Open "Provider=MSDataShape.1;Data Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source= " &amp; DBPATH
</PRE></TD></TR></TABLE></P>
<A NAME="660">  <h3>The SHAPE APPEND command</H3></A>  <p>The MSDataShape provider supports two commands, the 
  SHAPE APPEND keyword and the SHAPE COMPUTE keyword. The SHAPE APPEND keyword 
  lets you create the relationship between two SQL commands that return records. 
  Its syntax is the following: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>SHAPE {parent_command} [[AS] table-alias]
APPEND {child_command} [[AS] table-alias]
RELATE(parent_column TO child_column) [[AS] table-alias]
</PRE></TD></TR></TABLE></P>
  <p>where <I>parent_command </I>is 
  the SQL command that returns the main Recordset, and <I> 
  child_command </I>is the SQL command that returns the 
  child Recordset. The two commands must have one column in common (although the 
  column can have a different name in each table), and you specify that name or 
  names in the RELATE clause. The following is a 
  simple SHAPE APPEND command, which returns a hierarchical Recordset containing 
  all Publishers and a child Recordset that lists all the titles by the current 
  publisher: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.Open "Provider=MSDataShape.1;Data Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=C:\Microsoft Visual Studio\vb98\biblio.mdb"
Set rs.ActiveConnection = cn
rs.Open "SHAPE {SELECT * FROM Publishers} " _
    &amp; "APPEND ({SELECT * FROM Titles} " _
    &amp; "RELATE PubID TO PubID) AS Titles"
</PRE></TD></TR></TABLE></P>
  <p>The name used in the AS clause after the RELATE clause 
  becomes the name of the field that contains the child Recordset. To display 
  the contents of a hierarchical Recordset, you can assign it to the <I>DataSource </I>property of a Hierarchical FlexGrid 
  control, as in this line of code: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Set MSHFlexGrid1.DataSource = rs
</PRE></TD></TR></TABLE></P>
  <p>You can nest multiple SHAPE APPEND commands to set a 
  relationship between multiple pairs of commands. For example, the following 
  code snippet is the command that builds a three-level hierarchical Recordset 
  to contain all the authors in Biblio.mdb. Each record contains a field named 
  <I>Title_Author</I>, which contains a child Recordset 
  with one record for each title written by that author. In turn, this Recordset 
  has a child Recordset containing one single record: the record from the Titles 
  table that corresponds to a particular title. I have indented the SHAPE APPEND 
  commands to make their relationship as clear as possible: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>SHAPE {SELECT * FROM Authors} AS [Authors With Titles]
APPEND 
    (( SHAPE {SELECT * FROM [Title Author]} 
    APPEND ({SELECT * FROM Titles} 
    RELATE ISBN TO ISBN) AS Titles1) 
RELATE Au_ID TO Au_ID) AS Title_Author
</PRE></TD></TR></TABLE></P>
  <p>The name after the first AS clause&#8212;<I>Authors With Titles,</I> in this example&#8212;is the name of 
  the hierarchical command created, and usually it can be omitted when you pass 
  the string to the <I>Open </I>method of a Recordset 
  object or to the <I>CommandText </I>property of a Command 
  object. The fields listed in the RELATE clause can have different names as 
  long as they refer to the same information. If you don't provide a name after 
  the parenthesis that closes the RELATE clause, the default field name <I>chapter</I> is used. </P>
  <p>A hierarchical Recordset can have more than one child 
  Recordset. For example, the following SHAPE APPEND command is similar to the 
  previous one but adds another child Recordset that lists all the authors that 
  are born in the same year as the author pointed to by the parent Recordset. 
  Notice that the APPEND keyword isn't repeated and subsequent child commands at 
  the same nesting level are separated by a comma: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>SHAPE {SELECT * FROM Authors} 
APPEND (( SHAPE {SELECT * FROM [Title Author]} 
    APPEND ({SELECT * FROM Titles} 
    RELATE ISBN TO ISBN) AS Titles1) AS Title_Author 
RELATE Au_ID TO Au_ID) AS Title_Author,
({SELECT * FROM Authors} 
RELATE [Year Born] TO [Year Born]) AS AuthorsBornSameYear
</PRE></TD></TR></TABLE></P>
<A NAME="661">  <h3>The SHAPE COMPUTE command</H3></A>  <p>While the SHAPE APPEND command creates a child 
  Recordset starting from the parent (main) Recordset, the SHAPE COMPUTE command 
  works the other way around: It executes an aggregate function on the rows of a 
  Recordset to create a parent Recordset. For example, you can start with a 
  Recordset that contains the records in the Titles table and build a parent 
  Recordset where the titles are grouped by their Year Published field. In this 
  instance, the parent Recordset has two fields: the first is Year Published, 
  and the second is a Recordset that contains all the titles published in that 
  year. The syntax of the SHAPE COMPUTE command is as follows: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>SHAPE {child_command} [[AS] table_alias]
COMPUTE aggregate_command_field_list
[BY grp_field_list]
</PRE></TD></TR></TABLE></P>
  <p>where <I>child_command </I>is the 
  Recordset you start with and typically is a SELECT statement that returns a 
  group of records; <I>table_alias </I>is the name of the 
  field in the parent Recordset that will contain the child Recordset; <I>aggregate_command_field_list </I>is the list of fields on 
  which the aggregate function operates; and <I>grp_field_list </I>is the list of fields the child 
  Recordset is grouped by. </P>
  <p>In the simplest situation, you group records in the 
  child Recordset according to the value of one field. For example, you can 
  group Titles by the Year Published field using this command: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' You can enclose field and table names within
' single quotes or square brackets.
rs.Open "SHAPE {SELECT * FROM Titles} AS Titles " _
    &amp; "COMPUTE Titles BY 'Year Published'"
</PRE></TD></TR></TABLE></P>
  <p>The name following the COMPUTE keyword must coincide 
  with the alias name assigned to the child Recordset. You can group by multiple 
  fields, using the comma as a separator after the BY keyword: </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Group titles by publishers and year of publication.
rs.Open "SHAPE {SELECT * FROM Titles} AS Titles " _
    &amp; "COMPUTE Titles BY PubID, 'Year Published'"
</PRE></TD></TR></TABLE></P>
  <p>The COMPUTE command can be followed by a list of 
  fields or functions among those listed in Table 14-1. Typically you append an 
  AS clause to indicate the name of the aggregate field in the parent Recordset: 
  </P>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Group titles by publishers, and add a field named TitlesCount that
' holds the number of titles by each publisher.
rs.Open "SHAPE {SELECT * FROM Titles} AS Titles " _
    &amp; "COMPUTE Titles, COUNT(Titles.Title) AS TitlesCount BY PubID"
</PRE></TD></TR></TABLE></P>
<p><b>Table 14-1.</b> <i>Functions supported by SHAPE COMPUTE.</i> Alias <i>is the name of the child Recordset as it appears in the command.</i></p>
  <P>
  <TABLE cellpadding="5" width="95%">    
    <TR>
      <th><i>Function Syntax </i></th>
      <th><i>Action/Returned Value </i></th></TR>
    <TR>
      <TD><i>COUNT(alias[.fieldname])</i> </TD>
      <TD>The number of rows in the child Recordset </TD></TR>
    <TR>
      <TD><i>SUM(alias.fieldname)</i></TD>
      <TD>The sum of all values in the specified field </TD></TR>
    <TR>
      <TD><i>MIN(alias.fieldname)</i> </TD>
      <TD>The minimum value in the specified field</TD></TR>
    <TR>
      <TD><i>MAX(alias.fieldname)</i></TD>
      <TD>The maximum value in the specified field </TD></TR>
    <TR>
      <TD><i>AVG(alias.fieldname)</i> </TD>
      <TD>The average of all values in the specified field </TD></TR>
    <TR>
      <TD><i>STDEV(alias.fieldname)</i></TD>
      <TD>The standard deviation of all the values in the specified field 
    </TD></TR>
    <TR>
      <TD><i>ANY(alias.fieldname)</i></TD>
      <TD>The value of a column (where the value of the column is the same for 
        all rows in the child Recordset) </TD></TR>
    <TR>
      <TD><i>CALC(expression)</i></TD>
      <TD>The result of an expression that uses values from the current row 
        only </TD></TR>
    <TR>
      <TD><i>NEW(fieldtype, [width | scale [, precision])] </i></TD>
      <TD>Adds an empty column of the specified type to the Recordset 
    </TD></TR></TABLE></p>
  <p>You can use the CALC function to evaluate an arbitrary 
  expression that contains fields from the current row in the parent Recordset. 
  For example, you can group titles by publisher and also add three fields with 
  the year a publisher began to publish books, the year it published its most 
  recent book, and the difference between these values: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>rs.Open " SHAPE {SELECT * FROM Titles} AS Titles2 " _
    &amp; "COMPUTE Titles2, MIN(Titles2.[Year Published]) AS YearMin, " _
    &amp; "MAX(Titles2.[Year Published]) AS YearMax, " _
    &amp; "CALC(YearMax - YearMin) AS YearDiff BY PubID"
</PRE></TD></TR></TABLE></P>

<A NAME="662">  <h3>Using hierarchical Recordset objects</H3></A>  
  <p>Hierarchical Recordsets can be browsed in much the 
  same way as regular Recordsets. The only difference is in the way you deal 
  with Field objects that contain child Recordsets. To retrieve data in those 
  Recordsets, you must first assign the Field's <I>Value 
  </I>property to a Recordset variable, as the following code demonstrates: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
Dim rsTitles As ADODB.Recordset
cn.Open "Provider=MSDataShape.1;Data Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=" &amp; DBPATH
Set rs.ActiveConnection = cn
rs.Open "SHAPE {SELECT * FROM Titles} AS Titles " _
    &amp; "COMPUTE Titles, COUNT(Titles.Title) AS TitlesCount BY PubID"
' Have the rsTitles variable always point to the child Recordset.
' (The StayInSync property's default value is True.)
Set rsTitles = rs("Titles").Value

' Browse the parent Recordset.
Do Until rs.EOF
    ' Show information in summary fields.
    Debug.Print "PubID=" &amp; rs("PubID")
    Debug.Print "TitlesCount=" &amp; rs("TitlesCount")
    ' For each row in the parent, browse the child recordset.
    Do Until rsTitles.EOF
        Debug.Print "  " &amp; rsTitles("Title")
        rsTitles.MoveNext
    Loop
    rs.MoveNext
Loop
</PRE></TD></TR></TABLE></P>
  <p>If the parent Recordset is updatable, you can use 
  standard ADO commands to update values in the child Recordset as well. You can 
  distinguish Fields that contain a child Recordset from regular Fields because 
  their <I>Type </I>property returns the value 
  136-adChapter.</p>

  <p>The parent Recordset's <I>StayInSync 
  </I>property affects how object variables pointing to child Recordsets are 
  updated when the record pointer in the main Recordset moves to another record. 
  The default value for this property is True, which means that once you have 
  assigned the Field object to a Recordset variable (<I>rsTitle</I>, in the previous code example), this variable 
  correctly points to child records even when the parent Recordset moves to 
  another row. This setting simplifies the navigation in the hierarchical 
  Recordset and slightly optimizes execution speed because you don't have to 
  reexecute the Set command after each Move<I>xxxx 
  </I>command. Under certain circumstances, you might want to set <I>StayInSync </I>to False, which detaches the object 
  variable from the parent Recordset. </p>
  <p>The real advantage in building 
  hierarchical Recordsets in code instead of using DataEnvironment's Command 
  objects defined at design time is the greater flexibility you have when 
  building complex SHAPE commands. For example, you can add WHERE clauses in the 
  nested SELECT commands, as in the following snippet: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, rs As New ADODB.Recordset, 
Dim cmd As New ADODB.Command, source As String
cn.Open "Provider=MSDataShape.1;Data Provider=Microsoft.Jet.OLEDB.4.0;" _
    &amp; "Data Source=C:\Microsoft Visual Studio\Vb98\biblio.mdb"
source = "SHAPE {SELECT * FROM Titles WHERE [Year Published] = 1990} " _
    &amp; "AS Titles COMPUTE Titles BY PubID"
Set cmd.ActiveConnection = cn
cmd.CommandText = source
Set rs = cmd.Execute()
</PRE></TD></TR></TABLE></P>
  <p>I didn't manage to have the Command object work with ? 
  parameters embedded in SHAPE commands, so it seems that you have to forgo 
  parameterized queries when you're working with the MSDataShape provider. This 
  isn't as bad as it might sound at first, though, because hierarchical 
  Recordsets are inherently client-side and are never compiled on the server. 
  You can create pseudoparameterized SHAPE commands using placeholders and the 
  <I>ReplaceParams </I>routine I introduced earlier in this 
  chapter: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>source = "SHAPE {SELECT * FROM Titles WHERE [Year Published] = @1} " _
    &amp; "AS Titles COMPUTE Titles BY PubID"
cmd.CommandText = ReplaceParams(source, "1990")
Set rs = cmd.Execute()
</PRE></TD></TR></TABLE></P>
  <p>You can also decide at run time the names of chapter 
  fields and the expression in the WHERE condition, which is impossible when 
  using design-time DataEnvironment objects. </p>
  
<A NAME="663">  <h3>Parameterized commands</H3></A>  
  <p>When you use hierarchical Recordsets, ADO downloads 
  all the data from the main table and the child table and builds the 
  relationship on the client workstation. Needless to say, when you're working 
  with large tables&#8212;as all real applications do&#8212;this adds considerable 
  overhead, both in terms of network traffic and resources on the client 
  workstation. You can reduce this overhead by using the special parameterized 
  syntax shown on the shown below for the <I>Source 
  </I>property or argument of a hierarchical Recordset. </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
cn.Open "Provider=MSDataShape.1;Data Provider=sqloledb.1;" _
    &amp; "Data Source=p2;user id=sa;initial catalog=pubs"
Set rs.ActiveConnection = cn
rs.Open "SHAPE {SELECT * FROM Publishers} " _
    &amp; "APPEND ({SELECT * FROM Titles WHERE pub_id = ?} " _
    &amp; "RELATE pub_id TO PARAMETER 0) AS Titles"
</PRE></TD></TR></TABLE></P>
  <p>When you use this syntax, ADO doesn't download the 
  entire Titles table. Instead, it downloads only the Publisher table (unless 
  you add a suitable WHERE clause to the first SELECT, of course). Then it uses 
  the value of the Pub_Id key field to retrieve only the items in Titles that 
  correspond to that value. Each time you move to another record in Publisher, 
  ADO issues another SELECT against the Titles table, so only a fraction of this 
  table is downloaded each time. </p>
  
  <p>This technique is extremely efficient also 
  because ADO automatically builds a temporary stored procedure on the server to 
  retrieve chunks of the child table. But the <I>overall 
  </I>execution time is higher than with the standard technique because of the 
  multiple queries, so there's no point in using these parameterized commands 
  when you're going to assign the result Recordset to a Hierarchical FlexGrid 
  control. The parameterized command might be more convenient, though, because 
  ADO optimizes the access to the child Recordset and retrieves its records only 
  if the application actually references one of its properties and events, as 
  the following code demonstrates: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>' Continuing the previous code example...
' Print the number of titles for US publishers. (This is just an example:
' in a real program you should add a WHERE clause to the Open method.)
Dim rs2 As ADODB.Recordset
Set rs2 = rs("titles").Value      ' Make the assignment just once.
Do Until rs.EOF
    If rs("country") = "USA" Then
        ' The next statement actually retrieves the records from Titles.
        Print rs("pub_name"), rs2.RecordCount 
    End If
rs.MoveNext
Loop
</PRE></TD></TR></TABLE></P>
  <p>Fields that are retrieved only when referenced in code 
  are called <I>deferred fields</I>. Even if you're going 
  to process all the records in the child Recordset, using a parameterized 
  command can help if the client workstation is short on system memory. </p>

<A NAME="664">  <h3>DataEnvironment Commands objects</H3></A>
  <p>If you've defined a hierarchical Command object at 
  design time in a DataEnvironment designer, using it from code is really 
  straightforward: You only have to retrieve it using the Commands collection 
  and assign it to a regular<I></I>ADODB.Command object 
  variable, as in this code: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>Dim cmd As ADODB.Command, rs As ADODB.Recordset
Set cmd = DataEnvironment1.Commands("Authors")
Set rs = cmd.Execute
Set MSHFlexGrid1.DataSource = rs
</PRE></TD></TR></TABLE></P>
  <p>Or you can execute the query and then retrieve the 
  result Recordset using custom methods of the DataEnvironment object: </p>
  <p>
  <table cellPadding=5 width="95%">
    
    <tr>
      <td><pre>DataEnvironment1.Authors
Set MSHFlexGrid1.DataSource = DataEnvironment1.rsAuthors
</PRE></TD></TR></TABLE></P>
  <p>Even if you don't plan to use DataEnvironment objects 
  in your code, the DataEnvironment designer is helpful for building SHAPE 
  commands. In fact, you can interactively design a hierarchical Command object, 
  and then right-click on it and select the Hierarchy Information menu command, 
  as shown in Figure 14-6. </p>
  
<p>
<A HREF="javascript:fullSize('F14ph06x.htm')"> <img src="F14ph06.JPG" width=404 height=327 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 14-6.</B> <I>Let the DataEnvironment designer build complex SHAPE commands for you.</I><!--/caption-->
</p>
  
  <p>This chapter and <a href="#A82">Chapter 13</a> together offer an in-depth 
  description of how ADO works and how you can work around its few limitations 
  and quirks. All the code seen so far, however, has focused on data retrieval 
  exclusively. In the <a href="#A94">next chapter</a>, I show you how you can use bound grid 
  controls and the DataReport designer to display the result of queries to your 
  users. </P>             
                
              
              
       

<a name="A94"></a><h2>7.3 Chapter 15 -- Tables and Reports</h2>

<A HREF="#A93">[Previous]</A> <A HREF="#A95">[Next]</A><P>


<font size="+3">Chapter 15</font>

<A NAME="665"><H1>Tables and Reports</H1></A>
<p>In preceding chapters, you learned how to use design-time tools such as 
the DataEnvironment designer or pure ADO code to deal with databases. Now it's 
time to complete this overview of database programming and see how to display this 
data to users in the most effective way, both on screen and in print.</P>


<a name="A95"></a><h3>7.3.1 The DataCombo and DataList Controls</h3>

<A HREF="#A94">[Previous]</A> <A HREF="#A96">[Next]</A><P>

<A NAME="666"><h1>The DataCombo and DataList Controls</h1></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>Visual Basic 6 includes two controls that can be used only as bound controls: 
DataList and DataCombo. These controls are variants of the regular ListBox and 
ComboBox controls and are special because they can be bound to two different ADO Data 
controls. The first Data control determines the value to be selected in the control 
(as is the case for regular ListBox and ComboBox controls); the second Data control 
fills the list portion.</P>

<p>The DataList and DataCombo controls are often used to provide lookup 
tables. A <I>lookup table </I>is a secondary table that typically contains the human-friendly 
description of an entity and is used to transform an encoded value into an intelligible 
form. For example, the Products table in the NWind.mdb database includes the 
CategoryID field, which is a number that corresponds to a value in the CategoryID field of 
the Categories table. Therefore, to display information about a product, you have 
to perform an INNER JOIN command to retrieve all the requested data:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT ProductName, CategoryName FROM Products INNER JOIN Categories 
    ON Products.CategoryID = Categories.CategoryID
</pre>
</td></tr>
</table>
</p>


<p>While this approach works when you're processing data via code, it often 
isn't a viable solution when you're using bound controls. For example, what happens 
if users are allowed to modify the category of a product? In this case a 
bullet-proof interface would require that you load all the values in the Categories table into 
a ListBox or ComboBox control so that users couldn't enter an incorrect category 
name. This task requires you to open a secondary Recordset, as this code illustrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This code assumes that cn already points to a valid connection.
Dim rsCat As New ADODB.Recordset
rsCat.Open &quot;SELECT CategoryID, CategoryName FROM Categories&quot;, cn
lstCategories.Clear
Do Until rsCat.EOF
    lstCategories.AddItem rsCat(&quot;CategoryName&quot;)
    lstCategories.ItemData(lstCategories.NewIndex) = rsCat(&quot;CategoryID&quot;)
    rsCat.MoveNext
Loop
rsCat.Close
</pre>
</td></tr>
</table>
</p>


<p>Of course, you then have to write the code that highlights the correct item 
in the ListBox when the user navigates through the records in the Products table, as 
well as the code that modifies the value of the CategoryID field in the Products table 
when users select a different item in the list. As you see, this deceptively simple job 
requires more code than you probably thought was necessary. Fortunately, if you set a 
few design-time properties, the DataCombo and DataList controls can easily 
accomplish this task.</p>

<p>The DataCombo and DataList controls are included in the MSDATLST.OCX 
file, which must therefore be distributed with any application that uses these controls.</p>

<p><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
The DataCombo and DataList controls are functionally similar to 
the DBCombo and DBList controls introduced by Visual Basic 5 (and still 
supported by Visual Basic 6). The main difference is that the DataCombo and 
DataList controls work only with the ADO Data control, while the DBCombo and 
DBList controls work only with the old Data and RemoteData controls.
</BLOCKQUOTE></DIV></P>

<A NAME="667"><h2>Setting Design-Time Properties</h2></A>

<p>To implement a lookup table with the DataCombo and DataList controls, you 
need to place two ADO Data controls on the form, one that points to the main table 
(Products, in the previous example) and one that points to the lookup table 
(Categories, in the previous example). Then set, at a minimum, the following properties for 
the DataCombo and DataList controls:</P>
<UL>

<p><li><I>DataSource</I> a reference to the main ADO Data control, which in turn points to the main database table.</LI></P>
 
<p><LI><I>DataField</I> the name of the field in the table referred to by the 
<I>DataSource </I>property and to which this control is bound. This field is updated when a new value is selected in the list.</LI></P>

<p><LI><I>RowSource</I> a reference to the secondary ADO Data control, which in turn points to the lookup table. The list portion of the control will be filled with data coming from the lookup table.</LI></P>

<p><LI><I>ListField</I> the name of a field in the lookup table. The list portion of the control will be filled with values coming from this field.</LI></P>

<p><LI><I>BoundColumn</I> the name of a field in the lookup table. When the user selects a value in the list, the <I>DataField 
</I>field in the main table receives a value from this column. If you don't assign any value to this property, it will use the same field name as the <I>ListField </I>property.</LI></P>
</UL>

<p>Let's implement the example described previously. Create an ADO Data 
control (Adodc1), set it to point to the Products table in NWind.mdb, and add some 
bound TextBox controls that display fields from that table. Then add another ADO Data 
control (Adodc2), and set it to retrieve data from the Categories table. Finally, add a 
DataList control and set its properties as follows: 
<I>DataSource </I>= Adodc1, <I>DataField </I>= 
CategoryID, <I>RowSource </I>= Adodc2, <I>ListField 
</I>= CategoryName, and <I>BoundColumn </I>= CategoryID.</P>

<p>The Products table contains another foreign key, SuppliersID, that points to 
the Suppliers table. You can implement another lookup mechanism by adding a 
third ADO Data control (Adodc3), which points to the Suppliers table, and a 
DataCombo control whose properties should be set as follows: 
<I>DataSource </I>= Adodc1, <I>DataField </I>= SupplierID, 
<I>RowSource </I>= Adodc3, <I>ListField </I>= CompanyName, and 
<I>BoundColumn </I>= SupplierID. You can now run the application, as shown in Figure 15-1.</P>

<p><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
The DataCombo and DataList controls expose two additional 
properties, <I>DataMember</I> and <I>RowMember</I>, that are assigned only when you 
use a DataEnvironment designer's Command object as the main or 
secondary data source.
</BLOCKQUOTE></DIV></P>

<p>The DataCombo and DataList controls support other design-time properties, 
but since in most cases they are the same properties as exposed by the regular 
ListBox and ComboBox controls, you should already be familiar with them. The only 
other property you might want to set at design time is 
<I>MatchEntry</I>, which can take the values 
0-dblBasicMatching<I> </I>or 1-dblExtendedMatching. In basic matching mode, when 
the user presses a key while the focus is on the control, the control highlights the 
item in the list that begins with the pressed character. In extended matching mode, 
each character entered is appended to a search string, which is then used to highlight 
the first matching item, if any. (The search string is automatically reset after a few 
seconds, or when the BackSpace key is pressed.)</P>

<p>As with all bound controls, DataCombo and DataList expose the 
<I>DataFormat</I> property, but this property won't deliver the results you probably expect. For 
example, you can't use <I>DataFormat</I> to change the format of the items in the list. This isn't 
a bug, however; <I>DataFormat </I>works on the 
<I>DataField </I>column, whose value is normally hidden from the user when you use these controls. For this reason, the 
<I>DataFormat </I>property is of limited use with these two controls. The following tip explains 
how you can format the items in the list.</P>

<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
Often you need to display a combination of fields in the list portion of 
a DataCombo or DataList control. For example, you might want to display 
the supplier's name and city instead of just the name. You can accomplish this 
by using the SELECT command with a calculated field as the 
<I>RecordSource </I>property of the secondary ADO Data control:
<P><TABLE><TR><TD><PRE>
Adodc3.RecordSource = &quot;SELECT SupplierID, CompanyName + ' (' &quot; _
    &amp; &quot;+ City + ')' AS NameCity FROM Suppliers&quot;
</PRE></TD></TR></TABLE></P>

<p>Don't forget to include the key field in the SELECT command; otherwise, 
you can't assign it to the <I>BoundColumn </I>property. You can use the same trick to 
sort the list or to format the list in a nonstandard way. For example, you can sort 
the suppliers list and convert their names to uppercase using the following query:</P>
<P><TABLE><TR><TD><PRE>
Adodc3.RecordSource = &quot;SELECT SupplierID, UCase(CompanyName + ' (' &quot; _
    &amp; &quot;+ City + ')') AS NameCity FROM Suppliers ORDER BY CompanyName&quot;
</PRE></TD></TR></TABLE></P>
</BLOCKQUOTE></DIV></P>

<p>
<A HREF="javascript:fullSize('F15ph01x.htm')"> <img src="F15ph01.JPG" width=404 height=305 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-1.</B> <I>A bound form with two lookup tables.</i><!--/caption-->
</p>

<A NAME="668"><h2>Run-Time Operations</h2></A>

<p>Working with the DataCombo and DataList controls at run time is similar to 
working with regular ListBox and ComboBox controls, with a few essential differences. 
For example, there are no <I>ListIndex </I>and <I>ListCount 
</I>properties, nor is there an <I>AddItem </I>method to add items to the list at run time. The only way to fill the list portion 
of these controls is by using an ADO Data control or another data source, such as 
a Recordset or DataEnvironment instance.</P>

<p>The DataList and DataCombo controls also expose a few peculiar 
properties. The <I>MatchedWithList </I>read-only property returns True if the value in the edit 
portion of a DataCombo control matches one of the elements in the list. This 
property is always True with DataList and DataCombo controls whose 
<I>Style </I>property is 2dbcDropDownList. The <I>BoundText 
</I>property returns or sets the value of the 
field named by the <I>BoundColumn </I>property&#8212;that is, the value that will be assigned to 
the <I>DataField </I>column in the main table.</P>

<A NAME="669"><h3>Displaying additional lookup information</h3></A>

<p>The <I>SelectedItem </I>property returns a bookmark to the lookup table that 
corresponds to the highlighted item in the list portion. You usually use this property to 
display additional information about the selected item. For example, suppose that you 
want to display the value of the ContactName field from the Suppliers table 
whenever a new supplier is selected from the list. To do so, create a Label control 
named <I>lblSupplierData </I>and add the following code to the form module:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataCombo1_Click(Area As Integer)
    ' Move to the correct record in the lookup table.
    ' NOTE: The ContactName field must be included in the list
    '       of fields returned by the Adodc3 data control.
    If Area = dbcAreaList Then
        Adodc3.Recordset.Bookmark = DataCombo1.SelectedItem
        lblSupplierData = Adodc3.Recordset(&quot;ContactName&quot;)
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The DataCombo's <I>Click</I> and <I>DblClick 
</I>events receive an <I>Area </I>parameter that states which portion of the control has been clicked. Possible values for this 
parameter are 0-dbcAreaButton, 1-dbcAreaEdit, and 2-dbcAreaList.</P>

<p>The problem with the preceding approach is that the DataList or 
DataCombo controls' <I>Click </I>event doesn't fire when the user displays a new record in the 
form. For this reason, you must trap the primary ADO Data control's 
<I>MoveComplete </I>event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Adodc1_MoveComplete(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal pError As ADODB.Error, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
    ' You need to manually assign a value to BoundText because the 
    ' SelectedItem property hasn't been updated yet when this event fires.
    DataCombo1.BoundText = Adodc1.Recordset(&quot;SupplierID&quot;)
    ' Simulate a Click to keep the control in sync.
    DataCombo1_Click dbcAreaList
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>VisibleCount </I>property returns the number of visible items in the list portion. 
It's intended to be used together with the <I>VisibleItems 
</I>property, which returns an array of bookmarks to the lookup table that correspond to all the visible items in the 
list. For example, you might place a lstDescription ListBox control to the right of 
the DataList1<I> </I>control and load it with additional information from the lookup table, 
as you can see in the code below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim i As Long
lstDescription.Clear
For i = 0 To DataList1.VisibleCount - 1
    Adodc2.Recordset.Bookmark = DataList1.VisibleItems(i)
    lstDescription.AddItem Adodc2.Recordset(&quot;Description&quot;)
Next
</pre>
</td></tr>
</table>
</p>


<p>The problem here is that you can execute this code whenever a new record 
becomes current, but it's impossible to keep the 
lstDescription<I> </I>ListBox in sync with the 
DataList1<I> </I>control because the latter lacks a 
<I>Scroll </I>event. A better use for the <I>VisibleCount 
</I>and <I>VisibleItems </I>properties is to implement a ToolTip mechanism:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This code assumes that DataList1.IntegralHeight = True.
Private Sub DataList1_MouseMove(Button As Integer, Shift As Integer, _
    x As Single, y As Single)
    ' Determine the item over which the mouse cursor is placed.
    Dim item As Long
    item = Int(y / DataList1.Height * DataList1.VisibleCount)
    ' Retrieve the description for the category under the cursor, and
    ' prepare a ToolTip in case the user doesn't move the mouse.
    Adodc2.Recordset.Bookmark = DataList1.VisibleItems(item)
    DataList1.ToolTipText = Adodc2.Recordset(&quot;Description&quot;)
End Sub
</pre>
</td></tr>
</table>
</p>


<p><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
When you use the properties and methods of the 
Recordset exposed by an ADO Data control, or of a Recordset that is directly bound to 
data-aware controls, you might get error H80040E20. You can usually get rid of 
this error by using a static client-side cursor, or by preceding the statement 
that causes the error with this line:
<P><TABLE><TR><TD><PRE>
ADODC1.Recordset.Move 0
</PRE></TD></TR></TABLE></P>

<p>For additional information, see article Q195638 in the Microsoft 
Knowledge Base.</P>
</BLOCKQUOTE></DIV></P>

<A NAME="670"><h3>Saving connections</h3></A>

<p>One of the problems of the original Data control, which has been inherited by the 
newer ADO Data control, is that each instance of the control opens its own connection to 
the database, with two undesirable consequences. First, if you have multiple Data 
controls, they can't share the same transaction space. Second, each connection takes 
resources from the server. If a form uses numerous lookup tables based on DataCombo 
and DataList controls, your application is going to consume more resources than 
necessary and might incur problems if there is a shortage of available connections.</P>

<p>When working with ADO data-aware controls, you can often avoid this 
waste of resources. In fact, your DataCombo and DataList controls don't typically need 
a visible Data control because the user never actually navigates the lookup table. 
Therefore, you can obtain the same results using a plain ADO Recordset object. Set the 
properties of the DataCombo and DataList controls as if they were bound to an ADO 
Data control for the lookup table, but leave their 
<I>RowSource </I>property blank. Assign this property at run time, after creating a Recordset object that shares the main ADO 
Data control's connection:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rsCategories As New ADODB.Recordset
Dim rsSuppliers As New ADODB.Recordset

Private Sub Form_Load()
    rsCategories.Open &quot;Categories&quot;, Adodc1.Recordset.ActiveConnection
    Set DataList1.RowSource = rsCategories
    rsSuppliers.Open &quot;Suppliers&quot;, Adodc1.Recordset.ActiveConnection
    Set DataCombo1.RowSource = rsSuppliers
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="671"><h3>Updating the lookup table</h3></A>

<p>So far we've assumed that the lookup table's contents are fixed. In practice, 
however, the user often needs to add new items to the table, as when he or she inserts a 
product that comes from a company not yet in the Suppliers table. You can deal with this 
situation by using DataCombo controls with 
<I>Style</I> = 0-dbcDropdownCombo. When the main ADO Data control is about to write values to the Products table, your code 
can check whether the Supplier name is already in the Suppliers table and, if it isn't, 
ask the user if a new supplier should be created. Here's the minimal code that 
implements this feature:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Adodc1_WillChangeRecord(ByVal adReason As _
    ADODB.EventReasonEnum, ByVal cRecords As Long, adStatus As 
    ADODB.EventStatusEnum, ByVal pRecordset As ADODB.Recordset)
    ' Exit if data in DataCombo hasn't been modified
    ' or if it matches an item in the list.
    If Not DataCombo1.DataChanged Or DataCombo1.MatchedWithList Then 
        Exit Sub
    End If
    ' Ask if the user wants to add a new supplier; cancel operation if not.
    If MsgBox(&quot;Supplier not found.&quot; &amp; vbCr &amp; &quot;Do you want to add it?&quot;, _
        vbYesNo + vbExclamation) = vbNo Then
        adStatus = adStatusCancel
    End If
    
    ' Add a new record to the Recordset. In a real application, you should
    ' display a complete data entry form.
    rsSuppliers.AddNew &quot;CompanyName&quot;, DataCombo1.Text
    rsSuppliers.Update
    ' Ensure that the new record is visible in the Recordset.
    rsSuppliers.Requery
    rsSuppliers.Find &quot;CompanyName = '&quot; &amp; DataCombo1.Text &amp; &quot;'&quot;
    ' Refill the DataCombo and make the correct item the current one.
    DataCombo1.ReFill
    DataCombo1.BoundText = rsSuppliers(&quot;SupplierID&quot;)
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The preceding code automatically adds a new record to the Suppliers table 
in a simplified way; a real application should display a complete data entry form in 
which the user can enter additional data about the new supplier.</P>


<a name="A96"></a><h3>7.3.2 The DataGrid Control</h3>

<A HREF="#A95">[Previous]</A> <A HREF="#A97">[Next]</A><P>

<A NAME="672"><h1>The DataGrid Control</h1></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>Probably the most usual way to display data in a database table is with a grid 
control. Visual Basic 6 comes with several grid controls, but only two of them can 
work with the newer ADO Data control and other ADO data sources: the DataGrid 
control and the Hierarchical FlexGrid control. I'll describe the DataGrid control in 
this section and the Hierarchical FlexGrid control in the next section.</P>

<p>Before looking at the individual properties, methods, and events supported 
by the DataGrid control, you should be familiar with its object model. As you can 
see in Figure 15-2, this is a simple object model, with the DataGrid control at the top 
of the hierarchy and the Columns and Splits collections under it. You can split a 
DataGrid control into two or more sections and navigate through them independently or in 
a synchronized manner. The DataGrid control is included in the MSDATGRD.OCX 
file, which must therefore be distributed with any application that uses this control.</P>

<p>
<A HREF="javascript:fullSize('F15ph02x.htm')"> <img src="F15ph02.JPG" width=404 height=337 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-2.</B> <I>The object model for the DataGrid control.</i><!--/caption-->
</p>

<p><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
The DataGrid is source-code compatible with the older DBGrid 
control, which, though still included in Visual Basic 6, doesn't support the newer 
ADO Data control and data sources. Thanks to this compatibility, the DataGrid 
control can be used as a drop-in substitute for the DBGrid control. The only 
relevant difference between the two controls is that the newer DataGrid control 
doesn't work in unbound mode. But because you can bind this control to any ADO 
data source&#8212;including your own classes, as explained in <a href="#A111">Chapter 18</a>&#8212;nothing 
prevents you from creating a class that encapsulates an in-memory data 
structure, such as an array of UDTs or a two-dimensional array of Strings or Variants.
</BLOCKQUOTE></DIV></P>

<A NAME="673"><h2>Setting Design-Time Properties</h2></A>

<p>Since the DataGrid control can work only as a bound control to an ADO data 
source, the first thing to do is prepare such a source. This can be a design-time source 
such as an ADO Data control or a DataEnvironment object, or it can be a run-time 
source such as an ADO Recordset or an instance of a custom class that qualifies as a 
data source. Working with design-time sources is definitely preferable, because you 
can retrieve the field structure at design time and adjust column width and other 
attributes in a visual manner, without writing code.</P>

<p><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
You can bind complex controls, such as the DataGrid and 
Hierarchical FlexGrid controls, only to Recordsets based on static or keyset cursors.
</BLOCKQUOTE></DIV></P>

<A NAME="674"><h3>Editing the Column layout</h3></A>

<p>After you have bound the DataGrid control to an ADO Data control or to 
a DataEnvironment's Command object through the DataGrid's 
<I>DataSource </I>property, you can right-click on the control and select the Retrieve Fields menu command. 
This prepares a column layout at design time, with each column taking its caption 
and width directly from the database field to which it maps. You can then right-click 
again on the control and select the Edit menu command, which puts the grid in edit 
mode. In this mode, you can adjust the column width, scroll the grid horizontally by 
using the scroll bar at the bottom, and right-click on the control to display a menu of 
commands. These commands allow you to add and remove columns, split the grid 
into two or more sections, cut and paste columns to rearrange their order, and so on. 
To modify other properties, however, you must right-click once again on the control 
and select the Properties command, which brings up a Property Pages dialog box 
with as many as eight tabs, as shown in Figure 15-3.</P>

<p>Contrary to what the documentation states, it seems impossible in practice 
to have distinct column layouts for different split sections. In fact, if you delete an 
existing column or add a new column to a split, all the other splits are affected as 
well. A possible workaround for this problem is to set a column's 
<I>Visible </I>property to False. Because this attribute can be set on a split-by-split basis (as explained in &quot;<A HREF="#678">The Layout Tab</A>&quot; section later in this chapter), you can effectively hide a column in all 
the splits where it shouldn't appear.</P>

<p>
<A HREF="javascript:fullSize('F15ph03x.htm')"> <img src="F15ph03.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-3.</B> <I>The DataGrid control at design time, after displaying its Property Pages dialog box.</i><!--/caption-->
</p>

<A NAME="675"><h3>The General and Keyboard tabs</h3></A>

<p>By default, the grid has no caption, but you can enter a custom string in the 
General tab of the Property Pages dialog box; if a nonempty string is specified for 
the <I>Caption </I>property, it will appear in a gray section above the column headers. 
The <I>AllowAddNew</I>, <I>AllowDelete</I>,<I> 
</I>and <I>AllowUpdate </I>Boolean properties determine 
which operations are allowed on the grid. The <I>ColumnHeaders 
</I>property can be set to False to hide the gray row containing the column headers. Note that in the Font 
tab you can set the <I>HeadFont </I>property, which determines the character font used 
for column headers.</P>

<p>The <I>DefColWidth </I>property is the default width of the grid's columns: If set to 
0 (its default value), the width of each column is the largest value between the 
underlying field's size and the column header's width. The 
<I>HeadLines</I> property is an integer between 0 and 10, and corresponds to the number of rows used for 
column headings; you can use 0 to remove column headers, but it's preferable to set 
the <I>ColumnHeaders </I>property to False to achieve the same result. The 
<I>RowHeight </I>property is the height of each row in twips. The DataGrid control doesn't support 
rows of different heights.</P>

<p>You can set the <I>BorderStyle </I>property to 0-dbgNoBorder to suppress the 
fixed border around the grid. The <I>RowDividerLine 
</I>property determines the style used to draw the dividing lines between the rows and can be one of the following 
enumerated values: 0-dbgNoDividers, 1-dbgBlackLine, 2-dbgDarkGrayLine (the 
default), 3dbgRaised, 4-dbgInset, or 5-dbgUseForeColor. If 3-dbgRaised or 4-dbgInset is 
used, the color of the dividing line depends on the Microsoft Windows settings.</P>

<p>The Keyboard tab allows you to set some properties that affect how keys 
behave when the DataGrid control has the focus. If the 
<I>AllowArrows </I>property is True, the user can visit all the cells in the grid using the arrow keys; if 
<I>WrapCellPointer </I>is also True, pressing the right arrow key at the end of a row moves the focus 
rectangle to the first cell in the next row and pressing the left arrow key at the beginning of 
a row moves the focus rectangle to the last cell in the previous row.</P>

<p>The <I>TabAction </I>property decides what happens when the 
Tab key or Shift+Tab key combination is pressed and 
the DataGrid control is the active control. The 
default action is 0dbgControlNavigation, in which case the next control (or the previous 
control, if Shift+Tab is pressed) on the form receives the focus. If you set this property 
to 1dbgColumnNavigation, pressing the Tab key moves the focus rectangle to the 
next column unless the current cell is the last (or the first, if Shift+Tab is pressed) of its 
row. In this case, pressing this key causes the focus to move to the next (or previous) 
control in the TabIndex order. Finally, the setting 2-dbgGridNavigation is similar to the 
previous one, but the Tab key never moves the focus rectangle to another control and 
the behavior at the beginning or end of the row depends on the 
<I>WrapCellPointer </I>property.</P>

<p>By default, tab and arrow keys never move the focus rectangle to another 
split in the same grid. You can, however, set the 
<I>TabAcrossSplit </I>property to True to let the user navigate through splits by using the Tab key. In this case, the value of 
the <I>WrapCellPointer </I>and <I>TabAction</I> properties are ignored, unless the user presses the 
Tab key when the current cell is in the last column of the rightmost split or presses 
the Shift+Tab key combination when the current cell is in the first column of the leftmost split.</P>

<A NAME="676"><h3>The Columns and Format tabs</h3></A>

<p>The Columns tab allows you to set the <I>Caption 
</I>property of each individual Column object, as well as its 
<I>DataField </I>property, which contains the name of the field in 
the data source to which the column is bound.</P>

<p>The Format tab allows you to set the <I>DataFormat 
</I>property of each Column object, using the same dialog box used for individual bound controls. Typically, 
you use this tab to format numbers, currency values, dates, and times. You can also 
use a custom format, if needed. The settings on this tab are reflected in the 
<I>DataFormat </I>property of individual Column objects at run time. A few other properties of 
Column objects, which will be described later, are set on the Layout tab.</P>

<A NAME="677"><h3>The Splits tab</h3></A>

<p>If the grid is subdivided into two or more split areas, you can set the attributes 
for these areas in the Splits tab. You can't create new splits in this property page, 
but you act on the fields in this page to set each split's appearance and behavior. 
(Creating a new split is described in the &quot;<A HREF="#674">Editing the Column Layout</A>&quot; section earlier 
in this chapter.)</P>

<p>To modify the attributes of a split, you have to select it in the upper 
drop-down list. If the grid isn't split, there will be only one item in the drop-down list, the 
<I>Split 0 </I>item, and your setting will affect the entire grid control. You can set the 
<I>Locked </I>property to True to turn the DataGrid into a read-only control. The 
<I>AllowFocus </I>property determines whether the split can receive the focus (it's similar to the 
<I>TabStop </I>property of individual Visual Basic controls). The 
<I>AllowSizing </I>property determines whether the split can be interactively resized with the mouse at run time. 
If <I>AllowRowResizing </I>is True, the user can resize rows in this split by using the 
mouse. (Resize operations affect all the rows in all the splits because the DataGrid 
control doesn't support rows with different heights.) The 
<I>RecordSelectors </I>property determines whether there is a gray column for displaying record selectors on the left side of 
the split (or the whole grid).</P>

<p>You can control whether multiple splits vertically scroll together or 
independently of one another by using the <I>ScrollGroup 
</I>property of the Split object, which is an integer greater than or equal to 1. All the splits with the same value scroll 
together, so you can create splits that scroll independently by assigning different values to 
this property. The <I>ScrollBars </I>property affects the presence or absence of scroll bars in 
a particular split and takes one of the following values: 0-dbgNone, 
1dbgHorizontal, 2-dbgVertical, 3-dbgBoth, and 4-dbgAutomatic. (The default is 
4dbgAutomatic&#8212;show a scroll bar only if necessary.) If you have a group of Split objects that scroll 
together and the <I>ScrollBars </I>property of each is set to 4dbgAutomatic, only the rightmost 
split of the group will show a vertical scroll bar.</P>

<p>The <I>MarqueeStyle </I>property determines how the DataGrid control 
highlights the currently selected cell. This property can have one of the following 
values: 0dbgDottedCellBorder (a dotted border around the cell, also known as a focus 
rectangle, is used), 1-dbgSolidCellBorder (a solid border is used, which is usually more 
visible than a dotted border),<I> </I>2-dbgHighlightCell (text and background color are 
inverted), 3-dbgHighlightRow (the entire row is highlighted&#8212;this is useful only when the 
grid or the split isn't editable), 4-dbgHighlightRowRaiseCell (similar to the previous one, 
but the current cell appears to be raised), 5-dbgNoMarquee (the current cell isn't 
highlighted in any way), or 6-dbgFloatingEditor (the default&#8212;the current cell is highlighted 
using a floating editor window with a blinking cursor, as in Microsoft Access).</P>

<p>The <I>AllowRowSizing</I>, <I>MarqueeStyle</I>, and 
<I>RecordSelectors </I>properties are exposed by the DataGrid control as well as its Split objects. Setting one of these 
properties for the DataGrid control has the same effect as setting the same property for all 
its Split objects.</P>

<p>The last two properties shown in the Splits tab work together to determine 
how many columns are visible in the split and whether they are resized to fit in the 
visible area. More precisely, the <I>Size </I>property can be assigned a numeric value 
whose meaning depends on the <I>SizeMode </I>property. If 
<I>SizeMode </I>is 0-dbgScalable, <I>Size </I>contains an integer that corresponds to the width of that split with respect to other 
scalable splits; for example, if you have two splits with 
<I>Size </I>= 1 and <I>Size </I>= 2, respectively, the first split will take one third of the grid's width and the second split will take 
the remaining two thirds. If <I>SizeMode </I>is 1-dbgExact, then 
<I>Size </I>is a floating-point number that corresponds to the split's exact width in twips; this setting ensures that 
the split always has the same width, whether other splits are added or removed.</P>

<A NAME="678"><h3>The Layout tab</h3></A>

<p>In the Layout tab, you can set column attributes on a split-by-split basis. The 
DataGrid control, in fact, allows you to display the same column with different attributes in 
different splits. For example, a column can be read-write in one split and read-only 
in another; or it can be invisible in some of the splits and visible in others. You set 
the read-only attribute with the <I>Locked </I>property and the visibility attribute with the 
<I>Visible </I>property. The <I>AllowSizing </I>Boolean property determines if the right border of 
the column can be dragged to resize the column's width. The 
<I>WrapText </I>Boolean property causes the text in the cell to wrap to the next row if necessary: 
You can use this property with the <I>RowHeight 
</I>property to produce multiline displays. The 
<I>Button </I>property, if set to True, causes a button for a drop-down menu to appear in the cell 
when it gets the focus. When the user clicks on this button, the DataGrid control 
receives a <I>ButtonClick</I> event, to which you typically react by dropping down a list of 
values using a standard ComboBox, a bound ListBox, or even another DataGrid control.</P>

<p>The <I>DividerStyle</I> property affects the style of the vertical line on the right 
border of a column and can be one of the following values: 0-dbgNoDividers, 
1dbgBlackLine, 2-dbgDarkGrayLine (the default), 3-dbgRaised, 4-dbgInset, 
5dbgUseForeColor, or 6-dbgLightGrayLine. The <I>Alignment 
</I>property sets the alignment of the contents of the column and can be 0-dbgLeft, 1-dbgRight, 2-dbgCenter, or 3-dbgGeneral. 
(By default, text is left-aligned and numbers are right-aligned.) The 
<I>Width </I>property specifies the width of each Column object, expressed in the units of the DataGrid's container.</P>

<A NAME="679"><h2>Run-Time Operations</h2></A>

<p>The DataGrid control is complex and is likely to demand some time from you 
before you're familiar with it. I'll outline the most common operations that you 
might want to perform on it, together with a few tricks to get the most out of this object.</P>

<A NAME="680"><h3>Working with the current cell</h3></A>

<p>The most important run-time properties of the DataGrid control are 
<I>Row </I>and <I>Col</I>, which set or return the position of the cell in the focus rectangle. The first row 
and the leftmost column return zero values. Once you make a given cell the current 
cell, you can retrieve and modify its contents using the DataGrid's 
<I>Text </I>property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Convert the current cell's contents to uppercase.
Private Sub cmdUppercase_Click()
    DataGrid1.Text = UCase$(DataGrid1.Text)
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>EditActive </I>property returns True if the current cell is being edited and 
False otherwise; you can also assign a value to this property to enter or exit edit 
mode programmatically. When the edit mode is entered, a 
<I>ColEdit </I>event is triggered:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save the current cell value before editing.
Private Sub DataGrid1_ColEdit(ByVal ColIndex As Integer)
    ' SaveText is a module-level variable.
    SaveText = DataGrid1.Text
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You can determine whether the current cell has been modified by querying 
the <I>CurrentCellModified </I>property, and you can also set this property to False and 
then set <I>EditActive </I>to False to completely cancel the edit operation. The 
<I>CurrentCellVisible</I> property is exposed by both the DataGrid and Split objects; it returns True if 
the current cell is visible in the object. If you set a Split's 
<I>CurrentCellVisible </I>property to True, the Split scrolls until the cell becomes visible; if you set the DataGrid 
control's <I>CurrentCellVisible </I>property to True, all the splits scroll to make the cell visible. 
While the current cell is being edited, you can also read and modify the grid's 
<I>SelStart,</I> <I>SelLength, </I>and <I>SelText 
</I>properties, as you would do with a regular TextBox control.</P>

<p>Because the DataGrid control is always bound to an ADO data source, 
the <I>Bookmark </I>property, which sets or returns the bookmark to the current record, is 
often more useful than the <I>Row </I>property. Even more interesting, whenever the user 
moves to another row, the current record in the underlying Recordset object 
automatically changes to reflect the new current cell. Thus, you can retrieve additional fields 
from the Recordset by simply querying the Recordset's 
Fields<I> </I>collection. The following code assumes that the DataGrid control is bound to an ADO Data control:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the current product's unit price in Euro currency.
' The RowColChange event fires when a new cell becomes current.
Private Sub DataGrid1_RowColChange(LastRow As Variant, _
    ByVal LastCol As Integer)
    ' The DOLLAR_TO_EURO_RATIO variable is defined elsewhere in the module.
    lblEuroPrice = Adodc1.Recordset(&quot;UnitPrice&quot;) * DOLLAR_TO_EURO_RATIO
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The DataGrid control's <I>Split </I>property returns an integer in the range 0 
through <I>Splits.Count-1</I>, which points to the split section that contains the current cell. You 
can also assign a new value to this property to move the focus to another split. When 
a grid is split into more sections, a few properties of the DataGrid control&#8212;such 
as <I>RecordSelectors </I>and <I>FirstRow</I>&#8212;are equivalent to the same properties exposed by 
the current split. In other words:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The following statements are equivalent.
DataGrid1.RecordSelectors = True
DataGrid1.Splits(DataGrid1.Split).RecordSelectors = True
</pre>
</td></tr>
</table>
</p>


<A NAME="681"><h3>Accessing other cells</h3></A>

<p>There are a few properties that let you retrieve and set the properties of any cell 
in the grid, but you have to use them in a way that isn't always intuitive. Each 
column object exposes the <I>Text </I>and <I>Value 
</I>properties: The former sets or returns the 
text displayed in the column for the current row, while the latter is the actual value 
in the column for the current row before it's formatted for display to the user. 
The Column object also exposes the <I>CellText 
</I>and <I>CellValue </I>methods, which return the contents of a cell in that column for any row, given its bookmark. There are 
several ways to retrieve the bookmark relative to a row, as I'll show you in a moment.</P>

<p><I>VisibleRows </I>and <I>VisibleCols </I>are read-only properties that return the number 
of visible rows and columns, respectively. There are no properties that directly 
return the total number of rows and columns. You can use the 
<I>ApproxCount </I>property, which returns the approximate number of rows; this number might differ from the 
actual value. To retrieve the number of columns, you must query the 
<I>Count </I>property of the Columns<I> </I>collection.</P>

<p>The DataGrid object exposes two methods that let you access the bookmark 
of any row in the control. <I>GetBookmark</I> returns a bookmark of a row relative to the 
current row: <I>GetBookmark(0) </I>is the same as the 
<I>Bookmark</I> property, <I>GetBookmark(-1) </I>is 
the bookmark of the row preceding the current row, 
<I>GetBookmark(1)</I> is the bookmark of the row following the current row, and so on. The other available 
method, <I>RowBookmark</I>,<I> </I>returns the bookmark of any visible row:
<I>RowBookmark(0) </I>is the bookmark of the first visible row, and 
<I>RowBookmark(VisibleRows-1) </I>is the bookmark of the last visible row.</P>

<p>The bookmark of the first row is also returned by the 
<I>FirstRow </I>property. According to the documentation, you can assign a new bookmark to this property 
to programmatically scroll the grid's contents, but I found that I always get an 
&quot;Invalid bookmark&quot; error when I try to assign a value to it. The 
<I>LeftCol </I>property holds the index of the first visible column, so you can programmatically display the upper left 
corner of the grid using the code shown below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DataGrid1.LeftCol = 0
Adodc1.Recordset.MoveFirst
DataGrid1.CurrentCellVisible = True
</pre>
</td></tr>
</table>
</p>


<p>The <I>FirstRow</I>, <I>LeftCol</I>,<I> </I>and 
<I>CurrentCellVisible </I>properties are also exposed by 
the Split object; here, also, assigning a value to the 
<I>FirstRow </I>property without raising an error appears impossible.</P>

<p>You can use the value returned by any of the preceding bookmark methods 
as an argument of the Column object's <I>CellText 
</I>and <I>CellValue </I>methods, described previously. For example, this code displays the difference in the Total field 
between the current row and the row that precedes the current row:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataGrid1_RowColChange(LastRow As Variant, _
    ByVal LastCol As Integer)
    Dim gcol As MSDataGridLib.Column
    If DataGrid1.Row &gt; 0 Then
        ' Get a reference to the current column.
        Set gcol = DataGrid1.Columns(&quot;Total&quot;)
        ' Display the difference between the values in the &quot;Total&quot; column
        ' of the current row and the cell immediately above it.
        Label1 = gcol.CellValue(DataGrid1.GetBookmark(-1)) - gcol.Value
    Else
        Label1 = &quot;(First Row)&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="682"><h3>Managing cell selections</h3></A>

<p>Users can select any number of adjacent columns by clicking on the column 
headers while keeping the Shift key pressed; they can also select any number of 
rows&#8212;even nonadjacent ones&#8212;by clicking on the leftmost gray column while keeping 
the Ctrl key pressed. (Multiple row selection, therefore, requires that the grid's or the 
split's <I>RecordSelectors </I>property is set to True.) The 
<I>SelStartCol </I>and <I>SelEndCol </I>properties set and return the indices for the first and last selected columns, respectively. 
You can clear the column selection by setting these properties to 
<I>-</I>1, or by invoking the <I>ClearSelCols </I>method. These properties and this method are also exposed by 
the Split object.</P>

<p>Because the user can select nonadjacent rows, the system to determine 
which rows are currently highlighted is based on the DataGrid control's 
<I>SelBookmarks </I>collection, which contains the bookmarks of all the selected rows. For example, to 
select the current row, execute the following statement:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DataGrid1.SelBookmarks.Add DataGrid1.Bookmark
</pre>
</td></tr>
</table>
</p>


<p>You can iterate on all the selected rows using a 
<I>For Each </I>loop. For example, the following code takes advantage of the 
<I>SelChange </I>event&#8212;which fires any time a column or a row is selected or deselected&#8212;to update a Label control with the 
sum of all the cells in the Total column for the rows that are currently selected:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataGrid1_SelChange(Cancel As Integer)
    Dim total As Single, bmark As Variant
    For Each bmark In DataGrid1.SelBookmarks
        total = total + DataGrid.Columns(&quot;Total&quot;).CellValue(bmark)
    Next
    lblGrandTotal = total
End Sub
</pre>
</td></tr>
</table>
</p>


<p>There's no method that programmatically clears selected rows; you can do this only by removing all the items in the <I>SelBookmark 
</I>collection, as in the following code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Do While DataGrid1.SelBookmarks.Count
    DataGrid1.SelBookmarks.Remove 0
Loop
</pre>
</td></tr>
</table>
</p>


<A NAME="683"><h3>Monitoring edit operations</h3></A>

<p>The DataGrid control has a rich collection of events that let you trap nearly every 
user action. Almost all these events are in the form 
<I>Before</I>xxxx and <I>After</I>xxxx, where 
<I>Before</I>xxxx events receive a <I>Cancel</I> parameter that you can set to True to cancel 
the operation. We've already seen the <I>ColEdit 
</I>event, which fires whenever a value in a cell is edited by pressing a key. This event is actually preceded by the 
related <I>BeforeColEdit </I>event, which lets you selectively make a cell read-only:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Refuse to edit a cell in the first column if it already contains a value.
Private Sub DataGrid1_BeforeColEdit(ByVal ColIndex As Integer, _
    ByVal KeyAscii As Integer, Cancel As Integer)
    ' Note how you can test Null values and empty strings at the same time.
    If ColIndex = 0 And DataGrid1.Columns(ColIndex).CellValue _
        (DataGrid1.Bookmark) &amp; &quot;&quot; &lt;&gt; &quot;&quot; Then
        Cancel = True
    End If 
End Sub
</pre>
</td></tr>
</table>
</p>


<p>If you cancel the edit operation in the <I>BeforeColEdit 
</I>event, the control doesn't receive any other event for this operation, which might be disorienting if 
you're accustomed to the ADO way of raising events, where a postnotification event 
fires even if the code in the prenotification event cancels the operation. The 
<I>KeyAscii </I>parameter contains the code of the key pressed to enter edit mode, or 0 if the 
user entered edit mode with a click of the mouse. Because this parameter is passed 
by value, you can't alter it. This isn't a problem, however, because the grid also 
receives all the usual <I>KeyDown</I>, 
<I>KeyPress</I>,<I> </I>and <I>KeyUp </I>events, which let you modify the 
value of the parameter that contains the code for the key the user pressed.</P>

<p>Any time you modify a value in a cell, the DataGrid control receives a 
<I>Change </I>event; if the edit operation actually modifies the value in a cell&#8212;that is, if you 
don't cancel it with the Esc key&#8212;the control also receives the 
<I>BeforeColUpdate</I> and <I>AfterColUpdate</I> events:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataGrid1_BeforeColUpdate(ByVal ColIndex As Integer, _
    OldValue As Variant, Cancel As Integer)
    ' Trap invalid values here.
End Sub
</pre>
</td></tr>
</table>
</p>


<p>But watch out for a quirk in the procedure. You can't access the value that 
is about to be entered in the grid by using the 
<I>Text </I>or <I>Value </I>properties of the 
DataGrid or the Column, because within this event procedure these properties return the 
value that was originally in the grid cell&#8212;that is, the same value returned by the 
<I>OldValue </I>parameter. It turns out that the DataGrid's 
<I>Text </I>property returns the string entered by the user only when the 
<I>EditActive </I>property is True, but this property has 
already been reset to False when processing the 
<I>BeforeColUpdate </I>event. The solution is to declare a form-level variable and assign it a value from within the 
<I>Change </I>event. For example, this code correctly checks that the value being entered isn't duplicated 
in any other record of the Recordset:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim newCellText As String

' Remember the most recent value entered by the user.
Private Sub DataGrid1_Change()
    newCellText = DataGrid1.Text
End Sub

' Check that the user isn't entering a duplicate value for that column.
Private Sub DataGrid1_BeforeColUpdate(ByVal ColIndex As Integer, _
    OldValue As Variant, Cancel As Integer)
    Dim rs As ADODB.Recordset, fldName As String
    ' Retrieve the field name for the current column.
    fldName = DataGrid1.Columns(ColIndex).DataField
    ' Search for the new value in the Recordset. Use a clone Recordset
    ' so that the current bookmark doesn't change.
    Set rs = Adodc1.Recordset.Clone
    rs.MoveFirst
    rs.Find fldName &amp; &quot;='&quot; &amp; newCellValue &amp; &quot;'&quot;
    ' Cancel the operation if a match has been found.
    If Not rs.EOF Then Cancel = True
End Sub
</pre>
</td></tr>
</table>
</p>


<p><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
This &quot;quirk&quot; is officially a bug, described in article Q195983 of 
the Microsoft Knowledge Base. However, the workaround shown here is simpler 
than the solution suggested in that article, which relies on the grid's 
<I>hWndEditor </I>property and the <I>GetWindowText 
</I>API function.
</BLOCKQUOTE></DIV></P>

<P>When the user moves to another row, a pair of <I>BeforeUpdate 
</I>and <I>AfterUpdate </I>events fire, and you have an opportunity to perform record-level validation 
and optionally reject the update. Here's the complete sequence of events that fire 
when the user edits a value in a column and then moves to the next or previous grid row:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TD VALIGN="TOP"><I>KeyDown</I></TD>
<TD VALIGN="TOP">The user presses a key.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>KeyPress</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>BeforeColEdit</I></TD>
<TD VALIGN="TOP">The grid enters edit mode.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>ColEdit</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>Change</I></TD>
<TD VALIGN="TOP">Now you can read the new value using the Text property. Here the <I>ActiveEdit </I>property becomes True.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>KeyUp</I></TD>
<TD VALIGN="TOP">The first key is released.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>KeyDown</I></TD>
<TD VALIGN="TOP">Another key is pressed.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>KeyPress</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>Change</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>KeyUp</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"></TD>
<TD VALIGN="TOP">Other keys are pressed.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>BeforeColUpdate</I></TD>
<TD VALIGN="TOP">The user moves to another column.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AfterColUpdate</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>     
<TD VALIGN="TOP"><I>AfterColEdit</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>RowColChange</I></TD>
<TD VALIGN="TOP">This event fires only when the move is complete.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>BeforeUpdate</I></TD>
<TD VALIGN="TOP">The user moves to another row.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AfterUpdate</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>RowColChange</I></TD>
<TD VALIGN="TOP">This event fires only when the move is complete.</TD>
</TR>
</TABLE></P>
    

   

<p><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
Be very careful with the code you place in the event procedures 
of a DataGrid control. To begin with, a few of these events, such as 
<I>RowColChange</I>, might fire multiple times if the grid is currently split into two or more 
areas, so you should avoid executing the same statements more than once. 
The <I>RowColChange </I>event, moreover, doesn't fire if the current record changes 
programmatically to a row that isn't fully visible; in this case, the grid correctly 
scrolls to make the new current record visible, but the event doesn't fire. This 
problem also occurs when the user moves to a record that isn't fully visible by using 
the buttons of the companion ADO Data control.
</BLOCKQUOTE></DIV></P>

<A NAME="684"><h3>Performing insert and delete operations</h3></A>

<p>The user can delete one or more rows by selecting them and then pressing the 
Delete key. This operation fires the <I>BeforeDelete 
</I>event (where you can cancel the command) and 
<I>AfterDelete </I>event, and then a <I>BeforeUpdate 
</I>and <I>AfterUpdate </I>pair of events. For example, you can write code in the 
<I>BeforeDelete </I>event procedure that checks 
whether the current record is the master record in a master-detail relationship, and 
either cancels the operation (as the following code illustrates) or automatically deletes 
all the related detail records.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataGrid1_BeforeDelete(Cancel As Integer)
    Dim rs As ADODB.Recordset, rsOrderDetails As ADODB.Recordset
    ' Get a reference to the underlying Recordset
    Set rs = Adodc1.Recordset
    ' Use the connection to perform a SELECT command that checks whether
    ' there is at least one record in the Order Details table that has
    ' a foreign key that points to the ProductID value of current record.
    Set rsOrderDetails = rs.ActiveConnection.Execute _
        (&quot;Select * FROM [Order Details] WHERE [Order Details].ProductID=&quot; _
        &amp; rs(&quot;ProductID&quot;))
    ' If EOF = False, there is a match, so cancel the delete command.
    If Not rsOrderDetails.EOF Then Cancel = True
End Sub
</pre>
</td></tr>
</table>
</p>


<p>If you cancel the delete command, the DataGrid control displays an 
error message. You can suppress this and other error messages from the control by 
trapping its <I>Error</I> event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataGrid1_Error(ByVal DataError As Integer, _
    Response As Integer)
    ' DataError = 7011 means &quot;Action canceled&quot;
    If DataError = 7011 Then
        MsgBox &quot;Unable to delete this record because there are &quot; _
            &amp; &quot;records in the Order Details table that point to it.&quot;
        ' Cancel the standard error processing by setting Response = 0.
        Response = 0
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Upon entry into this event, the <I>DataError 
</I>parameter contains the error code, whereas the 
<I>Response </I>parameter contains 1; you can prevent the grid from 
displaying the standard error message by setting the 
<I>Response</I> parameter to 0, as the previous example demonstrates. You can also test the standard error message by 
means of the DataGrid's <I>ErrorText </I>property.</P>

<P>If the <I>AllowAddNew </I>property is True, the DataGrid control displays a blank 
row at its bottom, marked with an asterisk, and the user can enter a new row&#8212;and 
therefore a new record in the underlying recordset&#8212;simply by typing a character in 
one of the cells in this row. When this happens, the control fires a 
<I>BeforeInsert </I>event, immediately followed by an 
<I>AfterInsert </I>event (unless you cancel the command), 
and then an <I>OnAddNew </I>event. The exact event sequence is as follows:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TD VALIGN="TOP"><I>BeforeInsert</I></TD>
<TD VALIGN="TOP">The user clicks on the last row.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AfterInsert</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>OnAddNew</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>RowColChange</I></TD>
<TD VALIGN="TOP">This event fires only when the move is complete.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>BeforeColEdit</I></TD>
<TD VALIGN="TOP">The user types a key.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>ColEdit</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>Change</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>Other Change and Key</I>xxx<I> events</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>BeforeColUpdate</I></TD>
<TD VALIGN="TOP">The user moves to another column on the same row.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AfterColUpdate</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AfterColEdit</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>RowColChange</I></TD>
<TD VALIGN="TOP">This event fires only when the move is complete. The 
user enters values in other cells on the same row.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>BeforeUpdate</I></TD>
<TD VALIGN="TOP">The user moves to another row.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AfterUpdate</I></TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>RowColChange</I></TD>
<TD VALIGN="TOP">This event fires only when the move is complete.</TD>
</TR>
</TABLE></P>


   

<p>You can monitor the current status using the 
<I>AddNewMode </I>property, which can be assigned one of the following values: 0-dbgNoAddNew (no AddNew 
command is in progress), 1-dbgAddNewCurrent (the current cell is on the last row, but 
no AddNew command is pending), 2-dbgAddNewPending (the current row is in the 
next-to-last row as a result of a pending AddNew command). An AddNew command 
can be initiated either by the user or by code, as the result of assignment to the 
<I>Text </I>or <I>Value </I>properties.</P>

<A NAME="685"><h3>Trapping mouse events</h3></A>

<p>The DataGrid control exposes all the usual mouse events, which are passed the 
mouse coordinates and the state of the shift keys. Unfortunately, the DataGrid control 
doesn't support OLE drag-and-drop operations, so you won't find the usual 
<I>OLE</I>xxxx properties, methods, and events. When working with the mouse, you're likely to use 
three methods exposed by the control: the <I>RowContaining 
</I>method, which returns the visible row over which the mouse cursor is located; the 
<I>ColContaining</I> method, which returns the corresponding column number; and finally the 
<I>SplitContaining </I>method, which returns the split number. If the mouse is outside the grid area&#8212;for 
example, when the mouse is over the record selectors area&#8212;these methods return 
-1. Here is an example that uses the <I>ToolTipText 
</I>property to display a ToolTip with the underlying value of the cell under the mouse, which can be especially useful if the 
column is too narrow to display longer strings:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
Private Sub DataGrid1_MouseMove(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    Dim row As Long, col As Long
    On Error Resume Next
    row = DataGrid1.RowContaining(Y)
    col = DataGrid1.ColContaining(X)
    If row &gt;= 0 And col &gt;= 0 Then
        DataGrid1.ToolTipText = DataGrid1.Columns(col).CellValue _
            (DataGrid1.RowBookmark(row))
    Else
        DataGrid1.ToolTipText = &quot;&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="686"><h3>Changing the grid layout</h3></A>

<p>You can programmatically change the layout of a DataGrid control by using one 
of the many properties and methods of the 
Splits and Columns collections. For 
example, you can add a new column using the <I>Columns.Add 
</I>method, as follows:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a Product Name column. (It will become the 4th column.)
With DataGrid1.Columns.Add(3)
    .Caption = &quot;Product Name&quot;
    .DataField = &quot;ProductName&quot;
End With
' You need to rebind the grid after adding a bound column.
DataGrid1.ReBind
</pre>
</td></tr>
</table>
</p>


<p>You can also remove a column from the layout, using the 
<I>Columns.Remove </I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Remove the column added by the previous code snippet.
DataGrid1.Columns.Remove 3
</pre>
</td></tr>
</table>
</p>


<p>Adding a split requires that you use the <I>Splits.Add 
</I>method. The argument you pass to this method is the position of the new split (0 for the leftmost split in the grid):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a new split to the left of all existing splits.
DataGrid1.Splits.Add 0
</pre>
</td></tr>
</table>
</p>


<p>After you create a split, you have to decide which columns are visible in 
it. Because each new split inherits all the columns from the grid, removing a 
column from one split would remove it from all the other splits, as described in the 
&quot;<A HREF="#674">Editing the Column Layout</A>&quot; section earlier in this chapter. Rather than deleting 
unwanted columns, make them invisible, as illustrated by the following code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a new split to the right of the existing split.
With DataGrid1.Splits.Add(1)
    ' Ensure that the two splits divide the grid's width in half.
    ' Assumes that the existing split's SizeMode property is 0-dbgScalable.
    ' (Always set SizeMode before Size!)
    .SizeMode = dbgScalable
    .Size = DataGrid1.Splits(0).Size
    ' This new split can be scrolled independently.
    .ScrollGroup = DataGrid1.Splits(0).ScrollGroup + 1
    ' Hide all the columns except the one labeled &quot;ProductName&quot;.
    For Each gcol In .Columns
        gcol.Visible = (gcol.Caption = &quot;ProductName&quot;)
    Next
End With
</pre>
</td></tr>
</table>
</p>


<A NAME="687"><h3>Dealing with lookup values</h3></A>

<p>Often a value retrieved from a database table isn't meaningful in itself and is 
only useful because it's a foreign key to another table where the real information is. 
For example, the Products table in NWind.mdb includes a SupplierID field, which 
contains the value of a key in the Suppliers table, where you can find the name and 
the address of the supplier for that particular product. When you're displaying the 
Products table in a DataGrid control, you might use a suitable JOIN statement for the 
ADO Data control's <I>RecordSource </I>property so that the grid automatically displays the 
correct supplier name instead of its key.</P>

<P>The ADO binding mechanism, however, provides you with a better 
alternative. The trick is to declare a custom StdDataFormat object, assign it to the 
<I>DataFormat</I> property of a Column object, and then use the 
<I>Format </I>event to transform the numeric key values coming from the data source into more descriptive strings of text. 
The following routine loads all the values from the secondary table (also known as 
the <I>lookup table</I>) into a hidden ComboBox control. The routine then uses the 
contents of that control in the <I>Format </I>event of the custom StdDataFormat object to 
translate the SupplierID key into the supplier's CompanyName field:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents SupplierFormat As StdDataFormat

Private Sub Form_Load()
    ' Load all the values from the Supplier lookup table into the
    ' hidden cboSuppliers ComboBox control.
    Dim rs As New ADODB.Recordset
    rs.Open &quot;Suppliers&quot;, Adodc1.Recordset.ActiveConnection
    Do Until rs.EOF
        cboSuppliers.AddItem rs(&quot;CompanyName&quot;)
        ' The SupplierID value goes into the ItemData property.
        cboSuppliers.ItemData(cboSuppliers.NewIndex) = rs(&quot;SupplierID&quot;)
        rs.MoveNext
    Loop
    rs.Close

    ' Assign the custom format object to the SupplierID column.
    Set SupplierFormat = New StdDataFormat
    Set DataGrid1.Columns(&quot;SupplierID&quot;).DataFormat = SupplierFormat
    ' Make the row height equal to the ComboBox's height.
    DataGrid1.RowHeight = cboSuppliers.Height
End Sub

Private Sub SupplierFormat_Format(ByVal DataValue As _
    StdFormat.StdDataValue)
    Dim i As Long
    ' Search the key value in the cboSuppliers ComboBox.
    For i = 0 To cboSuppliers.ListCount - 1
        If cboSuppliers.ItemData(i) = DataValue Then
            DataValue = cboSuppliers.List(i)
            Exit For
        End If
    Next
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Using the ComboBox control as a repository for the contents of the lookup 
table isn't a casual decision. In fact, with some wizardry we can even use the 
ComboBox to let the user select a new value for the SupplierID field. All we have to do is 
make the ComboBox control appear in front of the DataGrid control, exactly over the 
cell edited by the user, and then update the underlying SupplierID field when the 
user selects a new value from the list. For the best visual effect, you also need to trap 
a few events so that the ComboBox is always in the correct position, as in Figure 15-4. Here's the code that does the trick:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MoveCombo()
    ' In case of error, hide the ComboBox.
    On Error GoTo Error_Handler
    Dim gcol As MSDataGridLib.Column
    Set gcol = DataGrid1.Columns(DataGrid1.col)
    
    If gcol.Caption = &quot;SupplierID&quot; And DataGrid1.CurrentCellVisible Then
        ' Move the ComboBox inside the SupplierID column
        ' if it is the current column and it is visible.
        cboSuppliers.Move DataGrid1.Left + gcol.Left, _
            DataGrid1.Top + DataGrid1.RowTop(DataGrid1.row), gcol.Width
        cboSuppliers.ZOrder
        cboSuppliers.SetFocus
        cboSuppliers.Text = gcol.Text
        Exit Sub
    End If
Error_Handler:
    ' In all other cases, hide the ComboBox.
    cboSuppliers.Move _10000
    If DataGrid1.Visible Then DataGrid1.SetFocus
End Sub

Private Sub cboSuppliers_Click()
    ' Change the value of the underlying grid cell.
    DataGrid1.Columns(&quot;SupplierID&quot;).Value = _
        cboSuppliers.ItemData(cboSuppliers.ListIndex)
End Sub

Private Sub DataGrid1_RowColChange(LastRow As Variant, _
    ByVal LastCol As Integer)
    MoveCombo
End Sub

Private Sub DataGrid1_RowResize(Cancel As Integer)
    MoveCombo
End Sub

Private Sub DataGrid1_ColResize(ByVal ColIndex As Integer, _
    Cancel As Integer)
    MoveCombo
End Sub

Private Sub DataGrid1_Scroll(Cancel As Integer)
    MoveCombo
End Sub

Private Sub DataGrid1_SplitChange()
    MoveCombo
End Sub
</pre>
</td></tr>
</table>
</p>


<p>This code requires that the DataGrid control's 
<I>RowHeight </I>property match the ComboBox's <I>Height 
</I>property. Because the latter is read-only at run time, execute 
the following statement in the <I>Form_Load </I>event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Have the row height match the ComboBox's height.
DataGrid1.RowHeight = cboSuppliers.Height
</pre>
</td></tr>
</table>
</p>


<p>Another approach to lookup tables is based on the 
<I>Button </I>property of the Column object and the 
<I>ButtonClick </I>event. In this case, however, you get a better 
visual result if you display a ListBox (or DataList) control just under the current cell, 
rather than displaying a ComboBox or DataCombo control over the cell. Since the 
implementation of this latter method is similar to what I've shown previously, I leave it 
to you as an exercise.</P>


<p>
<A HREF="javascript:fullSize('F15ph04x.htm')"> <img src="F15ph04.JPG" width=404 height=284 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-4.</B> <I>The demonstration application uses lookup fields with drop-down ComboBoxes and supports splits, sort commands, and more.</i><!--/caption-->
</p>

<A NAME="688"><h3>Sorting data</h3></A>

<p>The DataGrid control doesn't offer any built-in functionality for sorting data. 
However, thanks to its <I>HeadClick </I>event and the ADO Recordset's 
<I>Sort </I>property, sorting data is an easy task that requires only a handful of statements:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataGrid1_HeadClick(ByVal ColIndex As Integer)
    ' Sort on the clicked column.
    Dim rs As ADODB.Recordset
    Set rs = Adodc1.Recordset
    
    If rs.Sort &lt;&gt; DataGrid1.Columns(ColIndex).DataField &amp; &quot; ASC&quot; Then
        ' Sort in ascending order; this block is executed if the
        ' data isn't sorted, is sorted on a different field,
        ' or is sorted in descending order.
        rs.Sort = DataGrid1.Columns(ColIndex).DataField &amp; &quot; ASC&quot;
    Else
        ' Sort in descending order.
        rs.Sort = DataGrid1.Columns(ColIndex).DataField &amp; &quot; DESC&quot;
    End If
    ' No need to refresh the contents of the DataGrid.
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The only limitation of this approach is that it doesn't work well if the 
column contains lookup values.</P>


<a name="A97"></a><h3>7.3.3 The Hierarchical FlexGrid Control</h3>

<A HREF="#A96">[Previous]</A> <A HREF="#A98">[Next]</A><P>

<A NAME="689"><h1>The Hierarchical FlexGrid Control</h1></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>The Hierarchical FlexGrid control is another grid control included in Visual Basic 
6. Unlike the DataGrid control, the Hierarchical FlexGrid control can merge 
contiguous cells in different rows if they contain the same values. This control really 
shines when you assign a hierarchical ADO Recordset to its 
<I>DataSource </I>property, because it can correctly display multiple bands&#8212;where each band is a set of data 
columns&#8212;that come from a different child Recordset in the hierarchical data structure, as 
shown in Figure 15-5. The only serious limitation of this control is that it's 
read-only&#8212;the cells can't be directly edited by the user.</P>

<P>The easiest way to create a Hierarchical FlexGrid control is to build a hierarchical Command object in a DataEnvironment designer, use the right mouse button to drop it on a form, and select the Hierarchical Flex Grid command from the pop-up menu. This operation adds the necessary references to the control's type library and links the newly created Hierarchical FlexGrid control to the Command object. All the examples in this section&#8212;as well as in the demonstration program on the 
CD&#8212;are based on the hierarchical Recordset obtained by setting a relationship among the Authors, Title, and Titles tables of the Biblio.mdb database.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
The Hierarchical FlexGrid control is source-code compatible with 
the older FlexGrid control, which is still included in Visual Basic 6, but doesn't 
support the newer ADO Data control and data sources. Thanks to this 
compatibility, the Hierarchical FlexGrid control can be used as a substitute for the 
older FlexGrid control. The minor differences between the controls will be 
highlighted in the following sections.
</BLOCKQUOTE></DIV></P>

<P>The Hierarchical FlexGrid control is included in the MSHFLXGD.OCX file, 
which must therefore be distributed with any application that uses this control.</P>

<p>
<A HREF="javascript:fullSize('F15ph05x.htm')"> <img src="F15ph05.JPG" width=404 height=203 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-5.</B> <I>A Hierarchical FlexGrid control showing a three-level hierarchical ADO Recordset (the Authors, Title, and Titles tables in Biblio.mdb).</I><!--/caption-->
</p>

<A NAME="690"><h2>Setting Design-Time Properties</h2></A>

<p>After you've created a bound Hierarchical FlexGrid control, you can right-click on 
it and select the Retrieve Structure menu command, which fills the grid with 
column headers, each one referring to a different field in the data source. Unfortunately, 
this grid doesn't expose an Edit command, so you can't use the mouse to modify 
the column layout and widths at design time. Unlike the DataGrid control, the 
Hierarchical FlexGrid doesn't expose an object model.</P>

<A NAME="691"><h3>The General tab</h3></A>

<p>The General tab, shown in Figure 15-6, allows you to assign a value to the control's <I>Rows </I>and <I>Cols</I> properties, which&#8212;as you probably expect&#8212;determine the number of rows and columns in the grid. These properties, however, affect the appearance of the control only in unbound mode&#8212;that is, when its 
<I>DataSource </I>doesn't point to an ADO data source. In all other cases, the dimensions of the grid depend on 
the number of records and fields in the source. The 
<I>FixedRows </I>and <I>FixedCols </I>properties affect how many fixed (nonscrollable) rows and columns are displayed at the left 
and on the upper borders of the grid. If the <I>AllowBigSelection 
</I>property is True, clicking on a row or column header selects the entire row or column.</P>

<p>The <I>Highlight </I>property affects the appearance of selected cells and can be 
one of the following enumerated values: 0-flexHighlightNever, 
1-flexHighlightAlways<I> </I>(the default&#8212;selected cells are always highlighted), and 
2-flexHighlightWithFocus<I> </I>(selected cells are highlighted only when the control has the focus). The 
<I>FocusRect </I>property determines which kind of border appears around the current cell: 
0-flexFocusNone (no border), 1-flexFocusLight (the default), or 2-flexFocusHeavy.</P>

<p>The <I>BandDisplay </I>property can change how bands are displayed in the 
control and can be either 0-flexBandDisplayHorizontal (the default, all bands 
corresponding to a record are displayed on the same row) or 1-flexBandDisplayVertical 
(each band is displayed in a separate row). Under normal circumstances, setting the 
grid's <I>Text </I>property or another cell-formatting property affects only the current cell; 
you can change this default behavior by changing the value of the 
<I>FillStyle </I>property from 0-flexFillSingle to 1-flexFillRepeat, in which case all the selected cells will be 
affected by the assignment. The <I>SelectionMode 
</I>property decides whether you can select any cell (0-flexSelectionFree, the default) or are forced to select entire 
rows (1flexSelectionByRow) or entire columns (2-flexSelectionByColumn).</P>

<p>The <I>AllowUserResizing </I>property determines whether the user can resize 
rows or columns with the mouse and takes one of the following values: 
0-flexResizeNone (no resizing is allowed), 1-flexResizeColumns, 2-flexResizeRows, or 
3-flexResizeBoth (the default). If this property is set to 2-flexResizeRows or 3-flexResizeBoth, you 
can limit the effect of a row resize with the <I>RowSizingMode 
</I>property, which can be 0flexRowSizeIndividual (only the resized row is affected&#8212;this is the default) 
or 1flexRowSizeAll (all rows are resized).</P>

<p>
<img src="F15ph06.JPG" width=404 height=304 border=0>
</p><p>
<!--caption--><B>Figure 15-6.</B> <I>The General tab of the Property Pages dialog box of a Hierarchical FlexGrid control.</i><!--/caption-->
</p>

<A NAME="692"><h3>The Bands tab</h3></A>

<p>The Bands tab is probably the most important tab in the Property Pages dialog 
box of the Hierarchical FlexGrid control, because here you decide which fields in the 
parent and child Recordsets are visible in the grid. Typically, you should hide 
those numeric key fields that are meaningless to the user and repeated occurrences 
of foreign keys. For example, in the demonstration program I hid the Au_ID and 
ISBN fields in Band 1 (the band that refers to the intermediate Title Author table), 
because the Au_ID is meaningless to the user and the ISBN field is already displayed in 
Band 2 (the band that refers to the Titles table). Because all the fields in Band 1 are 
invisible, the grid actually displays only two bands. You can also change the 
column caption of any visible field, as shown in Figure 15-7.</P>

<p>The Bands tab also allows you to set a few other Band attributes. In the 
GridLines field, you can select the type of line to draw between the current band and the 
next one. This value corresponds to the <I>GridLinesBand 
</I>property and can be one of the following values: 0-flexGridNone, 1-flexGridFlat (the default&#8212;the color is 
determined by the <I>GridColor </I>property), 2-flexGridInset, 3-flexGridRaised, 4-flexGridDashes, 
or 5-flexGridDots.</P>

<p>In the TextStyle combo box, you can select the 3-D effect used for 
displaying text in the band. This corresponds to the 
<I>TextStyleBand </I>property and can be one of the following values: 0-flexTextFlat (the default), 1-flexTextRaised, 
2-flexTextInset, 3-flexTextRaisedLight, or 4-flexTextInsetLight. Settings 1 and 2 work best for 
larger bold fonts, while settings 3 and 4 work better for smaller fonts. The 
<I>TextStyleHeader </I>property can take the same values but affects the style of the text in column headers.</P>

<p>The <I>BandIndent </I>property sets the number of columns by which a band 
is indented; this property has an effect only when the 
<I>BandDisplay </I>property is set to 1flexBandDisplayVertical. The 
<I>BandExpandable </I>Boolean property specifies 
whether the band can be expanded or collapsed; a plus or minus symbol is displayed in 
the first column of the band, unless the band is the last one on its row. The last 
property on this tab, <I>ColumnHeaders</I>, determines whether the grid displays column 
headers above the band.</P>

<p>
<img src="F15ph07x.gif" width=419 height=315 border=0>
</p><p>
<!--caption--><B>Figure 15-7.</B> <I>The Bands tab lets you decide which fields are visible in each band and what their captions are.</i><!--/caption-->
</p>

<A NAME="693"><h3>The other tabs</h3></A>

<p>The Style tab allows you to set a few other properties that affect the appearance 
of the grid. The <I>GridLinesFixed </I>property corresponds to the style of the grid lines 
(allowed values are the same as for the <I>GridLinesBand 
</I>property). The <I>TextStyleFixed</I> property determines the 3-D style used for text in the fixed rows and columns 
(using the same values as for the 
<I>TextStyleBand</I> property).</P>

<p>The <I>MergeCells </I>property determines how adjacent cells with similar values 
can be merged; this property is used only when the grid is manually filled with 
values and has no effect when the control is bound to a hierarchical ADO Recordset. 
(See the Visual Basic online documentation for further information.)</P>

<p>The <I>RowHeightMin </I>property is the minimum height for rows, in twips. 
The <I>GridLinesUnpopulated</I> property affects the style of cells that don't contain any 
values. The <I>WordWrap </I>property should be set to True if you want the text in cells 
to wrap if longer than the cell's width.</P>

<p>The Hierarchical FlexGrid control exposes many color and font properties 
that you can assign in the Color and Font tabs, respectively. See the Visual Basic 
documentation for additional details on these properties.</P>

<A NAME="694"><h2>Run-Time Operations</h2></A>

<p>The Hierarchical FlexGrid control has nearly 160 properties, and their 
thorough description would require more pages than we can afford here. But since 
most of these properties affect minor details of the control's appearance, they aren't 
tremendously interesting. What you really need is a guided tour through the most 
important properties, methods, and events.</P>

<A NAME="695"><h3>Working with the current cell</h3></A>

<p>The most significant run-time properties of the Hierarchical FlexGrid control are 
<I>Row</I>, <I>Col</I>,<I> </I>and <I>Text</I>, which set and return the coordinates and contents of the current 
cell. Remember that this control is inherently read-only: You can programmatically 
change the contents of any cell in the grid, but the new value won't be stored in the 
database. Also keep in mind that the grid automatically merges cells with the same 
values. For example, in the grid displayed in Figure 15-4, the cells in column 1 and 
rows 2 through 5 have the same value, and you can change this value by setting the 
<I>Text </I>property for any one of the cells that were merged together.</P>

<p>The control exposes a number of read-only properties that return 
information about the current cell. For example, you can find out what band the current 
cell belongs to by querying the <I>BandLevel </I>property, and you can determine the type 
of the current cell by querying the grid's <I>CellType 
</I>property, which returns one of the following values: 0-flexCellTypeStandard, 1-flexCellTypeFixed, 
2-flexCellTypeHeader, 3-flexCellTypeIndent, or 4-flexCellTypeUnpopulated.</P>

<p>Unlike the DataGrid control, the Hierarchical FlexGrid control allows you 
to completely determine the appearance of the current cell, through properties such 
as <I>CellBackColor</I>, <I>CellForeColor</I>, 
<I>CellFontName</I>, <I>CellFontSize</I>, 
<I>CellFontBold</I>, <I>CellFontItalic</I>, 
<I>CellFontUnderline</I>, 
<I>CellFontStrikeThrough</I>, and 
<I>CellFontWidth</I>. For example, the following code lets the user highlight any cell by double-clicking on it to 
change its background to red:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MSHFlexGrid1_DblClick()
    If MSHFlexGrid1.CellBackColor = vbWindowBackground Then
        ' Highlight a cell with white text on red background.
        MSHFlexGrid1.CellBackColor = vbRed
        MSHFlexGrid1.CellForeColor = vbWhite
    Else
        ' Restore default colors.
        MSHFlexGrid1.CellBackColor = vbWindowBackground
        MSHFlexGrid1.CellForeColor = vbWindowText
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>CellTextStyle </I>property determines the 3-D aspect of the text in the 
current cell. The <I>CellAlignment </I>property sets and returns the alignment attribute for the 
text in the currently selected cells; it can have one of the following values: 
0flexAlignLeftTop, 1-flexAlignLeftCenter, 2-flexAlignLeftBottom, 3flexAlignCenterTop, 
4flexAlignCenterCenter, 5-flexAlignCenterBottom, 6flexAlignRightTop, 
7flexAlignRightCenter, 8flexAlignRightBottom, 9-flexAlignGeneral (the default setting&#8212;strings to the 
left, numbers to the right).</P>

<p>You can also display an image in the current cell by assigning a suitable 
value to the <I>CellPicture</I> property and specifying the image's alignment through the 
<I>CellPictureAlignment</I> property. For example, you can display a string of text in the upper 
left corner and a picture in the lower right corner:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MSHFlexGrid1.CellAlignment = flexAlignLeftTop
MSHFlexGrid1.Text = &quot;This is an arrow&quot;
MSHFlexGrid1.CellPictureAlignment = flexAlignRightBottom
' You might need to edit the path to this icon file.
Set MSHFlexGrid1.CellPicture = LoadPicture( _
    &quot;C:\Microsoft Visual Studio\Graphics\Icons\Arrows\Arw02rt.ico&quot;)
</pre>
</td></tr>
</table>
</p>


<A NAME="696"><h3>Accessing other cells</h3></A>

<p>If the <I>FillStyle </I>property has been set to 1-flexFillRepeat, most of the properties 
already mentioned will affect all the cells in the selected range. These include the 
<I>CellPicture</I>,<I> CellPictureAlignment</I>, and all the 
<I>CellFont</I>xxxx properties. You therefore have a 
way to change the formatting of a group of cells by assigning the same properties 
you would assign for a single cell. A word of caution: Although you can assign a 
value to the <I>Text </I>property to fill all the selected cells with the same string, I found that 
on some occasions this action raises the error &quot;Method 'Text' of 'IMSHFlexGrid' 
failed.&quot; For this reason, you shouldn't assign a value to the 
<I>Text </I>property when more than one cell is selected, or you should at least protect such an assignment with an 
<I>On Error </I>statement.</P>

<P>To make the best use of the capacity to affect multiple cells with the 
assignment to a single property, you must learn how to use the 
<I>RowSel </I>and <I>ColSel </I>properties to retrieve the coordinates of the current selected range. These properties 
return the row and column of the cell at one corner of the rectangular selection area. 
The cell at the opposite corner is always the active cell and is therefore pointed to by 
the <I>Row </I>and <I>Col </I>properties. This means that to iterate on all the cells in the current 
selection you must write code such as the following:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Evaluate the sum of all the cells in the current selection.
Dim total As Double, r As Long, c As Long
Dim rowMin As Long, rowMax As Long
Dim colMin As Long, colMax As Long
' Determine the minimum and maximum row and column.
If MSHFlexGrid1.Row &lt; MSHFlexGrid1.RowSel Then
    rowMin = MSHFlexGrid1.Row
    rowMax = MSHFlexGrid1.RowSel
Else
    rowMin = MSHFlexGrid1.RowSel
    rowMax = MSHFlexGrid1.Row
End If
If MSHFlexGrid1.Col &lt; MSHFlexGrid1.ColSel Then
    colMin = MSHFlexGrid1.Col
    colMax = MSHFlexGrid1.ColSel
Else
    colMin = MSHFlexGrid1.ColSel
    colMax = MSHFlexGrid1.Col
End If
' Loop on all the selected cells.
On Error Resume Next
For r = rowMin To rowMax
    For c = colMin To colMax
        total = total + CDbl(MSHFlexGrid1.TextMatrix(r, c))
    Next
Next
</pre>
</td></tr>
</table>
</p>


<p>This code uses the <I>TextMatrix </I>property, which returns the contents of any 
cell in the grid. The code works correctly even if a cell spans multiple rows or 
columns, because in this case <I>TextMatrix </I>returns a nonempty value only for the 
row/column combination corresponding to the top left corner of the merged cell, so you 
never count the same number more than once.</P>

<P>The <I>Clip </I>property offers an efficient way to assign the contents of the cells 
that are currently selected. First, prepare a tab-delimited string, where individual rows 
are separated by vbCr characters and individual columns by vbTab characters. Then 
adjust the <I>RowSel </I>and <I>ColSel </I>properties to select a range of cells, and finally assign the 
string to the <I>Clip </I>property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim clipString As String
clipString = &quot;TopLeft&quot; &amp; vbTab &amp; &quot;TopRight&quot; &amp; vbCr &amp; &quot;BottomLeft&quot; _
    &amp; vbTab &amp; &quot;BottomRight&quot; &amp; vbCr
' Range must be 2 rows by 2 columns to match the clipString.
MSHFlexGrid1.RowSel = MSHFlexGrid1.Row + 1
MSHFlexGrid1.RowCol = MSHFlexGrid1.Col + 1
MSHFlexGrid1.Clip = clipString
</pre>
</td></tr>
</table>
</p>


<p>According to the documentation, this property should also return the 
contents of the current range as a tab-delimited string; unfortunately, there must be a 
bug somewhere because this property always returns an empty string. The 
<I>Clip </I>property works correctly in an MSFlexGrid control, so watch out when porting older 
Visual Basic 5 programs to Visual Basic 6. Until this bug is fixed, you can simulate the 
<I>Clip </I>property by using the following routine:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return the Clip property for an MSHFlexGrid control.
Function MSHFlexGrid_Clip(FlexGrid As MSHFlexGrid) As String
    Dim r As Long, c As Long, result As String
    Dim rowMin As Long, rowMax As Long
    Dim colMin As Long, colMax As Long
    ' Find minimum and maximum row and column in selected range.
    If FlexGrid.Row &lt; FlexGrid.RowSel Then
        rowMin = FlexGrid.Row
        rowMax = FlexGrid.RowSel
    Else
        rowMin = FlexGrid.RowSel
        rowMax = FlexGrid.Row
    End If
    If FlexGrid.Col &lt; FlexGrid.ColSel Then
        colMin = FlexGrid.Col
        colMax = FlexGrid.ColSel
    Else
        colMin = FlexGrid.ColSel
        colMax = FlexGrid.Col
    End If
    ' Build the clip string.
    For r = rowMin To rowMax
        For c = colMin To colMax
            result = result &amp; FlexGrid.TextMatrix(r, c)
            If c &lt;&gt; colMax Then result = result &amp; vbTab
        Next
        result = result &amp; vbCr
    Next
    MSHFlexGrid_Clip = result
End Function
</pre>
</td></tr>
</table>
</p>


<p>The <I>Clip </I>property is also useful to work around a known problem in the 
Hierarchical FlexGrid control: the control can't display more the 2048 rows when 
used in bound mode. When you bind the grid to a data source with more than 2048 
records, the <I>Rows </I>property contains the correct number of records, but only the first 
2048 records are displayed in the grid. To display all the records in the data source, 
you can use the ADO Recordset's <I>GetString </I>property to retrieve all the records and 
assign its result to the grid's <I>Clip </I>property. For additional information, see article 
Q194653 in the Microsoft Knowledge Base.</P>

<A NAME="697"><h3>Changing column attributes</h3></A>

<p>You can choose among several properties that affect the attributes of a column. 
The <I>ColAlignment</I> property affects how all the values in standard cells in a column 
are displayed:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Align the contents of all standard cells in column 2 to center and bottom.
' Column indexes are zero-based.
MSHFlexGrid1.ColAlignment(2) = flexAlignCenterBottom
</pre>
</td></tr>
</table>
</p>


<p>The <I>ColAlignmentFixed </I>property does the same, but it affects the cells in the fixed rows:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Align column headers to left and center.
MSHFlexGrid1.ColAlignmentFixed(2) = flexAlignLeftCenter
</pre>
</td></tr>
</table>
</p>


<p>The <I>ColWordWrapOption </I>property can be set to True to enable word 
wrapping in all the standard cells in a column, whereas the 
<I>ColWordWrapOptionFixed</I> property affects the wrapping status of the column header cells:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Enable word wrapping in all cells in column 5.
MSHFlexGrid1.ColWordWrapOption(4) = True
MSHFlexGrid1.ColWordWrapOptionFixed(4) = True
</pre>
</td></tr>
</table>
</p>


<p>The Hierarchical FlexGrid control offers a nonstandard way to set column 
and row headers. You can set them individually, using the 
<I>TextMatrix </I>property, but you can assign them in a single operation by using the 
<I>FormatString </I>property. In this case, you have to pass the column headers separated by pipe characters (|). You 
can precede column headers with special characters that affect their alignment 
(<I>&lt;</I> for left, <I>^</I> for center, and &gt; for right); you can also add a section to the format string, 
separated by a semicolon, containing the headers for all the strings. Here's an example:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display year numbers in column headers and month names in row headers.
MSHFlexGrid1.FormatString = &quot;Sales|&gt;    1998|&gt;    1999|&gt;    2000&quot; _
    &amp; &quot;;Sales|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec&quot;
</pre>
</td></tr>
</table>
</p>


<p>The width of each column caption indirectly affects the width of the 
column itself. For a more precise setting, use the 
<I>ColWidth </I>property. A bug in the implementation of this property makes the Hierarchical FlexGrid control ignore the 
formatting characters when used with fixed columns. Everything works well with a 
regular FlexGrid control. (For additional information, see article Q197362 in the 
Microsoft Knowledge Base.)</P>

<A NAME="698"><h3>Making the grid editable</h3></A>

<p>While the Hierarchical FlexGrid control is inherently a read-only control, it 
doesn't take much effort to add some basic editing capabilities to it. The trick, as you 
might have guessed, is to superimpose a TextBox control over the current cell so that 
it appears as if it belongs to the grid. You need to trap a few events to keep the 
TextBox in sync with the grid, but on the whole it doesn't require much code.</P>

<P>To make this technique work, add a TextBox control to the form and then 
set its <I>Visible </I>property to False, its <I>MultiLine 
</I>property to True, and its <I>BorderStyle 
</I>property to 0-None. These routines cause the phantom TextBox (named txtCellEditor) 
to appear and disappear as needed:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' These variables keep track of the cell that was active
' when edit mode was entered.
Dim cellRow As Long, cellCol As Long

Sub ShowCellEditor()
    With MSHFlexGrid1
        ' Cancel range selection, if any.
        .RowSel = .Row
        .ColSel = .Col
        ' Move the cell editor into place by making it one pixel smaller
        ' than the current cell.
        txtCellEditor.Move .Left + .CellLeft, .Top + .CellTop, _
            .CellWidth - ScaleX(1, vbPixels, vbTwips), _
            .CellHeight - ScaleY(1, vbPixels, vbTwips)
        ' Transfer the contents of the current cell into the TextBox.
        txtCellEditor.Text = .Text
        ' Move the TextBox in front of the grid.
        txtCellEditor.Visible = True
        txtCellEditor.ZOrder
        txtCellEditor.SetFocus
        ' Remember current coordinates for later.
        cellRow = .Row
        cellCol = .Col
    End With
End Sub

Sub HideCellEditor(Optional Cancel As Boolean)
    ' Hide the TextBox control if necessary.
    If txtCellEditor.Visible Then
        ' If the operation hasn't been canceled, transfer the contents
        ' of the TextBox into the cell that was active.
        If Not Cancel Then
            MSHFlexGrid1.TextMatrix(cellRow, cellCol) = txtCellEditor.Text
        End If
        txtCellEditor.Visible = False
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>ShowCellEditor </I>routine can move the TextBox into place, thanks to the 
grid's <I>CellLeft</I>, <I>CellTop</I>, 
<I>CellWidth</I>,<I> </I>and <I>CellHeight </I>properties. The next step is to 
determine when cell editing is activated. In the demonstration program, this happens when 
the grid is double-clicked or when the user presses an alphanumeric key when the 
grid has the input focus:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MSHFlexGrid1_DblClick()
    ShowCellEditor
End Sub

Private Sub MSHFlexGrid1_KeyPress(KeyAscii As Integer)
    ShowCellEditor
    ' If it's an alphanumeric key, it is passed to the TextBox.
    If KeyAscii &gt;= 32 Then
        txtCellEditor.Text = Chr$(KeyAscii)
        txtCellEditor.SelStart = 1
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Edit mode is terminated when the TextBox loses the focus (for example, 
when the user clicks elsewhere in the grid), or when either the Enter or Esc key is pressed:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtCellEditor_LostFocus()
    HideCellEditor
End Sub

Private Sub txtCellEditor_KeyPress(KeyAscii As Integer)
    Select Case KeyAscii
        Case 13
            HideCellEditor
        Case 27
            HideCellEditor True     ' Also cancel the edit.
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>


<p>It should be noted that this simple example modifies only the contents of 
the Hierarchical FlexGrid control without affecting the underlying ADO 
hierarchical Recordset. Updating the underlying ADO hierarchical Recordset is a more 
complex task, but the grid offers all the properties you need to determine which field in 
which record should be modified.</P>


<a name="A98"></a><h3>7.3.4 The DataReport Designer</h3>

<A HREF="#A97">[Previous]</A> <A HREF="#A100">[Next]</A><P>

<A NAME="699"><h1>The DataReport Designer</h1></A>
<P>
<img src="new.jpg" width=102 height=87 border="0">
</P>

<p>Visual Basic 6 is the first version that includes a report writer completely 
integrated in the IDE. Compared to the more popular Crystal Report, you'll probably 
find&#8212;especially for simpler reports&#8212;the new report designer easier to use. But it still 
lacks several features and can't reasonably replace Crystal Report or other third-party 
report writers for heavy-duty tasks. By the way, Crystal Report is still included in 
the package, even though you have to install it manually.</P>

<p>Before using the DataReport designer, you must make it accessible from the 
IDE, which you do by issuing the Components command from the Project menu, 
switching to the Designer tab, and ticking the Data Report check box. Alternatively, 
you can create a new Data Project and let Visual Basic create an instance of the 
DataReport designer for you.</P>

<p>The DataReport designer works in bound mode only, in the sense that it's 
able to automatically retrieve the data to be sent to the printer or simply displayed in 
the preview window. It can export a report to a text file or an HTML file and also 
supports custom format layouts. The DataReport designer comes with a set of custom 
controls that you can drop on its surface in the same way as you do with forms and 
other designers. These controls include lines, shapes, images, and 
also function fields, which you can use to create summary fields in your reports. Another intriguing feature of 
this designer is its ability to print in asynchronous mode, which lets the user perform 
other tasks while the printing proceeds.</P>

<A NAME="700"><h2>Design-Time Operations</h2></A>

<p>The simplest way to create a report using the DataReport designer is in 
conjunction with the DataEnvironment designer. The DataReport designer supports 
drag-and-drop operations of DataEnvironment's Command objects, including hierarchical 
Command objects. The only limitation is that the report can account for just one child 
Recordset at each nesting level. For all the examples in this chapter, I'll use a hierarchical 
Command object based on the Orders and Order Details tables in the NWind.mdb 
database. As usual, the complete sample application is provided on the companion CD.</P>

<A NAME="701"><h3>Binding to a Command object</h3></A>

<p>Here are the steps you should follow to create a report based on the sample 
hierarchical Command object:</P>
<OL>
<P><LI>Create a hierarchical Command, named Orders, that contains a child 
Command named Order Details. Ensure that it retrieves the information 
you're interested in&#8212;for example, by binding it to a Hierarchical FlexGrid control on a form and running the application.</LI></P>
<P><LI>Create a new instance of the DataReport designer, or use the one 
provided by default with a Data Project type of Visual Basic project.</LI></P>
<P><LI>Bring up the Properties window, let the DataReport's 
<I>DataSource </I>property point to <I>DataEnvironment1 
</I>(or whatever the name of your DataEnvironment is), and then set its 
<I>DataMember </I>property to <I>Orders</I>.</LI></P>
<P><LI>Right-click on the Report Header of the DataReport 
designer, and select the Retrieve Structure menu command; this will create a Group 
Header and Group Footer section labeled 
Orders_Header and Orders_Footer, respectively; between them is a Detail section labeled Order_Details_Detail.</LI></P>
<P>A section represents a block of data that will be repeated for 
each record in the parent Command object. The first section corresponds to 
the parent Command object, the second section to its child Command, 
and so on until you reach the Detail section, which corresponds to the 
innermost Command object. All the sections except the Detail section are 
divided into a header section and a footer section, which are printed 
before and after the information related to the sections pertaining to objects 
at an inner level. The DataReport designer also includes a Report 
section (which prints information at the beginning and end of the report) and 
a Page section (which prints information at the beginning and end of 
each page). If you don't see these two sections, right-click anywhere on 
the DataReport designer and select the appropriate menu command.</P>
<P><LI>Drag the fields you need from the 
Orders<I> </I>Command object in the DataEnvironment to the Orders_Header section of the DataReport. 
Whenever you release the mouse button, a pair of controls, RptLabel and 
a RptTextBox, appear in the DataReport. When the report is 
eventually displayed, the RptLabel control produces a constant string with the 
name of the field (or whatever you assigned to its 
<I>Caption </I>property), while the RptTextBox control is replaced by the actual contents of the 
corresponding database field. You can then arrange the fields in the 
Orders_Header section and delete the RptLabel controls that you don't want to display.</LI></P>
 <P><LI>Click on the Order Details<I> 
</I>Command object and drag it onto the DataReport; Visual Basic creates one RtpLabel-RptTextBox control pair 
for each field in the corresponding Recordset. You can then delete the 
OrderID field and arrange the others in a row, as displayed in Figure 15-8.</LI></P>

<P><LI>Adjust each section's height so that it doesn't take more room than 
strictly necessary. This is especially important for the Detail section, because 
it will be repeated for each single record in the Order Detail table. You 
can also reduce all the sections that don't contain any fields to a null height.</LI></P>

<P><LI>What you've done so far is sufficient to see the DataReport in action. 
Bring up the Project Property Pages dialog box, select 
DataReport1<I> </I>as the startup object, and then run the program.</LI></P>
</OL>
<p>Before moving on to another topic, a couple of notes about the placement 
of controls are in order. First, you can drop any control in the section that 
corresponds to the Command object it belongs to, as well as in any section with a deeper 
nesting level. For example, you can drop the OrderID field from the 
Orders<I> </I>Command in both the Orders section and the Order_Details section. You can't, however, move 
the UnitPrice field from the inner Order_Details section to the Order section. Second, 
you shouldn't drop binary fields or fields containing images from the 
DataEnvironment onto the DataReport designer; Visual Basic won't generate an error, but it will 
create a RptTextBox control that contains meaningless characters at run time.</P>

<p>
<A HREF="javascript:fullSize('F15ph08x.htm')"> <img src="F15ph08.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-8.</B> <I>The DataReport designer at design time, with the pop-up menu that appears when you right-click on a control.</i><!--/caption-->
</p>

<A NAME="702"><h3>Setting control properties</h3></A>

<p>The controls you have dropped on the DataReport's surface are similar to the 
standard controls you place on a form, but they belong to a different control library. 
In fact, you can't drop a standard intrinsic control on a DataReport designer, nor 
can you place a control from the DataReport control library on a form or another 
designer. But you can move DataReport controls and align them as you would do with 
any regular control. You can't use the commands in the standard Format menu, 
though, and you have to right-click on the control and use the commands in the pop-up 
menu, as shown in Figure 15-8.</P>

<p>DataReport controls react to the F4 key in the same way regular controls 
do, by displaying the Properties window. Because the RptLabel and RptTextBox 
controls are so similar to their standard counterparts, you should already be familiar 
with most of the properties you find in this window. For example, you can change 
the <I>DataFormat </I>properties of the 
txtOrderDate<I> </I>and txtShippedDate<I> </I>controls so that 
they display their values in long date format. Or you can change the 
txtOrderID<I> </I>control's <I>BackStyle </I>property to 1-rptBkOpaque and its 
<I>BackColor </I>property to gray (&amp;HE0E0E0) so that order identifiers are highlighted in the report. RptLabel controls don't 
expose any <I>Data</I>xxxx property; they're just cosmetic controls that insert fixed strings 
in the report.</P>

<p>The only custom property that we haven't seen yet is 
<I>CanGrow</I>, which applies to both the RptLabel and RptTextBox controls. If this property is True, the control 
is allowed to expand vertically when its content exceeds the control's width. The 
default value for this property is False, which causes longer strings to be truncated 
to the control's width.</P>

<A NAME="703"><h3>Adding controls</h3></A>

<p>Nothing prevents you from adding new controls to the DataReport from the 
Toolbox rather than from the DataEnvironment designer. In fact, the Toolbox includes 
a DataReport tab, which contains all the controls in the MSDataReportLib library. 
In addition to the RptLabel and RptTextBox controls, this library also contains the 
following items:</P>
<UL>
<p><LI>The RptLine and RptShape controls, which allow you to add lines 
and other elementary shapes to the report, including squares and 
rectangles (also with round corners), circles, and ovals. You can't change a line's width, but you can create horizontal and vertical lines of any width by using rectangular RptShape controls whose 
<I>BackStyle </I>property is set to 1rptBkOpaque.</LI></P>

<p><LI>The RptImage control, which adds static images to the report, such as 
a company logo. Unfortunately this control can't be bound to a data 
source, so you can't use it to display images stored in database binary fields.</LI></P>

<p><LI>The RptFunction control, a textbox variant that can automatically 
evaluate simple aggregate functions, such as count, sum, average, 
minimum, maximum, and standard deviation. (This control is described further in the next section.)</LI></P>
</UL>
<p>For example, drop a horizontal line in the Orders_Footer group, as shown 
in Figure 15-8. This control will draw a line to separate each group of detail 
information about an order. Using the <I>BorderStyle 
</I>property, you can also draw several types of dotted lines.</P>

<A NAME="704"><h3>Displaying calculated fields</h3></A>

<p>There are two ways to display calculated fields. The first way, which is suitable 
for calculated values that depend on other values in the same record, requires that 
you modify the SELECT command to include the calculated field in the list of fields to 
be retrieved. In the Orders example, you might have the inner Order Details 
Command object work with the following SELECT query:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT OrderID, ProductID, UnitPrice, Quantity, Discount, 
    ((UnitPrice*Quantity)*(1-Discount)) AS Total FROM [Order Details]
</pre>
</td></tr>
</table>
</p>


<p>Then you might add a Total field in the Detail section that lists the total price for 
each record from the Order Details table. Remember to align the field to the right and 
allow for the correct number of digits after the decimal point. This way of 
implementing calculated fields is fairly versatile because you can use all the functions offered 
by SQL. But it can only work on a record-by-record basis.</P>

<p>Another way to take advantage of SQL is to use a JOIN clause in the 
SELECT command to retrieve information from other tables. For example, you might 
transform the ProductID field in the Order Details table into the product's name from 
the Products table, using the following SELECT in the Order 
Details<I> </I>Command object:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT [Order Details].OrderID, [Order Details].ProductID, 
    [Order Details].UnitPrice, [Order Details].Quantity, 
    [Order Details].Discount, (([Order Details].UnitPrice*[Order 
    Details].Quantity)*(1-[Order Details].Discount))  AS Total, 
    Products.ProductName FROM [Order Details] INNER JOIN Products 
    ON [Order Details].ProductID = Products.ProductID
</pre>
</td></tr>
</table>
</p>


<p>You can use the same technique to display the customer's name in 
the Orders_Header section. The sample application, however, achieves the same 
result by using a different technique, which I'll explain in the &quot;<A HREF="#713">Adding Dynamic Formatting and Lookup Fields</A>&quot; section at the end of this chapter.</P>

<p>The second technique for adding a calculated field is based on 
RptFunction controls and is suitable for summary fields. For example, let's add a field that 
evaluates the total value of each order. This requires calculating the sum of the values 
of the Total field in the Order_Details<I> </I>Command. To do this, you must drop a 
RptFunction control into the Orders_Footer section&#8212;that is, the first footer after the section 
where the data to be summed is displayed. Then set the new control's 
<I>DataMember </I>property to Order_Details, its 
<I>DataField </I>property to Total, its <I>FunctionType 
</I>to 0rptFuncSum, and its <I>DataFormat </I>property to Currency. Using the same approach, you can add 
a summary field with the total number of distinct products in the order, by 
setting <I>DataField </I>to ProductID and <I>FunctionType 
</I>to 4-rptFuncRCnt.</P>

<p>You're not forced to place a RptFunction control in the footer section 
that immediately follows the section where the data field is. For example, to evaluate 
the sum of the Total fields from the 
Order_Details<I> </I>Command, you can 
add a RptFunction control in the Report Footer section, and you can add another RptFunction control 
 to calculate the sum of the Freight fields from the 
Orders<I> </I>section. In any case, you only have to set these controls' 
<I>DataMember </I>properties to point to the correct 
Command object. Unfortunately, you can't place a RptFunction control in a Page 
Footer section, so you can't have totals at the end of each page.</P>

<p>Thanks to the capabilities of the DataEnvironment designer, there is 
nothing special about preparing a report that groups records. For example, to display a 
list of customers grouped by country, all you have to do is create a Command 
object linked to the Customers table, switch to the Grouping tab of its Property Pages 
dialog box, and group the Command object by its Country field. This operation 
creates a new Command object with two folders. You can then assign this Command to 
the <I>DataMember</I> property of a DataReport designer and issue the Retrieve 
Structure command to let the designer automatically create the necessary sections. The 
sample application on the companion CD includes a report built using this technique.</P>

<A NAME="705"><h3>Managing page footers and page breaks</h3></A>

<p>You can place controls in a Page Header or Page Footer section, typically to 
display information about the current page number, the total number of pages, the date 
and time of the report, and so forth. To do this, right-click in the section of interest, 
select the Insert Control menu command, and then from a pop-up menu select the 
information you want to display.</P>

<p>A control created in this way is a RptLabel, which contains special 
characters in its <I>Caption </I>property. Table 15-1 summarizes the characters 
with a special meaning when inside a RptLabel control. You can create the control 
yourself and set a suitable <I>Caption </I>property&#8212;for example, 
<I>Page %p of %P </I>to display the current and the total number of pages&#8212;in the same RptLabel control. Figure 
15-9 displays the area near the bottom border of a report that includes a page 
footer, summary fields, and other embellishments that we've seen so far.</P>

<p>
<A HREF="javascript:fullSize('F15ph09x.htm')"> <img src="F15ph09.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-9.</B> <I>The DataReport designer at run time; the controls in the window let you print the report, export it to a file, and navigate through its pages.</I><!--/caption-->
</p>

<p>All the Section objects expose two properties that affect how page breaks 
are inserted in the report. The <I>ForcePageBreak 
</I>property determines if a new page should be started before or after the section and can take one of the following 
values: 0rptPageBreakNone (the default), 1-rptPageBreakBefore (add a page break 
before printing the section), 2-rptPageBreakAfter (add a page break immediately after 
the section), or 3-rptPageBreakBeforeAndAfter (add a page break immediately before 
and after the section).</P>

<p>The other property that affects the page breaks added to the report is 
the <I>KeepTogether </I>Boolean property. If you set this property to True, the 
DataReport designer will automatically insert a page break before the section if its contents would overflow to the next page. Both these properties are also exposed by the Report and Page sections, but they're ignored in these cases.</P>

<p><B>Table 15-1.</B> <I>The special characters accepted in a RtpLabel's 
</I>Caption <I>property.</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Symbol</i></TH>
<TH><i>Description</i></TH>
<TH><i>Symbol</i></TH>
<TH><i>Description</i></TH>
</TR>
<TR>
<TD VALIGN="TOP">%d</TD>
<TD VALIGN="TOP">Current date (Short format)</TD>
<TD VALIGN="TOP">%p</TD>
<TD VALIGN="TOP">Current page number</TD>
</TR>
<TR>
<TD VALIGN="TOP">%D</TD>
<TD VALIGN="TOP">Current date (Long format)</TD>
<TD VALIGN="TOP">%P</TD>
<TD VALIGN="TOP">Total number of pages</TD>
</TR>
<TR>
<TD VALIGN="TOP">%t</TD>
<TD VALIGN="TOP">Current time (Short format)</TD>
<TD VALIGN="TOP">%i</TD>
<TD VALIGN="TOP">The title of the report</TD>
</TR>
<TR>
<TD VALIGN="TOP">%T</TD>
<TD VALIGN="TOP">Current time (Long format)</TD>
<TD VALIGN="TOP">%%</TD>
<TD VALIGN="TOP">Percentage symbol</TD>
</TR>
</TABLE></P>
       
               



<A NAME="706"><h3>Other report properties</h3></A>

<p>The DataReport designer exposes many design-time properties, which you can 
modify in the Properties window as you would do with any other designer. Most of 
these properties are also exposed by forms&#8212;for example, 
<I>Caption</I>, <I>Font</I>, <I>WindowState</I>, 
and <I>ShowInTaskbar</I>&#8212;therefore, you already know how to use them. Some of these 
properties (such as <I>Caption </I>and 
<I>BorderStyle</I>) affect only the preview window; others 
(for example, <I>Font</I>) also affect the printed report.</P>

<p>Only a few properties are peculiar to the DataReport designer. The 
<I>LeftMargin</I>, <I>RightMargin</I>, 
<I>TopMargin</I>, and <I>BottomMargin </I>properties set and return the size of 
the printed report margins, whereas 
<I>ReportWidth</I> determines the width of the 
printed page. The <I>GridX </I>and <I>GridY </I>properties affect the distance between the division of 
the control grid at design time and are ignored at run time. All these measures are 
expressed in twips. The only other custom property of the DataReport designer is 
<I>Title</I>, which is used to replace the <I>%i 
</I>placeholder in RptLabel controls, as explained in 
the previous section, and is also used when displaying dialog boxes at run time.</P>

<p><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
You can make the DataReport window an MDI child window 
by setting its <I>MDIChild </I>property to True. Just be aware that there is a bug that 
sometimes makes the DataReport window disappear from the WindowList menu 
of the MDI application. For additional information and a workaround for this 
problem, see article Q195972 in the Microsoft Knowledge Base.
</BLOCKQUOTE></DIV></P>

<A NAME="707"><h2>Run-Time Operations</h2></A>

<p>While you can prepare great reports by merely dropping some controls on 
a DataReport designer, don't forget that because this is an object that exposes 
properties, methods, and events, it can be controlled through code at run time. The 
code can be placed outside the designer&#8212;for example, in the form that starts the 
reporting process&#8212;or inside the DataReport module itself. The latter approach lets 
you create a complex report and encapsulate all the code that manages it in the 
designer module so that you can easily reuse it in other projects.</P>

<A NAME="708"><h3>Printing the report</h3></A>

<p>The easiest way to print the report is to let the user start the operation 
interactively by clicking on the leftmost button in the DataReport preview window. Users can 
pick a printer from the list of installed ones and select a page range and the number 
of copies they want. They can even print to a file so that they can do the actual 
printing later. When you enable interactive printing, all you need to do is display 
the DataReport window, which you can do by using the 
<I>Show </I>method or (as is rarely done) by designating the DataReport designer as the startup object of the 
current project. You can use several properties to modify the default appearance of the 
preview window:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the DataReport in a modal maximized window.
DataReport1.WindowState = vbMaximized
DataReport1.Show vbModal
</pre>
</td></tr>
</table>
</p>


<p>You can fine-tune the printing process if you start the print process 
yourself through code. You will need the <I>PrintReport 
</I>method of the DataReport designer, which accepts several arguments and returns a Long value:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Cookie = PrintReport([ShowDialog], [Range], [PageFrom], [PageTo])
</pre>
</td></tr>
</table>
</p>


<p><I>ShowDialog </I>is a Boolean value that determines whether the designer 
will display the Print dialog box, and <I>Range 
</I>can be one of the following values<I>: </I>0rptRangeAllPages or 1-rptRangeFromTo. If you want to print a page range, 
you should pass the number of the first and last page to the 
<I>PageFrom </I>and <I>PageTo </I>arguments, respectively. The 
<I>PrintReport </I>method starts an asynchronous print process 
and returns a cookie value, which can be used to refer to the particular print 
operation. Here's an example:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the first 10 pages of the report without showing a dialog.
Dim Cookie As Long
Cookie = DataReport1.PrintReport(False, rptRangeFromTo, 1, 10)
</pre>
</td></tr>
</table>
</p>


<A NAME="709"><h3>Taking advantage of asynchronous processing</h3></A>

<p>Producing the report consists of three subprocesses: the query; the creation of a 
temporary file; and the actual print, preview, or export operation. The first two are 
synchronous operations; the third is asynchronous. While the DataReport designer 
is performing an asynchronous operation, it periodically fires a 
<I>ProcessingTimeout</I> event, approximately once every second. You can trap this event to let the user cancel a 
lengthy operation, using a block of code similar to the one shown below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_ProcessingTimeout(ByVal Seconds As Long, _
    Cancel As Boolean,ByVal JobType As MSDataReportLib.AsyncTypeConstants,_
    ByVal Cookie As Long)
    ' Display a message every 20 seconds.
    Const TIMEOUT = 20
    ' The value of Seconds when we displayed the last message.
    Static LastMessageSecs As Long
    
    ' Reset LastMessage if a new print operation is in progress.
    If Seconds &lt; LastMessageSecs Then
        LastMessageSecs = 0
    ElseIf LastMessageSecs + TIMEOUT &lt;= Seconds Then
        ' A new timeout interval has elapsed.
        LastMessageSecs = Seconds
        ' Ask the user whether the operation should be canceled.
        If MsgBox(&quot;This operation has been started &quot; &amp; Seconds _
            &amp; &quot; seconds ago.&quot; &amp; vbCr &amp; &quot;Do you want to cancel it?&quot;, _
            vbYesNo + vbExclamation) = vbYes Then
            Cancel = True
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>JobType </I>argument is the type of operation in progress and can be one 
of the following values: 0-rptAsyncPreview, 1-rptAsyncPrint, or 2-rptAsyncExport. 
<I>Cookie </I>identifies the particular operation and corresponds to the Long value returned by 
a <I>PrintReport </I>or <I>ExportReport </I>method.</P>

<P>If you're simply interested in displaying a progress indicator without 
canceling an asynchronous operation, you can use the 
<I>AsyncProgress </I>event, which is fired every time a new page is sent to the printer or exported to a file:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_AsyncProgress(ByVal JobType As 
    MSDataReportLib.AsyncTypeConstants, ByVal Cookie As Long, _
    ByVal PageCompleted As Long, ByVal TotalPages As Long)
    ' Display the progress in a Label control on the main form.
    frmMain.lblStatus = &quot;Printing page &quot; &amp; PageCompleted _
        &amp; &quot; of &quot; &amp; TotalPages
End Sub
</pre>
</td></tr>
</table>
</p>


<p>If the DataReport designer can't continue its operations because of an error, 
it raises an <I>Error </I>event. In this event, you can determine which operation failed 
and suppress the standard error message by setting the 
<I>ShowError </I>parameter to False:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_Error(ByVal JobType As 
    MSDataReportLib.AsyncTypeConstants, ByVal Cookie As Long, 
    ByVal ErrObj As MSDataReportLib.RptError, ShowError As Boolean)
    ' Display your own custom error message box.
    If JobType = rptAsyncPrint Or JobType = rptAsyncExport Then
        MsgBox &quot;Error #&quot; &amp; ErrObj.ErrorNumber &amp; vbCr _
            &amp; ErrObj.Description, vbCritical
        ShowError = False
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="710"><h3>Exporting a report</h3></A>

<p>Users can export the current report by clicking on the second button from the left 
in the DataReport preview window. In the dialog box that appears, they must select a 
file name, a file type, and a page range, as shown in Figure 15-10. The DataReport 
designer supports four types of export formats: HTML Text, Unicode, HTML, and Unicode 
Text. Note that the dialog doesn't display the correct number of total pages; this value 
depends on the export format and generally doesn't match the number of pages in 
the preview window (which depends on the Font used in the window itself). Also 
note that the exported report can't include graphics originated by RptImage and 
RptShape controls. Horizontal lines are acceptable in HTML reports and appear as rows of 
hyphens in text reports. Table 15-2 lists the indices, symbolic 
constants, and string values that you can use to identify the four predefined export formats.</P>

<p>
<img src="F15ph10x.gif" width=426 height=360 border=0>
</p><p>
<!--caption--><B>Figure 15-10.</B> <I>The Export dialog box lets you export a report in one of four predefined formats.</i><!--/caption-->
</p>

<P>The <I>ExportReport </I>method allows you to programmatically export a report, 
and has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Cookie = ExportReport([FormatIndexOrKey], [FileName], [Overwrite], 
    [ShowDialog], [Range], [PageFrom], [PageTo])
</pre>
</td></tr>
</table>
</p>


<p><I>FormatIndexOrKey </I>is a numerical index or a string key that identifies one of 
the predefined export formats, <I>FileName </I>is the name of the output file, 
<I>Overwrite </I>is a Boolean value that determines whether an existing file can be overwritten (the 
default is True), and <I>ShowDialog </I>is a Boolean value that specifies whether the standard 
export dialog box should be displayed. The remaining arguments have the same 
meaning as in the <I>PrintReport </I>method. The 
<I>ExportReport </I>method returns a Long value that 
can be used to identify this particular operation in a 
<I>ProcessingTimeout</I>, <I>AsyncProgress</I>, or 
<I>Error </I>event.</P>

<P>The <I>FormatOrIndexKey</I> is one of the values found in the first three 
columns of Table 15-2. In fact, you can pass a number in the range from 1 to 4, a 
<I>rptKey</I>xxxx symbolic constant, or its corresponding string value. If you omit either the 
export format or the file name, the Export dialog box is displayed even if you set 
<I>ShowDialog </I>to False:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Export all pages to an HTML file in the application's directory.
Cookie = DataReport1.ExportReport rptKeyHTML, App.Path &amp; &quot;\Orders&quot;, True
</pre>
</td></tr>
</table>
</p>


<p>The export dialog is also displayed if you specify the name of an existing 
file and pass <I>Overwrite </I>set to False. You can omit the file extension because the 
export filter adds the correct extension automatically.</P>

<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
The exporting features of the DataReport designer probably 
need some refinement. On many occasions, executing the preceding code caused 
a crash in the IDE. This problemn shows up randomly, and I've not been able 
to find a recurring pattern or a workaround for it.
</BLOCKQUOTE></DIV></P>

<p><B>Table 15-2.</B> <I>Indexes, symbolic constants and string values that identify the four predefined export formats.</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Index</i></TH>
<TH><i>Symbolic Constant</i></TH>
<TH><i>String</i></TH>
<TH><i>File Filter</i></TH>
<TH><i>Description</i></TH>
</TR>
<TR>
<TD VALIGN="TOP">1</TD>
<TD VALIGN="TOP">rptKeyHTML</TD>
<TD VALIGN="TOP">&quot;key_def_HTML&quot;</TD>
<TD VALIGN="TOP">*.htm, *.html</TD>
<TD VALIGN="TOP">HTML</TD>
</TR>
<TR>
<TD VALIGN="TOP">2</TD>
<TD VALIGN="TOP">rptKeyUnicode-HTML_UTF8</TD>
<TD VALIGN="TOP">&quot;key_def_Unicode-HTML_UTF8&quot;</TD>
<TD VALIGN="TOP">*.htm, *.html</TD>
<TD VALIGN="TOP">Unicode HTML</TD>
</TR>
<TR>
<TD VALIGN="TOP">3</TD>
<TD VALIGN="TOP">rptKeyText</TD>
<TD VALIGN="TOP">&quot;key_def_Text&quot;</TD>
<TD VALIGN="TOP">*.txt</TD>
<TD VALIGN="TOP">Text</TD>
</TR>
<TR>
<TD VALIGN="TOP">4</TD>
<TD VALIGN="TOP">rptKeyUnicode-Text</TD>
<TD VALIGN="TOP">&quot;key_def_Unicode-Text&quot;</TD>
<TD VALIGN="TOP">*.txt</TD>
<TD VALIGN="TOP">Unicode text</TD>
</TR>
</TABLE></P>


       



<A NAME="711"><h3>Creating custom export formats</h3></A>

<p>The export mechanism is fairly sophisticated. In fact, you can define your own 
export format by adding an ExportFormat object to the 
ExportFormats<I> </I>collection. The <I>Add </I>method of this collection expects five arguments, which correspond to the 
properties of the ExportFormat object being created:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ExportFormats.Add Key, FormatType, FileFormatString, FileFilter, Template
</pre>
</td></tr>
</table>
</p>


<p><I>Key </I>is the string key that will identify the new export format in the 
collection. <I>FormatType</I> is one of the following constants: 0-rptFmtHTML, 
1-rptFmtText, 2rptFmtUnicodeText, or 3-rptFmtUnicodeHTML_UTF8. 
<I>FileFormatString </I>is the description that will appear in the File Filter combo box within the Export dialog 
box, <I>FileFilter </I>is the file filter used for this type of report, and 
<I>Template </I>is a string that determines how the report is arranged:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_Initialize()
    ' Create a custom export format.
    Dim template As String
    template = &quot;My Custom Text Report&quot; &amp; vbCrLf &amp; vbCrLf _
        &amp; rptTagTitle &amp; vbCrLf &amp; vbCrLf _
        &amp; rptTagBody
    ExportFormats.Add &quot;Custom Text&quot;, rptFmtText, _
        &quot;Custom text format (*.txt)&quot;, &quot;*.txt&quot;, template
End Sub
</pre>
</td></tr>
</table>
</p>


<p>When creating the <I>Template </I>property, you can use two special strings that 
will work as placeholders to be replaced by the actual report elements. The 
DataReport library exposes such strings as symbolic constants: The rptTagTitle constant is 
replaced by the report title (much like a RptLabel control whose 
<I>Caption </I>property is set to <I>%i</I>), while rptTagBody is replaced by the report body. When you create template 
strings for HTML formats, you can enforce any text attribute, as in the following code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_Initialize()
    ' Create a custom HTML format for exporting this report.
    Dim template As String
    Title = &quot;Orders in May 1999&quot;
    template = &quot;&lt;HTML&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;HEAD&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;TITLE&gt;&quot; &amp; rptTagTitle &amp; &quot;&lt;/TITLE&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;BODY&gt;&quot; &amp; vbCrLf _
        &amp; rptTagBody &amp; vbCrLf &amp; _
        &quot;&lt;/BODY&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;/HTML&gt;&quot;
    ExportFormats.Add &quot;Custom HTML&quot;, rptFmtHTML, _
        &quot;Custom HTML format (*.htm)&quot;, &quot;*.htm;*.html&quot;, template
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Once you've added a custom ExportFormat object, it appears in the Export 
dialog box's combo box, and you can select it programmatically as you would a 
built-in export format:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Export the first page to an HTML report in custom format.
Cookie = DataReport1.ExportReport &quot;Custom Text&quot;, App.Path &amp; &quot;\Orders&quot;, _
    True, False, rptRangeFromTo, 1, 1
</pre>
</td></tr>
</table>
</p>


<A NAME="712"><h3>Changing the report layout at run time</h3></A>

<p>You often need to create several similar reports, such as one report that displays 
all the information in the Employees table and another that hides the confidential 
data. Because the DataReport is a programmable object, you can, in most cases, 
accommodate such minor differences with a few lines of code. In fact, you can reference 
 all the controls that make up the report and consequently move them around, 
change their size and visibility, or assign new values to properties such as 
<I>Caption</I>, <I>ForeColor</I>, and so on.</P>

<P>Before looking at the implementation details, you must learn how to 
reference a Section object, using the Sections<I> 
</I>collection, and to reference a control inside 
a given section:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Hide the footer section corresponding to the Orders Command.
DataReport1.Sections(&quot;Orders_Footer&quot;).Visible = False
' Change the background color of the lblTitle control.
DataReport1.Sections(&quot;Section1&quot;).Controls(&quot;lblTitle&quot;).Caption = &quot;May 99&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can reference a particular section using its numerical index or its 
name. When the DataReport is initially created, the default sections have generic 
names: Section1 is the Report Header, Section2 is the Report Footer, 
Section3<I> </I>is the Page Header, and 
Section4<I> </I>is the Page Footer. The sections that contain database fields 
take the names of the Command objects from which they retrieve data. In all cases, 
however, you can change the section's <I>Name </I>property in the Properties window.</P>

<P>Alas, you can't add controls at run time because the DataReport's 
Controls<I> </I>collection doesn't support the <I>Add 
</I>method (unlike the form's Controls<I> 
</I>collection). To work around this limitation, you have to incorporate all the possible fields 
when preparing a report and then hide those fields that aren't needed in a particular 
version of the report. You can also hide an entire section by using the section's 
<I>Visible </I>property, and you can shrink a section by using its 
<I>Height </I>property. There's a peculiarity, however: You can't reduce a section's height if the operation would leave 
one or more controls partially invisible. (This holds true even if the control's 
<I>Visible </I>property is False.) For this reason, after you make a control invisible, you have to 
decrease its <I>Top </I>property if you also want to shrink the section it belongs to.</P>

<P>The program on the companion CD puts all these techniques together to 
create a report in two versions (shown in Figure 15-11), with 
and without details on each order. To make the report a reusable entity, I've added a 
Public Boolean property named <I>ShowDetails</I>, which can be assigned from outside 
the DataReport module before invoking its 
<I>Show</I>, <I>PrintReport</I>,<I> </I>or <I>ExportReport 
</I>methods. This is the code inside the DataReport module that implements this feature:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A private member variable.
Dim m_ShowDetails As Boolean

Public Property Get ShowDetails() As Boolean
    ShowDetails = m_ShowDetails
End Property

Public Property Let ShowDetails(ByVal newValue As Boolean)
    Dim newTop As Single
    m_ShowDetails = newValue
    ' This property affects the visibility of the innermost section.
    Sections(&quot;Order_Details_Detail&quot;).Visible = m_ShowDetails
    ' It also affects the visibility of a few fields in the Orders section.
    ' This is the actual Top value if controls are visible; 0 otherwise.
    newTop = IIf(m_ShowDetails, 1870, 0)

    With Sections(&quot;Orders_Header&quot;)
        .Controls(&quot;lblProduct&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblProduct&quot;).Top = newTop
        .Controls(&quot;lblUnitPrice&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblUnitPrice&quot;).Top = newTop
        .Controls(&quot;lblQty&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblQty&quot;).Top = newTop
        .Controls(&quot;lblDiscount&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblDiscount&quot;).Top = newTop
        .Controls(&quot;lblTotal&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblTotal&quot;).Top = newTop
        .Controls(&quot;shaDetailHeader&quot;).Visible = m_ShowDetails
        .Controls(&quot;shaDetailHeader&quot;).Top = newTop
        ' Setting the section's Height to 0 shrinks it as much as possible.
        .Height = IIf(m_ShowDetails, 2200, 0)
    End With
End Property
</pre>
</td></tr>
</table>
</p>


<p>
<A HREF="javascript:fullSize('F15ph11x.htm')"> <img src="F15ph11.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-11.</B> <I>Two versions of the demonstration report, with and without detail data on each order.</i><!--/caption-->
</p>

<A NAME="713"><h3>Adding dynamic formatting and lookup fields</h3></A>

<p>At first sight, it seems that the DataReport design has little to offer highly 
experienced Visual Basic programmers who have learned to use more powerful report writers 
such as Crystal Report. The truth is, however, that when you combine the DataReport 
with the standard ADO binding mechanism, its potential increases markedly.</P>

<P>The key to such power isn't obvious until you remember that you can 
control the format of bound fields through the <I>Format 
</I>event of a StdDataFormat object. Because this event fires each time a value is read from the data source, it offers a 
way to execute your custom code each time a record is about to be displayed on the 
report. The following example shows how you can use this technique to omit null 
discount values:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is used to trap the instant when a new record is read.
Dim WithEvents DiscountFormat As StdDataFormat

Private Sub DataReport_Initialize()
    ' Create a StdDataFormat object, and assign it to the txtDiscount field.
    Set DiscountFormat = New StdDataFormat
    Set Sections(&quot;Order_Details_Detail&quot;).Controls(&quot;txtDiscount&quot;). _
        DataFormat = DiscountFormat
End Sub

Private Sub DiscountFormat_Format(ByVal DataValue As _
    StdFormat.StdDataValue)
    ' If the discount is zero, use a Null value instead.
    If CDbl(DataValue.Value) = 0 Then DataValue.Value = Null
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Unfortunately, the code inside a <I>Format </I>event procedure can't directly 
modify a control's properties, such as 
<I>Visible</I>, <I>ForeColor</I>, or 
<I>BackColor</I>. Nor can it dynamically assign an image to a RptImage control while the report is being processed, 
which would enable you to overcome the designer's inability to display bitmaps stored 
in a database. If these limitations were addressed, the DataReport designer would 
become a tool suitable even for most demanding reporting jobs.</P>

<p>The only other (minor) problem I found with this approach is that 
the <I>DataValue.TargetObject </I>property contains Nothing when the event fires, so you 
can't assign the same StdDataFormat object to the 
<I>DataFormat </I>properties of multiple controls, because you wouldn't have any means to tell which field is being processed.</P>

<p>The demonstration program also shows how you can implement lookup 
fields using a variant of this mechanism. In its 
<I>Initialize </I>event, the DataReport opens a Recordset that points to the lookup table, and in the 
<I>Format </I>event, it transforms the CustomerID value in the Orders table into the value of the CompanyName field 
in the Customers table:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents CustFormat As StdDataFormat
' Used to look up the CustomerID field in the Customers table
Dim rsCust As New ADODB.Recordset

Private Sub DataReport_Initialize()
    ' Create a new format object, and assign it to the txtCustomer field.
    Set CustFormat = New StdDataFormat
    Set Sections(&quot;Orders_Header&quot;).Controls(&quot;txtCustomerName&quot;).DataFormat _
        = CustFormat
    ' Open a Recordset on the Customers table.
    rsCust.Open &quot;Customers&quot;, DataEnvironment1.Connection1, adOpenStatic, _
        adLockReadOnly, adCmdTable
End Sub

Private Sub DataReport_Terminate()
    ' Close the Recordset.
    rsCust.Close
    Set rsCust = Nothing
End Sub

Private Sub CustFormat_Format(ByVal DataValue As StdFormat.StdDataValue)
    ' Transform a CustomerID value into the customer's CompanyName.
    rsCust.MoveFirst
    rsCust.Find &quot;CustomerID='&quot; &amp; DataValue.Value &amp; &quot;'&quot;
    If rsCust.EOF Then
        DataValue.Value = Null                     ' Match not found.
    Else
        DataValue.Value = rsCust(&quot;CompanyName&quot;)    ' Match found.
    End If
End Sub

</pre>
</td></tr>
</table>
</p>


<p>This chapter concludes the part of the book devoted to database programming. 
At this point, you probably know more than you ever dreamed of knowing about 
ADO, and above all you're aware of its incredible power and some of its shortcomings. 
In the next part of the book, I describe how you can take advantage of what you 
have learned about classes and objects to create ActiveX components and controls. If 
you're a database programmer, you'll find additional material in <a href="#A111">Chapter 18</a> about the 
inner workings of ADO, including directions for building your own data source classes 
and OLE DB providers.</P>

<a name="A99"></a><h1>8. Part IV: ActiveX Programming</h1>
<a name="A100"></a><h2>8.1 Chapter 16 -- ActiveX Components</h2>

<A HREF="#A98">[Previous]</A> <A HREF="#A101">[Next]</A><P>


<font size="+3">Chapter 16</font>

<A NAME="714"><h1>ActiveX Components</h1></A>
<p>A feature that greatly contributed to making Visual Basic one of the most 
popular languages for Microsoft Windows programming is its ability to create ActiveX 
components and controls. As you'll see in this chapter, creating an ActiveX 
component is an easy process, and in most cases you can turn a class-based application into 
a component simply by changing a few project settings. This shouldn't be a 
surprise; after all, classes were introduced in Visual Basic 4 with their main (or only) 
purpose being to help in the delivery of COM components. This move was necessary 
because Microsoft intended to propose Visual Basic as a language for developing 
complex multitier client/server applications.</p>


<a name="A101"></a><h3>8.1.1 Introducing COM</h3>

<A HREF="#A100">[Previous]</A> <A HREF="#A102">[Next]</A><P>

<A NAME="715"><h1>Introducing COM</h1></A>
<p>I don't want to dive into the technical details of COM, but to understand the 
potential of Visual Basic in this area you need at least to understand a few key concepts.</p>

<A NAME="716"><h2>A Long Story Made Short</h2></A>
<p>When Microsoft launched Windows, its first operating system able to execute 
multiple applications at the same time, everyone could see that Microsoft needed to devise 
a system for those applications to exchange data and communicate with one 
another. The Clipboard was good for doing simple cut-and-paste operations, but it was too 
primitive and didn't address the most demanding requirements that 
Windows now posed.</p>

<p>The first serious attempt in the right direction was DDE (Dynamic Data 
Exchange), a communication protocol that let applications call each other. DDE wasn't 
very successful, probably because of its lack of reliability. Even though it was 
extended to work on LANs (Network DDE) and was therefore able to connect applications 
on different workstations, few Windows applications implemented it. (Visual Basic 
offers limited support of DDE, but I don't cover it in this book.)</p>

<p>The first version of OLE (Object Linking and Embedding) for Windows 
3.1 appeared in 1992 and used DDE as the underlying means for interapplication 
communications. OLE was the first protocol that enabled users and programmers to 
create <I>compound documents</I>&#8212;that is, documents that contain data from different 
applications (for example, an Excel worksheet inside a Word document). Depending on 
the application's needs, compound documents can completely encapsulate other 
simpler documents (embedding) or contain simply a reference to existing documents 
(linking). When the user clicks on an embedded or linked document inside a compound 
document, Windows runs the application that's capable of dealing with that particular 
type of document.</p>

<p>OLE 2 was released in 1993, and for the first time it included the support 
for <I>in-place activation, </I>which gave a user the ability to edit compound documents 
without opening a different window. For example, OLE 2 lets you edit an Excel 
worksheet embedded in a Word document without leaving the Word environment. But 
you see only the Excel menus, which replace Word's menus when you're editing 
the embedded data. OLE 2 was an important step also because it abandoned DDE as 
the communication protocol and relied instead on a new component-based 
architecture: COM (Component Object Model).</p>

<p>It gradually became apparent that the COM infrastructure was even more 
important than linking and embedding technologies. While the ability to create 
compound documents is remarkable from the user's standpoint, developers found 
that they could build great applications just using COM. In fact, COM promotes the 
concept of component-based development, which lets you subdivide large 
applications into smaller pieces that you can maintain and deploy more easily than you can 
a monolithic application. The portion of OLE that lets programs talk to each other 
is known as <I>OLE Automation</I>. Many programming languages can work as 
<I>OLE</I> <I>Automation clients, </I>which control other applications known as 
<I>OLE Automation servers</I>. For example, you can drive Excel and Word from the outside using Visual Basic 
3 and later versions as well as VBScript.</p>

<p>The potential for this new programming paradigm became evident when 
Microsoft shipped Visual Basic 4 Enterprise Edition, which included the support for 
Remote Automation. Not only were Visual Basic programmers finally able to create COM 
components, they were also the pioneers who could launch and execute a 
component located on a computer across<I> </I>the network, using that machine's CPU, 
memory, and other resources. Distributed computing had made its debut on Windows platforms.</p>

<p>At the time Visual Basic 4 was released, another type of component 
appeared for the first time: OLE controls. These were the successors to the VBX controls, 
which had greatly contributed to the popularity of Visual Basic. The problem with 
VBX controls was that they were based on a proprietary architecture, namely, the 
Visual Basic environment, which made it nearly impossible to use them with 
different languages. When switching to 32-bit platforms, Microsoft decided to create a 
new type of controls based on OLE that could be adopted and supported by other 
manufacturers as well.</p>

<p>Remote Automation was just the test drive for the next technology, 
Distributed COM, or DCOM for short. DCOM was officially released with Microsoft 
Windows NT 4 in 1996. Many programmers continued to use Remote Automation for 
a while, until in 1997 Microsoft released DCOM95.EXE, which added support for 
DCOM even on Windows 95 systems. DCOM proved to be more efficient and reliable 
than Remote Automation, which Microsoft no longer revises. The only advantage of 
Remote Automation is its ability to communicate with 16-bit platforms. On the 
other hand, if you're writing Visual Basic 5 and 6 applications you're inherently 
addressing only 32-bit platforms, and you won't have much use for Remote Automation.</p>

<p>The latest technology released from Microsoft's labs is ActiveX. In a 
sense, ActiveX is Microsoft's answer to the new challenges of the Internet. For example, 
OLE controls were too heavy to be easily transferred through the Net, so Microsoft 
needed to devise a new type of control. Nowadays, ActiveX has become a sort of 
synonym for OLE, and you can refer to COM components as ActiveX components. With the 
advent of ActiveX, OLE Automation has been renamed simply Automation. ActiveX 
also introduced new words to the ever-growing developers' dictionary: ActiveX 
controls and ActiveX documents. ActiveX controls have replaced OLE controls, while 
ActiveX documents have replaced OLE documents and permit programmers to create 
active documents that can be opened inside a container (for example, Microsoft 
Internet Explorer). Visual Basic 5 and 6 can create both ActiveX controls and documents.</p>

<A NAME="717"><h2>Types of COM Components</h2></A>
<p>You can classify COM code components into three types, according to where 
the component runs.</p>

<A NAME="718"><h3>In-process servers (DLL)</h3></A>
<p>The simplest type of COM component is a DLL that executes in the same address 
space as the application that's using it. Because each process under 32-bit platforms 
has its own address space, each one works with a distinct instance of the 
component. These components communicate directly with their clients, without the aid of 
COM, which makes them the most appropriate choice when speed really matters. Their 
main disadvantage is that the client isn't protected from the server's malfunctioning, 
and vice versa: If the component comes to a fatal error, its client application also crashes.</p>

<p>ActiveX controls are a special category of in-process components that can 
be hosted by an ActiveX container, such as a Visual Basic form. To qualify as an 
ActiveX control, a component must implement a number of interfaces defined by the 
ActiveX specifications. As a Visual Basic programmer, however, you don't have to worry 
about these additional interfaces because Visual Basic does everything for you. ActiveX 
controls are described in <a href="#A106">Chapter 17</a>.</p>

<A NAME="719"><h3>Local out-of-process servers (EXE)</h3></A>
<p>You can also compile an ActiveX component as an EXE program. This is 
convenient when you want to create an application that can work as a stand-alone program 
and offer programmable objects to the outside at the same time. The best examples 
of such servers are the applications in the Microsoft Office suite: You can use Excel 
or Word either as independent applications or as providers of components that you 
can use from within your own programs. EXE servers execute in their own address 
spaces, which makes the communication with their clients slower than with in-process 
components. On the other hand, ActiveX EXE servers are somewhat safer than 
in-process servers. If a component crashes, the client application is usually able to recover.</p>

<A NAME="720"><h3>Remote out-of-process servers (EXE)</h3></A>
<p>Remote servers are EXE programs that run on a machine different from the one 
that is running the client application. The client and the server communicate 
through DCOM (or Remote Automation). Needless to say, the communication is even 
slower than with local servers, but remote components offer the ability to create true 
distributed applications. A server executing on a remote machine doesn't take 
processor time or memory away from the client application, so you can subdivide 
complex tasks among all the machines in your network. Moreover, if you have to complete 
a task that heavily uses a resource located elsewhere in the network (for example, 
a complex query on a database engine or a lengthy print job), it's more convenient 
to delegate the task to a remote component that executes on the machine where 
the resource is physically located.</p>

<p>A great thing about remote servers is that they aren't different at all from 
regular local EXE servers. In fact, the same server can provide its services to applications 
on the machine where it resides (thus working as a local server) and to applications 
that run on other machines (thus working as a remote server).</p>

<p>You can also run a DLL as a remote server. To allow a DLL to live an 
independent life, you need to be sure that the DLL is hosted in a 
<I>DLL surrogate process </I>on the remote machine. This is the principle upon which components for 
Microsoft Transaction Server are based. I don't cover MTS programming in this book, though.</p>

<A NAME="721"><h3>Using existing components</h3></A>
<p>To let you taste the power of component-based programming, I'll show you 
how simple it is to add a spell checker to your Visual Basic application. Developing a 
spell checker program isn't a trivial task, and it could take you several months to do it, 
if not years. Fortunately, Microsoft Word already includes a good spell checker and, 
most important, Word exposes it as a programmable object through Automation. All 
you have to do is take advantage of this capability and create an application that uses 
Word as a server.</p>

<p>The first step for using any Automation component is to add a reference to 
the library in the References dialog box, which you can reach from the Project 
menu. Browse the list of available references, and tick &quot;Microsoft Word 8.0 Object 
Library&quot;. (This example assumes that you have installed Microsoft Word 97 on your 
system.) After you do this, you can explore all the objects exposed by the Word library 
using the Object Browser, and you can even ask for help with or information about a 
specific method or property if you installed the VBAWRD8.hlp file. (See Figure 16-1.)</p>

<p>
<A HREF="javascript:fullSize('f16ph01x.htm')"> <img src="f16ph01.JPG" width=404 height=278 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-1.</B> <i>The References dialog box with the Microsoft Word library selected and the Object Browser that displays the contents of the library itself.</i><!--/caption-->
</p>

<p>You can get your project to work as an Automation client even if you don't 
add a reference to the library. In that case, however, you must create objects using 
the <I>CreateObject </I>function instead of the 
<I>New </I>keyword. And you must store object 
references in generic <I>As Object </I>variables rather than in specific variables, which 
means that you can use only the less efficient late binding instead of early binding. All 
clients written in Visual Basic 3 and VBScript can access Automation servers only 
through this method.</p>

<p>After you've added a reference to the Word library, you can proceed as if 
its objects were local to your application. For example, you can declare a variable 
and create a new instance of the Word.Application object when your main form loads:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim MSWord As Word.Application

Private Sub Form_Load()
    ' Create the instance of Word that will be used later.
    Set MSWord = New Word.Application
End Sub
</pre>
</td></tr>
</table></p>

<p>When an object of the Word library is created, the Word application itself 
is invisible. This lets you use its objects without your users even noticing that you 
use any external library. Of course, you can make Word visible, if you want to:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
MSWord.Visible = True
</pre>
</td></tr>
</table></p>

<p>The demonstration program I've prepared, however, uses Microsoft Word 
but hides it from users. Figure 16-2 shows what users actually see. Its main routine is 
the one that actually performs the spell checking and, if a word is found to be 
incorrect, fills the ListBox control with a list of suggestions to replace it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdCheck_Click()
    Dim text As String
    Dim suggestion As Word.SpellingSuggestion
    Dim colSuggestions As Word.SpellingSuggestions
    
    ' Add a document if there aren't any (needed to get suggestions).
    If MSWord.Documents.Count = 0 Then MSWord.Documents.Add
    text = Trim$(txtWord.text)

    lstSuggestions.Clear
    If MSWord.CheckSpelling(text) Then
        ' The word is correct.
        lstSuggestions.AddItem &quot;(correct)&quot;
    Else
        ' The word is incorrect. Get the list of suggested words.
        Set colSuggestions = MSWord.GetSpellingSuggestions(text)
        If colSuggestions.Count = 0 Then 
            lstSuggestions.AddItem &quot;(no suggestions)&quot;
        Else
            For Each suggestion In colSuggestions
                lstSuggestions.AddItem suggestion.Name
            Next
        End If
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>
<img src="f16ph02.GIF" width=330 height=229 border=0>
<p>
<!--caption--><B>Figure 16-2.</B> <i>The sample application that uses Microsoft Word to check the spelling of individual words.</i><!--/caption-->


<p>The key method in the <I>cmdCheck_Click </I>routine is 
<I>CheckSpelling</I>, which returns True if the word passed as an argument is correct and False otherwise. In the 
latter case, the program calls the <I>GetSpellingSuggestions 
</I>method, which returns a collection that contains 0 or more SpellingSuggestion objects. If there are any 
suggestions, they're enumerated using a <I>For 
Each</I> loop and loaded in the ListBox control.</p>

<p>The preceding routine creates an instance of the Word.Application class 
using the <I>New </I>keyword, exactly as if the class were internal to the current project. But 
when you're working with COM objects, you can also use the 
<I>CreateObject </I>function, which accepts the name of the class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' An alternative way to create a Word.Application object
Set MSWord = CreateObject(&quot;Word.Application&quot;)
</pre>
</td></tr>
</table></p>

<p>The <I>CreateObject </I>function is inherently more versatile than the 
<I>New </I>keyword because you can create the class name string at run time instead of hard coding it 
in the client's source code. Other subtle differences between these two ways of 
creating COM objects are covered in this chapter.</p>

<p>As you see, using external Automation objects is almost trivial, provided 
that you know how to exploit the methods, properties, and events exposed by the 
component. Besides, this simple example demonstrates the 
<I>language-neutral </I>nature of COM. Your Visual Basic program can use COM to access components written in 
any other language, and the opposite is also true: You can write components in 
Visual Basic and then use them from other development environments.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
When declaring and creating an object that belongs to an 
external library, you can use the full <I>Servername.Classname 
</I>syntax instead of the plain <I>Classname</I>. This might be necessary to resolve any ambiguities&#8212;for 
example, when the application is referencing multiple external components, and two 
or more of them expose objects with the same name. Having two external components that expose objects with the same name is more frequent than 
you might expect, and if you don't take precautions you might have to face 
some subtle bugs. For example, both the Excel library and the Word library 
expose the Application object. Now, consider what happens when Visual Basic 
executes these statements:

<p><table><tr><td>
<pre>
Dim x As New Application
x.Visible = True
</pre>
</td></tr>
</table></p>

<p>What window will appear, Excel's or Word's? The answer is: It 
depends on which library is listed first in the References dialog box. It's for this 
reason that this dialog box includes two Priority buttons, which let you modify the 
position of an item in the list. Be aware, however, that this flexibility can cause 
some subtle errors. For example, if you copy this code in another project that has 
a different list of referenced libraries, the code won't work as expected 
anymore. For this reason, I suggest that you always specify the full name of an 
external object, unless you're 100 percent sure that your application doesn't use 
other libraries that expose objects with the same name.</p>
</blockquote></div></p>


<a name="A102"></a><h3>8.1.2 Creating an ActiveX EXE Server</h3>

<A HREF="#A101">[Previous]</A> <A HREF="#A103">[Next]</A><P>

<A NAME="722"><h1>Creating an ActiveX EXE Server</h1></A>
<p>If you have a Visual Basic program that's already structured in classes, converting 
it to an ActiveX server requires just a few mouse clicks. As you'll see in a moment, 
you don't even need to compile the application into an actual EXE file to test the 
component, and you can debug it inside the Visual Basic IDE using all the tools that 
the environment gives you.</p>

<p>Of course, you can also start an ActiveX component from scratch by issuing 
the New Project command from the File menu and then selecting the ActiveX EXE 
item from the project gallery. In this situation, Visual Basic creates a project that 
contains one Public class module instead of a form.</p>

<A NAME="723"><h2>The Basic Steps</h2></A>
<p>It's customary, when showing how to implement a new technology, to start with 
a simple example. In this case, however, we can recycle one of the class-based 
samples that we developed in <a href="#A41">Chapter 7</a>, the CFileOp application.</p>

<A NAME="724"><h3>Setting the project properties</h3></A>
<p>The first thing to do is unload all the modules that aren't really necessary. When 
you're transforming the CFileOp application into an ActiveX server, you don't need the 
Form1 form any longer, so you can remove it from the project. Don't delete it from the 
disk, however, because you'll need it again soon.</p>

<p>The next step is to turn this project into an ActiveX EXE application, which 
you do from within the General tab of the Project Properties dialog box. (See Figure 
163.) You should also give a meaningful name to the project&#8212;for example, 
FileOpSvr. This becomes the name of the library that client programs have to reference to 
use the objects exposed by this application. Select (none) in the Startup Object 
field, and add a description for the project&#8212;in this case, &quot;A component for file 
operations.&quot; This description will appear in the References dialog box of client programs.</p>

<p>Finally, go to the Component tab of the dialog box and make sure that 
the StartMode setting is ActiveX Component. This setting tells the Visual Basic 
environment that you want to test the current project as if it were invoked as a 
component from another application. Don't forget that ActiveX EXE applications can also be 
run as regular Windows applications; to test how they behave in that case, set the 
StartMode option to Standalone.</p>

<p>
<img src="f16ph03x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 16-3.</B> <i>The Project Properties dialog box with all the properties set to create the FileOpSvr server application.</i><!--/caption-->
</p>

<A NAME="725"><h3>Setting class properties</h3></A>
<p>The FileOpSvr project is almost ready to run, but Visual Basic will refuse to 
actually execute it until it contains at least one Public creatable class. Because you 
converted a Standard EXE project, the <I>Instancing 
</I>property of the CFileOp class module is set to 1-Private, and private classes aren't visible to the outside. To comply with 
Visual Basic requirements, you must change this property to 5-MultiUse, which means that the 
class is Public and its instances can be created from client applications. (You need to 
know more about the <I>Instancing </I>property, and you 
will learn in the next section.)</p>

<A NAME="726"><h3>Running the server project</h3></A>
<p>At this point, you're ready to run the server application. If you press F5, however, 
a dialog box appears; this is the Debugging page of the Project Properties dialog 
box. Ensure that the &quot;Wait For Components To Be Created&quot; option is selected, and then 
click on the OK button to start the server. If all the settings are correct, you'll see that 
the program is running, but nothing else happens. This is the normal 
behavior: Visual Basic is waiting for a client application to request an object from this component.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
When running an ActiveX EXE or DLL project, you should deselect 
the Compile On Demand option in the General tab of the Options dialog box. 
This setting ensures that no compilation or syntax errors can occur while the 
program is providing its objects to client applications, which in most cases would 
force you to stop both the client and the server applications, fix the error, and 
restart. If you don't want to modify this IDE setting, you can force a full compilation 
by pressing the Ctrl+F5 combination instead of the F5 key or by issuing the 
Run With Full Compile command from the Run menu.
</blockquote></div></p>

<A NAME="727"><h3>Creating the client application</h3></A>
<p>It's time to recycle the Form1 form that you discarded from the ActiveX EXE 
project. Launch another instance of the Visual Basic environment, select a Standard EXE 
project type, if necessary, and then remove the Form1 module that Visual Basic 
automatically creates. You must do this to prevent name conflicts.</p>

<p>At this point, you can issue an Add File command from the Project menu to 
add the CFileOp.Frm file to the project. (You can use the Ctrl+D key shortcut.) You 
need to make this form the Startup Object for this project, which you do from within 
the General tab of the Project Properties dialog box. If you now run the client 
project, you'll get a compiler error (&quot;User-defined type not defined&quot;), caused by the 
following line in the declaration section of the Form1 module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim WithEvents Fop As CFileOp
</pre>
</td></tr>
</table></p>

<p>The reason should be evident: The CFileOp object is now external to the 
current application, and for Visual Basic to find it you must add a reference to it in 
the References dialog box of the application. Selecting the FileOpSvr project is 
simple because its description, &quot;A component for file operations,&quot; appears early in the 
alphabetical list of all the components registered on the system. If you're in doubt, 
however, just check the Location field near the bottom of the dialog box. This string 
should point to the VBP project file or, if you haven't saved the project yet, to a 
temporary file in the Windows TEMP directory. Checking this value might be necessary 
when you search among multiple components with the same description, as often 
occurs when there are different versions of the same component.</p>

<A NAME="728"><h3>Testing the client</h3></A>
<p>After you add a reference to the FileOpSvr project, you can finally run the 
client application and see that it behaves like the original class-based program. The 
invisible difference, however, is that all the objects are external to the application and 
communicate with the application through COM. What's even more exciting is that you 
can debug this COM-based application as if it were a standard Visual Basic project. In 
fact, you can trace any cross-application call using the F8 function key, and you'll be 
transported from the client project's source code into the server's source code and 
back. This apparently minor feature is actually a great lifesaver, which can save you hours 
when testing your ActiveX clients and servers.</p>

<p>When you're finished with the testing phase, you should close the 
client application's form and then stop the server application by clicking on the End 
button on the toolbar. (This is one of the few circumstances when it's OK to stop 
a running application using the End button.) If you try to perform these actions in 
the reverse order, a warning appears when you try to stop the server, as you can see 
in Figure 16-4. If you click on the Yes button to confirm the termination of the 
server application, the client program raises an error when it tries to use the object 
pointed to by the <I>Fop </I>variable.</p>

<p>
<A HREF="javascript:fullSize('f16ph04x.htm')"> <img src="f16ph04.JPG" width=404 height=77 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-4.</B> <i>You shouldn't end a server application if a client is currently using its objects.</i><!--/caption-->
</p>

<A NAME="729"><h2>The <I>Instancing</I> Property</h2></A>
<p>The <I>Instancing </I>property of a class module determines how objects of that class 
can be created and referenced from client applications via COM. This property can 
be assigned six different values, even though not all of them are available within the 
four types of projects, listed in Table 16-1, that you can build with Visual Basic.</p>

<p><B>Table 16-1.</B> <I>The available values for the </I>Instancing <I>property in different types of projects.</I></p>

<p><table width="95%" cellpadding="5">
<tr>
<th><i> </i></th>
<th><b><i>Standard EXE</i></b></th>
<th><b><i>ActiveX EXE</i></b></th>
<th><b><i>ActiveX DLL</i></b></th>
<th><b><i>ActiveX Control</i></b></th>
</tr>
<tr>
<td valign="TOP">1-Private</td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
</tr>
<tr>
<td valign="TOP">2-PublicNotCreatable</td>
<td valign="TOP"> </td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
</tr>
<tr>
<td valign="TOP">3-SingleUse</td>
<td valign="TOP"> </td>
<td valign="TOP">x</td>
<td valign="TOP"> </td>
<td valign="TOP"> </td>
</tr>
<tr>
<td valign="TOP">4-Global SingleUse</td>
<td valign="TOP"> </td>
<td valign="TOP">x</td>
<td valign="TOP"> </td>
<td valign="TOP"> </td>
</tr>
<tr>
<td valign="TOP">5-MultiUse</td>
<td valign="TOP"> </td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
<td valign="TOP"> </td>
</tr>
<tr>
<td valign="TOP">6-Global MultiUse</td>
<td valign="TOP"> </td>
<td valign="TOP">x</td>
<td valign="TOP">x</td>
<td valign="TOP"> </td>
</tr>
</table></p>

<A NAME="730"><h3>Selecting the most appropriate setting</h3></A>
<p>You need to understand the differences among the possible settings of the 
<I>Instancing </I>property. At runtime, you can neither read nor modify the values of the 
properties of a class listed in the Properties window. Unlike properties of controls, 
properties of classes are design-time_only properties. The possible settings of the 
<I>Instancing </I>property are listed below.</p>

<p><b>Private</b> Private class modules aren't visible outside the current project. In 
other words, not only can't client applications create classes of this type, they can't 
even reference these objects. In fact, the server application isn't allowed to pass an 
instance of a Private class to its client (for example, as a return value of a 
function or through an argument of a procedure). All class modules in Standard EXE 
projects are Private, and for this reason the <I>Instancing 
</I>property isn't available in those projects.</p>

<p><b>PublicNotCreatable</b> These classes are visible from outside the project, but 
client applications can't directly create their instances. It means that clients can 
declare variables of their types and can assign these references using the Set command 
but can't use the <I>New </I>keyword or the <I>CreateObject 
</I>function to create instances of these classes. The only way for a client to get a valid reference to a PublicNotCreatable 
class is by asking the server to return it&#8212;for example, through a method of another class. 
 For this reason, Visual Basic requires that all ActiveX projects contain at least 
one creatable class.</p>

<p><b>SingleUse</b> SingleUse objects are public and creatable, so clients can both 
declare variables of their type and create the instances using 
<I>New </I>or <I>CreateObject</I>. When a new object is created by the client, COM loads a new instance of the server, 
each time in a different address space. For example, if a client application creates 
10 SingleUse objects, COM runs 10 different processes, each one providing one 
instance of the object.</p>

<p><b>MultiUse</b> MultiUse objects are public and creatable, but unlike SingleUse 
objects one single instance of the component provides all the objects requested by client 
applications. This is the default setting for class modules added to an ActiveX EXE 
or ActiveX DLL project, and is also the most reasonable setting in most cases.</p>

<p><b>GlobalSingleUse and GlobalMultiUse</b> These are variants of the SingleUse 
and MultiUse settings, respectively. Global objects are described later in this chapter.</p>

<A NAME="731"><h3>Private and Public objects</h3></A>
<p>The most important feature of a class is its scope. If the 
<I>Instancing</I> property is 1Private, none of the instances of the class can be seen from outside the server. In all 
other cases, these objects can be manipulated by client applications and can be freely 
passed from the server to the client and vice 
versa&#8212;for example, as arguments to methods or as the return value of properties and functions.</p>

<p>If a client application were able to get a reference to a private object of 
the server, a series of nasty things might happen, including fatal errors or even 
GPF errors. Fortunately, you don't run any serious risk because the Visual Basic 
compiler prohibits the server from returning a Private object to its clients. For 
example, if your server component defines a Private class, and you create a Public 
class with a Public method that returns an instance of the Private class, the Visual Basic 
compiler raises the error message shown in Figure 16-5. The same thing happens 
when you attempt to pass clients a UDT defined in a BAS module of the component 
because everything defined in a BAS module is considered to be Private to the 
component, even if it's declared with the Public keyword.</p>

<p>
<A HREF="javascript:fullSize('f16ph05x.htm')"> <img src="f16ph05.JPG" width=404 height=90 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-5.</B> <i>It isn't legal for a server to pass Private objects and data structures to its clients.</i><!--/caption-->
</p>

<A NAME="732"><h3>MultiUse and SingleUse objects</h3></A>
<p>To understand the differences between SingleUse and MultiUse objects, you must 
keep in mind that Visual Basic creates single-threaded components unless you 
explicitly request that it build a multithreaded component. (Multithreading is covered in 
the section &quot;<A HREF="#778">Multithreaded ActiveX Components</A>&quot; later in this chapter.)</p>

<p>A single-threaded MultiUse component can serve only one client at a time; 
in other words, even if the component provides many objects to its clients, only 
one object can execute code in a given moment. So if two clients each request an 
object from the component and then execute a method at the same time, only one of 
the clients will be served immediately, and the other has to wait until the method in 
the first object completes its execution. No request is lost, however, because COM 
automatically serializes all clients' requests; requests are postponed and placed in a 
queue. Each request will remain in the queue until the server has completed all the 
tasks that were queued before it.</p>

<p>This one-thing-at-a-time limitation has been addressed by multithreaded 
MultiUse components, which can create multiple threads of execution, where each thread 
can provide a different object. Multithreaded components can therefore serve more 
clients without one client blocking the activity of other clients.</p>

<p>Conversely, each SingleUse object is provided by a different process. The 
main advantage of SingleUse objects is that they can multitask. In other words, each 
client can instantiate an object in a different process, and it never has to compete 
for the component with other clients. On the other hand, because each individual 
instance of a SingleUse class runs in a separate process, SingleUse objects require 
more memory and system resources than MultiUse objects. By and large, you can 
assume that each additional instance of a SingleUse object takes about 800 KB of 
memory, so it's clear that you can't use SingleUse objects when you envision the creation 
of hundreds or thousands of objects. In practice, you can't run more than one or 
two dozen SingleUse objects even on a high-end system. This is so because when 
too many processes are running, your CPU spends more time switching from one 
process to the other than actually executing code in the processes themselves.</p>

<p>Another problem with SingleUse components is that you can't completely 
test them inside the Visual Basic environment. The IDE can provide only one 
SingleUse object, and when the client requests a second object the Visual Basic instance 
that's providing the SingleUse component displays a warning message. A few seconds 
after the warning, the client application receives an error 429, &quot;ActiveX component 
can't create object.&quot; To fully test a SingleUse component, you must compile it to an 
EXE file and have your clients reference this EXE file instead of the component 
provided by the Visual Basic environment.</p>

<p>All things considered, your best choice usually is to create single-threaded 
or multithreaded MultiUse objects. This is also the more 
<I>scalable </I>solution, in the sense that you can provide 10, 100, or even 10,000 objects without consuming all 
the memory and the CPU time of your system. You have no choice when working 
with in-process ActiveX. Because an ActiveX DLLs runs in the address space of its 
client, it isn't possible to create multiple instances of the component in different 
address spaces. For this reason, ActiveX DLL projects don't support the SingleUse attribute.</p>

<p>Whatever your decision is, the most important point is that you should 
<I>never </I>mix MultiUse and SingleUse objects (or their Global variants) in the same ActiveX 
EXE server. If you do, you have no control over which particular instance of the 
component is providing MultiUse objects and a given client could have its objects 
supplied by different instances, which is usually something that you should avoid.</p>

<p>In practice, if a SingleUse component exposes a hierarchy of objects, you 
make the root of the hierarchy the only creatable object and you make all the other 
Public objects in the hierarchy PublicNotCreatable. You must also provide your client 
with a number of constructor methods to have the server create an instance of each of 
such dependent objects. For more information about object hierarchies and 
constructor methods, see <a href="#A41">Chapter 7</a>.</p>

<A NAME="733"><h3>Internal instancing</h3></A>
<p>An ActiveX server can instantiate an object defined in its own Visual Basic 
project. In this situation, the rules that affect how the object is created and used are 
slightly different:</p>

<UL>
<p><li> If the server creates its own object using the 
<I>New </I>operator, Visual Basic uses the so-called 
<I>internal instancing</I>: The object is created internally, 
without passing through COM. The <I>Instancing 
</I>property is ignored&#8212;otherwise, it wouldn't be possible to instantiate Private objects.</li></p>
 
<p><li>If the server creates its own object using the 
<I>CreateObject </I>function, the request goes through COM and is subject to the rules enforced by 
the class's <I>Instancing </I>property, which means that the operation will be 
successful only if the class is Public and creatable.</li></p>
</UL>

<p>Given all the COM overhead, it shouldn't be surprising that using 
<I>CreateObject </I>to instantiate a Public object defined in the same project is 4 or 5 times slower 
than using the <I>New </I>operator. So, in general, 
<I>CreateObject</I> should be avoided. (See 
&quot;<A HREF="#786">Multithreaded Visual Basic Applications</A>&quot; later in this chapter for an exception to 
this rule.)</p>

<A NAME="734"><h3>Global objects</h3></A>
<p>The only difference between global and nonglobal SingleUse and MultiUse 
objects is that you can omit a declaration of a global object when referring to its methods 
or properties. Let me explain this with an example.</p>

<p>Let's say that you have an object that includes methods for doing math 
calculations, such as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the Math class of the VBLibrary project
Function Max(x As Double, y As Double) As Double
    If x &gt; y Then Max = x Else Max = y
End Function
</pre>
</td></tr>
</table></p>

<p>If you make this class GlobalMultiUse or GlobalSingleUse, you can 
reference the <I>Max </I>function from within a Visual Basic client application without explicitly 
creating an object variable that points to an instance of the class:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the client application
Print Max(10, 20)                    ' This works!
</pre>
</td></tr>
</table></p>

<p>In other words, you can create a class that exposes 
<I>Sub</I> and <I>Function</I> methods, and you can see them from within your clients as if the methods were 
commands and functions, respectively. This is a great convenience because it makes the 
library a sort of extension of the Visual Basic language. You aren't limited to methods 
because your class can expose properties, and its clients see the properties as if 
they were variables. For example, you can add the 
p constant to Visual Basic:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' A read-only property in the VB2TheMax.Library class
Property Get Pi() As Double
    Pi = 3.14159265358979
End Property

' In the client program
Circumference = Diameter * Pi
</pre>
</td></tr>
</table></p>

<p>You should, however, be aware of the following important detail. Even if 
you can skip declaring a variable that points to a global object and still access its 
properties and methods, the omission of this step is just a syntactical convenience 
that Visual Basic offers you. Behind the scenes, in fact, the language creates a 
hidden object variable of the proper type and uses that variable each time it invokes 
one of the class's members. This means that using a global object won't speed up 
your code at all. On the contrary: The hidden reference is implemented as an 
auto-instancing variable, so a little overhead accrues when your code accesses its 
methods and properties because Visual Basic has to decide whether a new instance 
should be instantiated.</p>

<p>Moreover, since you have no control over this hidden variable you can't 
even set it to Nothing, so the object it points to will be destroyed only when the 
application ends. This detail is usually irrelevant but can become meaningful if the 
object takes a lot of memory and resources.</p>

<p>Interestingly, you might have used Global objects for years without 
knowing it. In fact, the VBA library is nothing but a collection of global objects; you can 
explore the VBA library using the Object Browser, and you'll see a number of 
modules named Math, Strings, and so on. Each of these modules exposes several 
methods. Because each module is marked as Global, you can use those methods inside 
Visual Basic applications as if they were native functions. Similarly, the Visual Basic 
library (labeled <I>VB</I> in the Object Browser) includes a Global module, which exposes 
the global objects supported by the language, such as App, Printer, and Clipboard. 
For more information, see &quot;<A HREF="#307">Subclassing the VBA Language</A>&quot; in Chapter 7.</p>

<p>Because global objects are typically used to create libraries of functions, 
they're often implemented as in-process ActiveX components. On the companion CD, 
you'll find a nontrivial example of this concept, the VB2TheMax component, which 
includes 17 classes and over 170 methods that extend the Visual Basic language with 
many math, date, time, string, and file functions and commands.</p>

<p>Here are two more important details about global objects you need to 
know. First, such objects are global only outside the component: Inside the 
component's project, they're regular objects that must be declared and instantiated as usual. 
Second, as of the time of this writing, Visual Basic is the only development 
environment that creates clients supporting global objects. You can use your library of global 
objects with other COM-compliant languages, but in those other languages your global 
objects are considered to be regular SingleUse or MultiUse objects.</p>

<A NAME="735"><h2>Passing Data Between Applications</h2></A>
<p>The beauty of COM is that components and their clients can pass information 
back and forth without your having to worry about all the nitty-gritty details of the 
communication. You can surely write better programs, however, if you understand a 
bit of what COM does for you behind the scenes.</p>

<A NAME="736"><h3>Marshaling</h3></A>
<p><I>Marshaling</I> is the operation that COM executes each time data has to be passed 
from a client to an out-of-process server and back. Marshaling is a complex 
procedure: Because ActiveX EXE servers and their clients reside in different address spaces, 
the variables stored in the client's address space aren't immediately visible to the 
component, and vice versa. Consider what happens when the client executes 
these statements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim x As New MyServer.MyClass, value As Long
value = 1234
x.MyMethod value
</pre>
</td></tr>
</table></p>

<p>When you pass a variable by reference, the called procedure receives the 
address of the variable. This address is then used to retrieve and possibly modify 
the variable's value. When the call originates in another process, however, the 
called procedure won't be able to access the actual variable's value because the variable 
is located in another address space and the address received would be meaningless 
in the context of the procedure. But you know that passing a value to an 
out-of-process server does work, and it works thanks to COM marshaling. Describing exactly 
how marshaling works is outside the scope of this book, but the following 
explanation should suffice for our purposes. (See Figure 16-6.)</p>

<p>
<img src="F16ph06.GIF" width=365 height=215 border=0>
<p>
<!--caption--><B>Figure 16-6.</B> <i>How COM marshaling works.</i><!--/caption-->


<OL>
<p><li>When a client application creates an object exposed by an ActiveX 
EXE server component, COM creates a special <I>proxy 
</I>module in the client's address space. All calls to the object are redirected to this proxy module, 
which has the same interface as the original object, with all its methods and 
properties. As far as the client is concerned, the proxy module 
<I>is </I>the object.</li></p>

<p><li>When the proxy module receives a call from the client application, it 
finds all the arguments on the stack, so it can easily retrieve their values. 
Variables passed by reference are no problem because the proxy module 
is in client's address space, so it can access all client variables.</li></p>

<p><li>The proxy module packs all the values received from the client and 
sends them to a <I>stub </I>module, which is located in the server's address space. 
The stub module unpacks all the data, retrieves the values of all 
arguments, and then calls the method in the server's code. As far as the server 
is concerned, it's being called by the client, not by the stub module. 
The actual mechanism used for sending data to another process is a 
complex one, and I won't describe its details here. Let's say that it's one of the 
magic tricks that COM does for you.</li></p>

<p><li>When the method completes its execution, the control is returned to 
the stub module. If there are values that must be passed back to the client 
(for example, the return value of a function or an argument passed by 
reference), the stub packs them and send them back to the proxy module.</li></p>

<p><li>Finally, the proxy module unpacks the data received by the stub 
module and passes the control back to the client's code.</li></p>
</OL>

<p>Marshaling is necessary only when you're working with ActiveX EXE 
components. Because in-process components execute in the client's address space, they 
can directly access and modify all the client's variables. This explains why ActiveX 
DLL components are so much faster than out-of-process components.</p>

<p>The marshaling mechanism is quite sophisticated. For example, if a value 
is passed by reference, the stub creates a temporary variable in the server's address 
space and passes the address of this variable to the method. The code in the method 
can therefore read and modify this value. When the method returns, the stub module 
reads the new value of the variable, packs it, and sends it back to the proxy module, 
which in turn stores this value at the original variable's memory location.</p>

<p>In addition to allowing the exchange of data, the marshaling mechanism 
promotes the concept of <I>location 
transparency,</I> which is essential in the 
component world. The client code doesn't have to know where the server is located, and at 
the same time the server doesn't know from what place it's being called. In fact, the 
same method in the component can be called from outside or inside the component 
itself, and it will work in the same way in both cases.</p>

<p>The location transparency concept is important because it ensures that 
the component continues to work even when it's deployed remotely on another 
machine in the network. In that case, the communication between the proxy and the 
stub modules is even slower and more complex because it has to rely on the RPC 
(Remote Procedure Call) protocol to work across machines. But COM takes care of 
all this. Your client and your server applications will continue to work as before.</p>

<A NAME="737"><h3>Simple data types</h3></A>
<p>To correctly marshal data back and forth, it's mandatory that COM know the 
format in which the data is stored. Take Visual Basic strings, for example: When the 
client passes a string to a method, it's really passing a 32-bit pointer to the actual data. 
The proxy method knows that it's receiving a string and can therefore peek into the 
client's address space to retrieve the actual characters.</p>

<p>All Visual Basic simple data types are compatible with COM in the sense 
that COM knows how to marshal them. This means that a server can pass back to its 
client any numeric, string, or Variant value. Starting with Visual Basic 6, a server can 
directly return arrays of any type as well. (Servers written with previous versions of 
Visual Basic could only return arrays stored in Variants.)</p>

<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Components compiled with Visual Basic 4 or 5 weren't able to pass back 
UDTs to their clients. Visual Basic 6 does permit components to pass a UDT, provided 
that the UDT is defined in a Public class and that you have installed DCOM98 or the 
Service Pack 4 for Windows NT 4. DCOM98 is automatically installed with Windows 98. 
Even though Windows 2000 hasn't been released as of this writing, it's reasonable to 
expect that it will support this feature without having to install a service pack.</p>

<p>Don't forget that DCOM98 or the Service Pack 4 must also be installed on 
your customers' machines. If it isn't, Visual Basic raises the run-time error 458, 
&quot;Variable uses an Automation Type not supported in Visual Basic.&quot; You should trap this 
error and display a more meaningful message to your users, suggesting that they 
should upgrade their operating system to support this feature.</p>

<p>Because the UDT must be defined in a Public class, you can't pass UDTs 
defined in the client application to the server unless the client is an ActiveX EXE 
program itself. Finally, note that DCOM98 or the Service Pack 4 is required only 
when your component is passing a UDT to an out-of-process process server. When 
you're working with ActiveX DLL components, no marshaling takes place and UDTs can 
be passed back to the client even on plain Windows 95 or Windows NT 4 systems.</p>

<A NAME="738"><h3>Private and Public objects</h3></A>
<p>A server and a client can pass to each other any Public object. This includes 
both objects defined in the server and objects exposed by other external libraries, 
such as the Microsoft Word or Microsoft Excel object libraries.</p>

<p>I'll touch on a few more details concerning the marshaling of objects. In 
addition to the objects defined by class modules in the project, a Visual Basic 
application deals with objects exposed by three libraries: the Visual Basic, VBA, and 
VBRUN libraries. These three libraries can deceive you by seeming similar, but they aren't 
alike, at least for what concerns the visibility of objects.</p>

<p>All the objects exposed by the Visual Basic library (for example, the Form 
object, the App object, and all the intrinsic controls) are private to that library and so 
can't be passed to another application, even if that other application is written in 
Visual Basic. For example, if a Public class in your server includes the following code</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' This function can't appear in a Public class module.
Function CurrentForm() As Form
    Set CurrentForm = Form1
End Function
</pre>
</td></tr>
</table></p>

<p>the compiler will refuse to run the application. Conversely, the objects exposed 
by the VBA and VBRUN libraries are Public and so can be freely passed between 
different processes. These include the ErrObject and Collection objects (in 
the VBA library).</p>

<p>Many programmers find the inability to pass ordinary objects, such as forms 
and controls, between the server and the client a serious limitation and often look 
for a way to work around it. Such a workaround actually exists; just declare the 
argument or the return value of the method using 
<I>As Object</I> or <I>As Variant</I> instead of 
the actual specific type:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the MyClass public module of the MyServer ActiveX EXE project
' Assumes that the project contains a Form1 form and a Text1 text box on it
Function CurrentField() As Object
    Set CurrentField = Form1.Text1
End Function 

' In the client project
Dim x As New MyServer.MyClass
Dim txt As Object
Set txt = x.CurrentField
txt.Text = &quot;This string comes from the client&quot;
</pre>
</td></tr>
</table></p>

<p>The client application declares a generic <I>As 
Object</I> variable to receive the result of the 
<I>CurrentField </I>method, which means that you're doing late binding. As you 
know, late binding is less efficient and prevents you from using the 
<I>WithEvents </I>keyword.</p>

<p>Things are slightly better with in-process ActiveX servers, which let the 
client application declare objects using specific object variables. But you should be 
aware that DLLs created in this way might not work correctly under certain 
circumstances, so sticking to <I>As Objects</I> variables is usually advisable even when you're working 
with in-process components. And don't forget that you can use this method only if the 
client is itself written in Visual Basic.</p>

<p>Now that I've shown you the workaround, let me add that Microsoft 
explicitly discourages this technique and has warned that it might not work in future 
versions of Visual Basic. So you use this workaround at your own risk.</p>

<p>This problem raises an interesting question, though: How can the client 
application access forms and controls hosted in the server application? The answer is 
that a client should <I>never </I>directly access a private object in the server because that 
would break the component's encapsulation. If the client needs to manipulate a 
server's private object, the server should implement a number of methods and properties 
that provide the required capabilities, for example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Property Get CurrentFieldText() As String
    CurrentFieldText = Form1.Text1.Text
End Function 
Property Let CurrentFieldText(newValue As String)
    Form1.Text1.Text = newValue
End Property
</pre>
</td></tr>
</table></p>

<p>Notice that Friend methods and properties don't appear in the Public 
interface of a component and therefore can't be called from outside the current project. 
For this reason, they never require marshaling, and you can always pass a Private 
object or a UDT as an argument or the return type of a Friend member.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Don't forget that when you marshal an object, you're actually 
passing a reference, not the object itself. While the client can invoke all the 
properties and methods of this object, the actual code for these properties and 
methods runs in the component. This distinction is important especially when you're 
working with remote components because each time the client uses the object 
variable, a round-trip to the remote component takes place.
</blockquote></div></p>

<A NAME="739"><h3>Type libraries</h3></A>
<p>You might wonder how COM can create proxy and stub modules for letting the 
client communicate with the server. The answer is in the 
<I>type library</I>, which gathers all the information about the Public classes exposed by the component, including 
the syntax of individual methods, properties, and events. The type library is usually 
stored in a file with the extension TLB or OLB, but it can also be embedded in the 
same EXE, DLL, or OCX file that hosts the component itself. For example, the type 
library of a component authored with Visual Basic is stored in the component's EXE 
or DLL file.</p>

<p>If a component has a type library, you can select it in the References dialog 
box and then explore it using the Object Browser. The References dialog box lists all 
the type libraries that have been registered in the Registry. If you have a type library 
that hasn't been registered yet, you can add it to the References dialog box by 
clicking on the Browse button.</p>

<p>In general, you can use an object without first adding its library to the 
References dialog box, but you're forced to create it using the 
<I>CreateObject </I>function and to reference it only through generic 
<I>As Object</I> variables. Without a type library, in 
fact, Visual Basic hasn't enough information to let you declare a specific object 
variable, so you're stuck with late binding. To use specific variables (and therefore early 
binding), the <I>New </I>keyword, and IntelliSense, you have to add the server's type library 
to the list of references.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
Visual Basic can create stand-alone type libraries, but you need the 
Enterprise Edition to do so. The trick is simple: In the Component tab of the 
Project Properties dialog box, tick the Remote Server Files check box, and then 
recompile the project. Visual Basic produces a TLB file with the same base name 
as the project's EXE file.
</blockquote></div></p>

<A NAME="740"><h3>Performance tips</h3></A>
<p>Now that you know how data is marshaled between the client and the server, 
you can understand a number of handy techniques that let you improve the 
performance of your ActiveX EXE components.</p>

<p>A very effective trick that you should always use is to declare methods 
arguments using <I>ByVal </I>rather than <I>ByRef 
</I>(unless the routine actually modifies the 
value and you want it to be returned to the client). Arguments passed by value are 
never marshaled back to the client because COM knows that they can't change during 
the call. The ideal situation is when you call a 
<I>Sub</I> procedure and all arguments are 
declared using <I>ByVal</I> because in this case no data needs to be marshaled back to 
the client. You're likely to experience the best improvement when passing long 
strings. For example, I found that passing a string of 1,000 characters using 
<I>ByVal </I>is about 20 percent faster than using 
<I>ByRef</I>.</p>

<p>Cross-process calls are inherently slow. Calling a method with four 
arguments is almost four times slower than setting four properties. For this reason, your 
servers should expose methods that let clients quickly set and retrieve properties. For 
example, let's say that your server exposes the 
<I>Name</I>, <I>Address</I>, <I>City</I>, and 
<I>State</I> properties. Besides providing the usual Property procedure pairs, you might write the 
following <I>GetProperties </I>and <I>SetProperties 
</I>methods:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the MyClass module of the MyServer project
Public Name As String, Address As String
Public City As String, State As String

Sub SetProperties(Optional Name As String, Optional Address As String, _
    Optional City As String, Optional State As String)
    If Not IsMissing(Name) Then Me.Name = Name
    If Not IsMissing(Address) Then Me.Address = Address
    If Not IsMissing(City) Then Me.City = City
    If Not IsMissing(State) Then Me.State = State
End Sub
Sub GetProperties(Optional Name As String, Optional Address As String, _
    Optional City As String, Optional State As String)
    If Not IsMissing(Name) Then Name = Me.Name
    If Not IsMissing(Address) Then Address = Me.Address
    If Not IsMissing(City) Then City = Me.City
    If Not IsMissing(State) Then State = Me.State
End Sub
</pre>
</td></tr>
</table></p>

<p>The client application can therefore set and retrieve all properties (or a 
subset of them) in a single statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Set all properties in one statement.
Dim x As New MyServer.MyClass
x.SetProperties &quot;John Smith&quot;, &quot;1234 East Road&quot;, &quot;Los Angeles&quot;, &quot;CA&quot;
' Read just the City and State properties.
Dim city As String, state As String
x.GetProperties city:=city, state:=state
</pre>
</td></tr>
</table></p>

<p>You can greatly improve the readability of your client's code using named 
arguments, as shown in the preceding code snippet.</p>

<p>Another way to reduce the number of cross-process calls is by passing a 
larger amount of data in an array. You can use an array of Variants because they enable 
you to pass values of different types. Of course, both the client and the server must 
agree on the meaning of data passed in the array. This approach is most effective 
when you don't know how many items you want to pass to the server. For example, 
suppose that the server exposes a Public collection class with its usual 
<I>Add</I>, <I>Remove</I>, <I>Count</I>, and 
<I>Item</I> methods. You might considerably speed up the application if 
you provide an <I>AddMulti </I>method that lets the client add more than a single item per call:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the MyCollection modules of the MyServer project
Private m_myCollection As New Collection

Sub AddMulti(values As Variant)
    Dim v As Variant
    For Each v In values
        m_myCollection.Add v
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>Note that the <I>values</I> argument is declared as a Variant instead of as an array 
of Variants, as you might expect, and that the procedure iterates on its members 
using a <I>For Each...Next </I>loop. This gives this method unparalleled flexibility because you 
can pass it nearly anything: an array of Strings, an array of Variants, an array of 
objects, a Variant that contains an array of Strings, Variants, or objects, even a Collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the client application
Dim x As New MyServer.MyCollection
' Pass an array of Variants built on the fly.
x.AddMulti Array(&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;)
</pre>
</td></tr>
</table></p>

<p>Similarly, if the client application needs to retrieve all the values stored in 
the <I>MyCollection</I> module, you can speed up things by implementing a method that 
returns all the items in the collection as an array of Variants:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Items() As Variant()
    Dim i As Long
    ReDim result(1 To m_myCollection.Count) As Variant
    For i = 1 To m_myCollection.Count
        ' Object values require the Set command.
        If IsObject(m_myCollection(i)) Then
            Set result(i) = m_myCollection(i)
        Else
            result(i) = m_myCollection(i)
        End If
    Next
    Items = result
End Function
</pre>
</td></tr>
</table></p>

<p>You can get an idea of how you can streamline the interface of your server 
to provide better performance by having a look at how the Dictionary object is 
implemented. (See the &quot;<A HREF="#144">Dictionary Objects</A>&quot; section in Chapter 4.)</p>

<p>Finally, you can pass data back and forth from the client to the component 
by using a UDT that's declared as Public in the component.</p>

<A NAME="741"><h2>Error Handling</h2></A>
<p>An important part of COM programming has to do with error handling. Dealing 
with errors is always important, of course, but when you're working with ActiveX 
components you must correctly account for all unanticipated errors.</p>

<A NAME="742"><h3>Error handling in the server component</h3></A>
<p>Errors raised in a component behave exactly like errors that occur in a regular 
program; if the current procedure isn't protected by an active error handler, the 
procedure is exited immediately and the control is returned to the caller. If the caller 
has no active error handler, the control is returned to its caller, and so on until the 
application encounters a calling procedure with an active error handler or until there's 
no calling procedure (that is, the topmost procedure was reached and the error was 
not caught). In this latter case, the error is fatal and the application is terminated.</p>

<p>Properties and methods in an ActiveX component 
<I>always </I>have a caller&#8212;namely the client application&#8212;so in a sense all the code inside a procedure is always 
protected from fatal errors because all errors are returned to the client. The 
exception to this rule is that event procedures have no direct callers, so you should ensure 
that nothing can go wrong inside <I>Class_Initialize 
</I>and <I>Class_Terminate </I>event procedures.</p>

<p>Even if errors in methods and procedures are returned to the client, a 
well-behaved programmer might want to process them first. Basically, you can follow 
one of three strategies:</p>

<UL>
<p><li> The component is able to solve the problem that caused the error. In 
this case, the component should continue its job without notifying the 
client that anything was wrong.</li></p>
 
<p><li>The component can't solve the problem, and it returns the error to 
the client without processing it first. This is convenient when the error 
code is unambiguous and can be successfully processed by the client to 
remedy the problem. For example, if the component exposes a method 
called <I>Evaluate </I>and a &quot;Division by zero&quot; error occurs, this error can be 
safely returned to the client because its meaning is evident in this context.</li></p>

<p><li>The component can't solve the problem, and it returns the error to 
the client after processing it. For example, if the 
<I>Evaluate </I>method fails because the component can't find an initialization file, returning a raw &quot;File 
not found&quot; error to the client isn't the best solution because the client 
would probably be unaware that the method does try to open a file. In this 
case, it's preferable to raise a custom error and provide a more 
meaningful description of what happened.</li></p>
</UL>

<p>When returning custom errors to the client, you can decide to stick to the 
COM guidelines for dealing with them. According to such guidelines, all custom errors 
should be in the range of 512 through 65535 so as not to be confused with COM's 
own errors, and should be added to the hexadecimal value &amp;H80040000 
(or 2,147,221,504). Visual Basic defines a symbolic constant for this value, vbObjectError, so a typical 
error handler inside an ActiveX server might resemble the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Evaluate() As Double
    On Error GoTo ErrorHandler
    ' Open an initialization file (omitted).
    ' ...
    ' Evaluate the result. (This is just a sample expression.)
    Evaluate = a * b(i) / c
    Exit Function
ErrorHandler:
    Select Case Err
        Case 6, 11                ' Overflow or division-by-zero error
            Err.Raise Err.Number  ' can be returned to clients as is.
        Case 53
            Err.Raise 1001 + vbObjectError, , _
                &quot;Unable to load initialization data&quot;
        Case Else
            ' It's always good to provide a generic error code.
            Err.Raise 1002 + vbObjectError, , &quot;Internal Error&quot;
    End Select
End Function
</pre>
</td></tr>
</table></p>

<p>Whatever strategy you decide to adopt, there's one thing that you 
absolutely shouldn't do&#8212;namely, show a message box. In general, the component 
should delegate the error to the client and let the client decide whether the user should 
be informed of what went wrong. Showing a message box from within a component 
is considered a bad programming practice because it prevents the application 
from running the component remotely.</p>

<A NAME="743"><h3>Error handling in the client application</h3></A>
<p>A correct error handler in the client application is more important than the 
handler in the server because in most cases the client has no caller to which it can 
delegate the error. So all errors must be resolved locally. Even if you're absolutely sure 
that the code in the server can't raise an error (for example, when you're simply 
retrieving a property), I strongly advise you to provide an error handler anyway. The 
reason is that when working with ActiveX components, you also have to account 
for errors raised by COM itself. The list below describes a few errors 
that COM can raise.</p>

<UL>
<p><li>Error 429 (&quot;ActiveX can't create the component&quot;) occurs when the 
object can't be instantiated. This error has many causes&#8212;for example, when 
the path of the component stored in the Registry doesn't point to the EXE 
file (which might have been moved, renamed, or deleted). Often you can 
solve this problem by registering the component again. (See the &quot;<A HREF="#754">Registering a Component</A>&quot; section later in this chapter.) When the component 
runs inside the Visual Basic component, this error can occur when the 
server's project is in break mode and so can't respond to clients' requests.</li></p>
 
<p><li>Error 462 (&quot;The remote server machine does not exist or is 
unavailable&quot;) typically occurs when the component that was providing the object 
has been terminated in an abnormal way (for example, by means of the 
Windows Task Manager) or when a machine where the remote component 
was running has been switched off or disconnected from the network.</li></p>

<p><li>Error 430 (&quot;Automation Error&quot;) is a generic error that is returned to 
the client when COM has been unable to connect the client with the server.</li></p>
</UL>

<p>This list shouldn't be considered exhaustive, and you should always 
account for other errors in your error handler. In summary, a typical error handler in a 
client application should account for errors raised by three different sources: the 
server, COM, and the client itself. Here's a possible error handler for a Visual Basic client:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdEvaluate()
    Dim x As New MyServer.MyClass, res As Double
    On Error GoTo ErrorHandler
    res = x.Evaluate()
    Exit Function
ErrorHandler:
    Select Case Err
        Case 429    ' ActiveX can't create the component.
            MsgBox &quot;Please reinstall the application&quot;, vbCritical
            End
        Case 430    ' Automation error
            MsgBox &quot;Unable to complete the operation at this time. &quot; _
                &amp; &quot;Please try again later.&quot;, vbCritical
        Case 462    ' The remote server machine is unavailable.
            MsgBox &quot;Please ensure that the server machine &quot; _
                &amp; &quot;is connected and functioning&quot;, vbCritical
        Case 1001 + vbObjectError
            MsgBox &quot;Please copy the file VALUES.DAT in the &quot; _
                &amp; &quot;application directory.&quot;, vbCritical
        Case 1002 + vbObjectError
            MsgBox &quot;Unknown error. Please contact the manufacturer.&quot;, _
                vbCritical
        Case Else
            ' This might be a standard Visual Basic error or COM error.
            ' Do whatever is more appropriate for your application.
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="744"><h3>Component Busy and Component Request Pending</h3></A>
<p>As I mentioned previously, COM serializes all the requests coming from clients 
so that the server can complete them on a first-come, first-served basis. But in 
certain cases, COM can't accept the client's request; this is the so-called 
<I>component busy </I>condition. For example, this could happen when your program is using 
Microsoft Excel as a server and Excel is currently showing a modal dialog box.</p>

<p>Visual Basic assumes that this is a temporary problem and automatically 
retries periodically. If the problem persists, after 10 seconds Visual Basic displays the 
Component Busy dialog box, shown in Figure 16-7. The Switch To button activates 
the other application and brings its window on top of all other windows so that you 
can correct the problem. (This option has no effect with ActiveX servers that don't 
have a user interface.) The Retry button lets you retry the operation for an additional 
10 seconds. Finally, if you click on the Cancel button you revoke the request, in 
which case an error &amp;H80010001 (decimal -2,147,418,111) is returned to the client. This 
is another error you should account for in your error handler.</p>

<p>
<img src="f16ph07.GIF" width=327 height=157 border=0>
<p>
<!--caption--><B>Figure 16-7.</B> <i>The Component Busy dialog box.</i><!--/caption-->


<p>A different problem occurs when COM has accepted the client's request but 
the component takes too long to complete it. For example, this could happen when 
the component is waiting for a query to complete, or when it has displayed a 
message box and is waiting for the user to close it. This problem produces the 
<I>component request pending </I>condition, which is rather common in the debugging phase, 
when the server often stops for an unanticipated error.</p>

<p>Because COM has already accepted the request, Visual Basic doesn't have 
to resubmit it. But until the method returns, the client application is inactive and 
can't accept input from the user. After 5 seconds, if the user tries to interact with the 
client application a dialog box like the one you see in Figure 16-8 appears. This is similar to the Server Busy dialog box, but the Cancel button is 
disabled because the request can't be revoked.</p>

<p>
<img src="f16ph08.GIF" width=327 height=157 border=0>
<p>
<!--caption--><B>Figure 16-8.</B> <i>The Component Request Pending dialog box.</i><!--/caption-->


<p>A few properties of the Application object affect the behavior and the 
appearance of these dialog boxes. The <I>App.OLEServerBusyTimeout 
</I>property is the timeout in milliseconds after which the Component Busy dialog box is shown. (The default 
is 10,000 milliseconds.) The <I>App.OLEServerBusyMsgText 
</I>and <I>App.OLEServerBusyMsgTitle </I>properties let you customize the contents and the caption of the dialog box 
shown to the user. If you assign a nonempty string to both these properties, the standard 
Component Busy dialog box is replaced by a regular message box containing just the 
OK and Cancel buttons. You can ask Visual Basic not to show the Component Busy 
dialog box by setting the <I>App.OleServerBusyRaiseError 
</I>property to True. In this case, no message is displayed and an error &amp;H80010001 is immediately returned to the 
client. (This is the same error raised when the user clicks on the Cancel button in a 
Component Busy dialog box.)</p>

<p>A set of similar properties lets you customize Component Request 
Pending dialog boxes: <I>App.OleRequestPendingTimeout 
</I>(the default value is 5,000&#8212;that is, 5 seconds), 
<I>App.OleRequestPendingMsgText</I>,<I> </I>and 
<I>App.OleRequestPendingMsgTitle</I>.</p>

<p>Customizing the Component Busy and Component Request Pending 
dialog boxes is especially important when your application is dealing with remote 
components. The default timeouts are often insufficient, so the dialog box is quite 
likely to appear. When working with remote components, the Switch To button has 
no effect, so you should provide an alternate message that explains to your users 
what's happening.</p>

<A NAME="745"><h2>Components with User Interfaces</h2></A>
<p>One of the key advantages of ActiveX EXE servers is that the user can launch 
them as if they were standard Windows applications. This adds a lot of flexibility but 
creates a few problems as well.</p>

<A NAME="746"><h3>Determining the StartMode</h3></A>
<p>For example, the program must determine whether it's being run by the user or 
by the COM subsystem. In the former case, it should display a user interface, which 
it can do by loading the application's main form. An ActiveX EXE component can 
distinguish between the two conditions it might be in by querying the App 
object's <I>StartMode </I>property in the <I>Sub 
Main</I> procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Sub Main
    If App.StartMode = vbSModeStandalone Then
        ' Being launched as a stand-alone program
        frmMain.Show 
    Else  ' StartMode = vbSModeAutomation
        ' Being launched as a COM component
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>For the previous code to work, you should set 
<I>Sub Main</I> as the Startup Object in the General tab of the Project Properties dialog box. A word of caution: When 
the server is started by COM, Visual Basic executes the 
<I>Sub Main</I> procedure and instantiates the object, and then COM returns the object to the client application. If the 
code in the <I>Sub Main</I> procedure or in the 
<I>Class_Initialize </I>event procedure takes too 
long, the call could fail with a timeout error. For this reason, you should never 
execute lengthy operations in these procedures, such as querying a database.</p>

<A NAME="747"><h3>Showing forms</h3></A>
<p>An ActiveX EXE component can display one or more forms as if it were a 
regular application. For example, the component might be a database browser that can 
work both as a stand-alone program or as a component to be invoked from other applications.</p>

<p>When the program is working as a COM component 
(<I>App.StartMode</I> = vbSModeAutomation), however, the client is the foreground application and its 
windows are likely to cover the server's forms. This raises a problem, and 
unfortunately Visual Basic has no means of ensuring that a given form becomes the topmost 
window in the system. For example, the Form object's 
<I>ZOrder </I>method brings a form in front of all other forms in the same application but not necessarily in front of 
windows belonging to other applications. The solution to this problem is a call to 
the <I>SetForegroundWindow </I>API function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the server application
Private Declare Function SetForegroundWindow Lib &quot;user32&quot; _
    (ByVal hwnd As Long) As Long
' A method that displays a modal window
Sub DisplayDialog()
    frmDialog.Show
    SetForegroundWindow frmDialog.hWnd    
End Sub
</pre>
</td></tr>
</table></p>

<p>Unfortunately, Microsoft changed the way this function works under 
Windows 98, so the preceding approach might not work on that operating system. 
A solution to this problem, devised by Karl E. Peterson, appeared in the &quot;Ask the 
VB Pro&quot; column of the February 1999 issue of Visual Basic Programmer's Journal.</p>

<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 supports the new vbMsgBoxSetForeground flag for the 
<I>MsgBox </I>command, which ensures that the message box appears on top of all the 
windows that belong to other applications.</p>

<p>Another issue concerns forms in ActiveX EXE components. You often want 
the form to behave like a modal form, but because modality doesn't work across 
process boundaries, the user is always able to activate the client's forms using a mouse 
click. On the other hand, if the server is showing a modal window, the method 
invoked by the client hasn't returned yet, and the client is therefore unable to react to 
clicks on its windows. The result is that after a 5-second timeout, a Component 
Request Pending dialog box appears, explaining that the operation can't be completed 
because the component isn't responding. (Which is rather misleading, since it's the 
client that isn't responding, not the server.)</p>

<p>The simplest way to solve this problem is to disable all the forms in the 
client application before calling the component's method that displays a modal form. 
This can be done quite easily, thanks to the Forms collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdShowDialogFromComponent_Click()
    SetFormsState False
    x.DisplayDialog
    SetFormsState True
End Sub

' The same routine can disable and reenable all forms.
Sub SetFormsState(state As Boolean)
    Dim frm As Form
    For Each frm In Forms
        frm.Enabled = state 
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="748"><h3>Limiting the user's actions</h3></A>
<p>An instance of an ActiveX EXE component can serve an interactive user and a 
client program at the same time. For example, when the user launches the program 
and then a client requests an object supplied by that server, the server that's 
currently running provides the object. The opposite isn't generally true; if a client program 
has created an object and then the user launches the program, a new, distinct 
instance of the server is loaded in memory.</p>

<p>When the server displays a form as a result of a request from a client 
application, the server should prevent the user from closing the form. You enforce this 
by setting a Public property in the form that tells why the form has been displayed 
and by adding some code to the <I>QueryUnload </I>event procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the frmDialog form module
Public OwnedByClient As Boolean

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    If UnloadMode = vbFormControlMenu Then
        ' The form is being closed by the user.
        If OwnedByClient Then
            MsgBox &quot;This form can't be closed by the end user&quot;
            Cancel = True
        End If
    End If
End Sub
</pre>
</td></tr>
</table></p>

<p>Of course, you must correctly set the <I>OwnedByClient 
</I>property before showing the form, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' If the form is being displayed because a client requested it
frmDialog.OwnedByClient = True
frmDialog.Show vbModal
</pre>
</td></tr>
</table></p>

<p>In more complex scenarios, the same form might be used by both the user 
and one or more client applications. In these situations, you should implement a 
form's property to act as a counter and tell when it's safe to unload the form.</p>

<p>One last word about a component with a user interface. Such a component 
is inherently a local component and can't run remotely on another machine, for 
obvious reasons. This means that you're building a solution that won't be scaled 
easily. Take this detail into account when deciding whether you should add a user 
interface to your component. One exception to this rule is when the component 
displays one or more forms for administrative and debugging purposes exclusively and 
when these forms aren't modal dialog boxes and therefore don't stop the normal 
execution flow of calls coming from clients.</p>

<A NAME="749"><h2>Compatibility Issues</h2></A>
<p>We human programmers reason in terms of readable names: Each class has a 
complete name, in the form of 
<I>servername.classname.</I> This complete name is called 
the <I>ProgID</I>. Of course, no programmer would purposely create two different classes 
with the same ProgID, so it seems that name conflicts should never happen. But COM 
is meant to manage components written by different programmers, so it's too 
optimistic to assume that no two programmers would create classes with the same 
ProgID. For this reason, COM uses special identifiers to label components and each class 
and interface that they expose.</p>

<p>Such identifiers are called GUIDs (Globally Unique Identifiers), and the 
algorithm that generates them ensures that no two identical GUIDs will ever be 
generated by two different machines anywhere in the world. GUIDs are 128-bit numbers, 
and are usually displayed in a readable form as groups of hexadecimal 
digits enclosed within curly brackets. For example, this is the GUID that identifies the 
Excel.Application (Excel 97 version) object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
{00024500-0000-0000-C000-000000000046}
</pre>
</td></tr>
</table></p>

<p>When Visual Basic compiles an ActiveX server, it generates distinct 
identifiers for each of its classes and the interfaces they expose. A class identifier is called a 
CLSID and an interface identifier is called an IID, but each is just a regular GUID with 
a different name. All these GUIDs are stored in the type library that Visual Basic 
creates for the component and registers in the system Registry. The type library is itself 
assigned another unique identifier.</p>

<A NAME="750"><h3>The role of the Registry</h3></A>
<p>A good COM programmer should have at least a general understanding of the 
Registry, how COM components are registered, and what happens when a client 
instantiates a component.</p>

<p>To run a component, Visual Basic has to convert the ProgID of the 
component's class into its actual CLSID. To do so, it calls a function in the COM run-time library 
that searches the ProgID in the HKEY_CLASS_ROOT subtree of the Registry. If the 
search is successful, the CLSID subkey of the found entry contains the identifier of the 
class. (See Figure 169.) This search is performed at run time when the program 
instantiates the component using the <I>CreateObject 
</I>function or at compile time when the component 
is created using the New operator. Incidentally, this explains why the New 
operator is slightly faster than 
<I>CreateObject</I>: When New is used, the executable 
already contains the CLSID of the class, which saves a time-consuming trip to the 
Registry. (You get better performance if you use specific variables instead of generic ones.)</p>

<p>
<A HREF="javascript:fullSize('f16ph09x.htm')"> <img src="f16ph09.JPG" width=404 height=175 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-9.</B> <i>The RegEdit program shows where COM can find the CLSID of the MyServer.MyClass component.</i><!--/caption-->
</p>



<p>At this point, COM can search in the HKEY_CLASS_ROOT\CLSID subtree of 
the Registry for the CLSID of the component. If the component is correctly 
registered, COM finds all the information it needs under this key. (See Figure 16-10.) In 
particular, the value of the <I>LocalServer32 </I>key is the path of the EXE file that actually 
provides the component. Other important information is stored in the 
<I>TypeLib </I>key, which contains the GUID of the type library. COM uses this GUID for another search in 
the Registry to learn where the type library is located. (In this particular case, the 
type library is in the same EXE file that provides the component, but in general it can 
be stored in a separate file with a .tlb extension.)</p>

<p>
<A HREF="javascript:fullSize('f16ph10x.htm')"> <img src="f16ph10.JPG" width=404 height=169 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-10.</B> <i>COM uses the CLSID of the component to retrieve the path of the executable file.</i><!--/caption-->
</p>

<A NAME="751"><h3>Compatible components</h3></A>
<p>In theory, a careful assessment of your project's requirements would enable you 
to create a COM component that already includes all the classes and the methods 
that are necessary for facing the challenges of the real world. In this ideal scenario, 
you never have to add classes or methods to the component or change its public 
interface in any way. These components would never raise any compatibility problem: 
When the Visual Basic compiler converts a method's name into an offset in the VTable, 
that offset will always be valid and will always point to the same routine in the component.</p>

<p>As you probably suspect, this scenario is too perfect to be true. The reality 
is that you often need to modify your component, to fix bugs, and to add new 
capabilities. These changes are likely to cause problems with existing clients. More 
precisely, if your new version of the component modifies the order in which 
methods are listed in the VTable, nasty things will happen when an existing client tries to 
invoke a method at the wrong offset. Similar problems can occur when the same 
routine expects a different number of arguments or arguments of a different type.</p>

<p>Visual Basic defines three levels of compatibility:</p>

<p><b>Version Identical</b> The new component has the same project name and the 
same interfaces as its previous version. For example, this happens if you change the 
internal implementation of methods and properties but don't modify their names, 
arguments, and return types. (You can't even add optional arguments to existing methods 
because that would change the number of values on the stack when the method 
is invoked.) In this case, Visual Basic compiles the new component using the 
same CLSIDs and IIDs used in its previous version, and existing clients won't even be 
aware that the component has actually changed.</p>

<p><b>Version Compatible</b> If you add new methods and properties but don't 
modify the interface of existing members, Visual Basic can create a new component 
that's compatible with its previous version in the sense that all the methods and 
properties preserve their positions in the VTable. Therefore, existing clients can safely 
call them. The VTable is extended to account for the new members, which will be 
used only by the clients that are compiled against the new version. The name of 
the component's EXE or DLL file can be the same as its previous version, and when 
you install this component on customers' machines it will overwrite the previous version.</p>

<p><b>Version Incompatible</b> When you modify the interface of existing methods 
and properties&#8212;for example, by adding or removing arguments (including optional 
arguments) or by changing their type or the type of the return value&#8212;you end up 
with a component that's incompatible with its previous version. Visual Basic 6 
sometimes produces incompatible components even if you change a setting in the 
Procedure Attributes dialog box. In this case, you must change the name of the EXE or DLL 
file that hosts the component so that it can coexist with the previous version on 
your customers' machines. Older client applications can continue to use the 
previous version of the component, whereas new clients use the new version.</p>

<p>If clients create objects from the component using the 
<I>New </I>operator, they reference them through their CLSIDs; in this way, no confusion can arise when two 
different (incompatible) components with the same ProgID are installed on the same 
machine. But it's preferable that different versions of the component also have distinct 
ProgIDs, which you accomplish by changing the project name of the newer version.</p>

<p>Let's consider what actually happens when you create a 
version-compatible component. You might believe that Visual Basic simply creates a new component 
that inherits the CLSIDs and IIDs from the previous version of the component, but 
that's not what happens. Instead, Visual Basic generates new identifiers for all the 
classes and the interfaces in the component. This conforms to COM guidelines, which 
state that once you publish an interface you should never change it.</p>

<p>The new component, however, also contains information about all the 
CLSIDs and IIDs of its previous version so that clients that were built for that older 
version can continue to work as before. When an old client requests an object from the 
newer component, COM searches the old CLSID in the Registry, which still references 
the same EXE file. You need to understand how this mechanism works because it 
explains why a version-compatible component accumulates multiple sets of CLSIDs and 
IIDs in the executable file and also tends to fill the Registry (both your customers' and 
your own) with many entries.</p>

<A NAME="752"><h3>Version compatibility in the Visual Basic environment</h3></A>
<p>You know enough to fully understand how you can create compatible 
components and when you should do it. The Visual Basic environment doesn't permit you to 
select the CLSIDs of your classes as other languages do; all class and interface 
identifiers are automatically generated for you. But you can decide whether a new version 
of the component should preserve the CLSIDs generated for a previous version. 
Visual Basic offers three settings that affect how identifiers are generated, as you can 
see in Figure 16-11.</p>

<p>
<img src="f16ph11x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 16-11.</B> <i>Version compatibility settings in the Visual Basic IDE.</i><!--/caption-->
</p>

<p><b>No Compatibility</b> Each time you run the project in the environment (or 
compile it to disk), Visual Basic discards all existing identifiers and regenerates them. This 
includes all the classes, the interfaces, and the component's type library. This 
means that clients that worked with previous versions of the component won't work 
with the new one.</p>

<p><b>Project Compatibility</b> When you select this mode, you must also select a 
VBP, EXE, or DLL file with which you must preserve compatibility. In this case, Visual 
Basic discards all the identifiers for classes and interfaces but preserves the GUID of 
the component's type library. This setting is useful during the development 
process because a client application loaded in another instance of Visual Basic won't lose 
the reference to the server's type library in the References dialog box. When the 
Visual Basic environment loses a reference to a type library, the corresponding entry in 
the References dialog box is preceded by a <I>MISSING: 
</I>label. When this happens, you need to deselect it, close the dialog box, reopen the dialog box, and select the new 
reference with the same name that has been added.</p>

<p>Of course, just retaining the type library's GUID isn't sufficient for existing 
clients to continue to work with the new version of the component, but this is 
hardly a problem because during the test phase you haven't released any compiled 
clients yet. When you create an ActiveX EXE or DLL project, Visual Basic defaults to 
project compatibility mode.</p>

<p><b>Binary Compatibility</b> When you set binary compatibility with an existing 
component, Visual Basic tries to preserve all the identifiers for the component's type 
library, classes, and interfaces. You should enforce this mode after you've 
delivered the component (and its client applications) to your customers because it ensures 
that you can replace the component without also recompiling all the existing clients. 
You need to provide the path of the executable file that contains the previous version 
of the component and that Visual Basic will use to retrieve all the identifiers it needs.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
A common mistake is to select as the reference file for binary 
compatibility the same executable file that's the target of the compilation process. 
If you make this mistake, each time you compile a new version of your 
component a new set of GUIDs is added to the EXE file. These identifiers are of no 
use because they come from compilations in the development phase, and they 
increase the size of the executable file and add new keys to your Registry that 
will never be used. Moreover, under certain circumstances you can get a 
compiler error when the target of the compilation and the file used as a reference for 
binary compatibility coincide.

<p>Instead, you should prepare an initial version of your component with 
all the classes and methods already in place (even if empty), and then create 
an executable file and use it as a reference for all subsequent compilations. In 
this way, you can select the Binary Compatibility mode but avoid the proliferation 
of GUIDs. Of course, as soon as you release the first public version of your 
server, it should become the new reference for binary compatibility. Remember to 
store such EXE or DLL files in a separate directory so that you don't accidentally 
overwrite them when you compile the project to disk.</p>
</blockquote></div></p>

<p>When you're in binary compatibility mode, Visual Basic just 
<I>tries </I>to maintain the compatibility with the compiled component used as a reference. In fact, at 
some point during the development of the new version of the component, you might 
purposely or accidentally break the compatibility&#8212;for example, by changing the 
project's name, the name of a class or a method, or the number or the type of a 
method's arguments. (See the &quot;Version Incompatible&quot; section, earlier in this chapter.) 
When you later run or compile the project, Visual Basic displays the dialog box 
shown in Figure 16-12 and gives you three options:</p>

<UL>
<p><li> You can undo changes to source code so that compatibility is 
preserved; you do this by clicking on the Cancel button. Unfortunately, you have 
to undo changes manually or load a previous version of the project's 
source code because Visual Basic doesn't offer an automatic way to do it.</li></p>

<p><li>You can break the compatibility by selecting the Break Compatibility 
option button and clicking on the OK button. Visual Basic generates a 
new set of GUIDs, which make this component incompatible with clients 
compiled against the previous version. At the end of the compilation 
process, Visual Basic suggests that you change both the name of the executable 
file and the project's name (and therefore the ProgID of the component). 
You should also increment the Major version number in the Make tab of 
the Project Properties dialog box.</li></p>

<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p><li>You can select the Preserve Compatibility option button to ignore 
the warning, and keep the same CLSIDs and IIDs in the new version of 
the component. This option is only for advanced users and should be 
selected with great care because all existing clients will probably crash when 
they try to use the new component. For example, you can select this 
option when you have changed the syntax of a method but you're absolutely 
sure that no existing client ever calls it. This option wasn't available in 
previous versions of Visual Basic.</li></p>
</UL>

<p>
<A HREF="javascript:fullSize('f16ph12x.htm')"> <img src="f16ph12.JPG" width=404 height=338 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-12.</B> <i>The dialog box for specifying how to handle an incompatible component in Binary Compatibility mode.</i><!--/caption-->
</p>

<p>At times, you might want to purposely break the binary compatibility 
with previous versions of the component. This is a useful tactic, for example, when 
you're going to deploy both the client application and all the components it uses and 
therefore you're sure that no older client exists on the customer's machine. You can 
break the binary compatibility by manually resetting the compatibility setting to No 
Compatibility mode and recompiling the application. The component you obtain 
doesn't include all the GUIDs from its previous version and therefore is smaller and 
doesn't fill the Registry with keys and values that would never be used anyway.</p>

<A NAME="753"><h3>Design tips</h3></A>
<p>It's nearly impossible to design a nontrivial component so that you never need to 
break its compatibility with previous versions when the requirements change. But here 
are a few tips that can help you preserve compatibility.</p>

<p>First, carefully select the best data type for each method or property. Use 
Longs rather than Integers because the former provide a larger range of values 
without hurting performance. Similarly, use Double instead of Single arguments. Using 
Variant arguments also helps to preserve compatibility when your requirements change.</p>

<p>Second, try to anticipate how your methods could be extended. Even if 
you aren't willing to write the code that implements those additional capabilities, 
provide all the necessary methods and arguments that might become necessary later. You 
can use the <I>Optional </I>and <I>ParamArray </I>keywords to make your methods flexible 
without affecting the simplicity of existing clients.</p>

<p>Another trick you can use to help you preserve compatibility with older 
components is to include a sort of do-everything method that can perform different 
tasks depending on what you pass to it. Such a method might be implemented as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Execute(Action As String, Optional Args As Variant) As Variant
    ' No code is here in the initial version of the component.
End Function
</pre>
</td></tr>
</table></p>

<p>Any time you want to add more intelligence to your class but you don't 
want to break the compatibility with your existing clients, just add some code inside 
the <I>Execute </I>method, and then recompile without breaking the binary compatibility. 
For example, you might add the capability to save and load initialization data from a file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function Execute(Action As String, Optional Args As Variant) As Variant
    Select Case Action
        Case &quot;LoadData&quot;    ' LoadData and SaveData are private procedures
            LoadData args  ' defined elsewhere in the project.   
        Case &quot;SaveData&quot;
            SaveData args
    End Select
End Function
</pre>
</td></tr>
</table></p>

<p>The <I>Args </I>parameter is a Variant, so you can even pass multiple arguments to 
it using an array. For example, you can implement a function that evaluates the 
number of pieces sold within an interval of dates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
    ' Inside the Evaluate method
    Case &quot;EvalSales&quot;
        ' Check that two arguments have been passed.
        If IsArray(Args) Then
            If UBound(Args) = 1 Then 
                ' The arguments are the start and end date.
                Evaluate = EvalSales(Args(0), Args(1))
                Exit Function
            End If
        End If
        Err.Raise 1003, , &quot;A two-element array is expected&quot;
</pre>
</td></tr>
</table></p>

<p>You could then call the <I>Evaluate </I>method as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Load initialization data.
obj.Evaluate &quot;LoadData&quot;, &quot;c:\MyApp\Settings.Dat&quot;
' Build a 2-element array on the fly, and pass it to the Evaluate method.
SoldPieces = obj.Evaluate(&quot;EvalSales&quot;, Array(#1/1/98#, Now))
</pre>
</td></tr>
</table>
</p>

<A NAME="754"><h2>Registering a Component</h2></A>
<p>As I've shown previously, much crucial data about a component is stored in the 
Registry. This information is physically recorded there when the component 
undergoes a process called <I>registration</I>. When you run an ActiveX project in the IDE, 
Visual Basic performs a temporary registration of the component so that COM will call Visual 
Basic itself when a client requests an object from the interpreted component. When 
you stop the running project, Visual Basic immediately unregisters the component.</p>

<p>When you install a component on the customer's machine, though, you 
need to perform a permanent registration. There are three ways to permanently 
register an ActiveX server:</p>

<UL>
<p><li> All Visual Basic EXE servers accept the 
<I>/REGSERVER </I>switch on the command line; when you specify this switch, the program registers itself 
in the Registry and then exits immediately. This is the simplest way to 
silently register an out-of-process server and can be used from inside 
installation procedures.</li></p>
 
<p><li>Even if you don't specify a switch on the command line, all Visual 
Basic EXE servers automatically register themselves in the Registry before 
starting their regular execution. This method differs from the previous one 
because the program must be closed manually, so it isn't appropriate for 
automated installation procedures.</li></p>

<p><li>You register an ActiveX DLL server using the Regsvr32 utility provided 
with Visual Basic. (You can find it in the Common\Tools\Vb\RegUtils 
directory.) Just pass the complete path of the server executable file on 
the command line:</li></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
    regsvr32 <I>&lt;filename&gt;</I>
</pre>
</td></tr>
</table>
</p>
</UL>

<p>From time to time, you might want to unregister a component. For 
example, it's always a good idea to unregister a component before you delete it because 
you will remove all the component's entries in the Registry. If you keep your Registry 
clean, you have a more efficient system and reduce the number of unanticipated 
&quot;ActiveX can't create the component&quot; errors that make many COM programmers so 
nervous. You can unregister a component in two ways, as shown below.</p>

<UL>
<p><li> Run the ActiveX EXE server with the <I>/UNREGSERVER 
</I>switch on the command line; the program unregisters itself from the Registry and then 
exits immediately.</li></p>
 
<p><li>Run the Regsvr32 utility with the <I>/U</I> switch on the command line to unregister an ActiveX DLL server:</li></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
    regsvr32 /U <I>
&lt;filename&gt;</I>
</pre>
</td></tr>
</table></p>
</UL>

<p><div class="tip"><blockquote><b>TIP</b><hr>
You can cut down the time necessary to register a DLL server using 
the following trick. Open Windows Explorer and navigate to the 
C:\Windows\SendTo directory (assuming that your operating system is installed in the 
C:\Windows directory). Then create a shortcut to the Regsvr32.exe file and label it 
<I>RegisterActiveX DLL</I>, or whatever you prefer. After you've done this, you can easily 
register any DLL component by right-clicking on it and selecting the Register 
command from the SendTo menu. To easily unregister a DLL, you can create the 
following two-line batch file:

<p><table><tr><td>
<pre>
C:\VisStudio\Common\Tools\Vb\Regutils\regsvr32 /U %1
Exit
</pre>
</td></tr>
</table></p>

<p>and add a shortcut to it in the SendTo menu. (Remember to use a path 
that matches your system directory configuration, of course.)</p>
</blockquote></div>
</p>


<A NAME="755"><h2>Shutting Down the Server</h2></A>
<p>After you have used an object, you must correctly unload the component when 
you don't need it any longer. If you neglect to do so, your component will continue to 
hang around in your system, wasting memory, resources, and CPU time. An 
out-of-process ActiveX component is correctly unloaded when all of the following conditions are met:</p>

<UL>
<p><li> The variables in a client application that point to objects in the 
component have been set to Nothing, explicitly through code or implicitly 
because they went out of scope. (All object variables are automatically 
set to Nothing when the client application terminates.)</li></p>
 
<p><li>No request for a component's object is in the queue waiting to be served.</li></p>

<p><li>The server has no form currently loaded, either visible or invisible.</li></p>

<p><li>The server isn't executing any code.</li></p>
</UL>

<p>Don't forget that only object variables in client applications keep the 
component alive. If a component has one or more private variables that point to its 
own objects, they won't prevent COM from destroying the component when no 
clients are using its objects.</p>

<p>Meeting the last two conditions for unloading a component requires that 
you pay attention to what the code in the component actually does. For example, 
many components use hidden forms to host a Timer control that provides 
background processing capabilities. Consider this deceptively innocent routine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the MyClass module of the MyServer component
Sub StartBackgroundPrinting()
    frmHidden.Timer1.Enabled = True
End Sub
</pre>
</td></tr>
</table></p>

<p>Such a hidden form is enough to keep the component alive even after all 
its clients have been terminated, until the user resets the system or explicitly kills 
the server's process from the Task Manager or another similar utility. What's worse is 
that the component isn't visible, so you won't notice that it's still running unless you 
look for it in the list of active processes. Of course, the solution to this problem is 
to explicitly unload the form in the <I>Terminate 
</I>event procedure of the class, which is always executed when the client releases all the references to the component:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' In the MyClass module of the MyServer component
Private Sub Class_Terminate()
    Unload frmHidden
End Sub
</pre>
</td></tr>
</table></p>

<p>If the server is executing code&#8212;for example, a loop that continuously polls 
the availability of data from a serial port&#8212;you must devise a way to stop it when all 
references are released. Most of the time, you can solve this problem in the same 
way you solve the hidden form problem, which is by explicitly stopping the code 
from within the <I>Terminate </I>event procedure. Some complex servers expose a method, 
such as <I>Quit </I>or <I>Close</I>, that clients can use to indicate that they don't need the 
component any longer and are therefore about to set all the references to Nothing. For 
example, this is the approach used by Microsoft Excel and Microsoft Word. (See the 
spell checker code sample at the beginning of this chapter.)</p>

<p>One last note: A server must not terminate until all of its clients are done 
with it. Even if a server exposes a method such as <I>Quit</I>, it should never 
try to force its own termination. If a server abruptly terminates itself&#8212;for example, by using an 
<I>End </I>statement&#8212;all the clients that still have one or more references to it receive an error 
440, Automation error. The <I>Quit </I>method should be regarded only as a request to the 
server to prepare to close itself by unloading all of its forms and stopping any 
background activity.</p>

<A NAME="756"><h2>Persistence</h2></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 has added the capacity for creating 
<I>persistable objects,</I> which are objects whose state can be saved and then restored later. The key to object persistence 
is the new <I>Persistable </I>class attribute and stand-alone PropertyBag objects. Only 
public creatable objects can be made persistent, so the 
<I>Persistable </I>attribute appears in the list of class attributes only if 
<I>Instancing </I>is MultiUse or SingleUse (or their Global variants).</p>

<A NAME="757"><h3>Saving and restoring state</h3></A>
<p>When you set the <I>Persistable</I> attribute of a public creatable class to 1-Persistable, 
the class module supports three new internal events: 
<I>InitProperties</I>, <I>WriteProperties</I>, and 
<I>ReadProperties</I>. In the 
<I>InitProperties</I> event, the class is expected to initialize its 
properties, which often means assigning the object's properties their default values. 
This event fires immediately after the <I>Initialize 
</I>event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' A persistable CPerson class with just two properties
Public Name As String
Public Citizenship As String
' Default values
Const Name_Def = &quot;&quot;              
Const Citizenship_Def = &quot;American&quot;

Private Sub Class_InitProperties()
    Name = Name_Def
    Citizenship = Citizenship_Def
End Sub
</pre>
</td></tr>
</table></p>

<p>The <I>Class_WriteProperties </I>event fires when an object is asked to save its 
internal status. This event procedure receives a PropertyBag object, a virtual bag that 
should be filled with the current values of the object's properties. You fill the bag by 
using the PropertyBag's <I>WriteProperty </I>method, which accepts the name of the property 
and its current value:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Class_WriteProperties(PropBag As PropertyBag)
    PropBag.WriteProperty &quot;Name&quot;, Name, Name_Def
    PropBag.WriteProperty &quot;Citizenship&quot;, Citizenship, Citizenship_Def
End Sub
</pre>
</td></tr>
</table></p>

<p>Finally, the <I>Class_ReadProperties</I> event fires when the class is asked to 
restore its previous state. The PropertyBag object passed to the event procedure contains 
the values of properties that were saved previously, and the object can extract them 
using the PropertyBag's <I>ReadProperty </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Class_ReadProperties(PropBag As PropertyBag)
    Name = PropBag.ReadProperty(&quot;Name&quot;, Name_Def)
    Citizenship = PropBag.ReadProperty(&quot;Citizenship&quot;, Citizenship_Def)
End Sub
</pre>
</td></tr>
</table></p>

<p>The last argument passed to both <I>WriteProperty 
</I>and <I>ReadProperty </I>methods is the property's default value. This value is used to optimize the resources used by 
the PropertyBag object: If the value of the property coincides with its default value, 
the property isn't actually stored in the PropertyBag object. This argument is 
optional, but if you use it you must use the same value within all three event procedures. 
For this reason, it's advisable to use a symbolic constant.</p>

<A NAME="758"><h3>The PropertyBag object</h3></A>
<p>To have an object save its state, you must create a stand-alone PropertyBag and 
pass the persistable object to the PropertyBag's 
<I>WriteProperty </I>method, as shown in the following code snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Inside a form module
Dim pers As New CPerson, pb As New PropertyBag

' Initialize a CPerson object.
Private Sub cmdCreate_Click()
    pers.Name = &quot;John Smith&quot;
    pers.Citizenship = &quot;Australian&quot;
End Sub
' Save the CPerson object in a PropertyBag.
Private Sub cmdSave_Click()
    ' This statement fires a WriteProperties event in the CPerson class.
    pb.WriteProperty &quot;APerson&quot;, pers
End Sub
</pre>
</td></tr>
</table></p>

<p>If the class's <I>Persistable </I>attribute isn't 1-Persistable, you get an error 330, 
&quot;Illegal Parameter. Can't write object because it doesn't support persistence&quot; when 
you try to save or restore an object from that class.</p>

<p>Restoring the object's state is easy, too:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdRestore_Click()
    ' To prove that persistence works, destroy the object first.
    Set pers = Nothing
    ' The next statement fires a ReadProperties event
    ' in the CPerson class.
    Set pers = pb.ReadProperty(&quot;APerson&quot;)
End Sub
</pre>
</td></tr>
</table></p>

<p>When you pass objects to the <I>WriteProperty 
</I>and <I>ReadProperty </I>methods, you don't specify a default value. If you omit the last argument and the PropertyBag 
doesn't contain a corresponding value, Visual Basic raises an error 327, &quot;Data value 
named '<I>property name</I>' not found.&quot; This is the symptom of a logical error in your 
program; typically, you have misspelled the name of the property, or you have specified 
a default value when you saved the object and have omitted it when restoring its state.</p>

<p>Once you have loaded a PropertyBag object with the values of one or 
more properties, you can also save those values to disk so that you can restore the 
object's state in subsequent sessions. You do this using the PropertyBag's 
<I>Contents </I>property, a Byte array that contains all the information about the values stored in the 
PropertyBag, as the code below demonstrates.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Save the PropertyBag to a binary file.
Dim tmp As Variant
Open App.Path &amp; &quot;\Propbag.dat&quot; For Binary As #1
tmp = pb.Contents
Put #1, , tmp
Close #1
</pre>
</td></tr>
</table></p>

<p>The previous routine uses a temporary 
<I>Variant</I> variable to simplify the saving of the Byte array. You can use the same trick when it's time to reload the 
contents of the file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Reload the PropertyBag object from file.
Dim tmp As Variant
Set pb = New PropertyBag
Open App.Path &amp; &quot;\Propbag.dat&quot; For Binary As #1
Get #1, , tmp
pb.Contents = tmp
Close #1
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
If you're testing the application in the IDE, you might find that 
you're unable to reload the state of an object saved to disk in a previous session 
because of an error 713 &quot;Class not registered.&quot; This happens because the 
property bag embeds the CLSID of the object being saved. By default, each time 
you rerun the application in the IDE, Visual Basic generates a new CLSID for 
each class in the project, so it won't be able to reload the state of an object with a 
different CLSID. To work around this issue, you should enforce the Binary 
Compatibility mode, as explained in the &quot;<A HREF="#752">Version Compatibility in the Visual Basic Environment</A>&quot; section earlier in this chapter.
</blockquote></div></p>

<A NAME="759"><h3>Persistent object hierarchies</h3></A>
<p>The persistence mechanism can also work with object hierarchies; each object in 
the hierarchy is responsible for saving its dependent objects in its 
<I>WriteProperties </I>event procedure and restoring them in its 
<I>ReadProperties </I>procedure. Everything works 
as long as all the objects in the hierarchy have their 
<I>Persistable </I>attribute set to 1Persistable. 
For example, you can extend the CPerson class with a Children collection that contains 
other CPerson objects, and you can account for this new property in the 
<I>WriteProperties </I>and <I>ReadProperties </I>event procedures:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Public Children As New Collection        ' A new public property

Private Sub Class_WriteProperties(PropBag As PropertyBag)
    Dim i As Long
    PropBag.WriteProperty &quot;Name&quot;, Name, Name_Def
    PropBag.WriteProperty &quot;Citizenship&quot;, Citizenship, Citizenship_Def
    ' First, save the number of children (default = 0).
    PropBag.WriteProperty &quot;ChildrenCount&quot;, Children.Count, 0
    ' Next, save all the children one by one.
    For i = 1 To Children.Count
        PropBag.WriteProperty &quot;Child&quot; &amp; i, Children.Item(i)
    Next
End Sub

Private Sub Class_ReadProperties(PropBag As PropertyBag)
    Dim i As Long, ChildrenCount As Long
    Name = PropBag.ReadProperty(&quot;Name&quot;, Name_Def)
    Citizenship = PropBag.ReadProperty(&quot;Citizenship&quot;, Citizenship_Def)
    ' First, retrieve the number of children.
    ChildrenCount = PropBag.ReadProperty(&quot;ChildrenCount&quot;, 0)
    ' Next, restore all the children, one by one.
    For i = 1 To ChildrenCount
        Children.Add PropBag.ReadProperty(&quot;Child&quot; &amp; i)
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>Interestingly, the resulting PropertyBag object contains many properties 
labeled <I>Name</I>, <I>Citizenship</I>, 
<I>Child1</I>, <I>Child2</I>, and so on, but this isn't a problem because 
they are encapsulated in a hierarchy of properties so that no confusion can arise. In 
other words, the <I>Name </I>value stored in the 
<I>Child1 </I>subtree is distinct from the <I>Name 
</I>value stored in the <I>Child2 </I>subtree, and so on. If you want to study this technique 
further, you can browse the code of the demonstration program on the companion CD.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You need to be sure that the hierarchy doesn't contain any 
circular references. Or at least you need to be certain that the references are 
dealt with correctly when you're storing and restoring objects. To explain why this 
is such an important consideration, suppose that the CPerson class exposes 
a <I>Spouse</I> property that returns a reference to a person's wife or husband, and 
then think of what would happen if each object attempts to save the state of this 
property. Mr. Smith saves the state of Mrs. Smith, who in turn saves the state of 
Mr. Smith, who in turn saves the state of Mrs. Smith...and so on, until you get 
an &quot;out of stack space&quot; error.

<p>Depending on the nature of the relationship, you must devise a 
different strategy to avoid being caught in such endless loops. For example, you 
could decide that you'll save just the <I>Name 
</I>of a person's consort instead of its entire state, but then you have to correctly rebuild the relationship in the 
<I>ReadProperties </I>event procedure.</p>
</blockquote></div></p>

<A NAME="760"><h3>Using the PropertyBag with any class module</h3></A>
<p>I've explained that the <I>Persistable </I>property is available only if the class is Public 
and creatable. In a sense, this is a requirement of COM, not of Visual Basic. This 
doesn't mean, however, that you can't take advantage of the PropertyBag object&#8212;and 
its capability to store data in all the Automation-compliant formats&#8212;to implement a 
sort of object persistence. In fact, the only thing you can't really do is implement 
custom class events, such as <I>WriteProperties 
</I>and <I>ReadProperties</I>. But you can add a 
special property of the class that sets and returns the current state of the object and uses 
a private PropertyBag object for the low-level implementation of the 
serialization mechanism. In the following example, I have a CPerson class module that 
exposes a special property called 
<I>ObjectState</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The CPerson class module
Public FirstName As String, LastName As String

Property Get ObjectState() As Byte()
    Dim pb As New PropertyBag
    ' Serialize all the properties into the PropertyBag.
    pb.WriteProperty &quot;FirstName&quot;, FirstName, &quot;&quot;
    pb.WriteProperty &quot;LastName&quot;, LastName, &quot;&quot;
    ' Return the PropertyBag's Contents property.
    ObjectState = pb.Contents
End Property

Property Let ObjectState(NewValue() As Byte)
    Dim pb As New PropertyBag
    ' Create a new PropertyBag with these contents.
    pb.Contents = NewValue()
    ' Deserialize the class's properties.
    FirstName = pb.ReadProperty(&quot;FirstName&quot;, &quot;&quot;)
    LastName = pb.ReadProperty(&quot;LastName&quot;, &quot;&quot;)
End Property
</pre>
</td></tr>
</table></p>

<p>When implementing this form of persistence, the code in the client 
application is slightly different:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim p As New CPerson, state() As Byte

p.FirstName = &quot;Francesco&quot;
p.LastName = &quot;Balena&quot;
' Save the state into a Byte array.
state() = p.ObjectState
' ...
' Create a new object, and restore its state from the Byte array.
Dim p2 As New CPerson
p2.ObjectState = state()
Print p2.FirstName &amp; &quot; &quot; &amp; p2.LastName       ' Displays &quot;Francesco Balena&quot;.
</pre>
</td></tr>
</table></p>

<p>Of course, if the object has dependent objects, they must expose the 
<I>ObjectState </I>property as well so that the main object can correctly serialize the state of its 
child objects. A cleaner approach would be to define the 
<I>IObjectState</I> interface and have this interface be implemented by all the classes that you want 
to make persistent. Notice that this technique works because the object being deserialized is created by 
the component's code, not by the PropertyBag object, so there's no restriction 
about its <I>Instancing </I>property. This technique also works inside Standard EXE programs 
and is actually one of the most useful unknown tricks that you can perform with 
the PropertyBag object.</p>

<A NAME="761"><h3>Persistent ADO Recordsets</h3></A>
<p>One fact that you won't find in the Visual Basic documentation is that under 
certain conditions you can even pass an ADO Recordset to a PropertyBag object. More 
precisely, any ADO Recordset that can be saved to a file using its 
<I>Save </I>method&#8212;for example, a Recordset with 
<I>CursorLocation </I>set to adUseClient&#8212;can be also be 
passed to the <I>WriteProperty </I>method of a PropertyBag. This gives you unparalleled 
flexibility in exchanging data among your applications. For example, instead of saving the 
contents of one single Recordset to a file using a 
<I>Save </I>method, you can store multiple related Recordsets inside one PropertyBag object, and then save its 
<I>Contents </I>property to file.</p>


<a name="A103"></a><h3>8.1.3 Creating an ActiveX DLL Server</h3>

<A HREF="#A102">[Previous]</A> <A HREF="#A104">[Next]</A><P>

<A NAME="762"><h1>Creating an ActiveX DLL Server</h1></A>
<p>Creating in-process DLL components in Visual Basic isn't significantly different 
from creating out-of-process components, so the majority of the techniques described 
in the preceding section, &quot;<A HREF="#722">Creating an ActiveX EXE Server</A>,&quot; are also valid for 
ActiveX DLL components. In this section, I'll focus on the few differences between the 
two types of components.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
If you haven't done it already, download the most recent 
Service Pack for Visual Basic. Although the Service Pack doesn't add any new 
features to the language, it fixes a number of serious bugs that occurred with ActiveX 
DLL components&#8212;in particular, those that occurred when the application was 
using more than seven or eight in-process servers.
</blockquote></div></p>

<A NAME="763"><h2>In-Process Components in the Visual Basic IDE</h2></A>
<p>In-process components can be created from the Project Properties dialog box 
by turning a class-based Standard EXE project into an ActiveX DLL project, much as 
you do with out-of-process components. Alternatively, you can create a new ActiveX 
DLL project from the Project Gallery dialog box that appears when you issue the 
New Project command from the File menu.</p>

<p>The main difference between creating out-of-process and in-process 
components is that the latter ones can be built in the same instance of the IDE as their 
client. Visual Basic 5 and 6 development environments support the concept of 
<I>project groups</I> and can host multiple projects in the same instance. To create a project 
group, you first load or create a project as usual, and then you issue the Add Project 
command from the File menu to create additional projects or you load existing 
projects from disk. This ability lets you create a project group made up by one standard 
EXE and one or more ActiveX DLLs so that you can test one or more in-process 
components at the same time. You can also save the project group in a file with a 
.vbg<I> </I>extension so that you can quickly reload all your projects with one Open 
menu command.</p>

<p>When you issue the Run command, the project that has been marked as 
the Startup project (see Figure 16-13) begins its execution. This is usually the 
standard EXE project that works as the client application and that later instantiates one or 
more objects from the ActiveX DLL projects. You don't need to explicitly run ActiveX 
DLL projects (as you do with out-of-process components running in separate 
instances of the Visual Basic IDE), but you still have to add a reference to the DLL in the 
References dialog box of the standard EXE project.</p>

<p>
<img src="f16ph13.GIF" width=284 height=313 border=0>
</p><p>
<B>Figure 16-13.</B> <i>You can make a project the Startup project by right-clicking on it in the Project window.</i>
</p>

<p>Be aware that a few commands in the IDE implicitly refer to the current 
project&#8212;that is, the project being highlighted in the Project properties. For example, the 
contents of the References dialog box is different depending on which project 
is highlighted, and the Project Properties dialog box lets you see and modify only the attributes 
of the current project. When the current project is the standard EXE, the Object 
Browser shows only the Public classes and members of another ActiveX DLL project 
and doesn't allow you to change the member's attributes. To display all private 
members or modify the attributes and the descriptions of the DLL's methods and 
properties, you must make that ActiveX DLL the active project.</p>

<p>Running the DLL in the same environment as its client isn't a limitation 
because an ActiveX DLL can only have one client. It's loaded in the client's address 
space and therefore can't be shared with other applications. If two distinct client 
applications request objects from the same in-process component, COM instantiates 
two different DLLs, each one in the address space of the client that made the request. 
For this reason, using an ActiveX DLL is much simpler than using an ActiveX 
EXE component; the component serves only one client and therefore all requests can 
be immediately fulfilled. Client applications don't need to account for timeout conditions.</p>

<p>An ActiveX DLL project can't contain SingleUse or GlobalSingleUse classes. 
The reason for this is that such a DLL runs in the same process as its client and 
doesn't have a process of its own. So COM can't create a new process for the DLL when 
the client creates a second object from the component.</p>

<A NAME="764"><h2>Differences Between In-Process and Out-of-Process Components</h2></A>
<p>ActiveX DLL components can't do everything. In most cases, their limitations 
are caused by their in-process nature and aren't dictated by Visual Basic.</p>

<A NAME="765"><h3>Error handling</h3></A>
<p>You deal with errors in in-process components as you do within ActiveX EXE 
servers. In a sense, however, error handling inside in-process components is even 
more important because any fatal error in the server also terminates the client and vice 
versa because the two are actually the same process.</p>

<A NAME="766"><h3>User interface</h3></A>
<p>ActiveX DLLs can show their own forms, as out-of-process components do. 
Interestingly, a form coming from an in-process component is automatically placed in 
front of forms from its client application, so you don't need to resort to the 
<I>SetForegroundWindow </I>API function to achieve the right behavior. Depending on the client's 
capabilities, however, an in-process component might not be able to display 
nonmodal forms. For example, programs written in Visual Basic 5 or 6, all the applications 
in the Microsoft Office 97 suite (or later versions), and all the third-party 
applications that have licensed the VBA language support nonmodal forms displayed by 
in-process components. On the other hand, programs written with Visual Basic 4 and all 
the applications found in previous versions of Microsoft Office raise an error 369 
when a DLL component tries to display a nonmodal form.</p>

<p>Visual Basic enables you to test whether a client supports nonmodal 
forms through the <I>App.NonModalAllowed </I>read-only property. Microsoft suggests that 
you test this property before showing a nonmodal form from within a component, 
and degrade gracefully by showing a modal form if necessary:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If App.NonModalAllowed Then
    frmChart.Show 
Else
    frmChart.Show vbModal
End If
</pre>
</td></tr>
</table></p>

<p>If you consider that the vbModal constant is 1 and that the 
<I>App.NonModalAllowed </I>returns 0 or _1, you can do everything in just one 
statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
frmChart.Show (1 + App.NonModalAllowed)
</pre>
</td></tr>
</table></p>

<p>Unfortunately, you can't test this feature without compiling the component 
into an actual ActiveX DLL because the <I>App.NonModalAllowed 
</I>property always returns True when the program runs in the Visual Basic environment.</p>

<A NAME="767"><h3>Shutting down the server</h3></A>
<p>The rules that state when an in-process component is terminated are different 
from those you've seen for out-of-process components. The main difference is that an 
in-process component always follows the destiny of its client: When the client 
terminates, the component also terminates even if it has visible forms. When the client is still 
executing, an in-process component is terminated if all of the following conditions are true:</p>

<UL>
<p><li> No object variable points to an object in the component, either in the 
client or <I>in the component itself</I>. (ActiveX EXE servers aren't kept alive by 
object variables owned by the component.)</li></p>
 
<p><li>No request for a component's object is in the queue waiting to be served.</li></p>

<p><li>The server has no visible form. (ActiveX EXE servers are kept alive even by forms that are loaded but invisible.)</li></p>

<p><li>The server isn't executing any code.</li></p>
</UL>

<p>The fact that an in-process server is kept alive also by internal references to 
its own objects raises a nontrivial problem. For example, if the component includes 
two objects that have references to each other, the component will never be shut 
down when the client releases all the references to it. In other words, circular 
references can keep an in-process component alive until the client terminates. There's no 
simple way to solve this problem, and it's up to the programmer to avoid creating 
circular references. (For more information about the circular reference problem, see Chapter 7.)</p>

<p>Another important detail in the behavior of in-process components might 
disorient many programmers. While ActiveX EXE components are terminated as 
soon as the client releases all the references to them (provided that all the other 
necessary conditions are met), in-process components aren't released immediately. In 
general, Visual Basic keeps them alive for a couple of minutes (the exact delay may 
vary, though) so that if another request comes from the client, COM doesn't have to 
reload the server. If this timeout expires, the DLL is silently unloaded and its 
memory is released. A new request coming from the client at this point will take a little 
more time because COM has to reload the component.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
Only references to public objects can keep a component alive. 
Even if an in-process DLL manages to pass its client a pointer to a private object 
(for example, by using an <I>As Object </I>argument or return value), this reference 
won't keep the component alive. So if the client releases all the references to 
the component's public objects, after some time the component will be 
unloaded. The variable owned by the client becomes invalid and crashes the 
application as soon as it's used in any way. For this reason, a component should 
<I>never </I>pass a private object to its client.
</blockquote></div></p>

<A NAME="768"><h3>Reentrancy issues</h3></A>
<p>Calls to an in-process component's methods or properties are served immediately, 
even if the component is currently serving another request. This differs from how 
out-of-process components behave and raises a number of issues that you must account for:</p>

<UL>
<p><li> If the client calls a method while the component is servicing a 
previous request, the first call is suspended until the second request is 
completed. This means that requests are served in the opposite order of their 
arrival. (ActiveX EXE servers always serialize clients' requests.)</li></p>
 
<p><li>If the component is displaying a modal form, it can't serve any 
requests coming from the client. (ActiveX EXE servers don't have this problem.)</li></p>
</UL>

<p>As you see, both problems are caused by the fact that the client calls the 
component while it's serving a previous request. This can happen if the 
component executes a DoEvents command that lets the client become active again, if the 
component raises an event in its client application, or if the client calls the 
component from within a Timer control's <I>Timer 
</I>event procedure. If you avoid these 
circumstances, you should never experienced reentrancy problems. Alternatively, you can 
implement a semaphore, a global variable in the client that keeps track of when it's safe to 
call the component.</p>

<A NAME="769"><h3>Differences between ActiveX DLL and standard EXE programs</h3></A>
<p>You should be aware of a few more features of the behavior of an in-process 
component; these are important when you convert some classes from a standard 
Visual Basic application into an ActiveX DLL component. For example, a number of 
objects and keywords refer to the component's environment, not the client's:</p>

<UL>
<p><li> The <I>Command </I>function always returns an empty string if used inside 
an in-process component because the DLL is never called with an 
argument on the command line.</li></p>
 
<p><li>The App and Printer objects and the Forms collection are private to 
the component and aren't affected by the objects with the same name in 
the client application.</li></p>

<p><li>The main application and the ActiveX component don't share file 
numbers, so you can't open a file in the main application and have the 
DLL send data to it.</li></p>

<p><li>The <I>Screen.ActiveForm </I>and <I>Screen.ActiveControl 
</I>properties can't see across the component boundaries; therefore, they return Nothing even 
if the client is displaying a form, and they can return a reference to a 
visible form or control in the DLL even if they aren't currently active.</li></p>
</UL>

<p>A few other features don't work as they normally do:</p>

<UL>
<p><li> In-process components don't support DDE (Dynamic Data 
Exchange) operations.</li></p>
 
<p><li>Any reference to the <I>App.OLEServer</I>xxxx properties causes an error 
369, &quot;Operation not valid in an ActiveX DLL.&quot;</li></p>

<p><li>When a client terminates, no <I>QueryUnload 
</I>or <I>Unload </I>event is raised for the component's forms that are still loaded.</li></p>
</UL>

<A NAME="770"><h2>Embedding Forms in a DLL</h2></A>
<p>ActiveX DLL servers offer a great way to reuse common forms and dialog boxes. 
As you know, form modules can't be Public, so they can't be visible from outside 
the project. But you can create a class that wraps around a form and exposes the 
same interface and then make the class Public so that you can create it from other 
applications. Existing applications need minor or no modifications at all to use the 
component instead of the form. The only requirement for doing this, in fact, is that 
an application never directly references controls on the form, which is something 
that you should not do anyway to preserve the form's encapsulation. (For more 
information about this issue, see <a href="#A53">Chapter 9.</a>)</p>

<p>Say that you have created a frmLogin form that accepts a user's name 
and password and validates them. In this simple example, the only valid user name 
is <I>francesco</I>, which corresponds to the 
<I>balena</I> password. The form has two TextBox controls, named txtUsername and txtPassword, and one cmdOK 
CommandButton control. The form also exposes one event, 
<I>WrongPassword</I>, that's raised when the user clicks on the OK button and the user name or the password is invalid. This 
event can be trapped by the client code to show a message box to the user, as you can 
see in Figure 16-14. This is the complete source code of the form module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Event WrongPassword(Password As String)
Public UserName As String
Public Password As String

Private Sub cmdOK_Click()
    ' Validate the password.
    If LCase$(txtUserName= &quot;francesco&quot; And LCase$(txtPassword) = _
        &quot;balena&quot; Then
        Unload Me
    Else
        RaiseEvent WrongPassword(txtPassword)
    End If
End Sub

Private Sub Form_Load()
    txtUserName = UserName     ' Load properties into fields.
    txtPassword = Password
End Sub
Private Sub Form_Unload(Cancel As Integer)
    UserName = txtUserName     ' Load field values into properties.
    Password = txtPassword
End Sub
</pre>
</td></tr>
</table></p>

<p>You can use this form as if it were a class, without ever directly referencing 
the controls on its surface. This is the code of the main form in the demonstration 
program on the companion CD:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim WithEvents frmLogin As frmLogin

Private Sub Command1_Click()
    Set frmLogin = New frmLogin
    frmLogin.Show vbModal
    MsgBox &quot;User &quot; &amp; frmLogin.UserName &amp; &quot; logged in&quot;, vbInformation
End Sub
Private Sub frmLogin_WrongPassword(password As String)
    MsgBox &quot;Wrong Password&quot;
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('f16ph14x.htm')"> <img src="f16ph14.JPG" width=404 height=216 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-14.</B> <i>An in-process component can conveniently encapsulate a reusable form and expose its events to client applications.</i><!--/caption-->
</p>

<p>Because the form can be used without accessing its controls, you can now 
wrap a CLogin class module around the frmLogin form and encapsulate both the class 
and the form modules in a LoginSvr DLL that exposes the form's functionality to 
the outside. The source code of the CLogin class is shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Event WrongPassword(Password As String)
Private WithEvents frmLogin As frmLogin

Private Sub Class_Initialize()
    Set frmLogin = New frmLogin
End Sub

Public Property Get UserName() As String
    UserName = frmLogin.UserName
End Property

Public Property Let UserName(ByVal newValue As String)
    frmLogin.UserName = newValue
End Property

Public Property Get Password() As String
    Password = frmLogin.Password
End Property

Public Property Let Password(ByVal newValue As String)
    frmLogin.Password = newValue
End Property

Sub Show(Optional mode As Integer)
    frmLogin.Show mode
End Sub

Private Sub frmLogin_WrongPassword(Password As String)
    RaiseEvent WrongPassword(Password)
End Sub
</pre>
</td></tr>
</table></p>

<p>As you see, the <I>UserName </I>and <I>Password 
</I>properties and the <I>Show </I>method of the class simply delegate to the form's members with the same name. Moreover, 
the class traps the <I>WrongPassword </I>event coming from the form and raises an event 
with the same name in its client application. In short, the class exposes exactly the 
same interface as the original form. If you set the class's 
<I>Instancing </I>attribute to 5-MultiUse, the class (and hence the form) can be reused by any client application. You only 
have to change a couple of lines of code in the original client application to have it 
work with the CLogin class instead of the frmLogin class. (The modified code is in 
boldface.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim WithEvents frmLogin <B>As CLogin</B>

Private Sub Command1_Click()
    Set frmLogin = <B>New CLogin</B>
    frmLogin.Show vbModal
    MsgBox &quot;User &quot; &amp; frmLogin.UserName &amp; &quot; logged in&quot;, vbInformation
End Sub
Private Sub frmLogin_WrongPassword(password As String)
    MsgBox &quot;Wrong Password&quot;
End Sub
</pre>
</td></tr>
</table></p>

<p>You can use this technique to create both modal and modeless reusable 
forms. You can't, however, use forms embedded in a DLL as MDI child forms in an 
MDI application.</p>

<A NAME="771"><h2>Performance</h2></A>
<p>You can improve the performance of your ActiveX DLL servers the following ways.</p>

<A NAME="772"><h3>Passing data</h3></A>
<p>Because the DLL runs in the same address space as its client, COM doesn't need 
to marshal data being passed from the client to the component and back. Actually, 
the role of COM with in-process components is much simpler than with 
out-of-process servers because COM only has to make sure that the DLL is correctly instantiated 
when the client requests an object from it. From that point onward, the client 
communicates directly with the component. COM will become active again only to ensure 
that the DLL is released when the client doesn't need it any longer.</p>

<p>The process switch that occurs any time a client calls an out-of-process 
component considerably slows down ActiveX EXE components. For example, calling 
an empty procedure without any arguments in an out-of-process component is 
<I>about 500 times slower </I>than calling an empty procedure in an in-process DLL! 
Surprisingly, a method in a DLL takes more or less the same time as a method in a Private class 
of the client application, which proves that the overhead for a call to an 
in-process component is negligible.</p>

<p>The absence of marshaling also suggests that the optimization rules for 
passing data to an in-process DLL might differ from those you should follow when 
working with out-of-process EXE servers. For example, there's no significant difference 
between passing a number to an in-process procedure using 
<I>ByRef </I>or <I>ByVal</I>. But you'd better pass longer strings by reference rather than by value: I built a simple benchmark 
program (which you can find on the companion CD) that compares the performance 
of in-process and out-of-process servers. I found that passing a 1000-character string 
by value can be 10 times slower than passing it by reference. And the longer the 
string is, the slower passing it by value is.</p>

<A NAME="773"><h3>Setting the DLL Base Address</h3></A>
<p>If you have multiple clients that are using the same in-process component at the 
same time, a separate instance of the DLL is loaded in each client's address space. This 
might result in a waste of memory unless you take some precautions.</p>

<p>Thanks to advanced features of the Windows virtual memory subsystem, 
you can load the same DLL in distinct address spaces without using more memory 
than required by a single instance of the DLL. More precisely, multiple client 
applications can share the same image of the DLL loaded from disk. This is possible, 
however, only if all the instances of the DLL are loaded at the same address in the memory 
space of the different processes and if this address coincides with the DLL's base address.</p>

<p>The <I>base address </I>of a DLL is the default address at which Windows tries to 
load the DLL within the address space of its clients. If the attempt is successful, 
Windows can load the DLL quickly because it just has to reserve an area of 
memory and load the contents of the DLL file there. On the other hand, if Windows 
can't load the DLL at its base address (most likely because that area has been 
allocated to another DLL), Windows has to find a free block in memory that's large enough 
to contain the DLL, and then it must <I>relocate 
</I>the DLL's code. The relocation process changes the addresses of jump and call instructions in the DLL's binary code to 
account for the different load address of the DLL.</p>

<p>Summarizing, it's far preferable that a DLL be loaded at its base address for 
two reasons:</p>

<OL>
<p><li>The loading process is usually slightly faster because no relocation 
is necessary.</li></p>

<p><li>Windows can save memory if other processes have to load the same 
DLL because multiple instances of the DLL share one physical block of 
memory that holds the image of the DLL as it is stored on disk.</li></p>
</OL>

<p>Visual Basic lets you select the base address for an in-process DLL server in 
the Compile tab of the Project Properties dialog box, as you see in Figure 16-15. 
The default value for this address is H11000000, but I strongly advise you to modify 
it before you compile the final version of your component. If you don't, your DLL 
base address will conflict with other DLLs written in Visual Basic. Only one DLL can 
win, and all the others will be relocated.</p>

<p>
<img src="f16ph15x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 16-15.</B> <i>You can improve the performance of an ActiveX DLL by changing its base address.</i><!--/caption-->
</p>

<p>Fortunately, other languages have different default values. For example, 
DLLs written in Microsoft Visual C++ default to address H10000000, so even if their 
programmers didn't modify this default setting, these DLLs won't conflict with 
those authored in Visual Basic.</p>

<p>When you're deciding which base address you should specify for a Visual 
Basic DLL, take the following points into account:</p>

<UL>
<p><li> DLLs use an integer number of 64-KB pages, so you should leave the 
four least significant digits as 0 (64 KB = &amp;H10000).</li></p>
 
<p><li>Each Windows process can use a 4-GB address space, but the area 
below 4 MB and above 2 GB is reserved for Windows.</li></p>

<p><li>Windows executables are loaded starting at address 4 MB (&amp;H400000).</li></p>

<p>For example, a base address greater than 1 GB (&amp;H40000000) accommodates 
the largest client application that you can ever build and still leaves one gigabyte for 
your DLLs. Even after accounting for the 64-KB page size, this leaves you with 
16,384 different values to choose from when assigning a base address to your DLL.</p>
</UL>

<A NAME="774"><h2>Extending an Application with Satellite DLLs</h2></A>
<p>ActiveX DLL servers are very useful to augment the functionality of an 
application through so-called Satellite DLLs. To understand why satellite DLLs are so 
advantageous, let's see first what resource files are.</p>

<A NAME="775"><h3>Resource files</h3></A>
<p>Resource files are files, usually with the .res extension, that can contain strings, 
images, and binary data used by an application. You create resource files in two steps. 
First of all, you prepare a text file (usually with the .rc extension) that contains the 
description of the contents of the resource file. This text file must follow a 
well-defined syntax. For example, here's a fragment of an RC file that defines two strings 
and one bitmap:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
STRINGTABLE
BEGIN
    1001  &quot;Welcome to the Imaging application&quot;
    1002  &quot;Do you want to quit now?&quot;
END
2001      BITMAP c:\windows\clouds.bmp
</pre>
</td></tr>
</table></p>

<p>In the second step, you compile the .rc file into a .res file, using the 
Rc.exe resource compiler with the <I>/r </I>switch on the command line. (This utility comes 
with Visual Basic.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
RC /r TEST.RC
</pre>
</td></tr>
</table></p>

<p>At the end of the compilation, you obtain a .res file with the same base 
name as the .rc file (test.res in this example). You can now load this new file into the 
Visual Basic environment using the Add File command in the Project menu.</p>

<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Visual Basic 6 greatly simplifies the resource file creation and 
compilation phases using a new add-in, the VB Resource Editor, shown in Figure 
1616. This add-in also supports multiple string tables, which let your application 
conform to the user's language automatically. A Visual Basic 5 version of this 
add-in is also available for downloading from Microsoft's Web site.
</blockquote></div></p>

<p>
<A HREF="javascript:fullSize('f16ph16x.htm')"> <img src="f16ph16.JPG" width=404 height=242 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-16.</B> <i>The VB Resource Editor can create resource files with bitmaps, icons, sounds, and multiple string tables.</i><!--/caption-->
</p>

<p>After you create a .res file, your code can reference the resources it 
contains using the <I>LoadResString</I>, 
<I>LoadResPicture</I>, and <I>LoadResData</I> functions, as the 
following example shows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Print a welcome message.
Print LoadResString(1001)
' Load an image into a PictureBox control.
Picture1.Picture = LoadResString(2001, vbResBitmap)
</pre>
</td></tr>
</table></p>

<p>Resource files are a great choice when you're creating an application that 
must be localized for other countries. The source code is completely independent of 
all the strings and pictures used by the program, and when you want to create a 
new version of the application for a different country you only have to prepare a 
different resource file. To learn more about resource files, have a look at the 
ATM.VBP sample project that comes with Visual Basic 6.</p>

<p>Even with the help of the VB Resource Editor add-in, however, working 
with resource files is rather cumbersome for the following reasons:</p>

<UL>
<p><li> A Visual Basic project can include only one resource file; if an 
application has to support multiple languages at the same time, you must 
devise an indexing scheme. (See the ATM Visual Basic sample application for 
an example of this technique.)</li></p>
 
<p><li>You can't change the resource file of an application without 
recompiling the application.</li></p>
</UL>

<p>Both these problems can be solved using satellite DLLs.</p>

<A NAME="776"><h3>Satellite DLLs</h3></A>
<p>The concept on which satellite DLLs are based is simple: Instead of loading 
strings and other resources from resource files, you load them from an ActiveX DLL. The 
trick is that you instantiate an object from the DLL using 
<I>CreateObject</I> instead of the New operator, and therefore you can select the DLL you load at run time. This 
approach lets you ship a DLL to your customers even after they've installed the main 
application, so you can effectively add support for new languages as soon as you 
prepare new DLLs. The user can switch from one DLL to another at run time&#8212;for 
example, with a menu command.</p>

<p>I've prepared a demonstration application that uses satellite DLLs to create 
a simple database program whose interface adapts itself to the nationality of the 
user. (See Figure 16-17.) When the application starts, it selects the DLL that matches 
the version of the Windows operating system in use or defaults to the English version 
if no DLL for the current language is found.</p>

<p>
<A HREF="javascript:fullSize('f16ph17x.htm')"> <img src="f16ph17.JPG" width=404 height=246 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-17.</B> <i>A multiple-language application that uses satellite DLLs to support both English and Italian.</i><!--/caption-->
</p>

<p>A satellite DLL that exports strings, bitmaps, and binary data must expose 
at least three functions. To make satellite DLLs look like resource files, you can 
name them LoadResString, LoadResPicture, and LoadResData. Here's a portion of the 
source code of the DLL provided with the sample application:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The Resources class module in the Application000 project
Enum ResStringID
    rsDataError = 1 
    rsRecord
    rsPublishers
    ' (Other enumerated values omitted...)
End Enum
Enum ResPictureID
    rpFlag = 1 
End Enum
Enum ResDataID
    rdDummy = 1        ' This is a necessary placeholder.
End Enum

Function LoadResString(ByVal ID As ResStringID) As String
    Select Case ID
        Case rsPublishers: LoadResString = &quot;Publishers&quot;
        Case rsClose: LoadResString = &quot;&amp;Close&quot;
        Case rsRefresh: LoadResString = &quot;&amp;Refresh&quot;
        ' (Other Case clauses omitted...)
    End Select
End Function

Function LoadResPicture(ByVal ID As ResPictureID, _
    Optional Format As Long) As IPictureDisp
    ' Loads images from the frmResources form
    Select Case ID
        Case rpFlag: Set LoadResPicture = _
            frmResources000.imgFlag.Picture
    End Select
End Function

Function LoadResData(ByVal ID As ResDataID, _
    Optional Format As Long) As Variant
    ' Not used in this sample program
End Function
</pre>
</td></tr>
</table></p>

<p>This particular DLL includes only one bitmap and doesn't include any 
binary data. For simplicity's sake, the bitmap has been loaded at design time in an 
Image control on the frmResources form. This form is never displayed and works only as 
a container for the bitmap. You can use this approach also for storing icons and 
cursors. If you need to store other types of binary data, however, you can use a 
resource file. In this instance, however, each satellite DLL has its own resource file.</p>

<p>The trick in using satellite DLLs is to use the primary DLL (namely, the DLL 
that provides the resources for the default language&#8212;English in this example) as the 
interface that DLLs for other languages must implement. Let's see how the Italian DLL 
is implemented:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The Resources class module in the Application410 project
Implements MyApplication000.Resources

Private Function Resources_LoadResString(ByVal ID As _
    MyApplication000.ResStringID) As String
    Dim res As String
    Select Case ID
        Case rsPublishers: res = &quot;Editori&quot;
        Case rsClose: res = &quot;&amp;Chiudi&quot;
        Case rsRefresh: res = &quot;&amp;Aggiorna&quot;
        ' (Other Case clauses omitted...)
    End Select
    Resources_LoadResString = res
End Function

Private Function Resources_LoadResPicture(ByVal ID As _
    MyApplication000.ResPictureID, Optional Format As Long) _
    As IPictureDisp
    Select Case ID
        Case rpFlag: Set Resources_LoadResPicture = _
            frmResources410.imgFlag.Picture
    End Select
End Function

Private Function Resources_LoadResData(ByVal ID As _
    MyApplication000.ResDataID, Optional Format As Long) As Variant
    ' Not used in this program
End Function
</pre>
</td></tr>
</table></p>

<p>Notice that this class has no members in its primary interface. The Italian DLL is 
stored in a project named MyApplication410.vbp, whereas the default DLL is stored in 
a project named MyApplication000.vbp. The reason for this naming scheme will be 
clear in a moment.</p>

<A NAME="777"><h3>Locale-aware client applications</h3></A>
<p>Let's have a look at how a client application can leverage the power and flexibility 
of satellite DLLs to automatically adapt itself to the locale of users while still 
providing them with the capability to switch to a different language at run time. The secret is 
in an API function, <I>GetUserDefaultLangID</I>, which returns the locale identifier of the 
current interactive user. The client application uses this value to build the name of the 
DLL and then passes it to the <I>CreateObject </I>function, as the code below demonstrates.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The main BAS module in the client application
Declare Function GetUserDefaultLangID Lib &quot;kernel32&quot; () As Long

Public rs As New MyApplication000.Resources

Sub Main()
    InitLanguage              ' Load the satellite DLL.
    frmPublishers.Show        ' Show the startup form.
End Sub

' Load the satellite DLL that corresponds to the current user's locale.
Sub InitLanguage()
    Dim LangId As Long, ProgID As String
    ' Get the default language.
    LangId = GetUserDefaultLangID()
    ' Build the complete class name.
    ProgID = App.EXEName &amp; Hex$(LangId) &amp; &quot;.Resources&quot;
    ' Try to create the object, but ignore errors. If this statement
    ' fails, the RS variable will point to the default DLL (English).
    On Error Resume Next
    Set rs = CreateObject(ProgID)
End Sub
</pre>
</td></tr>
</table></p>

<p>The key to this technique is in the <I>InitLanguage 
</I>procedure, where the application dynamically builds the name of the DLL that would provide the resources 
for the current locale. For example, when executed under an Italian version of 
Windows, the <I>GetUserDefaultLangID</I> API function returns the value 1040, or &amp;H410.</p>

<p>You can create satellite DLLs for other languages and ship them to your 
foreign customers. This approach always works perfectly, provided that you assign a 
project a name like MyApplication<I>XXX</I>, where 
<I>XXX </I>is the hexadecimal locale identifier. 
(For a list of locale identifiers, see the Windows SDK documentation.) The first 
portion of the project name must match the client application's project name 
(<I>MyApplication</I>, in this example), but you can devise other effective ways to dynamically build 
the DLL's name.</p>

<p>If the <I>CreateObject </I>function fails, the <I>rs 
</I>variable won't be initialized in the <I>InitLanguage 
</I>procedure, but because it's declared as an auto-instancing variable 
it automatically instantiates the default MyApplication000.Resource component. The 
key point here is that all the satellite DLLs for this particular application implement 
the same interface, so the <I>rs </I>variable can hold a reference to any satellite using 
early binding. See how the <I>rs </I>variable is used within a form of the client application:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Form_Load()
    LoadStrings
End Sub
Private Sub LoadStrings()
    Me.Caption = rs.LoadResString(rsPublishers)
    cmdClose.Caption = rs.LoadResString(rsClose)
    cmdRefresh.Caption = rs.LoadResString(rsRefresh)
    ' (Other string assignments omitted...)
    Set imgFlag.Picture = rs.LoadResPicture(rpFlag)
End Sub
</pre>
</td></tr>
</table></p>

<p>Because the MyApplication000.Resource class declares enumerated 
constants for all the strings and other resources in the satellite DLL, you can use IntelliSense 
to speed up the development phase and produce a more readable and 
self-documenting code at the same time.</p>


<a name="A104"></a><h3>8.1.4 Multithreaded ActiveX Components</h3>

<A HREF="#A103">[Previous]</A> <A HREF="#A105">[Next]</A><P>

<A NAME="778"><h1>Multithreaded ActiveX Components</h1></A>
<p>Both Visual Basic 5 and 6 can create multithreaded ActiveX components. 
Components built with the first release of Visual Basic 5, however, could only support 
multithreading if they had no user interface, which is a serious limitation in some cases. 
This restriction was lifted in Service Pack 2.</p>

<A NAME="779"><h2>Threading Models</h2></A>
<p>In a nutshell, multithreading is the ability to execute different code portions of 
an application at the same time. Many popular Windows applications are 
multithreaded. For example, Microsoft Word uses at least two threads, and the Visual Basic 
environment uses five threads. Multiple threads are a good choice when you need to 
execute complex tasks in the background (for example, paginating a document) or 
when you want to keep the user interface responsive even when your application is 
doing something else. Multiple threads are especially necessary when you're 
building <I>scalable </I>remote components that have to serve hundreds of clients at the same time.</p>

<p>There are two main types of threading models: <I>free threading 
</I>and <I>apartment threading</I>. In the free-threading model, each thread can access the entire 
process's data area and all threads share the application's global variables. Free threading 
is powerful and efficient, but it's a nightmare even for most experienced 
programmers because you must arbitrate among all the shared resources, including variables. 
For example, even an innocent statement such as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If x &gt; 1 Then x = x - 1    ' X should always be greater than 1.
</pre>
</td></tr>
</table></p>

<p>can create problems. Imagine this scenario: Thread A reads the value of the 
<I>x </I>variable and finds that it is 2, but before it executes the Then portion of the 
statement, the CPU switches to Thread B. Thread B happens to be executing the same 
statement (an unlikely but not impossible circumstance), finds that 
<I>x </I>is 2, and therefore decrements it to 1. When Thread A regains the control of the CPU, it decrements the 
variable to 0, which is an invalid value that will probably cause other logic errors 
later in the program's life.</p>

<p>The apartment-threading model solves these problems by encapsulating 
each thread in an <I>apartment</I>. Code executed in a given apartment can't access 
variables belonging to other apartments. Each apartment has its own set of variables, so if 
two threads are accessing the <I>x </I>variable at the same time, they're actually referencing 
two different memory locations. This mechanism neatly solves the synchronization 
problem described earlier, and for this reason the apartment-threading model is 
inherently safer than the free-threading model. In Visual Basic, you can build ActiveX 
components that support the apartment model only.</p>

<A NAME="780"><h2>Multithreaded ActiveX EXE Components</h2></A>
<p>Visual Basic 5 and 6 let you create out-of-process servers that create an 
additional thread when a client instantiates a new object. All you need to do to transform 
a regular ActiveX EXE component into a multithreaded component is select an 
option in the General tab of the Project Properties dialog box. (See Figure 16-18.) There 
are three possible settings. The default setting is the Thread Pool option with 1 
thread; this corresponds to a single-threaded component.</p>

<p>
<img src="f16ph18x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 16-18.</B> <i>Create a multithreaded component with a few mouse clicks in the Project Properties dialog box.</i><!--/caption-->
</p>

<p>If you select the Thread Per Object option, you build a multithreaded 
component that creates a new thread for every object requested by its clients. Because 
all objects are executed in their own threads, no client can ever block another 
client, so these components are highly responsive. The disadvantage of this approach is 
that too many threads can bring even a powerful system to its knees because 
Windows has to spend a lot of time just switching from one thread to the other.</p>

<A NAME="781"><h3>Thread pools</h3></A>
<p>If you select the Thread Pool option and enter a value greater than 1 in the 
Threads field, you build a multithreaded component that's allowed to create only a 
limited number of threads. This is a scalable solution in the sense that you can increase 
the size of the thread pool when you deploy your application on a more powerful 
system. (You need to recompile the application, though.) This setting prevents the 
system from wasting too much time on thread management because the pool can't 
grow larger than the limit you set. To assign threads to objects, the pool uses a 
<I>round robin</I> algorithm, which always tries to assign the first available thread to each new 
request for an object.</p>

<p>Let's say that you created a multithreaded component with a pool size of 
10 threads. When the first client makes a request for an object, COM loads the 
component, which returns the created object in its first thread. When a second client 
makes a request, the component creates an object in a second thread, and so on, until 
the tenth client gets the last available thread in the pool. When the eleventh 
request comes, the component has to return an object in one of the threads that have 
been created previously. The thread used for this new object can't be determined in 
advance because it depends on several factors. For this reason, the round robin 
algorithm is said to be a nondeterministic algorithm.</p>

<p>Here are a few interesting points that concern object pooling. First, when 
there are more objects than threads, each thread can serve more objects, possibly owned 
by different clients. In this situation, a given thread can't execute an object's method if 
it's already serving another object. In other words, an object pool doesn't completely 
prevent objects from blocking one another (as components with one thread per object 
do), even if this problem happens less frequently than with single-threaded components.</p>

<p>Second, once an object has been created in a thread, it must execute in 
that thread; this is a requirement of apartment threading. Therefore, a client might 
be blocked by another client even if the component has some unallocated 
threads. Imagine this scenario: You have a pool with 10 threads, and you instantiate 20 
objects. In an ideal situation, the pool is perfectly balanced and each thread serves 
exactly two objects. But suppose that all the objects served by threads 1 through 9 are 
released while the two objects served by thread 10 aren't. In this case, the pool has 
become highly unbalanced and the two objects will block each other, even if the pool 
has nine available threads.</p>

<p>Finally, even if the apartment model ensures that all apartments have a 
different set of variables, objects in the same thread share the same apartment and 
therefore share the same global values. This might appear to be a cheap way to 
exchange data among objects, but in practice you can't use this technique because you 
can't predict which objects will share the same thread.</p>

<A NAME="782"><h3>The multithreading advantage</h3></A>
<p>Many programmers mistakenly believe that multithreading is always a good 
thing. The truth, however, is that most computers have only one CPU, which has to 
execute all the threads in all the processes in the system. Multithreading is always a 
good thing if you're executing your component on a Windows NT machine with 
multiple CPUs; in this situation, the operating system automatically takes advantage of 
the additional processors to balance the workload. In the most common case, 
however, you're working with a single-processor machine and you might find that 
multithreading can even make your performance worse. This is a somewhat 
counter-intuitive concept, so I'll explain it with an example.</p>

<p>Let's say that you have two threads that execute two different tasks, each 
one taking 10 seconds to complete. In a single-threaded environment, one of the two 
tasks completes in 10 seconds, and the other waits for the first one to complete and 
therefore takes 20 seconds in total. The result is that the average time is 15 seconds 
per task. In a multithreaded environment, the two tasks would execute in parallel 
and will complete more or less at the same time. Unless you have two CPUs, in this 
case the average time is 20 seconds, which is worse than in the single-threaded case.</p>

<p>In summary, multithreading isn't always the best solution. Sometimes, 
however, it clearly offers advantages over single-threading:</p>

<UL>
<p><li> When you're executing tasks of different duration, multithreading is 
often preferable. For example, if you have a task that takes 10 seconds 
and another task that takes only 1 second, in a single-thread environment 
the shorter task might take 1 second or 11 seconds to complete, which 
results in an average time of 6 seconds, while in a multithreaded environment 
it doesn't take more than 2 seconds on average. By comparison, the 
longer task takes 10 or 11 seconds to complete in the single-threaded 
scenario (10.5 seconds on average), whereas it always requires 11 seconds in 
the multithreaded scenario. So the multithreaded scenario is slightly 
disadvantageous for longer tasks, but the user will hardly notice the difference.</li></p>
 
<p><li>When you have some tasks, such as user-interface tasks, that have to 
be responsive, it's better to execute them in a multithreaded environment.</li></p>

<p><li>When you have background tasks with low priority, multithreading is 
also a good choice. A typical example is formatting and spooling a document.</li></p>
</UL>

<p>When you're deciding between single- and multithreading, don't forget 
that Visual Basic applications implicitly use multithreading for some tasks&#8212;for 
example, when printing data. Moreover, some database engines (most notably, the 
Microsoft Jet engine) internally use multithreading.</p>

<A NAME="783"><h3>User-interface issues</h3></A>
<p>Visual Basic 6 lets you create multithreaded components that expose a user 
interface. (You need Service Pack 2 to have this feature work under Visual Basic 5.) You 
can achieve this because all the forms and the ActiveX controls that you create are 
<I>thread safe</I>, which means that multiple instances of them can independently execute 
in different threads. The same is true for ActiveX documents and designers, such 
as the DataEnvironment designer, as well as the majority of the ActiveX controls 
that are in the package&#8212;for example, the MaskEdBox control and all the Windows 
common controls.</p>

<p>But a few ActiveX controls are inherently single-threaded and can't be 
safely used inside multithreaded components&#8212;for example, the Microsoft Chart 
(MSCHRT20.OCX) and Microsoft Data Bound Grid (DBGRID32.OCX) controls. If you attempt to add 
these controls to an ActiveX DLL project whose threading model is Apartment 
Threaded or to an ActiveX EXE project whose threading model is Thread Per Object or 
Thread Pool with a number of threads greater than 1, you get an error and the control 
isn't added to the Toolbox. You also get an error if you have a project that already 
includes one or more single-threaded controls and you change the project type to a value 
that isn't compatible with such controls. When you buy a third-party control, check 
with its vendor to learn whether it supports multithreading.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You can force Visual Basic to accept a single-threaded 
ActiveX control in a multithreaded project by manually editing the VBP file. There 
are many reasons not to do that, however. Single-threaded controls running in 
a multithreaded application perform poorly and, above all, can cause many 
problems and unexpected behavior. For example, the Tab key and 
Alt+<I>key </I>combinations don't work as they should, and a click on the control might not 
activate the form. Moreover, there might be some properties (most notably, the 
<I>Picture</I> property) whose values can't be marshaled between different threads, and 
any attempt to do so raises a run-time error.
</blockquote></div></p>

<p>Here are other minor issues concerning forms inside multithreaded components:</p>

<UL>
<p><li> When you use a hidden form variable that Visual Basic creates for 
each form in the application, you're implicitly using a variable that's global 
to the thread but not shared among all the threads. Thus, each thread 
creates a different instance of the form. To avoid confusion, you might 
want to use explicit form variables, as suggested in Chapter 9.</li></p>
 
<p><li>MDI forms aren't allowed in multithreaded EXEs or DLLs because the 
Visual Basic MDI form engine isn't thread safe. For this reason, the Add MDI 
Form command in the Project menu is grayed inside these types of projects.</li></p>

<p><li>A form can be modal only with respect to other forms in the same 
thread, but it's modeless with respect to forms displayed by other threads. 
Consequently, a modal form blocks only the code in its own thread, not 
the code in other threads.</li></p>

<p><li>In a multithreaded component, the <I>Sub 
Main</I> procedure is executed whenever a new thread is created. For this reason, if you need to 
display a form when the component is first created, you can't simply invoke 
a form's <I>Show </I>method from this procedure, and you need to distinguish 
the first component's thread from all the others. See the &quot;<A HREF="#787">Determining the Main Thread</A>&quot; section later in this chapter.</li></p>

<p><li>DDE between forms works only if the two forms are in the same 
thread. (DDE isn't covered in this book.)</li></p>
</UL>

<A NAME="784"><h3>Unattended execution</h3></A>
<p>If your component doesn't include a form, UserControl, or UserDocument 
module, you can tick the Unattended Execution check box in the General tab of the 
Project Properties dialog box. This indicates that your component is meant to execute 
without any user interaction, a reasonable option when you're creating a component 
to run remotely on another machine.</p>

<p>The Unattended Execution option suppresses any message boxes or other 
kinds of user interface (including error messages) and redirects them to a log file or 
the Windows NT Application Event Log. You can also send your own messages to 
this log file. Using this option is important with remote components because any 
message box would stop the execution of the component until the user closes it, but 
when a component is running remotely no interactive user can actually close the dialog box.</p>

<p>The <I>StartLogging </I>method of the App object lets you select where your 
messages will be sent. Its syntax is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
App.StartLogging LogFile, LogMode
</pre>
</td></tr>
</table></p>

<p>where <I>LogFile</I> is the name of the file that will be used for logging, and 
<I>LogMode </I>is one of the values listed in Table 16-2. The vbLogOverwrite and vbLogThreadID 
settings can be combined with the other values in the table. When you're sending 
a message to the Windows NT Application Event Log, &quot;VBRunTime&quot; is used as 
the application source and the <I>App.Title </I>property appears in the description. When 
you're running under Windows 95 or 98, messages are sent by default to a file 
named Vbevents.log.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
Watch out for two bugs. First, if you specify an invalid 
filename, no errors are raised and logged messages silently go to default output. 
Also, the vbLogOverwrite option makes the <I>StartLogging 
</I>method behave as if the vbLogAuto option were specified. So you should always manually delete the 
log file and not rely on the vbLogOverwrite option.
</blockquote></div></p>

<p><B>Table 16-2.</B> <I>All the values for the </I>LogMode <I>argument of the App object's </I>StartLogging <I>method; these are also the possible return values of the </I>LogMode <I>read-only property.</I></p>

<p><table width="95%" cellpadding="5">
<tr>
<th><b><i>Constant</i></b></th>
<th><b><i>Value</i></b></th>
<th><b><i>Description</i></b></th>
</tr>
<tr>
<td valign="TOP">vbLogAuto</td>
<td valign="TOP">0</td>
<td valign="TOP">If running under Windows 95 or 98, messages are logged to the file specified by the <I>LogFile </I>argument; if running under Windows NT, messages are logged to the Windows NT Application Event Log.</td>
</tr>
<tr>
<td valign="TOP">vbLogOff</td>
<td valign="TOP">1</td>
<td valign="TOP">Messages aren't logged anywhere and are simply discarded; message boxes have no effect.</td>
</tr>
<tr>
<td valign="TOP">vbLogToFile</td>
<td valign="TOP">2</td>
<td valign="TOP">Forces logging to file, or turns off logging if no valid file name is passed in the <I>LogFile </I>argument. (In the latter case, the <I>LogMode </I>property is set to vbLogOff.)</td>
</tr>
<tr>
<td valign="TOP">vbLogToNT</td>
<td valign="TOP">3</td>
<td valign="TOP">Forces logging to the Windows NT Application Event Log; if not running under Windows NT or the Event Log is unavailable, it turns off logging and resets the <I>LogMode </I>property to vbLogOff.</td>
</tr>
<tr>
<td valign="TOP">vbLogOverwrite</td>
<td valign="TOP">16</td>
<td valign="TOP">When logging to a file, it re-creates the log file each time the application starts; it has no effect when logging to the Application Event Log. It can be combined with other values in this table using the OR operator.</td>
</tr>
<tr>
<td valign="TOP">vbLogThreadID</td>
<td valign="TOP">32</td>
<td valign="TOP">The current thread ID is added to the beginning of the message in the form &quot;[T:0nnn]&quot;; if this value is omitted, the thread ID is shown only if the message comes from a multithreaded application. It can be combined with other values in this table using the OR operator.
</td>
</tr>
</table></p>

<p>Once you have set up logging, you can log messages using the App 
object's <I>LogEvent </I>method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
App.LogEvent LogMessage, EventType
</pre>
</td></tr>
</table></p>

<p><I>LogMessage </I>is the text of the message, and 
<I>EventType </I>is an optional argument that states the type of the event (one of the following values: 
1-vbLogEventTypeError, 2-vbLogEventTypeWarning, or 4-vbLogEventTypeInformation). For example, 
the following piece of code</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
App.StartLogging &quot;C:\Test.Log&quot;, vbLogAuto 
App.LogEvent &quot;Application Started&quot;, vbLogEventTypeInformation
App.LogEvent &quot;Memory is running low&quot;, vbLogEventTypeWarning
App.LogEvent &quot;Unable to find data file&quot;, vbLogEventTypeError
MsgBox &quot;Press any key to continue&quot;, vbCritical
</pre>
</td></tr>
</table></p>

<p>sends its output to the C:\TEST.LOG file if run under Windows 95 or 98 or to 
the Application Event Log if run under Windows NT. (See Figure 16-19.)</p>

<p>
<A HREF="javascript:fullSize('f16ph19x.htm')"> <img src="f16ph19.JPG" width=404 height=146 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-19.</B> <i>Logged messages coming from a Visual Basic application as they appear in a log text file (top window) or in the Windows NT Application Event Log (bottom window).</i><!--/caption-->
</p>

<p>You can test the Unattended Execution attribute from code using the 
read-only <I>UnattendedApp </I>property of the App object. Likewise, you can retrieve the current 
log file and log mode using the App object's 
<I>LogPath </I>and <I>LogMode </I>properties, 
respectively. When you've compiled the code using the Unattended Execution attribute, all 
the MsgBox commands send their output to the log file or the Windows NT 
Application Event Log, as if a <I>LogEvent </I>method with the vbLogEventTypeInformation 
argument were issued.</p>

<p>One last note: If you run the program under the Visual Basic IDE, the 
Unattended Execution setting has no effect; all message boxes appear on screen as usual, 
and the <I>App.StartLogging </I>and <I>App.LogEvent 
</I>methods are ignored. To activate logging, you must compile your application to a stand-alone program.</p>

<A NAME="785"><h2>Multithreaded ActiveX DLL Components</h2></A>
<p>You can also create multithreaded ActiveX DLLs using Visual Basic 6. Unlike 
ActiveX EXE servers, however, Visual Basic's DLLs can't create new threads and can only 
use the threads of their clients. For this reason, multithreaded DLLs are most useful 
with multithreaded client applications. Because an ActiveX DLL doesn't actually create 
any thread, the options you have in the Project Properties dialog box are simpler 
than those offered by an ActiveX EXE project. In practice, you only have to decide if 
you want to create a Single Threaded or Apartment Threaded server. (See Figure 16-20.)</p>

<p>Both single- and multithreaded components are thread safe, which means 
that when an object in a thread is called by another thread, the calling thread is 
blocked until the called method returns. This prevents most reentrancy problems and 
greatly simplifies the job of the programmer.</p>

<p>While it's perfectly safe to use a single-threaded DLL with a multithreaded 
client, only one thread in the main application can directly call the methods of an 
object created by the DLL. This particular thread is the first thread created in the 
client application, or more precisely, the first thread that internally called the 
<I>OleInitialize </I>function. All the objects exposed by a single-threaded DLL are created in this 
thread; when they are used from another thread in the client application, arguments 
and return values undergo the so-called <I>cross-thread 
marshaling</I>, which is almost as slow as cross-process marshaling.</p>

<p>
<img src="f16ph20x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 16-20.</B> <i>Selecting the Threading Model option in the Project Properties dialog box.</i><!--/caption-->
</p>

<p>When you don't know how your DLL will be used, selecting an 
Apartment Threaded option is usually the best choice. In fact, a multithreaded DLL can be 
used by single-threaded clients without any problem and without any noticeable 
overhead. In one case a single-threaded DLL can be conveniently used with a 
multithreaded client, namely, when you want to offer a simple way for all the threads in the 
client to communicate and share data with each other. An example of this technique 
is described in the &quot;<A HREF="#789">Testing a Multithreaded Application</A>&quot; section later in this chapter.</p>

<A NAME="786"><h2>Multithreaded Visual Basic Applications</h2></A>
<p>Many programmers aren't aware that Visual Basic can create multithreaded 
regular applications, not just components. To be honest, creating such multithreaded 
applications isn't as straightforward as using other Visual Basic advanced features, and 
you have to account for a number of important issues.</p>

<p>The trick to creating a multithreaded application is simple: The application 
must be a multithreaded ActiveX EXE server that exposes one or more objects that 
run in different threads. To build such an application, the conditions shown below must be fulfilled.</p>

<UL>
<p><li> The application must be an ActiveX EXE server compiled with the 
Thread Per Object setting.</li></p>
 
<p><li>The code for the task that is intended to run in a different thread is 
embedded in a MultiUse class.</li></p>

<p><li>You create the new object using the <I>CreateObject 
</I>function instead of the <I>New </I>operator.</li></p>
</UL>

<p>When you create an object exposed by the current application using the 
<I>New </I>operator, Visual Basic uses internal instancing, which bypasses COM and creates 
the object using a more efficient mechanism that doesn't undergo any restriction. (In 
fact, you can even create objects from Private or PublicNotCreatable classes.) 
Conversely, when you use <I>CreateObject</I>, Visual Basic always creates the object through COM. 
For this reason, the object should be creatable (MultiUse).</p>

<A NAME="787"><h3>Determining the main thread</h3></A>
<p>As I stated previously, the <I>Sub Main</I> procedure in a multithreaded Visual Basic 
application is executed each time a new thread is created. This isn't usually a problem 
for multithreaded EXE or DLL components, but it's an issue when you're creating 
an ActiveX EXE project that must work as a multithreaded application. In this case, 
it's crucial that you distinguish the first execution from all the subsequent ones: The 
first time the <I>Main </I>procedure executes, the program must create its main window, 
whereas in all other cases the procedure shouldn't display any user interface. More 
precisely, when the procedure is being executed as a result of a request for a new object, 
it should exit as soon as possible to avoid having the request fail with a 
timeout error. For the same reason, you should never execute lengthy operations inside 
the <I>Class_Initialize </I>event procedure.</p>

<p>Understanding whether the <I>Main </I>procedure has never been executed 
before isn't as trivial a task as it might appear at first. You can't simply use a global 
variable as a flag because that variable can't be seen from a thread in another 
apartment. Creating a temporary file in the <I>Main 
</I>procedure isn't a viable solution either 
because the application might terminate with a fatal error and never delete the file.</p>

<p>There are at least two ways to solve this problem. The first one is based on 
the <I>FindWindow </I>API function and is described in the Visual Basic documentation. In 
the following paragraphs, I'll show you an alternative method, which I believe is less 
complex and slightly more efficient because it doesn't require that you create a 
window. This method is based on <I>atom 
objects,</I> which are sort of global variables 
managed by the Windows operating system. The Windows API provides functions that let 
you add a new atom, delete an existing atom, or query for an atom's value.</p>

<p>In the <I>Main </I>procedure of a multithreading application, you test whether a 
given atom exists. If it doesn't exist, this is the first thread of the application, and you 
need to create the atom. To have the mechanism work, you must also destroy the 
atom when you exit the application. This task is ideal for a class that creates the atom 
in its <I>Class_Initialize </I>procedure and destroys it in its 
<I>Class_Terminate </I>procedure. Here's the complete source code of the CThread class in the demonstration application 
on the companion CD:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Declare Function FindAtom Lib &quot;kernel32&quot; Alias &quot;FindAtomA&quot; _
    (ByVal atomName As String) As Integer
Private Declare Function AddAtom Lib &quot;kernel32&quot; Alias &quot;AddAtomA&quot; _
    (ByVal atomName As String) As Integer
Private Declare Function DeleteAtom Lib &quot;kernel32&quot; _
    (ByVal atomName As Integer) As Integer
Private atomID As Integer

Private Sub Class_Initialize()
    Dim atomName As String
    ' Build an atom name unique for this instance of the application.
    atomName = App.EXEName &amp; App.hInstance
    ' Create the atom if it doesn't exist already.
    If FindAtom(atomName) = 0 Then atomID = AddAtom(atomName)
End Sub
Private Sub Class_Terminate()
    ' Delete the atom when this thread terminates.
    If atomID Then DeleteAtom atomID
End Sub

Function IsFirstThread() As Boolean
    ' This is the first thread if it was the one which created the atom.
    IsFirstThread = (atomID &lt;&gt; 0)
End Function
</pre>
</td></tr>
</table></p>

<p>The name of the atom is built using the application's name and the 
instance handle (the <I>App.hInstance </I>property). The latter value is different for each 
distinct instance of the same application, which ensures that this method works correctly 
even when the user launches multiple instances of the same executable. The CThread 
class module exposes only one property, 
<I>IsFirstThread</I>. The following code shows how you can use this class in a multithreaded application to understand whether it's 
executing the first thread:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' This is global because it has to live for the entire application's life.
Public Thread As New CThread

Sub Main()
    If Thread.IsFirstThread Then
        ' First thread, refuse to be instantiated as a component.
        If App.StartMode = vbSModeAutomation Then
            Err.Raise 9999, , &quot;Unable to be instantiated as a component&quot;
        End If
        ' Show the user interface.
        frmMainForm.Show
    Else
        ' This is a component instantiated by this same application.
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="788"><h3>Implementing multithreading</h3></A>
<p>Creating a new thread using the <I>CreateObject 
</I>function doesn't suffice to actually implement a multithreaded Visual Basic application. In fact, the 
synchronization mechanism offered by Visual Basic, which usually prevents a series of nasty 
problems, in this case gets in the way. When the program invokes a method of an 
object in another thread, the calling thread is blocked until the method returns. So you 
might have multiple threads, but only one of them is executing at a given time, which 
obviously isn't what you want.</p>

<p>The easy way to work around this issue is using a Timer control to 
&quot;awaken&quot; an object in a separate thread after it has returned the control back to the 
calling thread. You don't need a visible form to achieve this; an invisible form with a 
Timer control on it can do the job. You can take advantage of the new 
<I>CallByName </I>function to create a form module that you can easily reuse in all your applications 
that need this sort of callback mechanism. This is the complete source code of the 
CCallBack form module that encapsulates this functionality:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim m_Obj As Object
Dim m_MethodName As String

Public Sub DelayedCall(obj As Object, Milliseconds As Long, _
    MethodName As String)
    Set m_Obj = obj                       ' Save the arguments.
    m_MethodName = MethodName
    Timer1.Interval = Milliseconds        ' Start the timer.
    Timer1.Enabled = True
End Sub

Private Sub Timer1_Timer()
    Timer1.Enabled = False                ' We need just one call.
    Unload Me
    CallByName m_Obj, m_MethodName, VbMethod     ' Do the callback.
End Sub
</pre>
</td></tr>
</table></p>

<p>The CCallBack form can be used as a class module in other portions of 
the application. On the companion CD, you'll find a sample multithreaded 
application that creates and displays multiple count-down forms. (See Figure 16-21.) This is 
a partial listing of the class that the main application instantiates when it needs to 
create a new count-down form in a separate thread. (The statements that implement 
the callback mechanism are in boldface.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Declare Sub Sleep Lib &quot;kernel32&quot; (ByVal dwMilliseconds As Long)

Dim frm As frmCountDown
Dim m_Counter As Integer

' The Counter property. Values &gt; 0 display the form and start
' the countdown.
Property Get Counter() As Integer
    Counter = m_Counter
End Property
Property Let Counter(newValue As Integer)
<B>    Dim cbk As New CCallBack
    m_Counter = newValue
    cbk.DelayedCall Me, 50, &quot;Start&quot;</B>
End Property

Sub Start()
    Static active As Boolean
    If active Then Exit Sub             ' Prevent reentrancy.
    active = True
    ' The code that shows the countdown form (omitted...)
    ' ...
    active = False
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('f16ph21x.htm')"> <img src="f16ph21.JPG" width=404 height=263 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-21.</B> <i>The sample countdown multithreading application. Note that each window shows a different thread ID in its caption.</i><!--/caption-->
</p>

<p>This is the code in the main form of the count-down sample application:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdStart_Click()
    Dim x As CCountDown
    ' Create a new CCountDown object in another thread.
    Set x = CreateObject(&quot;MThrApp.CCountDown&quot;)
    ' Set the counter using the value currently in the TextBox control.
    x.Counter = Val(txtSeconds)
    Set x = Nothing
    Beep
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
There's an undocumented detail in the way Visual Basic 
implements multithreading that deserves your attention. If the client code sets 
the last reference to the object to Nothing either explicitly or implicitly while the 
object is executing some code, the client has to wait until the routine in the 
object terminates. This is far from being irrelevant. For example, if you delete the 
<I>Set x = Nothing </I>statement in the previous code routine, the 
<I>x </I>variable will be set to Nothing after the 
<I>Beep </I>statement when the object has already been 
awakened by the callback procedure and is currently executing the count-down code. 
This means that the client has to wait as long as 10 seconds until the object can 
be completely destroyed, and during that time the main form can't react to the 
user's actions. You can choose from two ways to work around this problem:

<UL>
<p><li> You explicitly set to Nothing any object reference immediately after the 
other thread is started, and in the call to the 
<I>DelayedCall </I>method of the CCallBack form module, you use a timeout value that's large enough to let the 
main application destroy its reference before the callback fires. This is 
probably the simplest solution, but it can't be used when the main program needs 
a reference to the object in the other thread (for example, to set its 
properties or invoke its methods).</li></p>
 
<p><li>You keep the object alive until you don't need it anymore by using 
global variables instead of local ones. This solution lets you use the object's 
properties and methods, but in this case it's your responsibility to 
understand when the object should be destroyed. Each object that you keep alive 
without any real reason consumes one thread and therefore adds some 
overhead to the system even if the thread isn't active.</li></p>
</UL>&nbsp;
</blockquote></div></p>

<A NAME="789"><h3>Testing a multithreaded application</h3></A>
<p>Debugging a multithreaded application or component isn't as simple as testing 
a regular program. For one thing, you have to compile your application as a 
stand-alone EXE file because the Visual Basic IDE supports only single-threaded applications 
and components. This means that you have to forgo all the amenities offered by 
the environment, including breakpoints, the Watch window, the Locals window, and 
the step-by-step trace capabilities. For this reason, you should thoroughly test the 
logic of your application in the environment before turning to multithreading.</p>

<p>When testing a compiled multithreaded application, you must devise 
alternate debugging strategies. For example, since you can't write values to the 
Immediate window using <I>Debug.Print </I>methods, you have to resort to logging to file or use 
plain MsgBox commands. One good idea is to display the thread ID in your messages 
so that you can learn which particular thread is issuing them:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;Executing the Eval proc&quot;, vbInformation, &quot;Thread: &quot; &amp; App.ThreadID
</pre>
</td></tr>
</table></p>

<p>Single-threaded ActiveX DLL servers offer a better solution to this problem. 
As you might remember, you can safely use single-threaded DLLs with 
multithreaded clients, be they stand-alone applications or other components. For example, you 
can implement a DLL that exposes a CLog object that gathers trace information from 
its clients and redirects it to a window. Implementing such a DLL isn't difficult. 
Here's the source code of the CLog class. (The demonstration application found on 
the companion CD includes the complete version with additional capabilities.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' If this property is nonzero, the ThreadID is added to the message.
Public ThreadID As Long

Sub StartLogging(LogFile As String, LogMode As Integer)
    ' Note that this refers to the global hidden form reference.
    ' This form will therefore be shared by all the instances
    ' of the class.
    frmLog.Show
End Sub

Sub LogEvent(ByVal LogText As String)
    If ThreadID Then
        LogText = &quot;[&quot; &amp; Hex$(ThreadID) &amp; &quot;] &quot; &amp; LogText
    End If
    frmLog.LogText.SelStart = Len(frmLog.LogText.Text)
    frmLog.LogText.SelText = LogText &amp; vbCrLf
End Sub
</pre>
</td></tr>
</table></p>

<p>The frmLog form belongs to the ActiveX DLL project and includes the 
txtLog<I> </I>TextBox control that displays the text messages coming from the multithreaded 
client application, a CheckBox control that lets the user activate and deactivate the 
logging, and a CommandButton control that clears the contents of the txtLog 
control. Figure 1622 shows a new version of the sample 
multithreaded application that has been enhanced with trace capabilities. The revised code in 
the main BAS module of the application is shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Public Log As New CLog

Sub Main()
    Log.StartLogging &quot;&quot;, 0            ' Initialize the CLog object.
    Log.ThreadID = App.ThreadID
    Log.LogEvent &quot;Entering Sub Main&quot;
    ' Here is the code that displays the main form (omitted...)
    ' ...
    Log.LogEvent &quot;Exiting Sub Main&quot;
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('f16ph22x.htm')"> <img src="f16ph22.JPG" width=404 height=262 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-22.</B> <i>Adding trace capabilities to a multithreaded application using a single-threaded ActiveX DLL. Each message includes the ID of the thread that sent it.</i><!--/caption-->
</p>

<p>For a more sophisticated test session, you might want to tick the Create 
Symbolic Debug Info option in the Compile tab of the Project Properties dialog box, 
and then recompile the application and execute it under a real debugger, such as the 
one included in Microsoft Visual C++.</p>


<a name="A105"></a><h3>8.1.5 Remote ActiveX Components</h3>

<A HREF="#A104">[Previous]</A> <A HREF="#A106">[Next]</A><P>

<A NAME="790"><h1>Remote ActiveX Components</h1></A>
<p>ActiveX components can be executed remotely on another machine. Such a 
machine can be in the same or in a different room, in a different building, or even in a 
distant city. Thanks to the location transparency capabilities of COM, the client 
application always works as if the component executed locally. The only clue that the 
execution occurs remotely is that all calls to an object's properties and methods are much slower.</p>

<p>The portion of COM that deals with remote activation of a component is 
called <I>Distributed COM</I>, or DCOM for short. As I explained in the introduction to this 
chapter, DCOM was first introduced with Windows NT 4, and it should be made clear 
that Windows NT is the operating system of choice when using remote 
components because it's the only one that provides the necessary security in a multiuser 
environment. In a production-distributed environment, Windows 95 and 98 machines 
should work only as DCOM clients.</p>

<p>Visual Basic also supports another limited form of remote activation, 
<I>Remote Automation</I>. I won't cover this outdated technology in detail because it's slower 
and less reliable than DCOM. Nowadays, the only reason to use Remote Automation 
is for supporting 16-bit clients, which isn't possible in DCOM because it's a 32-bit 
only technology.</p>

<p>The remaining part of this chapter deals with remote ActiveX EXE 
components. You can also remotely execute ActiveX DLLs, either by using a standard 
surrogate process such as DllHost.Exe or by using Microsoft Transaction Server (MTS). 
The creation of components for MTS isn't covered in this book.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
While a Windows 95 or 98 machine isn't good as a DCOM server in 
a production environment, you can still use it as a server in the development 
stage. The solution isn't very efficient and has other drawbacks as well. For 
example, there's no launch capability, and the COM component must be already 
running to accept remote requests. For more information, see the Microsoft 
Knowledge Base article Q165101.
</blockquote></div></p>

<A NAME="791"><h2>Creating and Testing a Remote Component</h2></A>
<p>If you have created and tested an ActiveX EXE component on the local 
machine, turning it into a remote component doesn't require a recompilation. All you have 
to do is modify a few keys in the Registry of the local machine so that all requests 
for the objects are automatically redirected to another machine. In theory, you can 
deliver remote components also with the Professional Edition of Visual Basic. In 
practice, however, only the Enterprise Edition includes all the tools that let you 
deploy remote components easily.</p>

<A NAME="792"><h3>Compiling for remote activation</h3></A>
<p>The first thing you have to do when creating a component that you envision 
using as a remote server is tick the Remote Server Files check box in the Component 
tab of the Project Properties dialog box, as shown in Figure 16-23. If this option is enabled, Visual Basic creates two additional files when you 
compile the project. The files have the same name as the executable but different 
extensions: the .tlb type library and the .vbr registration file. These files are later used to 
register the component in a client workstation's Registry without physically 
installing the EXE file.</p>

<p>
<img src="f16ph23.JPG" width=404 height=364 border=0>
</p><p>
<!--caption--><B>Figure 16-23.</B> <i>Preparing an ActiveX EXE component for remote execution.</i><!--/caption-->
</p>

<A NAME="793"><h3>Configuring the server</h3></A>
<p>The next step is the installation and registration of the component on the 
server workstation. You accomplish this by copying the EXE file on a local disk of 
the machine and then running it with the <I>/REGSERVER 
</I>switch on the command line. It's advisable that the EXE file be on a local drive instead of a networked drive 
because this setting raises fewer security issues. After the component has been registered, 
you can proceed to make it available to remote clients. You can choose from several 
tools to accomplish this.</p>

<p>The first and simplest tool of the group is the Remote Automation 
Connection Manager. This program has a dual purpose: You can employ it to make a local 
component available to remote clients using the commands on the Client Access tab, 
and you can run it on a client machine to modify the entry in the Registry so that 
all requests for a specific component's object are redirected to the server machine.</p>

<p>When the Remote Automation Connection Manager starts, it displays a list 
of all the components that are registered on the machine, as you can see in Figure 
16-24. Using the option buttons on the Client Access tab, you can decide whether 
individual components should be available for remote activation.</p>

<p><b>Disallow All Remote Creates</b> This setting makes all the registered 
components unavailable to remote clients.</p>

<p><b>Allow Remote Creates By Key</b> You can make individual components 
available for remote activation; the state of each component depends on the Allow Remote 
Activation check box near the bottom border of the dialog box. This is a good 
choice under Windows 95 and 98 because these operating systems don't support ACLs. 
(See the next option.)</p>

<p>
<A HREF="javascript:fullSize('f16ph24x.htm')"> <img src="f16ph24.JPG" width=404 height=355 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-24.</B> <i>The Client Access tab of the Remote Automation Connection Manager.</i><!--/caption-->
</p>

<p><b>Allow Remote Creates By ACL</b> This setting is available only under Windows 
NT systems and lets you decide which users are granted or denied the permission to 
use the component currently highlighted in the leftmost list box.</p>

<p><b>Allow All Remote Creates</b> All the registered components are available for 
remote activation; this setting should be used only under the development and 
debugging phase because it would make the server machine too vulnerable to attacks 
from malicious clients.</p>

<A NAME="794"><h3>Testing the client</h3></A>
<p>A quick way to test how your component works remotely is to install it on a 
client machine as if it were a local component (that is, by copying the EXE file and 
running it using the <I>/REGSERVER </I>switch). Launch the client application, and make 
sure that everything works as expected. This step is important to sort out problems 
that don't have to do with remote activation.</p>

<p>Now you can run the Remote Automation Connection Manager to modify 
the Registry so that all object requests will be redirected to the server. In this case, you 
have to use the Server Connection tab of the program, shown in Figure 16-25, where you select the Distributed COM setting and then make the object 
remote by using the Ctrl+R shortcut key or by using the Remote command in the Register 
menu or the pop-up menu that displays when you right-click on the window. To 
complete the registration procedure, you have to specify the name of the server machine 
where the object will be instantiated. When you're working with DCOM, this utility 
doesn't allow you to specify a network protocol or an authentication level.</p>

<p>Run the client again and ensure that everything is working; if you didn't 
make any errors, the object will now be instantiated on the server. You might not see 
the remote component on the server's monitor, but you can check that it appears in 
the list of processes when the client makes the request.</p>

<p>
<A HREF="javascript:fullSize('f16ph25x.htm')"> <img src="f16ph25.JPG" width=404 height=355 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-25.</B> <i>The Server Connection tab of the Remote Automation Connection Manager.</i><!--/caption-->
</p>

<A NAME="795"><h3>The <I>CreateObject</I> function</h3></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 improves the <I>CreateObject 
</I>function with the support of a second optional argument, which gives the client the ability to instantiate the component 
on a specific remote workstation, as in the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set x = CreateObject(&quot;RemoteSvr.TestClass&quot;, &quot;ServerNT&quot;)
</pre>
</td></tr>
</table></p>

<p>This feature makes it possible to write smarter clients that can implement a 
fault-tolerant mechanism and instantiate an object on an alternate workstation if the 
machine the Registry points to is currently unavailable. Thanks to this capability, 
a distributed application can also implement a sophisticated load-balancing 
algorithm so that heavy-duty components run on the machines that are currently idle.</p>

<A NAME="796"><h3>Deploying the component</h3></A>
<p>While the Remote Automation Connection Manager is fine for testing that the 
client application correctly connects to the component, its interactive nature gets in the 
way when it's time to actually deploy the application on multiple workstations. The 
solution to this problem lies in the Client Configuration utility, CliReg32.Exe. You 
can find this program in the Common\Tools\CliReg directory in your Visual Studio 
main directory, and you should ensure that it's in the client installation package.</p>

<p>You (or your installation routine) have to run the CliReg32 program and 
pass it the name of the VBR file that was produced when the component was 
compiled. The VBR file is nothing but a REG file with a different extension and a 
different header. The CliReg32 utility reads this file, customizes it using the settings 
found on the command line, and finally adds all the relevant keys to the Registry. Its 
syntax is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
CliReg32 &lt;vbrfile&gt; &lt;options&gt;
</pre>
</td></tr>
</table></p>

<p>where all the available options are listed in Table 16-3.</p>

<p><B>Table 16-3.</B> <I>The options for the CliReg32 utility.</I></p>

<p><table width="95%" cellpadding="5">
<tr>
<th><b><i>Option</i></b></th>
<th><b><i>Description</i></b></th>
</tr>
<tr>
<td valign="TOP">-d</td>
<td valign="TOP">Use DCOM instead of Remote Automation.</td>
</tr>
<tr>
<td valign="TOP">-t &lt;typelib&gt;</td>
<td valign="TOP">Specify a type library file.</td>
</tr>
<tr>
<td valign="TOP">-a</td>
<td valign="TOP">Specify an authentication security level. (<I>n </I>can be in the range 0 through 6, corresponding to the values listed in Table 16-4.)</td>
</tr>
<tr>
<td valign="TOP">-s &lt;address&gt;</td>
<td valign="TOP">Specify a network address.</td>
</tr>
<tr>
<td valign="TOP">-p &lt;protocol&gt;</td>
<td valign="TOP">Specify a network protocol.</td>
</tr>
<tr>
<td valign="TOP">-u</td>
<td valign="TOP">Uninstall the VBR file.</td>
</tr>
<tr>
<td valign="TOP">-l</td>
<td valign="TOP">Log error information to file CLIREG.LOG.</td>
</tr>
<tr>
<td valign="TOP">-q</td>
<td valign="TOP">Suppress the dialog box; if you omit this option, CliReg32 displays a dialog box for letting the user enter missing values.</td>
</tr>
<tr>
<td valign="TOP">-nologo</td>
<td valign="TOP">Suppress the copyright dialog box.</td>
</tr>
<tr>
<td valign="TOP">-h or -?</td>
<td valign="TOP">Show this list of options.</td>
</tr>
</table></p>

<A NAME="797"><h2>Configuring DCOM</h2></A>
<p>DCOMCNFG is the main utility that you use to configure DCOM. When you run 
it for the first time, it quickly scans all the registered components in the system 
and prepares them for execution as remote components by adding their identifiers 
under the HKEY_CLASSES_ROOT\AppID key in the Registry. This portion of the 
Registry gathers all the information about component security. While a few 
components register themselves under this key, this doesn't happen with all the 
components authored in Visual Basic. Note that DCOMCNFG displays one AppID for each 
ActiveX server, even if the server exposes multiple classes.</p>

<p>DCOMCNFG also activates or deactivates DCOM as a whole. In the 
Default Properties tab shown in Figure 16-26, you should tick the 
Enable Distributed COM On This Computer check box. This option must be selected to 
have the current machine work either as a server or as a client in a DCOM 
connection. You might need to reboot to enforce a new setting for this option.</p>

<A NAME="798"><h3>Default authentication and impersonation levels</h3></A>
<p>DCOMCNFG enables you to set both the DCOM default security settings and 
the security settings for each particular component. This sort of security is named 
<I>declarative security,</I> and it can be assigned from outside the component itself. DCOM 
also supports <I>programmatic security,</I> which enables the programmer to 
dynamically modify the security settings of the component at run time, and even set a 
different security level on a per-method basis. Unfortunately, programmatic security is 
beyond the capabilities of Visual Basic.</p>

<p>
<img src="f16ph26.GIF" width=404 height=448 border=0>
</p><p>
<!--caption--><B>Figure 16-26.</B> <i>The Default Properties tab of the DCOMCNFG utility.</i><!--/caption-->
</p>

<p>The Default Authentication Level option tells DCOM how it should check 
that data sent to the component is actually coming from the client. Higher security 
levels protect the server from data tampering, but at the same time they slow down 
the communication with its clients. The authentication levels supported by DCOM 
are listed in Table 16-4.</p>

<p><B>Table 16-4.</B> <I>DCOM authentication levels.</I></p>

<p><table width="95%" cellpadding="5">
<tr>
<th><b><i>Value</i></b></th>
<th><b><i>Level</i></b></th>
<th><b><i>Description</i></b></th>
</tr>
<tr>
<td valign="TOP">0</td>
<td valign="TOP">Default</td>
<td valign="TOP">Corresponds to Connect authentication.</td>
</tr>
<tr>
<td valign="TOP">1</td>
<td valign="TOP">None</td>
<td valign="TOP">DCOM doesn't authenticate data in any way.</td>
</tr>
<tr>
<td valign="TOP">2</td>
<td valign="TOP">Connect</td>
<td valign="TOP">DCOM authenticates the client only when it first connects to the server.</td>
</tr>
<tr>
<td valign="TOP">3</td>
<td valign="TOP">Call</td>
<td valign="TOP">DCOM authenticates the client at the beginning of each call to a method or property.</td>
</tr>
<tr>
<td valign="TOP">4</td>
<td valign="TOP">Packet</td>
<td valign="TOP">DCOM authenticates each packet of data coming from the client.</td>
</tr>
<tr>
<td valign="TOP">5</td>
<td valign="TOP">Packet integrity</td>
<td valign="TOP">Similar to previous level, but a checksum mechanism ensures that data hasn't been altered on the way from the client to the server.</td>
</tr>
<tr>
<td valign="TOP">6</td>
<td valign="TOP">Packet privacy</td>
<td valign="TOP">Similar to previous level, but data is also encrypted to ensure that it isn't read by unauthorized programs.</td>
</tr>
</table></p>

<p>The impersonation level defines what the component can do on behalf of 
its clients. The lower the impersonation level is, the more protected the client is 
from misbehaving components. The Default Impersonation Level field determines 
the impersonation level assigned to all components that don't override this setting 
with a different value. DCOM supports four impersonation levels, which are 
summarized in Table 16-5.</p>

<p><B>Table 16-5.</B> <I>DCOM impersonation levels. The default setting is Identify.</I></p>

<p><table width="95%" cellpadding="5">
<tr>
<th><b><i>Value</i></b></th>
<th><b><i>Level</i></b></th>
<th><b><i>Description</i></b></th>
</tr>
<tr>
<td valign="TOP">1</td>
<td valign="TOP">Anonymous</td>
<td valign="TOP">The server doesn't know anything about the client and therefore can't impersonate it. (This level isn't currently supported and is automatically promoted to Identify.)</td>
</tr>
<tr>
<td valign="TOP">2</td>
<td valign="TOP">Identify</td>
<td valign="TOP">The server has enough information about the client to impersonate it in ACL checking but can't access system objects as the client.</td>
</tr>
<tr>
<td valign="TOP">3</td>
<td valign="TOP">Impersonate</td>
<td valign="TOP">The server can impersonate the client while acting on its behalf.</td>
</tr>
<tr>
<td valign="TOP">4</td>
<td valign="TOP">Delegate</td>
<td valign="TOP">The server can impersonate the client when calling other servers on the behalf of the client. (Supported only in Windows 2000.)</td>
</tr>
</table></p>

<A NAME="799"><h3>Default access and launch permissions</h3></A>
<p>In the Default Security tab, you select the list of users that are enabled to run or 
use all the components that don't provide a customized list of authorized users. To use 
a component, a user must be included in the Access 
Permission<I> </I>list, while to launch the component 
the user must be included in the Launch 
Permission<I> </I>list. Both of them are Windows NT Access Control Lists, as shown in Figure 16-27. You 
shouldn't modify these lists; instead, you should modify the individual ACLs associated 
with each component, as I'll explain in a moment. It's important that the SYSTEM 
user be included in both the access and launch lists; otherwise, the component can't 
be launched at all.</p>

<p>The Default Configuration Permission list includes all the users who are 
allowed to change the security settings of all the components that don't provide a 
customized list of authorized users. You shouldn't modify these settings because 
restricting the access to the Registry might cause problems to components written in Visual 
Basic, which register themselves each time they're launched.</p>

<p>
<A HREF="javascript:fullSize('f16ph27x.htm')"> <img src="f16ph27.JPG" width=404 height=276 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-27.</B> <i>The Default Security tab of the DCOMCNFG utility.</i><!--/caption-->
</p>

<A NAME="800"><h3>Identity settings</h3></A>
<p>If you switch to the Applications tab of the DCOMCNFG utility and double-click 
on a component's name, another window appears; this window is where you 
modify the security settings and other properties of that particular component. For 
example, in the General tab, you can set a custom Authentication level for the 
component, whereas in the Security tab, you define exactly which users can access or launch 
this component or can modify its configuration permissions.</p>

<p>The most interesting settings are in the Identity tab, as shown in Figure 16-28.</p>

<p>
<A HREF="javascript:fullSize('f16ph28x.htm')"> <img src="f16ph28.JPG" width=404 height=344 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-28.</B> <i>The Identity tab of the DCOMCNFG utility for a specific component.</i><!--/caption-->
</p>

<p>Here you decide under which user account the component will run. DCOM 
provides the following three choices:</p>

<p><b>Run as The Interactive User</b> This option assigns the component the 
security credential of the user who is currently logged on the machine. This generally 
isn't a wise choice in a real distributed system because the permissions granted to 
the component vary depending on who is logged on. If no user has logged on, the 
component can't even run. In practice, this option makes sense only when you're 
testing the component.</p>

<p>All components that run in an account different from the interactive user's 
account execute in a <I>noninteractive window 
station</I> and aren't visible on the desktop. If you want to see the output of a component, it must run under the identity of 
the interactive user. For the same reason, unless you're 100 percent sure that your 
component will be run under the interactive user account, you should compile it 
using the Unattended Execution option. If you don't and an error occurs, the 
component will wait forever because no user can click on its error message box.</p>

<p><b>Run as The Launching User</b> This option assigns the security credentials of 
the user who is running the client application. This option usually isn't a good 
choice because different clients instantiate remote objects that must run under different 
credentials, and this is possible only by running multiple instances of the 
component. In this case, the component acts more or less as a SingleUse component even if 
it was compiled with the MultiUse attribute. Moreover, if a component is running 
under the account of a remote client, the component won't be able to make calls 
to components that run on another machine, at least on Windows NT 4 (which 
doesn't support the Delegate impersonation level).</p>

<p><b>Run as This User</b> This option lets you assign a specific user's security 
credentials to the component. In a production environment, this is often the best choice 
because only one instance of a MultiUse component will be created. In practice, the best 
thing to do is create a new user just for this purpose, give it proper access rights to 
system resources, and then let the component run with this new user's credentials. In 
this way, you can modify the access rights of one or more components by simply 
changing the rights of this fictitious user.</p>

<p>It's important that this user be assigned the permission to log on as a batch 
job, otherwise the logon process that invisibly starts when the component is launched 
will fail. DCOMCNFG automatically assigns this right to the user in the Run As This 
User field, and you only have to avoid accidentally revoking this right from within 
the Windows NT User Manager utility.</p>

<A NAME="801"><h2>Implementing a Callback Technique</h2></A>
<p>An area in which you can greatly improve the performance of your remote 
components is event notification. While your ordinary event notifications work under 
DCOM (but not under Remote Automation), they're so inefficient that I strongly 
discourage you from using them. Instead, you should implement a callback technique.</p>

<p>The callback mechanism works as follows: When the client calls a 
lengthy method of the component, it passes a reference to an object defined in the 
client itself, and the component stores this reference in a local variable. This variable 
is then used when the component needs to call back the client to inform it that 
something has occurred.</p>

<A NAME="802"><h3>Early-bound and late-bound callbacks</h3></A>
<p>Callback techniques have been available to Visual Basic programmers since 
version 4 of the language. But only late-binding callbacks were possible in Visual Basic 4. 
Let me describe a concrete example of the callback technique. Say that you have 
created a generic reusable report printing engine: Any client application can 
instantiate it and start a print job. The server then calls back the client when the job has 
been completed or when an error occurs.</p>

<p>In this scenario, the print server doesn't know at compile time the type of 
the object passed by the client application because different types of clients expose 
different classes. The component can store a reference to the client only in a 
variable declared using <I>As Object,</I> which means that the notification occurs through 
late binding. The client and the component must agree on the name and the syntax of 
a method in the class used for callback. Any syntax error in the client or in the 
server will manifest itself only at run time. As you know, late binding is also less 
efficient than early binding, so you should avoid it if possible.</p>

<p>In Visual Basic 5 and 6, the <I>Implements </I>keyword allows you to enforce a 
stricter contract between the client and the component. The component includes a 
PublicNotCreatable class that defines the callback interface, and any client that wants to 
receive callback notifications from the server has to expose a PublicNotCreatable class 
that implements that interface. The component can therefore store a reference to such 
an object in a specific variable, and all the notifications use early binding.</p>

<A NAME="803"><h3>An example</h3></A>
<p>On the companion CD-ROM, you can find the complete source code of a 
multithreaded component that implements a callback mechanism to communicate with 
its clients. This component performs a (simulated) printing job and tells the client 
how the job progresses and when it completes. The component includes the 
CPrinterCBK PublicNotCreatable class that defines the callback interface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The CPrinterCBK class module.
Sub Complete(ErrCode As Long)
    '
End Sub
Sub Progress(percent As Integer)
    '
End Sub
</pre>
</td></tr>
</table></p>

<p>This is the source code of the CPrinter class, which simulates the actual printing:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The CPrinter class module.
Private Declare Sub Sleep Lib &quot;kernel32&quot; (ByVal dwMilliseconds As Long)

Dim SaveCBK As CPrinterCBK
Dim frmTimer As frmTimer

Sub StartPrintJob(Filename As String, cbk As CPrinterCBK)
    ' Save the callback object for later.
    Set SaveCBK = cbk
    ' Activate the timer that will restart this thread.
    Set frmTimer = New frmTimer
    With frmTimer
        Set .Owner = Me
        .Timer1.Interval = 100
        .Timer1.Enabled = True
    End With
End Sub

Friend Sub StartIt()
    Dim totalTime As Single, percent As Integer
    Dim t As Single, startTime As Single
    
    ' This code is executed when the timer fires.
    ' Unload the form, and destroy it completely.
    Unload frmTimer
    Set frmTimer = Nothing

    ' Simulate the printing process.
    totalTime = Rnd * 10 + 5
    startTime = Timer
    Do
        ' Inform the client that something has happened.
        percent = ((Timer - startTime) / totalTime) * 100
        SaveCBK.Progress percent
        ' In this demo, just go to sleep for one second.
        Sleep 1000
    Loop Until Timer - startTime &gt; totalTime
    ' Inform the client that the process has been completed.
    SaveCBK.Complete 0
    ' IMPORTANT: destroy the reference to the client
    ' so that it won't be kept alive forever.
    Set SaveCBK = Nothing
End Sub
</pre>
</td></tr>
</table></p>

<p>The component also includes a frmTimer form with a Timer control on it; 
the only purpose of this form is to wake the component a few milliseconds after it 
has returned the control to its client from the 
<I>StartPrintJob </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The frmTimer form module.
Public Owner As CPrinter

Private Sub Timer1_Timer()
    ' This procedure is executed only once.
    Timer1.Interval = 0
    Timer1.Enabled = False
    ' Yield to the companion CPrinter instance.
    Owner.StartIt
End Sub
</pre>
</td></tr>
</table></p>

<p>On the CD-ROM, you can also find a client application that uses this 
component and that performs a CPU intensive task (finding prime numbers) while 
waiting for the simulated printing job to complete. If you don't have a network of 
computers, you can run multiple instances of this application and see that they can 
multitask without affecting one another, as shown in Figure 16-29.</p>

<p>
<A HREF="javascript:fullSize('f16ph29x.htm')"> <img src="f16ph29.JPG" width=404 height=305 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 16-29.</B> <i>Multiple clients that communicate with a sample multithreading component through callbacks.</i><!--/caption-->
</p>

<p>The client application includes a PublicNotCreatable callback class 
module, which is passed to the server component:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The CallbackCls class module.
Implements PrintServer.CPrinterCBK

' This class directly references controls on the main form.
Private Sub CPrinterCBK_Complete(ErrCode As Long)
    frmClient.lblStatus = &quot;Completed&quot;
    frmClient.cmdStart.Enabled = True
End Sub
Private Sub CPrinterCBK_Progress(percent As Integer)
    frmClient.lblStatus = &quot;Printing &quot; &amp; percent &amp; &quot;%&quot;
End Sub
</pre>
</td></tr>
</table></p>

<p>The only portion of the main form in the client application that's relevant in 
this context is the point at which it instantiates the component and passes it a 
reference to a CallbackCls object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdStart_Click()
    Dim prn As PrintServer.CPrinter
    ' Ask the CPrinter server to spool a fictitious file.
    Set prn = New PrintServer.CPrinter
    prn.StartPrintJob &quot;a dummy filename&quot;, New CallbackCls
End Sub
</pre>
</td></tr>
</table></p>

<p>Note that the client doesn't need to store a reference to the CallbackCls 
object in a local variable because this object is kept alive by the server component. 
Moreover, the CallbackCls class module can work to implement a callback mechanism 
from multiple servers, each one defining its own callback interface. In this case, the 
class has to include multiple <I>Implements </I>statements, one for each supported 
callback interface.</p>

<A NAME="804"><h3>Comparing callbacks and events</h3></A>
<p>The callback mechanism is undoubtedly more complex than a notification 
method based on events. For one thing, the client must be an ActiveX EXE itself to expose 
a public COM object, and the component must have sufficient rights to call a 
method in this object. On the other hand, callbacks have many advantages over events:</p>

<UL>
<p><li> Calling a method in the client uses VTable binding, whereas events use 
a less efficient ID binding.</li></p>
 
<p><li>Callbacks let you control which clients get the notification and in 
which order. You can also provide a <I>Cancel</I> argument that clients can set to 
True to suppress notifications to other clients, which is something that you 
can't do with events.</li></p>

<p><li>The callback method can be a function, which gives you broader 
control over how values are marshaled and lets you fine-tune your 
component for better performance.</li></p>




<p>Note that the callback technique described here isn't just for remote 
components and can be effectively used with local components as well.</p>

</UL>

<p>Now you know everything you need to know to create great in-process, local, 
and remote components. But Visual Basic 6 also lets you create another type of 
component, namely ActiveX controls. They're covered in the next chapter.</p>

<a name="A106"></a><h2>8.2 Chapter 17 -- ActiveX Controls</h2>

<A HREF="#A105">[Previous]</A> <A HREF="#A107">[Next]</A><P>


<font size="+3">Chapter 17</font>

<A NAME="805"><h1>ActiveX Controls</h1></A>
<p>ActiveX controls are the descendants of the first OCX controls that appeared 
when Visual Basic 4 was released. While they retain the same file extension, they're 
very different beneath the surface. The original OCX controls included a lot of 
low-level functionality (and consequently had to support many COM interfaces), and 
therefore were heavy and relatively slow. The new ActiveX controls were specifically 
redesigned to be embedded in HTML pages and delegate much of their functionality to 
their container, be it Microsoft Internet Explorer, a Visual Basic form, or any other 
ActiveX-compliant environment. Thanks to this different approach, ActiveX controls are 
generally slimmer than old OCXs, download faster, and load in memory more rapidly.
</p>


<a name="A107"></a><h3>8.2.1 ActiveX Control Fundamentals</h3>

<A HREF="#A106">[Previous]</A> <A HREF="#A108">[Next]</A><P>

<A NAME="806"><h1>ActiveX Control Fundamentals </h1></A>
<p>Visual Basic 5 and 6 give you all the tools you need to create powerful ActiveX 
controls, which you can then reuse in all your projects. More precisely, you can 
create two different types of ActiveX controls:
</p>

<UL>

<p><li> Private ActiveX controls that can be included in any type of Visual 
Basic project. They're saved in files with the 
<I>.</I>ctl extension, and you can reuse them in any other Visual Basic project merely by adding the file to 
the project. (This is reuse at the source-code level.)
</li></p>
<p><li> Public ActiveX controls that can be included only in ActiveX 
control projects; you have to compile them into OCX files, and then you can 
use them in any other Microsoft Windows application written in Visual 
Basic, Microsoft Visual C++, or any other development environment that 
supports ActiveX controls. (This is reuse at the binary level.)
</li></p>
</UL>

<p>Visual Basic 5 was the first language that permitted programmers to 
create ActiveX controls using a visual approach. As you'll see in a moment, you can 
create powerful controls by simply grouping simpler controls together: These controls 
are known as <I>constituent controls</I>. By putting together a PictureBox and two scroll 
bar controls, for example, you can create an ActiveX control that can scroll its 
contents. Visual Basic also allows you to create an ActiveX control without using any 
constituent controls. These are the so-called <I>owner-drawn 
</I>ActiveX controls.
</p>

<p>You should also keep this in mind when working with ActiveX controls: 
You're used to distinguishing between two distinct types of people interacting with 
your program&#8212;the developer and the user. To better understand how ActiveX 
controls behave, you need to take another role into account, the 
<I>author </I>of the control itself. The author's job is to prepare a control that will be used by the developer to 
deliver an application to the user. As you'll see, the author's and developer's 
perspectives are sometimes different, even though the two roles might be occupied by the 
same person. (That is, you might act as the author of the control and then as the 
developer who uses it.)
</p>

<A NAME="807"><h2>Creating the UserControl Module</h2></A>

<p>In this section, I'll show you how to create a sort of super-TextBox control that 
adds extra capabilities to the regular TextBox control, such as filtering out invalid 
characters. The steps that you have to take any time you create a new Public ActiveX 
control are the following ones:
</p>

<OL>
<p><li> Add a new ActiveX control project to the environment. This new 
project already includes a UserControl module. (Alternatively, manually add 
a UserControl module from the Project menu if you're creating a 
Private ActiveX control.)
</li></p>
<p><li> Give the project a meaningful name and a description. The former 
becomes the name of the control's library, and the latter is the string 
that appears in the Components dialog box for all the projects that use 
this control. In this example, we'll use the project's name 
<I>SuperTB</I> and the description <I>An enhanced TextBox 
control</I>.
</li></p>
<p><li> Click on the UserControl designer's window to give it the focus, and 
then enter a value for the <I>Name </I>property of the control in the Properties 
window. In this example, you can enter 
<I>SuperTextBox</I>.
</li></p>
<p><li> Place one or more constituent controls on the surface of the 
UserControl designer. In this example, you need to add a Label control and a 
TextBox control, as shown in Figure 17-1.
</li></p>
</OL>
<p>
<A HREF="javascript:fullSize('F17ph01x.htm')"> <img src="F17ph01.JPG" width=404 height=285 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-1.</B> <i>The SuperTextBox control at design time.</i><!--/caption-->
</p>

<p>You can use any intrinsic control as a constituent control of an ActiveX 
control except the OLE Container control (whose Toolbox icon is disabled when an 
ActiveX control designer has the focus). You can also use external ActiveX controls as 
constituent controls, but if you use one you should ascertain that you have the legal 
right to encapsulate it in your own control. All the ActiveX controls in the Visual 
Basic package except DBGrid can be freely reused in your own ActiveX control. 
Always carefully read the license agreements for third-party controls before encapsulating 
any in your own controls. You'll find more advice about these matters in the 
&quot;<A HREF="#884">Licensing</A>&quot; section near the end of this chapter. Finally, you can create ActiveX controls that 
don't use constituent controls, such as the SuperLabel control that you can find on 
the companion CD in the same directory as the SuperText project.
</p>

<p>Now you can close the UserControl designer's window and switch to the 
Standard EXE project that you are using as a test client program. You'll notice that a 
new icon is now active in the Toolbox. Select it, and drop an instance of your brand 
new control on the form, as shown in Figure 17-2.
</p>

<p>Congratulations! You've just created your first ActiveX control.
</p>

<p>I want to draw your attention to one specific point in the previous 
description. You need to explicitly close the ActiveX control designer window before using 
the control on the test container form. If you omit this step, the icon in the Toolbox 
stays inactive. In fact, Visual Basic activates the ActiveX control and prepares it for 
<I>siting </I>only when you close the designer 
window<I>. </I>Siting refers to the instant an 
ActiveX control is placed on its container's surface.
</p>

<p>You need to keep in mind that you have to deal with two different 
instances of the control, the design-time instance and the run-time instance. Unlike other 
Visual Basic modules, a UserControl module must be active even when the test project 
is in design mode. This is necessary because the control must react to the 
programmer's actions, such as entering the value of a property in the Properties window or 
resizing the control on the parent form. When you're working with the ActiveX control 
designer open, however, the control itself is in design mode and therefore can't be 
used in a form. To run an ActiveX control, you need to close its designer window, as I explained earlier.
</p>

<p>
<A HREF="javascript:fullSize('F17ph02x.htm')"> <img src="F17ph02.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-2.</B> <i>An instance of the SuperTextBox control on a testform. The Properties window includes a number of properties that have been defined for you by Visual Basic.</i><!--/caption-->
</p>

<A NAME="808"><h2>Running the ActiveX Control Interface Wizard</h2></A>

<p>Our first version of the SuperTextBox control doesn't do anything useful yet, but 
you can run the client application and ensure that everything is working and that no 
error is raised. To turn this first prototype into a useful control, you need to add 
properties and methods and write the code that correctly implements the new features.
</p>

<p>To complete the SuperTextBox control, you need to add all the properties 
that the user of this control expects to find, such as 
<I>ForeColor</I>, <I>Text</I>, and <I>SelStart</I>. A 
few of these properties must appear in the Properties window; others are run 
time_only properties. You also need to add other properties and methods that expand the 
basic TextBox functionality&#8212;for example the 
<I>FormatMask </I>property (which affects how the control's contents is formatted) or the 
<I>Copy </I>method (which copies the control's contents to the Clipboard).
</p>

<p>In most cases, these properties and methods map directly to properties 
and methods of constituent controls: for example, the 
<I>ForeColor </I>and the <I>Text </I>properties map directly to the Text1 constituent control's properties with the same 
names, whereas the <I>Caption </I>property corresponds to the 
<I>Caption </I>property of the Label1 constituent control. This is similar to the concept of inheritance by delegation 
that you saw in <a href="#A41">Chapter 7</a>.
</p>

<p>To facilitate the task of creating the public interface of an ActiveX control 
and writing all the delegation code, Visual Basic includes the ActiveX Control 
Interface Wizard. This add-in is installed with the Visual Basic package, but you might 
need to explicitly load it from within the Add-In Manager dialog box.
</p>

<p>In the first step of the wizard, you select the interface members, as shown 
in Figure 17-3. The wizard lists the properties, methods, and events that are 
exposed by the constituent controls and lets you select which ones should be made 
available to the outside. In this case, accept all those that are already in the rightmost list 
except <I>BackStyle</I>, and then add the following items: 
<I>Alignment</I>, <I>Caption</I>, <I>Change</I>, 
<I>hWnd</I>, <I>Locked</I>, <I>MaxLength</I>, 
<I>MouseIcon</I>, <I>MousePointer</I>, 
<I>PasswordChar</I>, <I>SelLength</I>, 
<I>SelStart</I>, <I>SelText</I>, <I>Text</I>, plus all the 
<I>OLE</I>xxxx properties, methods, and events. These 
members ensure that the SuperTextBox control matches nearly all the capabilities of a 
regular TextBox control. A few properties have been left out&#8212;namely, 
<I>MultiLine </I>and <I>ScrollBars</I>. The reason for these exclusions will be clear later.
</p>

<p>
<A HREF="javascript:fullSize('F17ph03x.htm')"> <img src="F17ph03.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-3.</B> <i>The first step of the ActiveX Control Interface Wizard. You can also highlight multiple items and add all of them in one operation.</i><!--/caption-->
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Unfortunately, the ActiveX Control Interface Wizard lets you 
include many properties, methods, and events that you should never add to the 
public interface of your controls&#8212;for example, the 
<I>ToolTipText</I>,<I> CausesValidation</I>,<I> 
WhatsThisHelpID</I>,<I> </I>and <I>Validate </I>event. As a matter of fact, Visual Basic 
automatically adds these members to any ActiveX control that you create, so you 
don't need to specify them unless you plan to use the control in environments 
other than Visual Basic. More on this later.
</blockquote></div>
</p>


<p>In the next step, you define all the custom properties, methods, and 
events that your ActiveX control exposes. You should add the 
<I>FormatMask</I>, <I>FormattedText</I>, 
<I>CaptionFont</I>, <I>CaptionForeColor</I>,<I> 
</I>and <I>CaptionBackColor</I> properties; the 
<I>Copy</I>, <I>Clear</I>, <I>Cut</I>, and <I>Paste 
</I>methods; and the <I>SelChange </I>event.
</p>

<p>In the third step, you define how the public members of the ActiveX 
control are mapped to the members of its constituent controls. For example, the 
<I>Alignment </I>public property should be mapped to the 
Text1<I> </I>constituent control's <I>Alignment 
</I>property. The same holds true for the majority of the members in the list, and you 
can speed up mapping operations by selecting all of members and assigning them to 
the Text1<I> </I>control, as shown in Figure 17-4.
</p>

<p>
<A HREF="javascript:fullSize('F17ph04x.htm')"> <img src="F17ph04.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-4.</B> <i>In the third step in the ActiveX Control Interface Wizard, you canmap multiple members by highlighting them in the leftmost list and then selectinga constituent control in the Control combo box on the right.</i><!--/caption-->
</p>

<p>A few members&#8212;for example, the <I>Caption 
</I>property&#8212;map to the Label1 constituent control. You must specify the name of the original member in the constituent 
control when the two names differ, as in the case of the 
<I>CaptionForeColor</I>,<I> CaptionBackColor</I>, and 
<I>CaptionFont</I> properties that correspond to the Label1's 
<I>ForeColor</I>, <I>BackColor</I>,<I> </I>and 
<I>Font</I> properties, respectively. At other times, you have to map a public member 
to the UserControl itself&#8212;for example, the 
<I>Refresh </I>method.
</p>

<p>There might be members that can't be directly mapped to any constituent 
control, and in the fourth step of the wizard you define how such members behave. 
For example, you declare that the <I>Copy</I>,<I> 
Cut</I>, <I>Clear</I>, and <I>Paste </I>methods are 
<I>Sub</I>s by setting their return type to 
<I>Empty</I>. Similarly, you specify that <I>FormatMask 
</I>is a String property that can be read and modified either at design time or run time, 
whereas the <I>FormattedText </I>isn't available at design time and is read-only at run time. 
You should also specify an empty string as the default value for these three 
properties because even if you change the property type to String, the Wizard doesn't 
automatically change the value <I>0</I> that it initially set as the default. You must enter the 
argument list for all methods and events, as well as a brief description for each 
member, as shown in Figure 17-5.
</p>

<p>The otherwise excellent ActiveX Control Interface Wizard has some 
limitations, though. For example, you can neither define properties with arguments, nor 
can you enter a description for all the custom properties&#8212;the 
<I>CaptionFont </I>and <I>CaptionForeColor </I>properties in this case&#8212;that are mapped to constituent controls.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>Beware, international programmers! Being written in Visual 
Basic, the ActiveX Control Interface Wizard inherits a curious bug from the language 
if the Regional Setting established in the Control Panel isn't English. When 
Boolean constants True and False are concatenated in a string, the value you 
obtain is the localized string corresponding to that value. (For example, in 
Italian you get the strings &quot;Vero&quot; and &quot;Falso&quot;, respectively.) Thus, in these 
circumstances the Wizard doesn't produce correct Visual Basic code, and you 
might have to edit it manually to run it. Or, if you prefer, you can set the Regional 
Setting to English if you plan to run the Wizard often in a programming session.
</blockquote></div>
</p>

<p>
<A HREF="javascript:fullSize('F17ph05x.htm')"> <img src="F17ph05.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-5.</B> <i>In the fourth step in the ActiveX Control Interface Wizard, you decide the syntax of methods and events and whether properties are read/write or read-only at run time.</i><!--/caption-->
</p>

<p>You're finally ready to click on the Finish button and generate all the code 
for the SuperTextBox control. If you go back to the instance of the control on the 
test form, you'll notice that the control has been grayed. This happens each time 
you change the public interface of the control. You can make the ActiveX control 
active again by right-clicking on its parent form and selecting the Update UserControls 
menu command.
</p>

<A NAME="809"><h2>Adding the Missing Pieces</h2></A>

<p>Looking at the code that the ActiveX Control User Interface wizard generates is a 
good starting point for learning how ActiveX controls are implemented. Most of the 
time, you'll see that a UserControl module isn't different from a regular class module. 
One important note: The wizard adds several commented lines that it uses to keep 
track of how members are implemented. You should follow the warnings that come 
along with these lines and avoid deleting them or modifying them in any way.
</p>

<A NAME="810"><h3>Delegated properties, methods, and events</h3></A>

<p>As I already explained, most of the code generated by the wizard does nothing 
but delegate the real action to the inner constituent controls. For example, see how 
the <I>Text </I>property is implemented:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get Text() As String
    Text = Text1.Text
End Property
Public Property Let Text(ByVal New_Text As String)
    Text1.Text() = New_Text
    PropertyChanged &quot;Text&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>The <I>PropertyChanged </I>method informs the container environment&#8212;Visual 
Basic, in this case&#8212;that the property has been updated. This serves two purposes. First, 
at design time Visual Basic should know that the control has been updated and has 
to be saved in the FRM file. Second, at run time, if the 
<I>Text </I>property is bound to a database field, Visual Basic has to update the record. Data-aware ActiveX 
controls are described in the &quot;<A HREF="#857">Data Binding</A>&quot; section, later in this chapter.
</p>

<p>The delegation mechanism also works for methods and events. For 
example, see how the SuperTextBox module traps the Text1 control's 
<I>KeyPress </I>event and exposes it to the outside, and notice how it delegates the 
<I>Refresh </I>method to the UserControl object:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' The declaration of the event
Event KeyPress(KeyAscii As Integer) 

Private Sub Text1_KeyPress(KeyAscii As Integer)
    RaiseEvent KeyPress(KeyAscii)
End Sub

Public Sub Refresh()
    UserControl.Refresh
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="811"><h3>Custom properties</h3></A>
<p>For all the public properties that aren't mapped to a property of a constituent 
control, the ActiveX Control Interface Wizard can't do anything but create a 
private member variable that stores the value assigned from the outside. For example, 
this is the code generated for the <I>FormatMask 
</I>custom property:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim m_FormatMask As String

Public Property Get FormatMask() As String
    FormatMask = m_FormatMask
End Property

Public Property Let FormatMask(ByVal New_FormatMask As String)
    m_FormatMask = New_FormatMask
    PropertyChanged &quot;FormatMask&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>Needless to say, you decide how such custom properties affect the 
behavior or the appearance of the SuperTextBox control. In this particular case, this 
property changes the behavior of another custom property, 
<I>FormattedText</I>, so you should modify the code generated by the wizard as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get FormattedText() As String
    FormattedText = Format$(Text, FormatMask)
End Property
</pre>
</td></tr>
</table>
</p>

<p>The <I>FormattedText </I>property had been defined as read-only at run time, so 
the wizard has generated its <I>Property Get </I>procedure but not its 
<I>Property Let </I>procedure.
</p>

<A NAME="812"><h3>Custom methods </h3></A>

<p>For each custom method you have added, the wizard generates the skeleton of a 
Sub or Function procedure. It's up to you to fill this template with code. For 
example, here's how you can implement the <I>Copy 
</I>and <I>Clear </I>methods:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Sub Copy()
    Clipboard.Clear
    Clipboard.SetText IIf(SelText &lt;&gt; &quot;&quot;, SelText, Text)
End Sub

Public Sub Clear()
    If SelText &lt;&gt; &quot;&quot; Then SelText = &quot;&quot; Else Text = &quot;&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You might be tempted to use <I>Text1.Text </I>and 
<I>Text1.SelText </I>instead of <I>Text </I>and 
<I>SelText </I>in the previous code, but I advise you not to do it. If you use the public 
name of the property, your code is slightly slower, but you'll save a lot of time if you 
later decide to change the implementation of the 
<I>Text </I>property.
</p>

<A NAME="813"><h3>Custom events</h3></A>

<p>You raise events from a UserControl module exactly as you would from within 
a regular class module. When you have a custom event that isn't mapped to any 
event of constituent controls, the wizard has generated only the event declaration for 
you because it can't understand when and where you want to raise it.
</p>

<p>The SuperTextBox control exposes the <I>SelChange 
</I>event, which is raised when either the <I>SelStart 
</I>property or the <I>SelLength </I>property (or both) change. This event 
is useful when you want to display the current column on the status bar or 
when you want to enable or disable toolbar buttons depending on whether there's any 
selected text. To correctly implement this event, you must add two private variables and 
a private procedure that's called from multiple event procedures in the 
UserControl module:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private saveSelStart As Long, saveSelLength As Long

' Raise the SelChange event if the cursor moved.
Private Sub CheckSelChange()
    If SelStart &lt;&gt; saveSelStart Or SelLength &lt;&gt; saveSelLength Then
        RaiseEvent SelChange
        saveSelStart = SelStart
        saveSelLength = SelLength
    End If
End Sub

Private Sub Text1_KeyUp(KeyCode As Integer, Shift As Integer)
    RaiseEvent KeyUp(KeyCode, Shift)
    CheckSelChange
End Sub

Private Sub Text1_Change()
    RaiseEvent Change
    CheckSelChange
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In the complete demonstration project that you can find on the companion 
CD, the <I>CheckSelChange </I>procedure is called from within Text1's 
<I>MouseMove</I> and <I>MouseUp </I>event procedures and also from within the 
<I>Property Let SelStart </I>and <I>Property Let SelLength 
</I>procedures.
</p>

<A NAME="814"><h3>Properties that map to multiple controls</h3></A>

<p>Sometimes you might need to add custom code to correctly expose an event to 
the outside. Take, for example, the <I>Click </I>and 
<I>DblClick </I>events: You mapped them to the Text1 constituent control, but the UserControl module should raise an event also when 
the user clicks on the Label1 control. This means that you have to manually write the 
code that does the delegation:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Label1_Click()
    RaiseEvent Click
End Sub

Private Sub Label1_DblClick()
    RaiseEvent DblClick
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You might also need to add delegation code when the same property 
applies to multiple constituent controls. Say that you want the 
<I>ForeColor </I>property to affect both the Text1 and Label1 controls. Since the wizard can map a property only to 
a single control, you must add some code (shown as boldface in the following 
listing) in the <I>Property Let</I> procedure that propagates the new value to the other 
constituent controls:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let ForeColor(ByVal New_ForeColor As OLE_COLOR)
    Text1.ForeColor = New_ForeColor
<B>    Label1.ForeColor = New_ForeColor</B>
    PropertyChanged &quot;ForeColor&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>You don't need to modify the code in the corresponding 
<I>Property Get </I>procedure, however.
</p>

<A NAME="815"><h3>Persistent properties</h3></A>
<p>The ActiveX Control Interface Wizard automatically generates the code that 
makes all the control's properties persistent via FRM files. The persistence mechanism 
is identical to the one used for persistable ActiveX components (which I explained 
in <a href="#A100">Chapter 16</a>). In this case, however, you never have to explicitly ask an ActiveX 
control to save its own properties because the Visual Basic environment does it for 
you automatically if any of the control's properties have changed during the editing 
session in the environment
</p>

<p>When the control is placed on a form, Visual Basic fires 
its <I>UserControl_InitProperties </I>event. In this event procedure, the control should initialize its 
properties to their default values. For example, this is the code that the wizard generates for 
the SuperTextBox control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Const m_def_FormatMask = &quot;&quot;
Const m_def_FormattedText = &quot;&quot;

Private Sub UserControl_InitProperties()
    m_FormatMask = m_def_FormatMask
    m_FormattedText = m_def_FormattedText
End Sub
</pre>
</td></tr>
</table>
</p>

<p>When Visual Basic saves the current form to an FRM file, it asks the 
ActiveX control to save itself by raising its <I>UserControl_WriteProperties 
</I>event:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
    Call PropBag.WriteProperty(&quot;FormatMask&quot;, m_FormatMask, m_def_FormatMask)
    Call PropBag.WriteProperty(&quot;FormattedText&quot;, m_FormattedText, _
        m_def_FormattedText)
    Call PropBag.WriteProperty(&quot;BackColor&quot;, Text1.BackColor, &amp;H80000005)
    Call PropBag.WriteProperty(&quot;ForeColor&quot;, Text1.ForeColor, &amp;H80000008)
    ' Other properties omitted....
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The third argument passed to the PropertyBag object's 
<I>WriteProperty </I>method is the default value for the property. When you're working with color properties, 
you usually pass hexadecimal constants that stand for system colors. For 
example, &amp;H80000005 is the vbWindowBackground constant (the default background 
color), and &amp;H80000008 is the vbWindowText constant (the default text color). 
Unfortunately, the wizard doesn't generate symbolic constants directly. For a complete list of 
supported system colors, use the Object Browser to enumerate the 
SystemColorConstants constants in the VBRUN library.
</p>

<p>When Visual Basic reloads an FRM file, it fires the 
<I>UserControl_ReadProperties </I>event to let the ActiveX control restore its own properties:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
    m_FormatMask = PropBag.ReadProperty(&quot;FormatMask&quot;, m_def_FormatMask)
    m_FormattedText = PropBag.ReadProperty(&quot;FormattedText&quot;, _
        m_def_FormattedText)
    Text1.BackColor = PropBag.ReadProperty(&quot;BackColor&quot;, &amp;H80000005)
    Text1.ForeColor = PropBag.ReadProperty(&quot;ForeColor&quot;, &amp;H80000008)
    Set Text1.MouseIcon = PropBag.ReadProperty(&quot;MouseIcon&quot;, Nothing)
    ' Other properties omitted....
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Again, the last argument passed to the PropertyBag object's 
<I>ReadProperty </I>method is the default value of the property being retrieved. If you manually edit the 
code created by the wizard, be sure that you use the same constant in the 
<I>InitProperties</I>, <I>WriteProperties</I>, and 
<I>ReadProperties </I>event procedures.
</p>

<p>The wizard does a good job of generating code for properties persistence, 
but in some cases you might need to fix it. For example, the preceding code directly 
assigns values to constituent controls' properties. While this approach is OK in 
most cases, it fails when the same property maps multiple controls, in which case 
you should assign the value to the Public property name. On the other hand, using 
the Public property name invokes its <I>Property Let 
</I>and <I>Set </I>procedures, which in turn call the 
<I>PropertyChanged </I>method and cause properties to be saved again even if 
they weren't modified during the current session. I'll show you how you can avoid 
this problem later in this chapter.
</p>

<p>Moreover, the wizard creates more code than strictly necessary. For 
example, it generates the code that saves and restores properties that aren't available at 
design time (<I>SelStart</I>, <I>SelText</I>, 
<I>SelLength</I>, and <I>FormattedText </I>in this particular case). 
Dropping the corresponding statements from the <I>ReadProperties 
</I>and <I>WriteProperties</I> procedures makes your FRM files shorter and speeds up save and load operations.
</p>

<A NAME="816"><h3>The UserControl's <I>Resize</I> event</h3></A>
<p>The UserControl object raises several events during the lifetime of an ActiveX 
control, and I'll describe all of them later in this chapter. One event, however, is 
especially important: the <I>Resize </I>event. This event fires at design time when the 
programmer drops the ActiveX control on the client form and also fires whenever the control 
itself is resized. As the author of the control, you must react to this event so that 
all the constituent controls move and resize accordingly. In this particular case, 
the position and size of constituent controls depend on whether the SuperTextBox 
control has a nonempty <I>Caption</I>:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_Resize()
    On Error Resume Next
    If Caption &lt;&gt; &quot;&quot; Then
        Label1.Move 0, 0, ScaleWidth, Label1.Height
        Text1.Move 0, Label1.Height, ScaleWidth, _
            ScaleHeight - Label1.Height
    Else
        Text1.Move 0, 0, ScaleWidth, ScaleHeight
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>On Error </I>statement serves to protect your application from errors that 
occur when the ActiveX control is shorter than the Label1 constituent control. The 
preceding code must execute also when the <I>Caption 
</I>property changes, so you need to add a statement to its 
<I>Property Let </I>procedure:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let Caption(ByVal New_Caption As String)
    Label1.Caption = New_Caption
    PropertyChanged &quot;Caption&quot;
<B>    Call UserControl_Resize</B>
End Property
</pre>
</td></tr>
</table>
</p>


<a name="A108"></a><h3>8.2.2 The UserControl Object</h3>

<A HREF="#A107">[Previous]</A> <A HREF="#A109">[Next]</A><P>

<A NAME="817"><h1>The UserControl Object</h1></A>

<p>The UserControl object is the container in which constituent controls are 
placed. In this sense, it's akin to the Form object, and in fact it shares many 
properties, methods, and events with the Form object. For example, you can learn its 
internal dimension using the <I>ScaleWidth </I>and 
<I>ScaleHeight </I>properties, use the 
<I>AutoRedraw </I>property to create persistent graphics on the UserControl's surface, and add 
a border using the <I>BorderStyle </I>property. UserControl objects also support all the 
graphic properties and methods that forms do, including 
<I>Cls</I>, <I>Line</I>, <I>Circle</I>, 
<I>DrawStyle</I>, <I>DrawWidth</I>, <I>ScaleX</I>, and 
<I>ScaleY</I>.
</p>

<p>UserControls support most of the Form object's events, too. For example, 
<I>Click</I>, <I>DblClick</I>, <I>MouseDown</I>, 
<I>MouseMove</I>,<I> </I>and <I>MouseUp </I>events fire when the user 
activates the mouse over the portions of UserControl's surface that aren't covered by 
constituent controls. UserControl objects also support 
<I>KeyDown</I>, <I>KeyUp</I>,<I> </I>and <I>KeyPress 
</I>events, but they fire only when no constituent control can get the focus or when you set 
the UserControl's <I>KeyPreview </I>property to True.
</p>

<A NAME="818"><h2>The Life Cycle of a UserControl Object</h2></A>

<p>UserControl are objects, and as such they receive several events during their 
lifetime. ActiveX controls actually have a double life because they're also alive when 
the environment is in design mode.
</p>

<A NAME="819"><h3>Creation</h3></A>
<p><I>Initialize</I> is the first event that a UserControl receives. In this event, no 
Windows resources have been allocated yet so you shouldn't refer to constituent 
controls, exactly as you avoid references to controls on a form in the form's 
<I>Initialize </I>event. For the same reason, the Extender and AmbientProperties objects aren't available 
in this event. (These objects are described in the following sections.)
</p>

<p>After the <I>Initialize </I>event, the UserControl creates all its constituent controls 
and is ready to be sited on the client form's surface. When the siting completes, 
Visual Basic fires an <I>InitProperties </I>or <I>ReadProperties 
</I>event, depending on whether the control has been just dragged on the form from the Toolbox or the form is 
being reopened from a previous session. During these events, the Extender and the 
Ambient objects are finally available.
</p>

<p>Just before becoming visible, the UserControl module receives the 
<I>Resize </I>event, and then the <I>Show </I>event. This event is more or less equivalent to the 
<I>Activate </I>event, which isn't exposed by UserControl modules. Finally the UserControl module 
receives a <I>Paint </I>event (unless its <I>AutoRedraw 
</I>property is True).
</p>

<p>When a control is re-created at design time because its parent form is 
closed and then reopened, the complete sequence is repeated with the only differences 
being that the <I>InitProperties </I>event never fires and the 
<I>ReadProperties </I>event fires instead, immediately after the 
<I>Resize </I>event.
</p>

<A NAME="820"><h3>Termination</h3></A>
<p>When the developer closes the parent form at design time, or when the 
program switches to run-time mode, Visual Basic destroys the design-time instance 
of the ActiveX control. If the developer modified one or more properties in the control, 
the UserControl module receives a <I>WriteProperties 
</I>event. During this event, Visual Basic doesn't write anything to the FRM file and simply stores values in the 
PropertyBag object kept in memory. This event fires only if the programmer modified the 
attributes of any control on the form (or of the form itself), but not necessarily the 
UserControl you're working with. A control informs you that one of its properties has 
changed and that the FRM file needs to be updated by calling the 
<I>PropertyChanged </I>method. When the control is removed from its container, a 
<I>Hide </I>event occurs. (ActiveX controls in HTML pages receive this event when the user navigates to another page.) 
This event broadly corresponds to a form's <I>Deactivate 
</I>event: The ActiveX control is still in memory, but it isn't visible any longer.
</p>

<p>The last event in the life of an ActiveX control is 
<I>Terminate</I>; during this event, you usually close any open files and return any system resources that you 
allocated in the <I>Initialize </I>event procedure. The code in this event can't access the 
Extender and AmbientProperties objects.
</p>

<A NAME="821"><h3>Other event sequences</h3></A>

<p>When the developer runs the program, Visual Basic destroys the design-time 
instance of the ActiveX control, and creates a run-time instance so that the control can 
receive all the events described previously. The main difference between design-time 
and run-time instances is that the latter ones never receive a 
<I>WriteProperties </I>event.
</p>

<p>When you reopen the project, you start another special sequence of events: 
Now a new instance of the control is created, and it receives all the usual events that 
fire during creation plus a <I>WriteProperties 
</I>event that serves to update the PropertyBag object in memory.
</p>

<p>Finally, when a form module is compiled, Visual Basic creates a hidden 
instance of it and then queries the properties of all its ActiveX controls so that the 
compiled program can use the most recent property values. Each ActiveX control receives 
the <I>Initialize</I>, <I>Resize</I>, 
<I>ReadProperties</I>, <I>Show</I>, 
<I>WriteProperties</I>, <I>Hide</I>, and <I>Terminate 
</I>events. You don't need to perform any special actions during these events. I mention 
this information only because if your code contains breakpoints or 
<I>MsgBox </I>commands, they might interfere with the compilation process.
</p>

<A NAME="822"><h2>The Extender Object</h2></A>

<p>When you created a UserControl module and you placed an instance of it on a 
client form, you might have noticed that the Properties window isn't empty, as 
shown in Figure 17-2. Where did those properties come from?
</p>

<p>It turns out that Visual Basic's forms don't use the ActiveX control 
directly. Instead, they wrap the control within an intermediate object known as the 
Extender object. This object exposes to the programmer all the properties defined in the 
ActiveX control, plus a number of properties that Visual Basic adds for its own purposes. 
For example, <I>Name</I>, <I>Left</I>, 
<I>Top</I>,<I> </I>and <I>Visible </I>are Extender properties and so you don't 
have to implement them in the UserControl module. Other Extender properties are 
<I>Height</I>, <I>Width</I>, <I>Align</I>, 
<I>Negotiate</I>, <I>Tag</I>, <I>Parent</I>, 
<I>Container</I>, <I>ToolTipText</I>, 
<I>DragIcon</I>, <I>DragMode</I>, 
<I>CausesValidation</I>, <I>TabIndex</I>, 
<I>TabStop</I>, <I>HelpContextID</I>,<I> </I>and 
<I>WhatsThisHelpID</I>.
</p>

<p>The Extender object also provides methods and events of its own. For 
example, the <I>Move</I>, <I>Drag</I>, 
<I>SetFocus</I>, <I>ShowWhatsThis, </I>and <I>ZOrder 
</I>methods are provided by the container (and in fact, all of them are related to Extender properties in one way 
or another), as are the <I>GotFocus</I>, 
<I>LostFocus</I>, <I>Validate</I>, 
<I>DragDrop</I>,<I> </I>and <I>DragOver 
</I>events. The perspective of the programmer who uses the ActiveX control is different from 
the perspective of the control's author, who sees fewer properties, methods, and events.
</p>

<p>
<A HREF="javascript:fullSize('G17ph01x.htm')"> <img src="G17ph01.JPG" width=404 height=214 border=0 ALT = "Click to view at full size."> </A>
</p>

<A NAME="823"><h3>Reading Extender properties</h3></A>
<p>At times, however, you need to access Extender properties from within the 
UserControl module. You can do this by means of the 
<I>Extender </I>property, which returns an object reference to the same Extender interface that's used by the programmer using 
the control. A typical example of why this might be necessary is when you want 
your ActiveX control to display its <I>Name </I>property, as most Visual Basic controls do as 
soon as they're created. To add this feature to the SuperTextBox ActiveX control, you 
simply need a statement in the <I>InitProperties 
</I>event procedure:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_InitProperties()
    On Error Resume Next
    Caption = Extender.Name
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You might wonder why you need an error handler to protect a simple 
assignment like the preceding one. The reason is that you can't anticipate the 
environments in which your ActiveX control will be used, so you have no guarantee that the 
host environment will support the <I>Name </I>property. If it doesn't, the 
<I>Extender.Name </I>reference fails, and the error will prevent developers from using your control in 
those environments. In general, different hosts add different Extender members. Visual 
Basic is probably the most generous environment in terms of Extender properties.
</p>

<p>The Extender object is built at run time by the host environment, so the 
<I>Extender </I>property is defined to return a generic Object. As a result, all the Extender 
members such as <I>Name </I>or <I>Tag </I>are referenced through late binding. This circumstance 
explains why accessing those members tends to slow down the code inside your 
UserControl module and at the same time makes it less robust. Because you can't be sure 
about which members the Extender object will expose at run time, you shouldn't let 
your ActiveX control heavily rely on them, and you should always arrange for your 
control to degrade gracefully when it runs under environments that don't support 
the features you need.
</p>

<p>Finally, keep in mind that a few Extender properties are created only 
under certain conditions. For example, the <I>Align 
</I>and <I>Negotiate </I>properties are exposed 
only if the UserControl's <I>Alignable </I>property is set to True, and the 
<I>Default </I>and <I>Cancel </I>properties exist only if the UserControl's 
<I>DefaultCancel </I>property is True. Likewise, the 
<I>Visible </I>property is unavailable if the <I>InvisibleAtRuntime 
</I>property is True.
</p>

<A NAME="824"><h3>Setting Extender properties</h3></A>

<p>In general, modifying an Extender property from within the UserControl module 
is considered bad programming practice. I found that under Visual Basic 6 all the 
Extender properties can be written to, but this might not be true for other 
environments or for previous versions of Visual Basic itself. In some cases, setting an 
Extender property provides added functionality. For example, see how you can implement 
a method that resizes your ActiveX control to fit its parent form:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Sub ResizeToParent()
    Extender.Move 0, 0, Parent.ScaleWidth, Parent.ScaleHeight
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This routine is guaranteed to work only under Visual Basic because other 
environments might not support the <I>Move </I>Extender method, and also because you 
can't be sure that, if a Parent object actually exists, it also supports the 
<I>ScaleWidth </I>and <I>ScaleHeight </I>properties. If any of the preceding conditions aren't met, this 
method raises an error 438, &quot;Object doesn't support this property or method.&quot;
</p>

<p>From the container's point of view, Extender properties have a higher 
priority than the UserControl's own properties. For example, if the UserControl module 
exposes a <I>Name </I>property, the client code&#8212;at least the client code written in 
Visual Basic&#8212;will actually refer to the Extender property with the same name. For 
this reason, you should carefully pick the names of your custom properties and stay 
clear of those automatically added by the most popular containers, such as Visual 
Basic and the products in the Microsoft Office suite.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>You might intentionally expose properties that are duplicated in the 
Extender object so that users of your ActiveX control can find that property 
regardless of what programming language they're using. For example, you can 
define a <I>Tag </I>property (of type String or Variant) so that your control provides it 
even when it runs in an environment other than Visual Basic.
</blockquote></div>
</p>


<A NAME="825"><h3>The <I>Object </I>property</h3></A>

<p>This visibility rule raises an interesting question: How can the user of the 
ActiveX control directly access its interface and bypass the Extender object? This is 
possible thanks to the <I>Object </I>property, another Extender property that returns a reference 
to the inner UserControl object. This property is sometimes useful to developers 
who are using the ActiveX control, as in this code:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Set the Tag property exposed by the UserControl module.
' Raises an error if such property isn't implemented
SuperTextBox1.Object.Tag = &quot;New Tag&quot;
</pre>
</td></tr>
</table>
</p>

<p>You never need to use the <I>Extender.Object 
</I>property from within the UserControl module because it returns the same object reference as the 
<I>Me </I>keyword.
</p>

<A NAME="826"><h2>The AmbientProperties Object</h2></A>

<p>An ActiveX control often needs to gather information about the form on which it 
has been placed. For example, you might want to adapt your ActiveX control to the 
locale of the user or to the font that's used by the parent form. In some cases, you 
can gather this information using the Extender or Parent object (for example, 
using <I>Parent.Font</I>). But there's a better way.
</p>

<A NAME="827"><h3>Conforming to the parent form settings</h3></A>
<p>The UserControl object's <I>Ambient </I>property returns a reference to the 
AmbientProperties object, which in turn exposes several properties that provide 
information about the environment in which the ActiveX control runs. For example, you can 
find out what font is being used by the parent form using the 
<I>Ambient.Font </I>property, and you can determine which colors have been set for the parent form using 
the <I>Ambient.ForeColor </I>and <I>Ambient.BackColor 
</I>properties. This information is especially useful when you create the control and you want to conform to the parent 
form's current settings. See how you can improve the SuperTextBox control so that it 
behaves like Visual Basic's own controls:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_InitProperties()
    ' Let the label and the text box match the form's font.
    Set CaptionFont = Ambient.Font
    Set Font = Ambient.Font
    ' Let the label's colors match the form's colors.
    CaptionForeColor = Ambient.ForeColor
    CaptionBackColor = Ambient.BackColor
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The AmbientProperties object is provided by the Visual Basic runtime, 
which always accompanies the ActiveX control, rather than by the Extender object, 
which is provided by the host environment. References to the AmbientProperties object 
rely on early binding, and the Visual Basic runtime automatically supplies a default 
value for those properties that aren't available in the environment. This detail has two 
consequences: Ambient properties are faster than Extender properties, and you don't 
need an error handler when referring to an Ambient property. For example, 
the AmbientProperties object exposes a <I>DisplayName 
</I>property, which returns the name that identifies the control in its host environment and lets you initialize the 
caption of your control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_InitProperties()
    Caption = Ambient.DisplayName
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This code should always be preferred to the method based on the 
<I>Extender.Name </I>property because it delivers a reasonable result under any environment and 
doesn't require an <I>On Error</I> statement.
</p>

<p>Another ambient property that you might find useful is 
<I>TextAlign</I>, which indicates the preferred text alignment for the controls on the form. It returns one of 
the following constants: 0-General, 1-Left, 2-Center, 3-Right, 4-FillJustify. If the host 
environment doesn't provide any information about this feature, 
<I>Ambient.TextAlign </I>returns 0-General (text to the left, numbers to the right).
</p>

<p>If your control contains a PictureBox control, you should set its 
<I>Palette </I>property equal to the <I>Ambient.Palette 
</I>property if possible so that the bitmaps on 
your control don't look strange when the PictureBox constituent control doesn't have 
the input focus.
</p>

<A NAME="828"><h3>The <I>UserMode</I> property</h3></A>
<p>The <I>UserMode </I>property is probably the most important Ambient property because 
it lets the author of the ActiveX control know whether the control is being used by 
the developer (<I>UserMode </I>= False) or the user 
(<I>UserMode </I>= True). Thanks to this property, you can enable different behaviors at design time and run time. If you find 
it difficult to remember the meaning of the return value of this property, just recall 
that the &quot;user&quot; in <I>UserMode </I>is the user. See the &quot;<A HREF="#227">Read-Only Properties</A>&quot; section later in 
this chapter for an example that shows how this property can be useful.
</p>

<A NAME="829"><h3>The <I>AmbientChanged</I> event</h3></A>
<p>You can immediately find out when an ambient property changes by trapping 
the <I>AmbientChanged </I>event. This event receives a string argument equal to the name 
of the ambient property being changed. For instance, you can allow the 
<I>BackColor </I>property of your UserControl to automatically match the background color of 
the parent form by writing this code:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AmbientChanged(PropertyName As String)
    If PropertyName = &quot;BackColor&quot; Then BackColor = Ambient.BackColor
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Here's an exception: If you change the parent form's 
<I>FontTransparent </I>or <I>Palette</I> properties, the ActiveX controls on the form don't receive any notification. 
The <I>AmbientChanged </I>event is raised both at design time and at run time, so you 
might need to use the <I>Ambient.UserMode </I>property to differentiate between the two cases.
</p>

<p>The <I>AmbientChanged </I>event is most important within user-drawn controls 
that expose a <I>Default </I>property. These controls must repaint themselves when the 
value of this property changes:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AmbientChanged(PropertyName As String)
    If PropertyName = &quot;DisplayAsDefault&quot; Then Refresh
End Sub 
</pre>
</td></tr>
</table>
</p>

<A NAME="830"><h3>Localizing ActiveX controls</h3></A>
<p>The <I>Ambient.LocaleID </I>property returns a Long value that corresponds to the 
locale of the program that's hosting the ActiveX control. This value lets you display 
localized messages in the language of the user&#8212;for example, by loading them from a 
string table, a resource file, or a satellite DLL. But you must account for some rough edges.
</p>

<p>When you compile your application, the Visual Basic locale becomes the 
default locale for the application. But the application that's hosting the control 
might automatically adapt itself to the language of the user and change its locale 
accordingly. Inside the <I>Initialize </I>event procedure of the UserControl, the siting 
procedure hasn't completed yet, so the value returned by the 
<I>LocaleID </I>ambient property reflects the default locale of the Visual Basic version that compiled it. For this reason, if 
you want to use this property to load a table of localized messages, you should 
follow this schema:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_Initialize()
    ' Load messages in the default (Visual Basic's) locale.
    LoadMessageTable Ambient.LocaleID
End Sub    

Private Sub UserControl_InitProperties()
    ' Load messages in the user's locale.
    LoadMessageTable Ambient.LocaleID
End Sub

Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
    ' Load messages in the user's locale.
    LoadMessageTable Ambient.LocaleID
End Sub

Private Sub UserControl_AmbientChanged(PropertyName As String)
    ' Load messages in the new user's locale.
    If PropertyName = &quot;LocaleID&quot; Then LoadMessageTable Ambient.LocaleID 
End Sub

Private Sub LoadMessageTable(LocaleID As Long)
    ' Here you load localized strings and resources.
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You need to load the message in both the <I>InitProperties 
</I>and <I>ReadProperties </I>event procedures because the former is invoked when the control is first placed 
on the form's surface, whereas the latter is invoked any time the project is reopened 
or the application is executed.
</p>

<A NAME="831"><h3>Other ambient properties</h3></A>

<p>The <I>Ambient.ScaleMode </I>property returns a string corresponding to the unit 
measure currently used in the container form (for example, 
<I>twip</I>). This value might be useful within messages to the user or the developer. For a way to easily convert from 
the form's and UserControl's units, see the section &quot;<A HREF="#837">Converting Scale Units</A>.&quot;
</p>

<p>The <I>Ambient.DisplayAsDefault </I>property is useful only within user-drawn 
controls whose <I>DefaultCancel </I>property is True. These controls must display a 
thicker border when their <I>Default </I>extender property becomes True. You usually trap 
changes to this property in the <I>AmbientChanged 
</I>event.
</p>

<p>The <I>Ambient.SupportsMnemonics </I>property returns True if the 
environment supports hot keys, such as those that you indicate in a 
<I>Caption </I>property using the ampersand character. Most containers support this feature, but you can improve 
the portability of your control if you test this property in the 
<I>Show </I>event procedure and filter out ampersand characters in your captions if you find that the 
environment doesn't support hot keys.
</p>

<p>The <I>Ambient.RightToLeft </I>property specifies whether the control should 
display text from right to left, as it might be necessary under Hebrew or Arabic 
versions of Windows. All the remaining ambient properties&#8212;namely, 
<I>MessageReflect</I>, <I>ShowGrabHandles</I>, 
<I>ShowHatching</I>, and <I>UIDead&#8212;</I>are of no practical use with 
controls developed with Visual Basic and can be safely ignored.
</p>

<A NAME="832"><h2>Implementing Features</h2></A>
<p>The UserControl object exposes many properties, methods, and events that have 
no equivalent in form modules. In this section, I describe most of them and briefly 
hint at items that I examine in depth later in the chapter.
</p>

<A NAME="833"><h3>Managing the input focus</h3></A>
<p>Understanding how UserControl objects manage the input focus can be a 
nontrivial task. Several events are related to input focus:
</p>

<UL>
<p><li> The UserControl object's <I>GotFocus 
</I>and <I>LostFocus </I>events. These events can fire only if the UserControl doesn't contain any constituent controls 
that can get the input focus (typically, a user-drawn UserControl). In 
most cases, you don't have to write any code for these events.
</li></p>
<p><li> The constituent controls' <I>GotFocus 
</I>and <I>LostFocus </I>events. These events fire when the focus enters or exits a constituent control.
</li></p>
<p><li> The UserControl's <I>EnterFocus </I>and 
<I>ExitFocus </I>events. These events fire when the input focus enters or exits the UserControl as a whole but 
don't fire when the focus moves from one constituent control to another.
</li></p>
<p><li> The Extender's <I>GotFocus </I>and 
<I>LostFocus </I>events. These are the events that an ActiveX control activates in its container application.
</li></p>
</UL>

<p>The simplest way to see what actually happens at run time is to create a 
trace of all the events as they occur when the user visits the constituent controls by 
pressing the Tab key. I created a simple UserControl named 
<I>MyControl1</I> with two TextBox constituent controls on it&#8212;named 
<I>Text1 </I>and <I>Text2&#8212;</I>and then added 
<I>Debug.Print </I>statements in all the event procedures related to focus management. This is what 
I found in the Immediate window (with some remarks manually added later):
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>UserControl_EnterFocus   ' The user has tabbed into the control.
MyControl1_GotFocus
Text1_GotFocus
Text1_Validate           ' The user has pressed the Tab key a second time.
Text1_LostFocus
Text2_GotFocus
MyControl1_Validate      ' The user has pressed the Tab key a third time.
Text2_LostFocus
UserControl_ExitFocus
MyControl1_LostFocus
...                      ' The user has pressed Tab several times
UserControl_EnterFocus   ' until the focus reenters the UserControl
MyControl1_GotFocus      ' and the sequence is repeated.
Text1_GotFocus
</pre>
</td></tr>
</table>
</p>

<p>As you see, the UserControl object gets an <I>EnterFocus 
</I>just before the ActiveX control raises a <I>GotFocus 
</I>event in its parent form. Similarly, the UserControl 
receives an <I>ExitFocus </I>one instant before the ActiveX control raises a 
<I>LostFocus </I>in the form.
</p>

<p>When the focus shifts from one constituent control to another, the control 
that loses the focus receives a <I>Validate </I>event, but this doesn't happen when the 
focus leaves the UserControl module. To force the 
<I>Validate </I>event of the last control in the UserControl, you must explicitly call the 
<I>ValidateControls </I>method in the 
UserControl's <I>ExitFocus</I>, which isn't really intuitive. If the ActiveX control includes several 
controls, it sometimes doesn't make sense to validate them individually in their 
<I>Validate </I>events. Moreover, if you use the 
<I>ValidateControls </I>method, you might incorrectly force 
the validation of a constituent control when the form is being closed (for example, 
when the user presses Cancel). For all these reasons, it's much better to validate the 
contents of a multifield ActiveX control only upon a request from the parent form, or 
more precisely, in the <I>Validate </I>event that the ActiveX control raises in the parent form. 
If the control is complex, you might simplify the life of programmers by providing 
a method that performs the validation, as in the following piece of code:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MyControl1_Validate(Cancel As Boolean)
    If MyControl1.CheckSubFields = False Then Cancel = True
End Sub
</pre>
</td></tr>
</table>
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>The Visual Basic documentation omits an important detail about 
focus management inside ActiveX controls with multiple constituent controls. If 
the ActiveX control is the only control on the form that can receive the focus and 
the user presses the Tab key on the last constituent control, the focus won't 
automatically shift on the first constituent control as the user would expect. So to 
have such an ActiveX control behave normally, you should add at least one 
other control on the form. If you don't want to display another control, you should 
resort to the following trick: Create a CommandButton (or any other control 
that can get the focus), move it out of sight using a large negative value for the 
<I>Left </I>or <I>Top </I>property, and then add these statements in its 
<I>GotFocus </I>event procedure:

<p>
<table><tr><td>
<pre>Private Sub Command1_GotFocus()
    MyControl1.SetFocus   ' Manually move the focus
                          ' to the ActiveX control.
End Sub
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<A NAME="834"><h3>Invisible controls</h3></A>
<p>The <I>InvisibleAtRuntime </I>property permits you to create controls that are visible 
only at design time, as are the Timer and CommonDialog controls. When 
the <I>InvisibleAtRuntime </I>property is True, the Extender object doesn't expose the 
<I>Visible </I>property. You usually want the controls to have a fixed size at design time, and you 
ensure this result by using the <I>Size </I>method in the UserControl's 
<I>Resize </I>event:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_Resize()
    Static Active As Boolean
    If Not Active Then Exit Sub        ' Avoid nested calls.
    Active = True
    Size 400, 400
    Active = False
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="835"><h3>Hot keys</h3></A>
<p>If your ActiveX control includes one or more controls that support the 
<I>Caption </I>property, you can assign each of them a hot key using the ampersand character, as 
you would do in a regular Visual Basic form. Such hot keys work as you expect, even 
if the input focus isn't currently on the ActiveX control. As an aside, keep in mind 
that it's considered bad programming practice to provide an ActiveX control with 
fixed captions, both because they can't be localized and because they might conflict 
with other hot keys defined by other controls on the parent form.
</p>

<p>If your ActiveX control doesn't include a constituent control with a 
<I>Caption </I>property, your control responds to the hot keys assigned to the 
<I>AccessKeys </I>property. For example, you might have a user-drawn control that exposes a 
<I>Caption </I>property and you want to activate it if the user types the 
Alt+<I>char</I> key combination, where <I>char 
</I>is the first character in the <I>Caption</I>. In this circumstance, you must assign 
the <I>AccessKeys </I>property in the <I>Property Let 
</I>procedure as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Property Let Caption(New_Caption As String)
    m_Caption = New_Caption
    PropertyChanged &quot;Caption&quot;
    AccessKeys = Left$(New_Caption, 1)
End Property
</pre>
</td></tr>
</table>
</p>

<p>When the user presses a hot key, an <I>AccessKeyPressed 
</I>event fires in the UserControl module. This event receives the code of the hot key, which is 
necessary because you can associate multiple hot keys with the ActiveX control by assigning 
a string of two or more characters to the <I>AccessKeys 
</I>property:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AccessKeyPress(KeyAscii As Integer)
    ' User pressed the Alt + Chr$(KeyAscii) hot key.
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can create ActiveX controls that behave like Label controls by setting 
the <I>ForwardFocus </I>property to True. When the control gets the input focus, it 
automatically moves it to the control on the form that comes next in the TabIndex order. 
If the <I>ForwardFocus </I>property is True, the UserControl module doesn't receive 
the <I>AccessKeyPress </I>event.
</p>

<A NAME="836"><h3>Accessing the parent's controls</h3></A>
<p>An ActiveX control can access other controls on its parent form in two distinct 
ways. The first approach is based on the Controls collection of the Parent object, as this 
code example demonstrates:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Enlarge or shrink all controls on the parent form except this one.
Sub ZoomControls(factor As Single)
    Dim ctrl As Object
    For Each ctrl In Parent.Controls
        If Not (ctrl Is Extender) Then
            ctrl.Width = ctrl.Width * factor
            ctrl.Height = ctrl.Height * factor
        End if
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The items in the Parent.Controls collection are all Extender objects, so if 
you want to sort out the ActiveX control that's running the code you must compare 
each item with the <I>Extender </I>property, not with the 
<I>Me </I>keyword. The problem with this approach is that it works only under Visual Basic (more precisely, only under 
environments for which there is a Parent object that exposes the Controls collection).
</p>

<p>The second approach is based on the <I>ParentControls 
</I>property. Unlike the Parent.Controls<I> </I>collection, this property is guaranteed to work with all containers. 
The items in the Parent.Controls collection contain the parent form itself, but you can 
easily filter it out by comparing each reference with the 
Parent<I> </I>object (if there is one).
</p>

<A NAME="837"><h3>Converting scale units</h3></A>
<p>In the interaction with the container application, the code in the ActiveX control 
often has to convert values from the UserControl's coordinate system to the parent 
form's system by using the <I>ScaleX </I>and <I>ScaleY 
</I>methods. This is especially necessary in mouse events, where the container expects that the 
<I>x </I>and <I>y </I>coordinates of the mouse are measured in its current 
<I>ScaleMode</I>. While you can use the <I>Parent.ScaleMode 
</I>property to retrieve a Visual Basic form's 
<I>ScaleMode</I>, this approach fails if the control 
is running inside another container&#8212;for example, Internet Explorer. Fortunately, 
the <I>ScaleX </I>and <I>ScaleY </I>methods also support the vbContainerPosition constant:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Forward the MouseDown event to the container, but convert measure units.
Private Sub UserControl_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    RaiseEvent MouseDown(Button, Shift, _
        ScaleX(X, vbTwips, vbContainerPosition), _
        ScaleY(Y, vbTwips, vbContainerPosition))
End Sub
</pre>
</td></tr>
</table>
</p>

<p>When you're raising mouse events from within a constituent control, things 
are a bit more complicated because you also need to keep the control's offset from 
the upper left corner of the UserControl's surface:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Private Sub Text1_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    RaiseEvent MouseDown(Button, Shift, _
        ScaleX(Text1.Left + X, vbTwips, vbContainerPosition), _
        ScaleY(Text1.Top + Y, vbTwips, vbContainerPosition))
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>ScaleX </I>and <I>ScaleY </I>methods support an additional enumerated 
constant, vbContainerSize, that you should use when converting a size value (as opposed 
to a coordinate value). The vbContainerPosition and vbContainerSize constants 
deliver different results only when the container uses a custom 
<I>ScaleMode</I>. The ActiveX Control Interface Wizard doesn't address these subtleties, and you must manually 
edit the code that it produces.
</p>

<A NAME="838"><h3>Other properties</h3></A>
<p>If the <I>Alignable </I>property is True, the ActiveX control&#8212;more precisely, its 
Extender object&#8212;exposes the <I>Align </I>property. Similarly, you should set 
<I>DefaultCancel </I>to True if the control has to expose the 
<I>Default </I>and <I>Cancel </I>properties. This setting is 
necessary when the ActiveX control should behave like a standard CommandButton 
and works only if <I>ForwardFocus </I>is False. If the ActiveX control's 
<I>Default </I>property is True and the user presses Enter, the click will be received by the constituent control 
whose <I>Default </I>property is also True. If there aren't any constituent 
controls that support the <I>Default </I>or <I>Cancel 
</I>properties, you can trap the Enter or Escape key in 
the <I>AccessKeyPress </I>event.
</p>

<p>If the <I>CanGetFocus </I>is False, the UserControl itself can't get the input focus 
and the ActiveX control won't expose the <I>TabStop 
</I>property. You can't set this property to False if one or more constituent controls can receive the focus. The opposite 
is also true: You can't place constituent controls that can receive the focus on a 
UserControl whose <I>CanGetFocus </I>property is False.
</p>

<p>The <I>EventsFrozen </I>property is a run-time property that returns True when 
the parent form ignores events raised by the UserControl object. This happens, for 
instance, when the form is in design mode. At run time, you can query this 
property to find out whether your <I>RaiseEvent 
</I>commands will be ignored so that you can 
decide to postpone them. Unfortunately, there's no safe way to find out when the 
container is again ready to accept events, but you can learn when a paused program has 
restarted by watching for a change in the <I>UIDead 
</I>property in the <I>AmbientChanged </I>event.
</p>

<p>You can create controls that can be edited at design time by setting 
the <I>EditAtDesignTime </I>property to True. You can right-click on such controls at 
design time and select the Edit command to enter edit mode. While the control is in 
edit mode, it reacts exactly as it does at run time although it doesn't raise events in 
its container. (The <I>EventsFrozen </I>property returns True.) You exit edit mode when 
you click anywhere on the form outside the control. In general, writing a control that 
can be edited at design time isn't a simple task: for example, you must account for 
all the properties that aren't available at design time and that raise an error if used 
when <I>Ambient.UserMode </I>returns False.
</p>

<p>The <I>ToolboxBitmap </I>property lets you assign the image that will be used in 
the Toolbox window. You should use 16-by-15-pixel bitmaps, but bitmaps of 
different size are automatically scaled. You shouldn't use icons because they don't scale 
well to that dimension. The lower left pixel in the bitmap defines its transparent color.
</p>

<p>The <I>ContainerHwnd </I>property is available only through code and returns 
the Windows handle of the ActiveX control's container. If the control is hosted in 
a Visual Basic program, this property corresponds to the value returned by 
the <I>Extender.Container.hWnd </I>property.
</p>

<p>The UserControl object exposes a few other properties, which let you 
create windowless controls, container controls, and transparent controls. I'll cover them 
later in this chapter.
</p>


<a name="A109"></a><h3>8.2.3 Refining the ActiveX Control</h3>

<A HREF="#A108">[Previous]</A> <A HREF="#A110">[Next]</A><P>

<A NAME="839"><h1>Refining the ActiveX Control</h1></A>
<p>Adding a UserControl object to the current project and placing some 
constituent controls on it is just the first step toward the creation of a full-fledged, 
commercial-quality ActiveX control. In this section, I'll show you how to implement a robust 
user interface, add binding capabilities and property pages, create user-drawn 
controls, and prepare your controls for the Internet.
</p>

<A NAME="840"><h2>Custom Properties</h2></A>
<p>You've already seen how you can add custom properties using pairs of property 
procedures. This section explains how to implement some special types of properties.
</p>

<A NAME="841"><h3>Design-time and run-time properties</h3></A>
<p>Not all properties are available both at design time and at run time, and it's 
interesting to see how you write the code in the UserControl module to limit the 
visibility of properties. The easiest way to create a run time-only property, such as the 
<I>SelText </I>property of a TextBox or the <I>ListIndex 
</I>property of a ListBox, is by ticking the Don't Show In Property Browser option in the Attributes section of the Procedure 
Attributes dialog box. (You can access this dialog box by choosing it from the Tools menu.) 
If this check box is selected, the property doesn't appear in the Properties window 
at design time.
</p>

<p>The problem with this simple approach, however, is that it also hides the 
property in the other property browser that Visual Basic provides, namely the Locals 
window. To have the property listed in the Locals window at run time but not in 
the Properties window, you must raise an error in the 
<I>Property Get </I>procedure at design time, as this code demonstrates:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get SelText() As String
    If Ambient.UserMode = False Then Err.Raise 387
    SelText = Text1.SelText
End Property
</pre>
</td></tr>
</table>
</p>

<p>Error 387 &quot;Set not permitted&quot; is the error that by convention you should 
raise in this case, but any error will do the trick. If Visual Basic&#8212;or more generally, 
the host environment&#8212;receives an error when reading a value at design time, the 
property isn't displayed in the properties browser, which is precisely what you want. 
Creating a property that's unavailable at design time and read-only at run time is 
even simpler because you need merely to omit the 
<I>Property Let </I>procedure, as you would do with any read-only property. Visual Basic doesn't show such a property in 
the Properties window because it couldn't be modified in any way.
</p>

<p>Another common situation concerns properties that are available at design 
time and read-only at run time. This is similar to the 
<I>MultiLine </I>and <I>ScrollBars </I>properties of the Visual Basic TextBox control. You can implement such properties by 
raising Error 382 &quot;Set not supported at runtime&quot; in their 
<I>Property Let </I>procedures, as shown in the following code:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' This property is available at design time and read-only at run time.
Public Property Get ScrollBars() As Integer
    ScrollBars = m_ScrollBars 
End Property
Public Property Let ScrollBars(ByVal New_ScrollBars As Integer)
    If Ambient.UserMode Then Err.Raise 382
    m_ScrollBars = New_ScrollBars
    PropertyChanged &quot;ScrollBars&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>When you have design-time properties that are read-only at run time, you 
can't call the <I>Property Let </I>procedure from within the 
<I>ReadProperties </I>event procedure because you would get an error. In this case, you're forced to directly assign the 
private member variable or the constituent control's property, or you have to 
provide a module-level Boolean variable that you set to True on entering the 
<I>ReadProperties </I>event and reset to False on exit. You then query this variable before raising errors 
in the <I>Property Let </I>procedure. You can also use the same variable to skip an 
unnecessary call to the <I>PropertyChanged </I>method, as in this code example:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let ScrollBars(ByVal New_ScrollBars As Integer)
    ' The ReadingProperties variable is True if this routine is being
    ' called from within the ReadProperties event procedure.
    If Ambient.UserMode <B>
And Not ReadingProperties </B>Then Err.Raise 382
    m_ScrollBars = New_ScrollBars
    <B>If Not ReadingProperties Then </B>
PropertyChanged &quot;ScrollBars&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<A NAME="842"><h3>Enumerated properties</h3></A>
<p>You can define enumerated properties using either 
<I>Enum </I>blocks in code or Visual Basic's own enumerated types. For example, you can modify the code produced 
by the wizard and improve the <I>MousePointer </I>property as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get MousePointer() <B>As MousePointerConstants</B>
    MousePointer = Text1.MousePointer
End Property
Public Property Let MousePointer(ByVal New_MousePointer _
    <B>As MousePointerConstants</B>)
    Text1.MousePointer() = New_MousePointer
    PropertyChanged &quot;MousePointer&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>Enumerated properties are useful because their valid values appear in the 
Properties window in a combo box, as shown in Figure 17-6. Keep in mind, however, that you should always protect your ActiveX control from invalid assignments in 
code, so the previous routine should be rewritten as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let MousePointer(ByVal New_MousePointer _
    As MousePointerConstants)
    Select Case New_MousePointer
        Case vbDefault To vbSizeAll, vbCustom
            Text1.MousePointer() = New_MousePointer
            PropertyChanged &quot;MousePointer&quot;
        Case Else
            Err.Raise 380   ' Invalid Property Value error
    End Select
End Property
</pre>
</td></tr>
</table>
</p>

<p>
<img src="F17ph06.GIF" width=337 height=337 border="0">
<p>
<!--caption--><B>Figure 17-6.</B> <i>Use enumerated properties to offer a list of valid values in the Properties window.</i><!--/caption-->

<p>There's a good reason for not defining properties and arguments using 
Visual Basic and VBA enumerated constants, though: If you use the control with 
environments other than Visual Basic, these symbolic constants won't be visible to the 
client application.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>Sometimes you might want to add spaces and other symbols inside 
an enumerated value to make it more readable in the Properties window. For 
example, the <I>FillStyle </I>property includes values such as 
<I>Horizontal Line </I>or <I>Diagonal Cross</I>. To expose similar values in your ActiveX controls, you have to 
enclose Enum constants within square brackets, as in the following code:

<p>
<table><tr><td>
<pre>Enum MyColors
    Black = 1
    [Dark Gray]
    [Light Gray]
    White 
End Enum
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>Here's another idea that you might find useful: If you use an 
enumerated constant name whose name begins with an underscore, such as 
<I>[_HiddenValue]</I>, this value won't appear by default in the Object Browser. However, this 
value does appear in the Properties window, so this trick is especially useful for 
enumerated properties that aren't available at design time.

</blockquote></div>
</p>

<A NAME="843"><h3>Picture and Font properties</h3></A>
<p>Visual Basic deals in a special way with properties that return a Picture or Font 
object. In the former instance, the Properties window shows a button that lets you 
select an image from disk; in the latter, the Properties window includes a button that 
displays a Font common dialog box.
</p>

<p>When working with Font properties, you should keep in mind that they 
return object references. For example, if two or more constituent controls have been 
assigned the same Font reference, changing a font attribute in one of them also changes 
the appearance of all the others. For this reason, 
<I>Ambient.Font </I>returns a copy of the parent form's font so that any subsequent change to the form's font doesn't 
affect the UserControl's constituent controls, and vice versa. (If you want to keep your 
control's font in sync with the form's font, you simply need to trap 
the <I>AmbientChanged </I>event.) Sharing object references can cause some subtle errors in your code. Consider 
the following example:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Case 1: Label1 and Text1 use fonts with identical attributes.
Set Label1.Font = Ambient.Font
Set Text1.Font = Ambient.Font

' Case 2: Label1 and Text1 point to the *same* font.
Set Label1.Font = Ambient.Font
Set Text1.Font = Label1.Font
</pre>
</td></tr>
</table>
</p>

<p>The two pieces of code look similar, but in the first instance the two 
constituent controls are assigned different copies of the same font, so you can change 
the font attributes of one control without affecting the other. In the latter case, 
both controls are pointing to the same font, so each time you modify a font attribute 
in either control the other one is affected as well.
</p>

<p>It's a common practice to provide all the alternate, old-styled 
<I>Font</I>xxxx properties, namely <I>FontName</I>, 
<I>FontSize</I>, <I>FontBold</I>, 
<I>FontItalic</I>, <I>FontUnderline</I>, and 
<I>FontStrikethru</I>. But you should also make these properties unavailable at design 
time, and you shouldn't save them in the <I>WriteProperties 
</I>event if you also save the <I>Font </I>object. If you decide to save individual 
<I>Font</I>xxxx properties, it's important that 
you retrieve them in the correct order (first 
<I>FontName</I>, and then all the others).
</p>

<p>One more thing to keep in mind when dealing with font properties: You 
can't restrict the choices of the programmer who's using the control to a family of 
fonts&#8212; for example, to nonproportional fonts or to printer fonts&#8212;if the 
<I>Font</I> property is exposed in the Properties window. The only way to restrict font selection is to show 
a Font Common Dialog box from a Property Page. See the &quot;<A HREF="#862">Property Pages</A>&quot; 
section later in this chapter for details about building property pages.
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Font properties pose a special challenge to ActiveX control programmers. If 
your control exposes a <I>Font</I> property and the client code modifies one or more font 
attributes, Visual Basic calls the <I>Property Get Font 
</I>procedure but not the <I>Property Set Font 
</I>procedure. If the <I>Font </I>property delegates to a single constituent control, this 
isn't usually a problem because the control's appearance is correctly updated. Things 
are different in user-drawn ActiveX controls because in this case your control gets 
no notification that it should be repainted. This problem has been solved in Visual 
Basic 6 with the <I>FontChanged </I>event of the 
StdFont<I> </I>object. Here's a fragment of 
code taken from a Label-like, user-drawn control that correctly refreshes itself when 
the client modifies an attribute of the <I>Font 
</I>property:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private WithEvents UCFont As StdFont

Private Sub UserControl_InitProperties()
    ' Initialize the Font property (and the UCFont object).
    Set Font = Ambient.Font
End Sub

Public Property Get Font() As Font
    Set Font = UserControl.Font
End Property
Public Property Set Font(ByVal New_Font As Font)
    Set UserControl.Font = New_Font
    Set UCFont = New_Font         ' Prepare to trap events.
    PropertyChanged &quot;Font&quot;
    Refresh                       ' Manually perform the first refresh.
End Property

' This event fires when the client code changes a font's attribute.
Private Sub UCFont_FontChanged(ByVal PropertyName As String)
    Refresh                       ' This causes a Paint event.
End Sub
' Repaint the control.
Private Sub UserControl_Paint()
    Cls
    Print Caption;
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="844"><h3>Object properties</h3></A>

<p>You can create ActiveX controls with properties that return objects, such as 
a TreeView-like control that exposes a Nodes collection. This is possible 
because ActiveX control projects can include PublicNotCreatable classes, so your control can 
internally create them using the New operator and return a reference to its clients through 
a read-only property. Object properties can be treated as if they were regular 
properties in most circumstances, but they require particular attention when you need to 
make them persistent and reload them in the <I>WriteProperties 
</I>and <I>ReadProperties </I>procedures.
</p>

<p>Even if Visual Basic 6 does support persistable classes, you can't save 
objects that aren't creatable, as in this case. But nothing prevents you from manually 
creating a PropertyBag object and loading it with all the properties of the dependent 
object. Let me demonstrate this technique with an example.
</p>

<p>Suppose that you have an AddressOCX ActiveX control that lets the user 
enter a person's name and address, as shown in Figure 17-7. Instead of many 
properties, this AddressOCX control exposes one object property, named 
<I>Address</I>, whose class is defined inside the same project. Rather than having the main UserControl 
module save and reload the individual properties of the dependent object, you should 
create a Friend property in the PublicNotCreatable class. I usually call this 
property <I>AllProperties</I> because it sets and returns the values of all the properties in one 
Byte array. To serialize the properties into an array, I use a private stand-alone 
PropertyBag object. Following is the complete source code of the Address class module. (For 
the sake of simplicity, properties are implemented as Public variables.)
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' The Address.cls class module
Public Name As String, Street As String
Public City As String, Zip As String, State As String

Friend Property Get AllProperties() As Byte()
    Dim PropBag As New PropertyBag
    PropBag.WriteProperty &quot;Name&quot;, Name, &quot;&quot;
    PropBag.WriteProperty &quot;Street&quot;, Street, &quot;&quot;
    PropBag.WriteProperty &quot;City&quot;, City, &quot;&quot;
    PropBag.WriteProperty &quot;Zip&quot;, Zip, &quot;&quot;
    PropBag.WriteProperty &quot;State&quot;, State, &quot;&quot;
    AllProperties = PropBag.Contents
End Property
Friend Property Let AllProperties(value() As Byte)
    Dim PropBag As New PropertyBag
    PropBag.Contents = value()
    Name = PropBag.ReadProperty(&quot;Name&quot;, &quot;&quot;)
    Street = PropBag.ReadProperty(&quot;Street&quot;, &quot;&quot;)
    City = PropBag.ReadProperty(&quot;City&quot;, &quot;&quot;)
    Zip = PropBag.ReadProperty(&quot;Zip&quot;, &quot;&quot;)
    State = PropBag.ReadProperty(&quot;State&quot;, &quot;&quot;)
End Property
</pre>
</td></tr>
</table>
</p>

<p>Rather than saving and reloading all the individual properties in the 
<I>WriteProperties </I>and <I>ReadProperties </I>event procedures of the main AddressOCX module, you simply 
save and restore the <I>AllProperties </I>property of the Address object.
</p>

<p>
<A HREF="javascript:fullSize('F17ph07x.htm')"> <img src="F17ph07.JPG" width=404 height=206 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-7.</B> <i>An AddressOCX ActiveX control that exposes each of the Address properties as an individual Address, PublicNotCreatableobject.</i><!--/caption-->
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' The AddressOCX code module (partial listing)
Dim m_Address As New Address

Public Property Get Address() As Address
    Set Address = m_Address
End Property
Public Property Set Address(ByVal New_Address As Address)
    Set m_Address = New_Address
    PropertyChanged &quot;Address&quot;
End Property

Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
    m_Address.AllProperties = PropBag.ReadProperty(&quot;Address&quot;)
End Sub

Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
    Call PropBag.WriteProperty(&quot;Address&quot;, m_Address.AllProperties)
End Sub
</pre>
</td></tr>
</table>
</p>

<p>All the individual constituent controls must refer to the corresponding 
property in the Address object. For example, this is the code in the 
<I>Change </I>event procedure of the txtName control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtName_Change()
    Address.Name = txtName
    PropertyChanged &quot;Address&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The ActiveX control should also expose a <I>Refresh 
</I>method that reloads all the values from the Address object into the individual fields. Alternatively, you 
might implement an event that the Address object raises in the AddressOCX module 
when any of its properties is assigned a new value. This problem is similar to the one 
I described in the &quot;<A HREF="#381">Forms as Object Viewers</A>&quot; section of Chapter 9.
</p>

<A NAME="845"><h3>Properties that return UDTs</h3></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>ActiveX controls can expose properties and methods that return user-defined 
types or that accept UDTs as arguments. Because ActiveX controls are in-process 
COM components, you can always marshal UDTs regardless of the operating system 
version. For more details, see the &quot;<A HREF="#735">Passing Data Between Applications</A>&quot; section of Chapter 16.
</p>

<p>This feature hasn't been completely ironed out, however. You can't use a 
property that returns a UDT in a <I>With </I>block without crashing the Visual Basic 
environment. I hope this bug will be fixed in a future service pack.
</p>

<A NAME="846"><h3>Special OLE data types </h3></A>
<p>Properties can also return a few special data types. For example, the Wizard 
declares all the color properties using the OLE_COLOR type, as in this code:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get BackColor() <B>As OLE_COLOR</B>
    BackColor = Text1.BackColor
End Property
</pre>
</td></tr>
</table>
</p>

<p>When a property is declared as returning an OLE_COLOR value, 
programmers can pick its value from a palette of colors in the Properties window, exactly as 
they can with the <I>ForeColor </I>and <I>BackColor 
</I>properties of Visual Basic's own controls. For any other purpose, an OLE_COLOR property is treated internally as a Long.
</p>

<p>Visual Basic supports three other special data types:
</p>

<UL>
<p><li> OLE_TRISTATE is used for CheckBox-like controls that can be in 
three states. This enumerated property can return the values 
0-Unchecked, 1Checked, and 2-Gray.
</li></p>
<p><li> OLE_OPTEXCLUSIVE is used for OptionButton-like controls. When 
you build an ActiveX control that must behave like an OptionButton, 
you should have it expose a <I>Value </I>property of type OLE_OPTEXCLUSIVE 
and make it the default property for the control. The container ensures 
that when the <I>Value </I>property of one control in a group is assigned the 
True value, the <I>Value </I>properties of all other controls in the group are 
automatically set to False. (You need to call the 
<I>PropertyChanged</I> method in the property's 
<I>Property Let </I>procedure to have this mechanism work correctly.)
</li></p>
<p><li> OLE_CANCELBOOL is used for the <I>Cancel 
</I>argument in event declarations when you want to give clients the opportunity to cancel the 
event notification.
</li></p>
</UL>
 
<A NAME="847"><h3>Procedure IDs</h3></A>
<p>A few ActiveX control properties have special meanings. You define such 
special properties by assigning specific procedure IDs in the Advanced section of the 
Procedure Attributes dialog box.
</p>

<p>As I already explained in the &quot;<A HREF="#243">Attributes</A>&quot; section of Chapter 6, you can 
make a property or a method the default member of a class by typing 
<I>0 </I>(zero) or by selecting the (default) option from the list in the Procedure ID field. An OLE_
OPTEXCLUSIVE property must be the default property to have the ActiveX 
control correctly behave like an OptionButton control.
</p>

<p>If you have a <I>Text </I>or <I>Caption </I>property, you should assign it the Text or 
Caption procedure ID, respectively. These settings make these properties behave as 
they do in Visual Basic: When the programmer types their values in the Properties 
window, the control is immediately updated. Behind the scenes, the Properties 
window calls the <I>Property Let</I> procedure at each key press instead of calling it only when 
the programmer presses the Enter key. You can use these procedure IDs for any 
property, regardless of its name. However, your control can't have more than two 
properties that behave in this way.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>Because you can select only one item in the procedure ID field, it 
seems to be impossible to duplicate the behavior of Visual Basic's TextBox and 
Label controls, which expose a <I>Text </I>or <I>Caption 
</I>property that's immediately updated by the Properties window and is the default property at the same time. You 
can work around this problem by defining a hidden property, make it the default 
property, and have it delegate to the <I>Text </I>or 
<I>Caption</I> property:

<p>
<table><tr><td>
<pre>' Make this property the default property, and hide it.
Public Property Get Text_() As String
    Text_ = Text
End Property

Public Property Let Text_(ByVal newValue As String)
    Text = newValue
End Property
</pre>
</td></tr>
</table>
</p>

</blockquote></div>
</p>

<p>You should assign the Enabled procedure ID to the 
<I>Enabled </I>property of your ActiveX control so that it works correctly. This is a necessary step because the 
<I>Enabled </I>property behaves differently from any other property. When you disable a form, 
the form also disables all its controls by setting their Extender's 
<I>Enabled </I>property to False (so that controls appear disabled to the running code), but without setting their 
inner <I>Enabled </I>properties to False (so that controls repaint themselves as if they 
were enabled). To have Visual Basic create an Extender's 
<I>Enabled</I> property, your UserControl module must expose a Public 
<I>Enabled </I>property marked with the Enabled procedure ID:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get Enabled() As Boolean
    Enabled = Text1.Enabled
End Property

Public Property Let Enabled(ByVal New_Enabled As Boolean)
    Text1.Enabled() = New_Enabled
    PropertyChanged &quot;Enabled&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>The ActiveX Control Interface Wizard correctly creates the delegation code, 
but you have to assign the Enabled procedure ID manually.
</p>

<p>Finally, you can create an About dialog box for displaying copyright 
information about your control by adding a Public 
<I>Sub</I> in its UserControl module and assigning the AboutBox procedure ID to it:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Sub ShowAboutBox()
    MsgBox &quot;The SuperTextBox control&quot; &amp; vbCr _
        &amp; &quot;(C) 1999 Francesco Balena&quot;, vbInformation
End Sub
</pre>
</td></tr>
</table>
</p>

<p>When the ActiveX control exposes a method with this procedure ID, an 
(About)<I> </I>item appear in the Properties window. It's common practice to hide this item so 
that programmers aren't encouraged to call it from code.
</p>

<A NAME="848"><h3>The Procedure Attributes dialog box</h3></A>
<p>A few more fields in the Procedure Attributes dialog box are useful for 
improving the friendliness of your ActiveX controls. Not one of these setting affects the 
functionality of the control.
</p>

<p>I've already described the Don't Show In Property Browser field in the 
&quot;<A HREF="#841">Design-Time and Run-Time Properties</A>&quot; section earlier in this chapter. When this check 
box is selected, the property won't appear in the Properties window at design time or 
in the Locals window at run time.
</p>

<p>The Use This Page In The Property Browser combo box lets you associate 
the property with one generic property page provided by Visual Basic 
(namely StandardColor, StandardDataFormat, StandardFont, and StandardPicture) or with 
a property page that's defined in the ActiveX control project. When a property is 
associated with a property page, it appears in the Properties window with a 
button that, when clicked, brings up the property page. Property pages are described 
later in this chapter.
</p>

<p>Use the Property Category field to select the category under which you 
want the property to appear in the Categorized tab of the Properties window. Visual 
Basic provides several categories&#8212;Appearance, Behavior, Data, DDE, Font, List, 
Misc, Position, Scale, and Text&#8212;and you can create new ones by typing their names in 
the edit portion of this combo box.
</p>

<p>The User Interface Default attribute can have different meanings, depending 
on whether it's applied to a property or to an event. The property marked with 
this attribute is the one that's selected in the Properties window when you display it 
after creating the control. The event marked with the User Interface Default 
attribute is the one whose template is built for you by Visual Basic in the code window 
when you double-click the ActiveX control on the form's surface.
</p>

<A NAME="849"><h3>Limitations and workarounds</h3></A>

<p>Creating ActiveX controls based on simpler constituent controls is an effective 
approach, but it has its limits as well. The one that bothers me most is that there's 
no simple way to create controls that expand on TextBox or ListBox controls and 
correctly expose all of their original properties. Such controls have a few 
properties&#8212;for example, <I>MultiLine</I>, 
<I>ScrollBars</I>, and <I>Sorted</I>&#8212;which are read-only at run time. 
But when you place an ActiveX control on a form at design time, the ActiveX control 
is already running, so you can't modify those particular properties in the 
Properties window of the application that's using the control.
</p>

<p>You can use a few tricks to work around this problem, but none of them 
offers a definitive solution. For example, sometimes you can simulate the missing 
property with code, such as when you want to simulate a ListBox's 
<I>Sorted </I>property. Another well-known trick relies on an array of constituent controls. For example, you 
can implement the <I>MultiLine </I>property by preparing both a single-line and 
multiline TextBox controls and make visible only the one that matches the current 
property setting. The problem with this approach is that the number of needed controls 
grows exponentially when you need to implement two or more properties in this way. 
You need 5 TextBox controls to implement the <I>MultiLine 
</I>and <I>ScrollBars </I>properties (one for single-line TextBox controls and 4 for all the possible settings of the 
<I>ScrollBar </I>property), and 10 TextBoxes if you also want to implement the 
<I>HideSelection </I>property.
</p>

<p>A third possible solution is to simulate the control that you want to 
implement with simpler controls. For example, you can manufacture a ListBox-like 
ActiveX control based on a PictureBox and a companion VScrollBar. You simulate the 
ListBox with graphic methods of the PictureBox, so you're free to change its graphic 
style, add a horizontal scroll bar, and so on. Needless to say, this solution isn't often simple.
</p>

<p>I want merely to hint of a fourth solution, undoubtedly the most complex 
of the lot. Instead of using a Visual Basic control, you create a control from thin air 
using the <I>CreateWindowEx </I>API function. This is the C way, and following this 
approach in Visual Basic is probably even more complicated than working in C because 
the Visual Basic language doesn't offer facilities, such as pointers, that are helpful 
when you're working at such a low level.
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>After hearing all these complaints, you'll be happy to know Visual Basic 6 
has elegantly solved the problem. In fact, the new Windowless control library 
(described in <a href="#A53">Chapter 9</a>) doesn't expose a single property that's read-only at run time. The 
only drawback of this approach is that in that library controls don't expose an 
<I>hWnd </I>property, so you can't augment their functionality using API calls, which I describe in 
the <a href="#A129">Appendix</a>.
</p>

<A NAME="850"><h2>Container Controls</h2></A>
<p>You can create ActiveX controls that behave like container controls, as 
PictureBox and Frame controls do. To manufacture a container control, all you have to do is 
set the UserControl's <I>ControlContainer </I>property to True. Keep in mind, however, 
that not all host environments support this feature. If the container doesn't support 
the <I>ISimpleFrame</I> interface, your ActiveX control won't be able to contain other 
controls, even if it works normally as far as other features are concerned. Visual Basic's 
forms support this interface, as do PictureBox and Frame controls. In other words, you 
can place an ActiveX control that works as a container inside a PictureBox or 
Frame control, and it will work without a glitch.
</p>

<p>You can place controls on a container control both at design time (using 
drag-and-drop from the ToolBox) or at run time (through the 
<I>Container </I>property). In both cases, the ActiveX control can find out which controls are placed on its surface 
by querying its <I>ContainedControls </I>property. This property returns a collection that 
holds references to the Extender interface of the contained controls.
</p>

<p>On the companion CD, you'll find a simple container ActiveX control 
named Stretcher, which automatically resizes all the contained controls when it's resized. 
The code that implements this capability is unbelievably simple:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' These properties hold the previous size of the control.
Private oldScaleWidth As Single
Private oldScaleHeight As Single

' To initialize the variables, you need to trap both these events.
Private Sub UserControl_InitProperties()
    oldScaleWidth = ScaleWidth
    oldScaleHeight = ScaleHeight
End Sub

Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
    oldScaleWidth = ScaleWidth
    oldScaleHeight = ScaleHeight
End Sub

Private Sub UserControl_Resize()
    ' When the UserControl resizes, move and resize all container controls.
    Dim xFactor As Single, yFactor As Single
    ' Exit if this is the first resize.
    If oldScaleWidth = 0 Then Exit Sub
    ' This accounts for controls that can't be resized.
    On Error Resume Next
    ' Determine the zoom or factor along both axis.
    xFactor = ScaleWidth / oldScaleWidth
    yFactor = ScaleHeight / oldScaleHeight
    oldScaleWidth = ScaleWidth
    oldScaleHeight = ScaleHeight
    
    ' Resize all controls accordingly.
    Dim ctrl As Object
    For Each ctrl In ContainedControls
        ctrl.Move ctrl.Left * xFactor, ctrl.Top * yFactor, _
            ctrl.Width * xFactor, ctrl.Height * yFactor
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The ContainedControls collection includes only the contained controls that 
had been placed directly on the UserControl's surface. For example, if the ActiveX 
control contains a PictureBox, which in turn contains a TextBox, the PictureBox appears 
in the ContainedControls collection but the TextBox doesn't. Using Figure 17-8 as 
a reference, this means that the preceding code stretches or shrinks the Frame1 
control contained in the Stretcher ActiveX control, but not the two OptionButton 
controls inside it. To have the resizing code work as well for the innermost controls, you 
need to modify the code in the <I>UserControl_Resize 
</I>event procedure as follows (added statements are in boldface):
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim ctrl As Object<B>, ctrl2 As Object</B>
    For Each ctrl In ContainedControls
        ctrl.Move ctrl.Left * xFactor, ctrl.Top * yFactor, _
            ctrl.Width * xFactor, ctrl.Height * yFactor
<B>        For Each ctrl2 In Parent.Controls
            ' Look for controls on the form that are contained in Ctrl.
            If ctrl2.Container Is ctrl Then
                ctrl2.Move ctrl2.Left * xFactor, ctrl2.Top * yFactor,_
                    ctrl2.Width * xFactor, ctrl2.Height * yFactor
            End If
        Next</B>
    Next
</pre>
</td></tr>
</table>
</p>


<p>
<A HREF="javascript:fullSize('F17ph08x.htm')"> <img src="F17ph08.JPG" width=404 height=232 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-8.</B> <i>The Stretcher ActiveX control resizes all its contained controls, both at design time and at run time.</i><!--/caption-->
</p>

<p>You should know a few other bits of information about container ActiveX 
controls authored in Visual Basic:
</p>

<UL>
<p><li> If the host application doesn't support container controls, any 
reference to the <I>ContainedControls </I>property raises an error. It's OK to return 
errors to the client, except from within event procedures&#8212;such as 
<I>InitProperties </I>or <I>Show&#8212;</I>because they would crash the application.
</li></p>
<p><li> The ContainedControls collection is distinct from the Controls 
collection, which gathers all the constituent controls on the UserControl. If a 
container ActiveX control contains constituent controls, they'll appear on the 
background, below all the controls that the developer put on the 
UserControl's surface at design time.
</li></p>
<p><li> Don't use a transparent background with container controls because 
this setting makes contained controls invisible. (More precisely, 
contained controls will be visible only on the areas where they overlap a 
constituent control.)
</li></p>
</UL>

<p>A problem with container controls is that the UserControl module doesn't 
receive any events when a control is added or removed at design time. If you need 
to react to these actions&#8212;for example, to automatically resize the contained 
control&#8212;you must use a Timer control that periodically queries the 
ContainedControls.Count<I> </I>collection. While this approach isn't elegant or efficient, you 
usually need to activate the Timer only at design time, and therefore you experience no impact on 
the run-time performance.
</p>

<A NAME="851"><h2>Transparent Controls</h2></A>
<p>Visual Basic offers you many ways to create irregularly shaped controls. To begin 
with, if you set the <I>BackStyle </I>property of the UserControl object to 0-Transparent, 
the background of the control&#8212;that is, the portion of the control that isn't occupied 
by constituent controls&#8212;becomes transparent and lets the user see what's behind 
the control itself. When a control has a transparent background, all the mouse events 
go directly to the container form or to the control that happens to be under the 
ActiveX control in the z-order. In addition, Visual Basic ignores the 
<I>BackColor </I>and <I>Picture </I>properties for such an ActiveX control and all the output from graphic methods 
is invisible. Not surprisingly, transparent controls are also more demanding in terms 
of CPU time because, while repainting, Visual Basic has to clip all the areas that 
don't belong to the controls.
</p>

<A NAME="852"><h3>Using Label and Shape controls</h3></A>
<p>If your transparent control includes one or more Label controls that use a 
TrueType font and whose <I>BackStyle </I>property is also set to 0-Transparent, Visual Basic clips 
all the pixels around the characters in the Label. Only the caption of the Label is 
considered to belong to the ActiveX control, and all the other pixels in the Label 
are transparent. For example, if you click inside a letter 
O<I> </I>in the caption, a <I>Click </I>event is raised in the parent form or in the control that shows through. I noticed that 
this feature works decently only with larger font sizes, however.
</p>

<p>You can create a large variety of nonrectangular controls using Shape 
controls as constituent controls. (You can see one example on the companion CD.) If you 
set the Shape control's <I>BackStyle </I>property to 0-Transparent, all the pixels that fall 
outside the Shape control are transparent. For example, to create an elliptical radio 
button, you drop a Shape1 constituent control, set its 
<I>Shape </I>property to 2-Oval, and set both the UserControl's and Shape control's 
<I>BackStyle </I>property to 0-Transparent. Then 
you need only some code that resizes the Shape control when the UserControl 
resizes and that refreshes the control's appearance when the 
<I>Value </I>property changes. Following is a partial listing for the UserControl code module.
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Change the color when the control is clicked.
Private Sub UserControl_Click()
    Value = True
    RaiseEvent Click
End Sub

Private Sub UserControl_Resize()
    Shape1.Move 0, 0, ScaleWidth, ScaleHeight
End Sub

Public Sub Refresh()
    ' TrueColor and FalseColor are Public properties. 
    Shape1.BackColor = IIf(m_Value, TrueColor, FalseColor)
    Shape1.FillColor = Shape1.BackColor
End Sub

' Value is also the default property.
Public Property Get Value() As OLE_OPTEXCLUSIVE
    Value = m_Value
End Property
Public Property Let Value(ByVal New_Value As OLE_OPTEXCLUSIVE)
    m_Value = New_Value
    Refresh
    PropertyChanged &quot;Value&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>The problem with using Shape controls to define irregularly shaped controls 
is that you can't easily use graphic methods to draw over them. The reason is that 
Visual Basic redraws the Shape control after raising the 
<I>Paint </I>event, so the Shape control covers the graphic you've produced in the 
<I>Paint </I>event. An easy way to work around this limitation is to activate a Timer in the 
<I>Paint </I>event and let the drawing occur in the Timer's 
<I>Timer </I>procedure, some milliseconds after the standard 
<I>Paint </I>event. Use this code as a guideline:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_Paint()
    Timer1.Interval = 1        ' One millisecond is enough.
    Timer1.Enabled = True
End Sub

Private Sub Timer1_Timer()
    Timer1.Enabled = False     ' Fire just once.
    ' Draw some lines, just to show that it's possible.
    Dim i As Long
    For i = 0 To ScaleWidth Step 4
        Line (i, 0)-(i, ScaleHeight)
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<p>As far as I know, the only other way to solve this problem is by subclassing 
the UserControl to run some code after the standard processing of the 
<I>Paint </I>event. (Subclassing techniques are described in the <a href="#A129">Appendix</a>.)
</p>

<A NAME="853"><h3>Using the <I>MaskPicture</I> and <I>MaskColor</I> properties</h3></A>

<p>If the shape of your transparent control is too irregular to be rendered with one 
Shape control (or even with a group of Shape controls), your next best choice is to 
assign a bitmap to the <I>MaskPicture </I>property and then to assign the color that should 
be considered as transparent to the <I>MaskColor 
</I>property. The bitmap is used as a mask, and for each pixel in the bitmap whose color matches 
<I>MaskColor</I>, the corresponding pixel on the UserControl becomes transparent. (Constituent controls are 
never transparent, even if they fall outside the mask region.) You also need to set 
the <I>Backstyle </I>property to 0-Transparent for this technique to work correctly.
</p>

<p>Using this process, you can create ActiveX controls of any shape, including 
ones that have holes in them. Probably the only serious limitation of this approach is 
that you can't easily create a mask bitmap that resizes with the control because you 
can assign the <I>MaskPicture</I> property a bitmap, GIF, or JPEG image, but not a metafile.
</p>

<A NAME="854"><h2>Lightweight Controls</h2></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Visual Basic 6 permits you to write lightweight ActiveX controls that consume 
fewer resources at run time and therefore load and unload faster. The UserControl 
object exposes two new properties that let you fine-tune this capability.
</p>

<A NAME="855"><h3>The <I>HasDC</I> and <I>Windowless</I> properties</h3></A>

<p>The <I>HasDC </I>property determines whether the UserControl creates a 
permanent Windows device context or uses a temporary device context when the control is 
redrawn and during event procedures. Setting this property to 
<I>False </I>can improve performance on systems with less memory. For more information about this 
property, see the &quot;<A HREF="#48">Fine-Tuning the Performance of Forms</A>&quot; section in Chapter 2.
</p>

<p>Setting the <I>Windowless </I>property to True creates an ActiveX control that 
doesn't actually create a window and therefore consumes even fewer resources. A 
windowless control has a couple of limitations, however. It must be user-drawn or 
contain only other windowless controls, and it can't work as a container for other 
controls. You can't place regular constituent controls on a windowless ActiveX control, 
and you can't set the <I>Windowless </I>property to True if the UserControl already includes 
nonwindowless constituent controls. Image, Label, Shape, Line, and Timer are the 
only intrinsic controls that you can place over a windowless UserControl. If you need 
features that these controls don't provide, have a look at the Windowless control 
library mentioned in the &quot;<A HREF="#849">Limitations and Workarounds</A>&quot; section earlier in this chapter.
</p>

<p>Not all containers support windowless controls. Among the environments 
that do are Visual Basic 5 and 6, Internet Explorer 4 or later, and all the environments 
based on Visual Basic for Applications. 
Interestingly, when a windowless control runs in an environment that doesn't support this feature, the windowless control 
automatically turns into a regular control that's backed up by a real window.
</p>

<p>A windowless control doesn't expose an <I>hWnd 
</I>property, so you can't call API functions to augment its functionality. (In some cases, you can use the 
<I>ContainerHwnd </I>property instead.) Moreover, the 
<I>EditAtDesign </I>and <I>BorderStyle </I>properties are 
disabled for windowless ActiveX controls. The <I>HasDC 
</I>property is usually ignored as well because windowless controls never have a permanent device context. But you 
should set this property to False because if the control runs in an environment that 
doesn't support windowless ActiveX controls, it won't, at least, use resources for a 
permanent device context.
</p>

<A NAME="856"><h3>Transparent windowless controls</h3></A>

<p>You can create a windowless control that has a transparent background by 
setting its <I>BackStyle </I>property to 0-Transparent and assigning a suitable bitmap to 
the <I>MaskPicture</I>. But you should also consider the new 
<I>HitTest </I>event and the <I>HitBehavior </I>and 
<I>ClipBehavior </I>properties.
</p>

<p>Before I show you how to use these new members, you need to understand 
what the four regions associated with a control are. (See Figure 
17-9.) The <I>Mask </I>region is the nontransparent portion of a control, which includes all the 
constituent controls and other areas that contain the output from graphic methods. 
(In regular controls, this is the only existing region.) The 
<I>Outside </I>region is the area outside the Mask region, while the 
<I>Transparent </I>region is any area inside the Mask 
region that doesn't belong to the control (the holes in the control). Finally, the 
<I>Close </I>region is an area that encircles the 
Mask region and whose width is determined by the 
author of the ActiveX control.
</p>

<p>
<A HREF="javascript:fullSize('f17ph09x.htm')"> <img src="f17ph09.JPG" width=404 height=140 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-9.</B> <i>The four regions associated with a transparent control.</i><!--/caption-->
</p>

<p>The problem with managing mouse actions over a transparent control is 
that Visual Basic doesn't know anything about the Close and Transparent regions, and 
it can only determine whether the mouse cursor is on the Mask region or in the 
Outside region. The problem is even worse when there are multiple overlapping 
controls, each one with its own Close or Transparent region, because Visual Basic 
has to decide which one will receive the mouse event. To let the control decide 
whether it wants to manage the mouse action, Visual Basic fires one or more 
<I>HitTest </I>events in all the controls that are under the mouse cursor, in their z-order. (That is, it 
fires the first event in the control that's on top of all others.) The 
<I>HitTest</I> event receives the <I>x </I>and <I>y 
</I>coordinates of the mouse cursor and a <I>HitTest 
</I>argument:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Sub UserControl_HitTest(X As Single, Y As Single, HitResult As Integer)
    ' Here you manage the mouse activity for the ActiveX control.
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The possible values for <I>HitResult </I>are 0-vbHitResultOutside, 
1-vbHitResultTransparent, 2-vbHitResultClose, and 3-vbHitResultHit. Visual Basic raises the 
<I>HitTest </I>event multiple times, according to the following schema:
</p>


<UL>
<p><li> A first pass is made through the controls from the topmost to the 
bottommost control in the z-order; if any control returns 
<I>HitResult </I>= 3, it receives the mouse event and no more 
<I>HitTest </I>events are raised.
</li></p>
<p><li> If no control returns <I>HitResult </I>= 3, a second pass is performed; if 
any control returns <I>HitResult </I>= 2, it receives the mouse event and no 
more <I>HitTest </I>events are raised.
</li></p>
<p><li> If no control returns <I>HitResult</I> = 2, one more pass is performed; if 
any control returns <I>HitResult </I>= 1, it receives the mouse event.
</li></p>
<p><li> Otherwise, the parent form or the container control receives the 
mouse event.
</li></p>
</UL>

<p>Since Visual Basic knows only about the Mask and Outside regions, the 
value of <I>HitResult </I>that it passes to the 
<I>HitTest </I>event can only be 0 or 3. If you want to 
notify Visual Basic that your control has a Close or Transparent region, you must do so 
by code. In practice, you test the <I>x </I>and 
<I>y </I>coordinates and assign a suitable value 
to <I>HitResult</I>, as shown in the following code:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' A control with a circular transparent hole in it.
Sub UserControl_HitTest(X As Single, Y As Single, HitResult As Integer)
    Const HOLE_RADIUS = 200, CLOSEREGION_WIDTH = 10
    Const HOLE_X = 500, HOLE_Y = 400
    Dim distance As Single
    distance = Sqr((X _ HOLE_X) ^ 2 + (Y _ HOLE_Y) ^ 2)
    If distance &lt; HOLE_RADIUS Then
        ' The mouse is over the transparent hole.
        If distance &gt; HOLE_RADIUS _ CLOSEREGION_WIDTH Then
            HitResult = vbHitResultClose
        Else
            HitResult = vbHitResultTransparent
        End If
    Else
        ' Otherwise use the value passed to the event (0 or 3).
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Not surprisingly, all these operations can add considerable overhead and 
slow down the application. Moreover, Visual Basic needs to clip the output accounting 
for the mask defined by <I>MaskPicture </I>for constituent controls and the output of 
graphic methods. To keep this overhead to a minimum, you can modify Visual Basic's 
default behavior by means of the <I>ClipBehavior 
</I>and <I>HitBehavior </I>properties.
</p>

<p>The<I> ClipBehavior</I> property affects how Visual Basic clips the output of 
graphic methods. The default value is 1-UseRegion, which means that the output of a 
graphic method is clipped to fit the Mask region. The value 0-None doesn't perform 
clipping at all, and graphic output is visible also on the Mask and Transparent regions.
</p>

<p>The <I>HitBehavior </I>property determines how the 
<I>HitResult </I>argument is evaluated before calling the 
<I>HitTest </I>event. When <I>HitBehavior </I>= 1-UseRegion (the default 
value), Visual Basic sets <I>HitResult </I>= 3 only for points inside the Mask region. If you 
set <I>HitBehavior </I>= 2-UsePaint, Visual Basic also considers the points produced by 
graphic methods in the <I>Paint </I>event. Finally, if 
<I>HitBehavior </I>= 0-None, Visual Basic doesn't 
even attempt to evaluate <I>HitResult </I>and always passes a 0 value to the 
<I>HitTest </I>event.
</p>

<p>If your Mask region isn't complex and you can easily describe it in code, 
you can often improve the performance of your ActiveX control by setting 
<I>HitBehavior </I>= 0-UseNone. In this case, Visual Basic always passes 0 to the 
<I>HitResult </I>argument, and you change it to account for your Mask, Close, and Transparent regions. If 
the Mask region is complex and includes irregular figures, you should set 
<I>ClipBehavior </I>= 0-None, thus saving Visual Basic the overhead needed to distinguish between 
the Mask and Outside regions.
</p>

<p>You can easily create controls with hot spots using 
<I>ClipBehavior </I>= 0-None and <I>HitBehavior 
</I>= 1-UseRegion. In practice, you draw your control over its entire 
client area and use the <I>MaskPicture </I>property to define the areas that react to the mouse.
</p>

<A NAME="857"><h2>Data Binding</h2></A>

<p>You can add data-binding capabilities to an ActiveX control with little more than 
a few mouse clicks. As is not the case for intrinsic controls, you can create controls 
that bind multiple properties to database fields. All you have to do is tick the Property 
Is Data Bound check box in the Data Binding section of the Procedure Attributes 
dialog box, shown in Figure 17-10, for all the properties that you want to make data aware.
</p>

<p>You can create as many data-bound properties as you like, but you must 
select the This Property Binds To DataField option for one of them only. If no 
property is bound to the <I>DataField </I>property, the Extender object won't expose all 
the <I>Data</I>xxxx properties that are necessary to actually bind the control. Because such 
properties are exposed by the Extender object, their availability depends on the host environment.
</p>

<p>
<img src="F17ph10.GIF" width=338 height=404 border=0>
<p>
<!--caption--><B>Figure 17-10.</B> <i>The Procedure Attributes dialog box includes all the options for creating data-aware properties.</i><!--/caption-->


<A NAME="858"><H3><I>PropertyChanged</I> and <I>CanPropertyChange</I> methods</H3></A>
<p>To support data binding in code, you don't have to do anything more than you 
already do for persistent properties. In each <I>Property Let 
</I>procedure, you must call the <I>PropertyChanged 
</I>method, which informs Visual Basic that the property has 
changed and that the database field should be updated before the record pointer moves 
to another record. If you omit this call, the database field won't be updated. You 
can also update the field immediately if you select the Update Immediate option in 
the Procedure Attributes dialog box.
</p>

<p>Visual Basic also provides the <I>CanPropertyChange 
</I>method, which queries the data source to determine whether it's safe to update the field. You could use 
the following code in the <I>Property Let </I>procedure of a property called 
<I>CustomerName. </I>(The statements that have been added to the code by the wizard are in boldface.)
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let CustomerName(New_CustomerName As String)
<B>    If CanPropertyChange(&quot;CustomerName&quot;) Then    </B>
        txtCustomerName.Text = New_CustomerName
        PropertyChanged &quot;CustomerName&quot;
<B>    End If</B>
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You should be aware, however, that you don't strictly need to call 
the <I>CanPropertyChange </I>method because under Visual Basic 5 and 6 it always 
returns True, even if the database field can't be updated. You should use this function 
only for compatibility with future versions of the language that might implement it. 
For all the properties that call this method before doing the update, you should also 
select the Property Will Call 
<I>CanPropertyChange</I> Before Changing option in the 
Procedure Attributes dialog box. Again, at this time there's no point in doing that, but it 
doesn't cause any harm either. The choice is yours.
</p>

<p>To correctly support data binding, the constituent controls must update 
the corresponding bound property when their contents change. Typically this is done 
in the <I>Change </I>or <I>Click </I>event procedure, as in the following code snippet:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtCustomerName_Change()
    PropertyChanged &quot;CustomerName&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="859"><h3>The DataBindings collection</h3></A>

<p>As I mentioned before, only one property can be bound to the 
<I>DataField </I>Extender property. Because you can bind multiple properties, you need to provide 
developers with a method for associating each bound property to the corresponding 
database field. This association can be done either at design time or during execution.
</p>

<p>For each property that you want to make bindable at design time, you 
must select the Show In DataBindings Collection At Design Time option in the 
Procedure Attributes dialog box. If this option is selected for one or more properties, 
the <I>DataBindings </I>item appears in the Properties window. When you click on it, 
Visual Basic brings up the dialog box shown in Figure 17-11. 
Note that it's OK that the property bound to the 
<I>DataField </I>property also appears in the 
DataBindings<I> </I>collection.
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Visual Basic 6 permits you to bind properties in the 
DataBindings<I> </I>collection to fields in different Data Sources, and you can also select a distinct 
<I>DataFormat</I> for each one of them. In Visual Basic 5, you could bind properties only to the same Data Source.
</p>

<p>
<img src="F17ph11.GIF" width=401 height=405 border="0">
<p>
<!--caption--><B>Figure 17-11.</B> <i>The DataBindings dialog box lets developers associate properties with database fields at design time.</i><!--/caption-->


<p>All the bound properties appear in the 
DataBindings<I> </I>collection at run time, regardless of whether they appear in the collection at design time. You can't add 
new items to this collection through code, but you can change the database field to 
which a property is bound:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Bind the CustomerName property to the CompanyName database field.
Customer1.DataBindings(&quot;CustomerName&quot;).DataField = &quot;CompanyName&quot;
</pre>
</td></tr>
</table>
</p>
<p>Another common task for the DataBindings collection is to cancel changes 
in fields so that the database record won't be updated:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim dtb As DataBinding
For Each dtb In Customer1.DataBindings
    dtb.DataChanged = False
Next
</pre>
</td></tr>
</table>
</p>


<p>For more information about the DataBindings<I> 
</I>collection, see the online Visual Basic documentation.
</p>

<A NAME="860"><h3>The DataRepeater control</h3></A>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Visual Basic 6 lets you create custom grid-like controls, using the DataRepeater 
control (contained in the Msdatrep.ocx file). This control works as a container of 
other ActiveX controls: It can host any type of controls, but it's especially useful with 
custom ActiveX controls.
</p>

<p>Say that you want to display a table of records, but you don't want to use 
a standard Visual Basic grid control&#8212;such as the DataGrid or Hierarchical 
FlexGrid control&#8212;because you need maximum flexibility for interaction with the user 
or because you want to display information that can't be embedded in a regular 
grid (images, for example). Figure 17-12 shows a custom grid built on the DataRepeater control that displays the Publisher table from the Biblio.mdb database. To create 
such a custom grid, you must execute these basic steps:
</p>


<OL>
<p><li> Create an AddressOCX control that contains all the fields you need; 
this is the object that will be replicated in the DataRepeater control.
</li></p>
<p><li> For all the properties that you want to expose in the DataRepeater 
control&#8212;that is, Name, Street, City, Zip, and State&#8212;make the property 
data bound and have it appear in the DataBindings collection at design time.
</li></p>
<p><li> Save the project, compile it into a stand-alone OCX file, and load the 
client application where you want to display the custom grid.
</li></p>
<p><li> Drop an ADO Data control on the client form, and then set 
its <I>ConnectionString</I> and <I>RecordSource 
</I>properties to point to the table in the database that provides the data. (You can also use any other ADO 
data source, including a DataEnvironment object.)
</li></p>
<p><li> Drop a DataRepeater control on the form, have its 
<I>DataSource</I> property pointing to the ADO Data control, and select the AddressOCX 
ActiveX control from the list that appears when you click on the 
<I>RepeatedControlName.</I> (This list includes all the OCXs that are registered in 
your system.)
</li></p>
<p><li> Bring up the DataRepeater control's custom property page, switch to 
the RepeaterBindings tab, and associate the bound properties exposed by 
the inner ActiveX control with the database fields. You can also set in 
the Format tab the <I>DataFormat </I>property for each field.
</li></p>
</OL>
<p>
<A HREF="javascript:fullSize('F17ph12x.htm')"> <img src="F17ph12.JPG" width=404 height=402 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-12.</B> <i>The DataRepeater control lets you create custom views of your database tables.</i><!--/caption-->
</p>

<p>The complete source code of the demonstration program is on the companion CD.
</p>

<p>The DataRepeater control has some rough edges, and you must pay 
attention to many details to have it working properly:
</p>

<UL>

<p><li> The UserControl must be compiled into an OCX file; otherwise, it 
can't be hosted in the DataRepeater control. You can't use an intrinsic 
Visual Basic control with a DataRepeater.
</li></p>
<p><li> All the bound properties in the inner ActiveX control should return 
String values; you can then format these values using the DataFormat 
options offered by the DataRepeater control. Moreover, all the properties must 
be visible in the DataBindings collection at design time; otherwise, 
the DataRepeater control won't see them.
</li></p>
<p><li> The constituent controls on the child form should call the 
<I>PropertyChanged </I>method whenever the user changes their values; otherwise, the 
database won't be updated correctly.
</li></p>
<p><li> The DataRepeater control creates only one instance of the control; 
this control is used to let the user edit values for the current record, 
whereas all other rows are just images of the control. You might notice some 
incorrect repaints every now and then.
</li></p>
</UL>

<p>The DataRepeater control exposes several properties, methods, and events 
that augment its potential and flexibility. For example, you can directly access the 
active instance of the child control to set additional properties 
(<I>RepeatedControl </I>property), find the line number of the current record 
(<I>ActiveRow </I>property), change the DataRepeater's appearance (by assigning the 
<I>Caption</I>, <I>CaptionStyle</I>, 
<I>ScrollBars</I>, <I>RowIndicator</I>, and <I>RowDividerStyle 
</I>properties), get or set a bookmark to the 
current or the visible records (using the <I>CurrentRecord 
</I>and <I>VisibleRecords </I>properties), and so on. You can also monitor users' actions&#8212;for example, when they scroll 
the contents of the list (<I>ActiveRowChanged </I>and 
<I>VisibleRecordsChanged </I>events) or select another row 
(<I>CurrentRecordChanged </I>event).
</p>

<p>Interestingly, it's even possible to load a different child ActiveX control at 
run time by assigning a new value to the <I>RepeatedControlName 
</I>property. In this case, you must associate the bound property with fields by using the properties of 
the <I>RepeaterBindings </I>collection. (You can provide the user with a list of bindable 
properties using the <I>PropertyNames </I>property.) Whenever a new child control is 
loaded at run time, the DataRepeater fires a 
<I>RepeatedControlLoaded</I> event, which the programmer can use to correctly initialize the new control.
</p>

<A NAME="861"><h3>What's missing</h3></A>

<p>The data binding mechanism offered by Visual Basic is fairly complete, although 
a few features aren't directly supported and you have to implement them yourself.
</p>

<p>For example, there's no direct support for controls that bind a 
<I>list </I>of values to a secondary Data source, as the DataList and DataCombo controls do. You can 
implement this feature by exposing a custom property&#8212;such as 
<I>RowSource&#8212;</I>to which developers can assign the secondary Data control (or another ADO-compliant 
data source). Here the problem to solve is: You can't display a custom list in the 
Properties window, so how do you let the developer select the data source at design 
time? The answer is based on custom property pages, which are described in the 
next section.
</p>

<p>One thing that at first seems to be impossible is to decide at run time 
which property binds to the DataField Extender property. In this situation, the solution 
is actually simpler than it might appear: Create an additional property that binds 
to DataField and that delegates to one of the other properties exposed by the 
control. This mechanism can be made extremely flexible by means of the new 
<I>CallByName </I>function. For example, let's say that you want to give developers the ability to 
bind any property among those exposed by the Customer control. You need to create 
two additional properties: <I>BoundPropertyName, 
</I>which holds the name of the bound property, and 
<I>BoundValue,</I> which does the actual delegation. This is the code in 
the <I>Property Get </I>and <I>Let </I>procedures for the latter property:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' BoundValue binds directly to DataField, but the value actually stored
' in the database depends on the BoundPropertyName property.
Public Property Get BoundValue() As Variant
    BoundValue = CallByName(Me, BoundPropertyName, vbGet)
End Property

Public Property Let BoundValue (New_BoundValue As Variant)
    CallByName Me, BoundPropertyName, vbLet, New_BoundValue
End Property
</pre>
</td></tr>
</table>
</p>

<p>You should make <I>BoundValue </I>hidden so that developers are discouraged 
from using it directly.
</p>

<A NAME="862"><h2>Property Pages</h2></A>

<p>The majority of ActiveX controls that you find in the Visual Basic package or buy 
from third-party vendors are equipped with one or more custom property pages. In 
this section, you'll see how easy it is to create property pages for your own 
ActiveX controls.
</p>

<p>Even if the Visual Basic's Properties window is usually sufficient to enter 
property values at design time, there are at least three reasons why you should create 
custom property pages. First, they greatly simplify the job of the programmers that are 
using your control because all properties can be grouped in a logical way. Second, and 
more important, property pages give you much greater influence over how properties 
are set at design time. For example, you can't show a combo box in the Properties 
window with a list of values built dynamically, nor can you let developers drop down 
a mini-editor to enter multiple values (as they do when editing the 
<I>List </I>property of ListBox and ComboBox controls). These restrictions are easily overcome with 
property pages. Third, property pages permit you to localize the design-time user 
interface of your controls for different languages.
</p>

<p>So that you can see property pages in action, I created a SuperListBox 
ActiveX control, an expanded ListBox that exposes an 
<I>AllItems </I>property (which returns all the items separated by a carriage return character) and allows you to enter new items 
at run time using a pop-up menu. My control also gives the programmer the ability 
to bind either the <I>Text </I>property or the <I>ListIndex 
</I>property to the DataField, thus overcoming one of the few limitations of the data binding mechanism in Visual Basic. 
This control employs a number of interesting programming techniques&#8212;such as API 
functions to implement a columnar format&#8212;and you might want to browse its source 
code on the companion CD.
</p>

<A NAME="863"><h3>Running the Property Page Wizard</h3></A>

<p>You can add a property page to an ActiveX Control project with the Add 
Property Page command from the Project menu, but you can save a lot of work and time 
using the Property Page Wizard. (You have to install this add-in from the Add-In 
Manager dialog box.) In the first step of the wizard, you can create custom property 
pages, select their order, and decide whether you want to keep standard property 
pages. (See Figure 17-13.) Visual Basic automatically adds the StandardColor, 
StandardFont, and StandardPicture pages (for properties that return OLE_COLOR, StdFont, 
and StdPicture values, respectively), but you can also decide to deactivate them if you want.
</p>

<p>
<A HREF="javascript:fullSize('F17ph13x.htm')"> <img src="F17ph13.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-13.</B> <i>The first step of the Property Page Wizard is the point at which you create new pages and change the order of selected pages.</i><!--/caption-->
</p>

<p>In the second step of the wizard, you decide on which page each custom 
property will be displayed. All the properties that you leave in the leftmost list box 
(as shown in Figure 17-14) won't be displayed on any property page.
</p>

<p>
<A HREF="javascript:fullSize('F17ph14x.htm')"> <img src="F17ph14.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-14.</B> <i>In the second step of the Property Page Wizard, you decide which properties will be shown on which page.</i><!--/caption-->
</p>

<p>When you click on the Finish button, the wizard creates one or 
more PropertyPage modules. For each property that you assigned to the page, the 
wizard generates a Label control (whose <I>Caption 
</I>is the name of the property) and a TextBox control that holds the value of the property, or a CheckBox control if the 
property returns a Boolean value. If you want a fancier user interface&#8212;for example, 
ComboBox controls for enumerated properties&#8212;you have to modify what the wizard has 
produced. Figure 17-15 shows the General property page for the SuperListBox 
control after I rearranged the controls and converted a couple of TextBox controls 
into ComboBox controls.
</p>

<p>
<A HREF="javascript:fullSize('F17ph15x.htm')"> <img src="F17ph15.JPG" width=404 height=267 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-15.</B> <i>The property page generated by the Property Page Wizard, after some retouching.</i><!--/caption-->
</p>

<A NAME="864"><h3>The PropertyPage object</h3></A>
<p>Just browsing the code produced by the wizard is sufficient to understand how 
property pages work. The PropertyPage object is similar to a form and supports many 
of the Form object's properties, methods, and events, including 
<I>Caption</I>, <I>Font</I>, and all the keyboard and mouse events. You might even implement property pages that 
work as drag-and-drop servers or clients if you need to.
</p>

<p>Property pages have their peculiarities, of course. For one, you can control 
the size of the page using the <I>StandardSize 
</I>property, which can be assigned one of the values 0-Custom (the size is determined by the object), 1-Small (101-by-375 
pixels), or 2-Large (179-by-375 pixels). Microsoft suggests that you create custom-sized 
pages that aren't larger than the space that you actually need because values other than 
0-Custom might display incorrectly at different screen resolutions.
</p>

<p>You might notice in Figure 17-15 that the property page doesn't include the 
OK, Cancel, and Apply buttons that you usually find on standard property pages. 
Those buttons, in fact, are provided by the environment, and you don't have to add 
them yourself. The communication between the property page and the environment 
occurs through properties and events of the PropertyPage object. If the project is 
associated with a help file, a Help button is also displayed.
</p>

<p>When the page loads, the PropertyPage object receives the 
<I>SelectionChanged </I>event. In this event, your code should load all the controls in the page with the 
current values of the corresponding properties. The SelectedControls collection returns 
a reference to all the controls in the form that are currently selected and that will 
be affected by the property page. For example, this is the code in the 
<I>SelectionChanged </I>event procedure for the General page of the SuperListBox control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub PropertyPage_SelectionChanged()
    txtCaption.Text = SelectedControls(0).Caption
    txtAllItems.Text = SelectedControls(0).AllItems
    chkEnabled.Value = (SelectedControls(0).Enabled And vbChecked)
    cboShowPopupMenu.ListIndex = SelectedControls(0).ShowPopupMenu
    cboBoundPropertyName.Text = SelectedControls(0).BoundPropertyName
    Changed = False
End Sub
</pre>
</td></tr>
</table>
</p>

<p>When the contents of any field on the page is modified, the code in its 
<I>Change </I>or <I>Click </I>event should set the PropertyPage's 
<I>Changed </I>property to True, as in these examples:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub txtCaption_Change()
    Changed = True
End Sub

Private Sub cboShowPopupMenu_Click()
    Changed = True
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Setting the <I>Change </I>property to True automatically enables the Apply 
button. When the user clicks on this button (or simply switches to another property 
page), the PropertyPage object receives an <I>ApplyChanges 
</I>event. In this event, you must assign the values on the property page to the corresponding ActiveX control's 
properties, as in the following example:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub PropertyPage_ApplyChanges()
    SelectedControls(0).Caption = txtCaption.Text
    SelectedControls(0).AllItems = txtAllItems.Text
    SelectedControls(0).Enabled = chkEnabled.Value
    SelectedControls(0).ShowPopupMenu = cboShowPopupMenu.ListIndex
    SelectedControls(0).BoundPropertyName = cboBoundPropertyName.Text
End Sub
</pre>
</td></tr>
</table>
</p>

<p>One more custom event is associated with PropertyPage 
objects&#8212;the <I>EditProperties </I>event. This event fires when the property page is displayed 
because the developer clicked on the ellipsis button beside a property name in the 
Properties window. (This button appears if the property has been associated with a 
specific property page in the Procedure Attributes dialog box.) You usually take 
advantage of this property to automatically move the focus on the corresponding control on 
the property page:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub PropertyPage_EditProperty(PropertyName As String)
    Select Case PropertyName
        Case &quot;Caption&quot;
            txtCaption.SetFocus
        Case &quot;AllItems&quot;
            txtAllItems.SetFocus
        ' etc. (other properties omitted...)
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p> You might also want to disable or hide all other controls on the page, but 
this is rarely necessary or useful.
</p>

<A NAME="865"><h3>Working with multiple selections</h3></A>

<p>The code produced by the Property Page Wizard accounts for only the simplest 
situation&#8212;that is, when only one ActiveX control is selected on the form. To build 
robust and versatile property pages, you should make them work also with 
multiple controls. Keep in mind that property pages aren't modal, and therefore the 
developer is allowed to select (or deselect) controls on the form even when the page is 
already visible. Each time a new control is added to or removed from the 
SelectedControls collection, a <I>SelectionChanged 
</I>event fires.
</p>

<p>The standard way to deal with multiple selections is as follows. If the 
selected controls on the form share the same value for a given property, you fill the 
corresponding field on the property page with that common value; otherwise, you 
leave the field blank. This is a modified version of the 
<I>SelectionChanged </I>that accounts for multiple selections:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub PropertyPage_SelectionChanged()
    Dim i As Integer
    ' Use the property of the first selected control.
    txtCaption.Text = SelectedControls(0).Caption
    ' If there are other controls, and their Caption property differs from
    ' the Caption of the first selected control, clear the field and exit.
    For i = 1 To SelectedControls.Count - 1
        If SelectedControls(i).Caption &lt;&gt; txtCaption.Text Then
            txtCaption.Text = &quot;&quot;
            Exit For
        End If
    Next

    ' The AllItems property is dealt with in the same way (omitted ...).
    
    ' The Enabled property uses a CheckBox control. If values differ, use
    ' the special vbGrayed setting. 
    chkEnabled.Value = (SelectedControls(0).Enabled And vbChecked)
    For i = 1 To SelectedControls.Count - 1
        If (SelectedControls(i).Enabled And vbChecked) &lt;&gt; chkEnabled.Value 
            Then
            chkEnabled.Value = vbGrayed
            Exit For
        End If
    Next

    ' The ShowPopupMenu enumerated property uses a ComboBox control.
    ' If values differ, set the ComboBox's ListIndex property to _1.
    cboShowPopupMenu.ListIndex = SelectedControls(0).ShowPopupMenu
    For i = 1 To SelectedControls.Count - 1
        If SelectedControls(i).ShowPopupMenu &lt;&gt; cboShowPopupMenu.ListIndex 
            Then
            cboShowPopupMenu.ListIndex = -1
            Exit For
        End If
    Next

    ' The BoundPropertyName property is dealt with similarly (omitted ...).

    Changed = False
    txtCaption.DataChanged = False
    txtAllItems.DataChanged = False
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>DataChange </I>properties of the two TextBox controls are set to False 
because in the <I>ApplyChange </I>event you must determine whether the developer entered a 
value in either of those fields:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub PropertyPage_ApplyChanges()
    Dim ctrl As Object
    ' Apply changes to Caption property only if the field was modified.
    If txtCaption.DataChanged Then
        For Each ctrl In SelectedControls
            ctrl.Caption = txtCaption.Text
        Next
    End If
    ' The AllItems property is deal with in the same way (omitted ...).
    
    ' Apply changes to the Enabled property only if the CheckBox control
    ' isn't grayed out.
    If chkEnabled.Value &lt;&gt; vbGrayed Then
        For Each ctrl In SelectedControls
            ctrl.Enabled = chkEnabled.Value
        Next
    End If

    ' Apply changes to the ShowPopupMenu property only if an item 
    ' in the ComboBox control is selected.
    If cboShowPopupMenu.ListIndex &lt;&gt; -1 Then
        For Each ctrl In SelectedControls
            ctrl.ShowPopupMenu = cboShowPopupMenu.ListIndex
        Next
    End If
    ' The BoundPropertyName property is dealt with similarly (omitted ...).
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="866"><h3>Advanced techniques</h3></A>
<p>I want to mention a few techniques that you can use with property pages and 
that aren't immediately obvious. For example, you don't need to wait for the 
<I>ApplyChanges </I>event to modify a property in selected ActiveX controls: You can update a 
property right in the <I>Change </I>or <I>Click 
</I>event of the corresponding control on the property 
page. You can therefore achieve in the property page the same behavior that you 
can implement in the Properties window by assigning a property the Text or 
Caption procedure ID.
</p>

<p>Another easy-to-overlook feature is that the PropertyPage object can 
invoke Friend properties and methods of the UserControl module because they're in the 
same project. This gives you some additional flexibility: For example, the 
UserControl module can expose one of its constituent controls as a Friend 
<I>Property Get</I> procedure so that the Property Page can directly manipulate its attributes, as you can 
see in the code at below.
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' In the SuperListBox UserControl module
Friend Property Get Ctrl_List1() As ListBox
    Set Ctrl_List1 = List1
End Property
</pre>
</td></tr>
</table>
</p>

<p>A minor annoyance of this approach is that the PropertyPage code accesses 
the UserControl through the SelectedControls collection, which returns a generic 
Object, whereas Friend members can only be accessed through specific object variables. 
You can work around this issue by casting the elements of the collection to specific 
object variables:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' In the PropertyPage module
Dim ctrl As SuperListBox
' Cast the generic control to a specific SuperListBox variable.
Set ctrl = SelectedControls(0)
' Now it is possible to access Friend members.
ctrl.Ctrl_List1.AddItem &quot;New Item&quot;
</pre>
</td></tr>
</table>
</p>

<p>The last technique that I'm showing you is likely to be useful when 
you're developing complex UserControls with many properties and constituent controls, 
such as the Customer ActiveX control that I introduced earlier in this chapter. 
Surprisingly, it turns out that you can use the UserControl even on a property page that's 
associated with itself. Figure 17-16 shows an example of this technique: The General 
property page uses an instance of the Customer ActiveX control to let the developer 
assign the properties of the Customer control itself!
</p>

<p>
<A HREF="javascript:fullSize('F17ph16x.htm')"> <img src="F17ph16.JPG" width=404 height=233 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-16.</B> <i>A property page that uses an instance of the UserControl object defined in its own project.</i><!--/caption-->
</p>

<p>The beauty of this approach is how little code you need to write in 
the PropertyPage module. This is the complete source code of the property page 
shown in Figure 17-16:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Customer1_Change(PropertyName As String)
    Changed = True
End Sub

Private Sub PropertyPage_ApplyChanges()
    ' Read all properties in one loop.
    Dim propname As Variant
    For Each propname In Array(&quot;CustomerName&quot;, &quot;Address&quot;, &quot;City&quot;, _
        &quot;ZipCode&quot;, &quot;Country&quot;, &quot;Phone&quot;, &quot;Fax&quot;)
        CallByName SelectedControls(0), propname, VbLet, _
            CallByName(Customer1, propname, VbGet)
    Next
End Sub

Private Sub PropertyPage_SelectionChanged()
    ' Assign all properties in one loop.
    Dim propname As Variant
    For Each propname In Array(&quot;CustomerName&quot;, &quot;Address&quot;, &quot;City&quot;, _
        &quot;ZipCode&quot;, &quot;Country&quot;, &quot;Phone&quot;, &quot;Fax&quot;)
        CallByName Customer1, propname, VbLet, _
            CallByName(SelectedControls(0), propname, VbGet)
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Notice how the code takes advantage of the <I>CallByName 
</I>function to streamline multiple assignments to and from the properties in the UserControl.
</p>

<A NAME="867"><h2>The Tricks of the Masters</h2></A>
<p>At this point, you know everything you need to create ActiveX controls that 
match or even exceed the quality of commercial controls. There are a few advanced 
techniques, however, that even many experienced programmers aren't aware of. As 
I'll prove in this section, you don't always need to know all the intricacies of 
Windows and ActiveX programming to deliver efficient controls because, in most cases, 
Visual Basic is all you need.
</p>

<A NAME="868"><h3>Callback methods </h3></A>

<p>Raising an event in the parent form from within an ActiveX control is easy, but it 
isn't the only method you can use to let the two objects communicate with each 
other. In <a href="#A100">Chapter 16</a>, I showed you how an object can notify another object that 
something has occurred by using callback methods. Callback methods have 
several advantages over events: They're about 5 or 6 times faster on average and, 
more important, they aren't blocked when the client form is showing a message box in 
an interpreted program.
</p>

<p>On the companion CD, you'll find the complete source code for 
the SuperTimer ActiveX control, which implements a Timer that can communicate with its 
parent form using a callback mechanism based on the 
<I>ISuperTimerCBK</I> interface (a PublicNotCreatable class contained in the ActiveX control project). When a form 
or any other container implements this interface, it can have the SuperTimer control 
send its notifications through that interface's only member, the 
<I>Timer </I>method. This is the source code for a typical form that uses this SuperTimer control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Implements ISuperTimerCBK

Private Sub Form_Load()
    Set SuperTimer1.Owner = Me
End Sub

Private Sub ISuperTimerCBK_Timer()
    ' Do whatever you want here.
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The SuperTimer control contains a Timer1 constituent control that raises a 
<I>Timer </I>event in the UserControl module; in this procedure, the control decides whether 
it has to raise an event or invoke a callback method:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Owner As ISuperTimerCBK

Private Sub Timer1_Timer()
    If Owner Is Nothing Then
        RaiseEvent Timer      ' Fire a regular event.
    Else
        Owner.Timer           ' Fire a callback method.
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Interestingly, in an interpreted program the 
<I>Timer </I>event in a standard Timer control doesn't fire if the client form is showing a message box. (Timers are 
never blocked in compiled programs, though.) You don't suffer from this limitation if 
you use the ISuperTimerCBK interface of the SuperTimer OCX control, which 
therefore proves to be more powerful than a regular Timer control. (See Figure 17-17.) But 
you have to compile the SuperTimer control into an OCX file for this feature to 
work properly. (When the UserControl module runs in the Visual Basic IDE, modal 
windows in the client applications block events also in the ActiveX control.)
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>The demonstration program of the SuperTimer control displays 
different messages if the application is running in the IDE or as a compiled program. 
The Visual Basic language lacks a function that lets you distinguish between the 
two modes, but you can take advantage of the fact that all the methods of the 
Debug object aren't compiled in EXE programs and therefore are executed 
only when the application is running in the IDE. Here's an example of this technique:

<p>
<table><tr><td>
<pre>Function InterpretedMode() As Boolean
    On Error Resume Next
    Debug Print 1/0                 ' This causes an error
    InterpretedMode = (Err &lt;&gt; 0)    ' but only inside the IDE.
    Err Clear                       ' Clear the error code. 
End Function
</pre>
</td></tr>
</table>
</p>
<p>The preceding code is based on a routine that appeared in the Tech Tips 
supplement of the Visual Basic Programmer's Journal.
</p>
</blockquote></div>
</p>

<p>
<img src="F17ph17.GIF" width=403 height=236 border="0">
<p>
<!--caption--><B>Figure 17-17.</B> <i>A compiled SuperTimer control can send callback methods to the parent form even if a message box is being displayed.</i><!--/caption-->


<A NAME="869"><h3>Faster calls with VTable binding</h3></A>
<p>As you know, all references to external ActiveX controls&#8212;but not intrinsic Visual 
Basic controls&#8212;implicitly use their Extender objects. What you probably don't know is 
that all references to the Extender use early ID binding instead of the most efficient 
VTable binding. This means that calling a method in an ActiveX control is slower than 
calling the same method if the object were encapsulated in an ActiveX DLL 
component because objects in DLLs are referenced through VTable binding.
</p>

<p>In general, ID binding doesn't seriously impair the performance of your 
ActiveX control because most properties and methods implement the user interface and 
are sufficiently fast even on low-end machines. But sometimes you might need 
more speed. Say that you have a ListBox control that you want to fill as rapidly as 
possible with data read from a database or an array in memory: in this situation, you need 
to call a property or a method several thousand times, and the overhead of ID 
binding wouldn't be negligible.
</p>

<p>A solution to this problem is conceptually simple. You add a 
PublicNotCreatable class to your ActiveX Control project that exposes the same properties and 
methods as those exposed by the ActiveX control. The class does 
nothing but delegate the execution of the properties and methods to the main UserControl module. 
Whenever the ActiveX control is instantiated, it creates a companion Public object and 
exposes it as a read-only property. The client form can store the return value of this 
property in a specific object variable and call the ActiveX control's members through this 
secondary object. This object doesn't use the Extender object and therefore can be 
accessed through VTable binding instead of ID binding.
</p>

<p>I found that accessing UserControl's properties through this companion 
object can be about 15 times faster than through the regular reference to the ActiveX 
control. On the companion CD, you'll find a demonstration project whose only 
purpose is to show you what kind of performance you can get using this approach. You 
can use it as a model to implement this technique in your own ActiveX control projects.
</p>

<A NAME="870"><h3>Secondary interfaces</h3></A>
<p>An alternative way to use VTable binding for super-fast ActiveX controls is to 
have the ActiveX control implement a secondary interface and have the client form 
access the secondary interface instead of the primary interface. This approach is even 
faster than the one based on a secondary PublicNotCreatable object because you don't 
need a separate class that delegates to the main ActiveX control module. Another 
benefit of this approach is that the same interface can be shared by multiple ActiveX 
controls so that you can implement a VTable-based polymorphism among different but 
related ActiveX controls.
</p>

<p>The implementation of this approach isn't difficult, but beware of one 
difficulty. Say that you create an ActiveX control that contains an 
<I>Implements IControlInterface </I>statement at the beginning of its code module. Your goal is to take advantage of 
this common interface in the client form by assigning a specific ActiveX control 
instance to an interface variable. Unfortunately, the following sequence of statements 
raises an error:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' In the client form
Dim ctrl As IControlInterface
Set ctrl = MyControl1                      ' Error &quot;Type Mismatch&quot;
</pre>
</td></tr>
</table>
</p>

<p>The problem, of course, is that the MyControl1 object in the client code 
uses the ActiveX control's Extender interface, which doesn't inherit the 
IControlInterface interface. To access that interface, you need to bypass the Extender object, as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set ctrl = MyControl1.Object 
</pre>
</td></tr>
</table>
</p>

<A NAME="871"><h3>Trapping events with multicasting</h3></A>
<p>Multicasting lets you trap events raised by any object that you can reference 
through an object variable. (I described multicasting in <a href="#A41">Chapter 7</a>, so you might want to 
review those pages before reading what follows.) The good news is that 
multicasting also works with ActiveX controls, even if a control has been compiled into a 
stand-alone OCX file. In other words, your ActiveX control can trap events fired by 
the parent form, or even by other controls on the form itself.
</p>

<p>To give you a taste of what you can do with this technique, I have prepared 
a simple ActiveX control that automatically resizes itself to cover the entire surface 
of its parent form. If it weren't for multicasting, this feature would be extremely 
difficult to implement because it requires you to subclass the parent form to be 
notified when it's being resized. Thanks to multicasting, the amount of code you need 
to implement this feature is amazingly little:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents ParentForm As Form

Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
    On Error Resume Next         ' In case parent isn't a form.
    Set ParentForm = Parent
End Sub

' This event fires when the parent form resizes.
Private Sub ParentForm_Resize()
    Extender.Move 0, 0, Parent.ScaleWidth, Parent.ScaleHeight
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The multicasting technique has an infinite number of applications. For 
example, you can build an ActiveX control that always displays the sum of the values 
contained in TextBox controls on the form. For this task, you need to trap those controls' 
<I>Change </I>events. When trapping the events of an intrinsic control, your UserControl 
module must declare a <I>WithEvents</I> variable of a specific object type, but when trapping 
events from external ActiveX controls&#8212;for example, a TreeView or MonthView 
control&#8212;you can use a generic VBControlExtender object variable and rely on its 
one-size-fits-all <I>ObjectEvent </I>event.
</p>


<a name="A110"></a><h3>8.2.4 ActiveX Controls for the Internet</h3>

<A HREF="#A109">[Previous]</A> <A HREF="#A111">[Next]</A><P>

<A NAME="872"><h1>ActiveX Controls for the Internet</h1></A>
<p>Many programmers believe that the Internet is the natural habitat for ActiveX 
controls, so you might have been surprised that I haven't described Internet-specific 
features until the end of the chapter. The plain truth is that, Microsoft's plans 
notwithstanding, Microsoft Internet Explorer still is, as I write these pages, the only popular 
browser that natively supports ActiveX controls, at least without any plug-in modules. So 
if you heavily use ActiveX controls in HTML pages, you automatically reduce the 
number of potential users of your Web site. You see, ActiveX controls probably aren't 
very useful for the Internet, even though they might find their way into intranets, 
where administrators can be sure about which browser is installed on all client 
machines. As far as the Internet is concerned, however, Dynamic HTML and Active Server 
Pages seem to offer a better solution for building dynamic and &quot;smart&quot; pages, as I 
explain in the section devoted to Internet programming.
</p>

<A NAME="873"><h2>Programming Issues</h2></A>
<p>In general, ActiveX controls in HTML pages can exploit the additional features 
provided by the browser in which they're running. In this section, I briefly describe 
the new methods and events that such controls can use. But first of all, you need 
to understand how an ActiveX control is actually placed in an HTML page.
</p>

<A NAME="874"><h3>ActiveX controls on HTML pages</h3></A>
<p>You can place a control in a page using a number of HTML Page editors. For 
example, following is the code that Microsoft FrontPage produces for an HTML page that 
includes my ClockOCX.ocx control, whose source code is available on the 
companion CD. Notice that the control is referenced through its CLSID, not its more 
readable ProgID name. (The HTML code that refers to the ActiveX control is in boldface.)
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Home page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#FFFFFF&quot;&gt;
&lt;H1&gt;A web page with an ActiveX Control on it.&lt;/H1&gt;
<B>&lt;OBJECT CLASSID=&quot;clsid:27E428E0-9145-11D2-BAC5-0080C8F21830&quot;
    BORDER=&quot;0&quot; WIDTH=&quot;344&quot; HEIGHT=&quot;127&quot;&gt;
    &lt;PARAM NAME=&quot;FontName&quot; VALUE=&quot;Arial&quot;&gt;
    &lt;PARAM NAME=&quot;FontSize&quot; VALUE=&quot;24&quot;&gt;
&lt;/OBJECT&gt;</B>
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</td></tr>
</table>
</p>

<p>As you can see, all the information concerning the control is enclosed by 
the &lt;OBJECT&gt; and &lt;/OBJECT&gt; tags, and all initial properties values are provided 
in &lt;PARAM&gt; tags. These values are made available to the control in its 
<I>ReadProperties </I>event procedure. (If there are no &lt;PARAM&gt; tags, the control could receive 
an <I>InitProperties </I>event instead, but the exact behavior depends on the browser.) 
ActiveX controls intended to be used on Web pages should always expose 
<I>Font</I>xxxx properties instead of, or together with, the 
<I>Font </I>object property because assigning 
object properties in an HTML page isn't simple.
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>When you're using an ActiveX control on a Web site, many things can 
go wrong&#8212;for example, references to Extender properties that aren't available 
under the browser. Visual Basic 6 offers a couple of ways to reduce the guesswork 
when it's time to fix these errors. The first option is to start the component from within 
the IDE and wait until the browser creates an instance of the control. The second 
option is to have Visual Basic create an empty HTML page with just the ActiveX 
control on it and automatically load it into the browser. You can select these options in 
the Debugging tab of the Project Properties dialog box, as shown in Figure 17-18.
</p>

<p>
<img src="F17ph18x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 17-18.</B> <i>The Debugging tab of the Project Properties dialog box.</i><!--/caption-->
</p>

<A NAME="875"><h3>Hyperlinking</h3></A>
<p>The UserControl object exposes the <I>Hyperlink 
</I>property, which returns a Hyperlink object that you can use to navigate to other HTML pages. The Hyperlink object 
exposes three methods, the most important of which is the 
<I>NavigateTo</I> method:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Hyperlink.NavigateTo Target, [Location], [FrameName]
</pre>
</td></tr>
</table>
</p>

<p><I>Target </I>is the URL to which you navigate, 
<I>Location </I>is an optional argument that points to a specific location in an HTML page, and 
<I>FrameName </I>is the optional name of a frame in a page. If the ActiveX control is running inside a browser, the new 
page is shown within the browser itself; if the control isn't running in a browser, the 
default browser is automatically launched.
</p>

<p>The Hyperlink object exposes two more methods, 
<I>GoBack </I>and <I>GoForward</I>, which let you navigate the browser's history list. Unless you're absolutely sure 
that the history list isn't empty, you should always protect these methods with an 
<I>On Error </I>statement:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdBack_Click()
    On Error Resume Next
    Hyperlink.GoBack
    If Err Then MsgBox &quot;History is empty!&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>You can navigate many kinds of documents, not just HTML pages. 
For example, Internet Explorer can display Microsoft Word and Microsoft Excel 
files, so you can use it as a document browser, as the following code demonstrates:

<p>
<table><tr><td>
<pre>Hyperlink.NavigateTo &quot;C:\Documents\Notes.Doc&quot;
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<A NAME="876"><h3>Asynchronous download</h3></A>
<p>ActiveX controls authored in Visual Basic support asynchronous downloading 
of properties. Let's say that you have a PictureBox-like ActiveX control that can read 
its contents from a GIF or BMP file. Instead of waiting for the image to be 
completely downloaded, you'll do better to start an asynchronous download operation and 
immediately return the control to the user. The key to asynchronous downloading 
is the <I>AsyncRead </I>method of the UserControl object, whose syntax is this:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>AsyncRead Target, AsyncType, [PropertyName], [AsyncReadOptions]
</pre>
</td></tr>
</table>
</p>

<p><I>Target </I>is the URL of the property to be downloaded. 
<I>AsyncType </I>is the type of the property and can be one of the following values: 0-vbAsyncTypePicture (an 
image that can be assigned to a <I>Picture </I>property), 1-vbAsyncTypeFile (a file created by 
Visual Basic), or 2-vbAsyncTypeByteArray (a Byte array). 
<I>PropertyName </I>is the name of the property whose value is being downloaded and is useful when there are many 
properties that can be downloaded asynchronously. But keep in mind that there can 
be only one <I>AsyncRead </I>operation active at one time.
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The <I>AsyncRead </I>method supports a new 
<I>AsyncReadOptions</I> argument, a bit-fielded integer that accepts the values listed in Table 17-1. Using this values you 
can fine-tune the performance of your asynchronous download operation and 
decide whether the control can use the data in the local 
cache.
</p>
<p>
<B>Table 17-1.</B> <i>The available values for the AsyncReadOptions 
argument of the AsyncRead method.</i>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>AsyncRead Behavior</i></th>
</tr>

<tr>
<td valign="top">vbAsyncReadSynchronousDownload</td>
<td valign="top">1</td>
<td valign="top">Returns only when the down load is complete (synchronous download).</td>
</tr>

<tr>
<td valign="top">vbAsyncReadOfflineOperation</td>
<td valign="top">8</td>
<td valign="top">Uses only the locally cached resource.</td>
</tr>

<tr>
<td valign="top">vbAsyncReadForceUpdate</td>
<td valign="top">16</td>
<td valign="top">Forces the download from the  remote Web server, ignoring any copy in the local cache.</td>
</tr>

<tr>
<td valign="top">vbAsyncReadResynchronize</td>
<td valign="top">512</td>
<td valign="top">Updates the copy in the local cache only if the version on the remote Web server is more recent.</td>
</tr>

<tr>
<td valign="top">vbAsyncReadGetFromCacheIfNetFail</td>
<td valign="top">&amp;H80000</td>
<td valign="top">Uses the copy in the local cache if the connection to the remote Web server fails.</td>
</tr>
</table>
</p>


<p>On the companion CD, you'll find the complete source code of 
a ScrollablePictureBox ActiveX control, which supports scrolling of large images as well as 
their asynchronous downloading from the Internet. (See Figure 17-19.) The 
asynchronous download feature is provided in the form of a 
<I>PicturePath </I>property that, when assigned, starts the downloading process:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let PicturePath(ByVal New_PicturePath As String)
    m_PicturePath = New_PicturePath
    PropertyChanged &quot;PicturePath&quot;
    If Len(m_PicturePath) Then
        AsyncRead m_PicturePath, vbAsyncTypePicture, &quot;Picture&quot;
    End If
End Property
</pre>
</td></tr>
</table>
</p>

<p>You can cancel an asynchronous download operation at any moment using 
the <I>CancelAsyncRead </I>method:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CancelAsyncRead &quot;Picture&quot;
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F17ph19x.htm')"> <img src="F17ph19.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-19.</B> <i>The ScrollablePictureBox control running inside Internet Explorer.</i><!--/caption-->
</p>

<p>When the asynchronous download terminates, Visual Basic fires an 
<I>Async</I><I>ReadComplete </I>event in the UserControl module. This event receives an AsyncProperty 
object, whose most important properties are <I>PropertyName 
</I>and <I>Value</I>:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AsyncReadComplete(AsyncProp As AsyncProperty)
    If AsyncProp.PropertyName = &quot;Picture&quot; Then
        Set Image1.Picture = AsyncProp.Value
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The AsyncProperty object has been greatly enhanced in Visual Basic 6 and 
now includes properties such as <I>BytesMax</I>, 
<I>ByteRead</I>, <I>Status</I>, and 
<I>StatusCode</I>. For additional information, see the language documentation. Visual Basic 6 also exposes 
the <I>AsyncReadProgress </I>event, which fires when new data is available locally. You 
can use this event to display a progress bar that informs the user about the status of 
the operation:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AsyncReadProgress(AsyncProp As AsyncProperty)
    If AsyncProp.PropertyName = &quot;Picture&quot; Then
        Dim percent As Integer
        If AsyncProp.BytesMax &gt; 0 Then
            percent = (AsyncProp.BytesRead * 100&amp;) \ AsyncProp.BytesMax
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>AsyncReadProgress </I>and <I>AsyncReadComplete 
</I>events fire immediately if the data is stored on a local disk (in this case, 
<I>PicturePath </I>is the path of a file) or if it 
is in the local cache. If you aren't downloading an image (therefore, 
<I>AsyncProp.AsyncType </I>is 1-vbAsyncTypeFile or 2-vbAsyncTypeByteArray), you can read and process the 
data while it's being downloaded. This arrangement slows the process slightly, but 
usually the overhead isn't noticeable. If you open a file, you must close it before 
exiting the event procedure, and you must avoid calling 
<I>DoEvents</I> to avoid reentrancy problems. The 
<I>AsyncReadProgress </I>and 
<I>AsyncReadComplete</I> events occur when the 
download is complete: You can learn when this happens in the 
<I>AsyncReadProgress </I>event by checking that the 
<I>AsyncProp.StatusCode </I>property returns the 
value 6vbAsyncStatusCodeEndDownloadData.
</p>

<A NAME="877"><h3>Accessing the browser</h3></A>

<p>A control on an HTML page can do more than simply modify its appearance 
and behavior: It can manipulate the attributes of the page itself and of the other 
controls on it. You can access the container page using the Parent object, as this code does:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Changing the HTML page's foreground and background colors
With Parent.Script.document
    .bgColor = &quot;Blue&quot;
    .fgColor = &quot;White&quot;
End With
</pre>
</td></tr>
</table>
</p>

<p>You can also access and manipulate all the controls on the page using 
the ParentControls collection. But this method requires that you set 
the <I>ParentControlsType </I>property of ParentControls collection to the value vbNoExtender. This setting is 
necessary because Internet Explorer exposes an Extender object that can't be used 
from Visual Basic code.
</p>

<p>I don't have enough room to describe all the things that you can do once 
you have a reference to the page that contains the ActiveX control. If you're 
interested, you should look for additional information on the Internet Explorer Scripting 
Object Model on the Microsoft Web site.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>If you're writing a control that can be used on both regular forms and 
HTML pages, you need to know which container it's running in. You can do this by 
looking at the object returned by the Parent object:

<p>
<table><tr><td>
<pre>' Test if the control runs in an HTML page.
If TypeName(Parent) = &quot;HTMLDocument&quot; Then ...
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<A NAME="878"><h3><I>Show</I> and <I>Hide</I> events</h3></A>
<p>The <I>Show </I>event fires in the UserControl module when the page that contains it 
becomes visible, while the <I>Hide </I>event fires when the page becomes invisible but is 
still in the cache. Eventually, the page might become visible again, thus firing 
another <I>Show</I> event, or the browser might remove the page from the cache (for example, 
when the browser itself is closed), in which case the control receives a 
<I>Terminate </I>event.
</p>

<A NAME="879"><h3>Multithreaded ActiveX controls</h3></A>

<p>If you're going to use the ActiveX control with Microsoft Explorer or a 
multithreaded Visual Basic application, you should make the control apartment-threaded by 
selecting the corresponding Threading Model option in the General tab of the Project 
Properties dialog box. Beware, however, of a documented bug: Multithreaded controls don't 
fire the <I>Hide</I> event when they run under Internet Explorer 4.0. For an ActiveX control 
to behave correctly, you must mark it as single-threaded and enable the Active 
Desktop option. For more information, see article Q175907 of the Microsoft Knowledge Base.
</p>

<A NAME="880"><h2>Component Download</h2></A>
<p>When you're creating an HTML page that contains one or more ActiveX controls, 
you must provide a way for the browser to download and install the ActiveX control if 
it isn't already registered on the client machine.
</p>

<A NAME="881"><h3>Creating a package for deployment</h3></A>
<p>The mechanism used for deploying the ActiveX controls on client machines is 
based on Cabinet<I> </I>(CAB) files. CAB files are compressed files that can include 
multiple ActiveX controls (as well as other types of files, such as EXEs and DLLs) and that 
can be digitally signed if necessary. You create CAB files by running the Package and 
Deployment Wizard and selecting Internet Package in its second step. The wizard 
also creates a sample HTM file that you can use as a model for the page that will host 
the control. This file contains the correct value for the CODEBASE attribute, which 
informs the browser of the name of the CAB file and the version of the ActiveX 
control. The browser then downloads the CAB file if the control with that CLSID isn't 
registered on the client machine or if its version is older than the one specified in the 
HTML page. This is a portion of the sample HTML file created for the ClockOCX control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT ID=&quot;Clock&quot;
CLASSID=&quot;CLSID:27E428E0-9145-11D2-BAC5-0080C8F21830&quot;
CODEBASE=&quot;ClockOCX.CAB#version=1,0,0,0&quot;&gt;
&lt;/OBJECT&gt;
</pre>
</td></tr>
</table>
</p>

<p>CAB files can embed all the ancillary files that the ActiveX control needs to 
work properly, including data files and satellite DLLs. The list of dependencies of an 
ActiveX control is described in an INF file, which is produced by the Package and 
Deployment Wizard and also included in the CAB file itself.
</p>

<p>ActiveX controls authored in Visual Basic also require the Visual Basic 
runtime files. The default option in the Package and Deployment Wizard instructs the 
installing procedure to download the runtime files from the Microsoft Web site. This setting 
ensures that the user always receives the most recent version of those files and 
also reduces the burden on your Web site.
</p>

<A NAME="882"><h3>Safety</h3></A>
<p>When an ActiveX control is running in the browser, it could do all sort of evil 
things to the user's system, such as deleting system files, trashing the Registry, or 
stealing confidential data. You must, therefore, assure users that not only are your 
controls not so rude, but also that no other developer can use your controls to damage 
the machines they're running on.
</p>

<p>To broadcast the promise that your control doesn't (and can't) misbehave, 
you can mark it as &quot;Safe for initialization&quot; or &quot;Safe for scripting.&quot; If you declare that 
your control is safe for initialization, you're telling the browser that there's no way for 
an HTML page author to accidentally or intentionally do any harm by assigning 
values to the control's properties through the &lt;PARAM&gt; tags in the &lt;OBJECT&gt; section of 
the page. If you mark your control as safe for scripting, you're going a bit further 
because you're declaring that there's no way for a script on the page to set a property or call 
a method that can damage the system. By default, Microsoft Internet Explorer refuses 
to download components that aren't marked as safe for initialization and safe for 
scripting.
</p>

<p>Marking your control as safe for initialization or safe for scripting isn't a 
decision that you should take lightly. The fact that your control doesn't purposely do 
any damage isn't enough in most cases. Just to give you an idea of the subtleties that 
you must account for, imagine these scenarios:
</p>

<UL>

<p><li> You provide a method that lets developers save data to any path. 
The control isn't safe for scripting because a malicious developer might 
use this feature to overwrite important system files.
</li></p>
<p><li> You decide the location in which a temporary file is stored, but you 
leave developers free to write any amount of data to it. Again, the control 
isn't safe for scripting because a developer might deliberately consume all 
the free space on disk and bring Windows to an abrupt crash.
</li></p>
</UL>

<p>You mark your component as safe for initialization or safe for scripting in 
the Package and Deployment Wizard, as shown in Figure 17-20.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>You can quickly learn which ActiveX controls on your machine are 
safe for initialization or for scripting by using the OleView utility that comes with 
Visual Studio. This is the portion of the Registry that marks a control as safe:

<p>
<table><tr><td>
<pre>HKEY_CLASSES_ROOT
  \CLS
    \&lt;your control's CLSID&gt;
      \Implemented Categories
        \{7DD95802-9882-11CF-9FA9-00AA006C42C4}
        \{7DD95801-9882-11CF-9FA9-00AA006C42C4}
</pre>
</td></tr>
</table>
</p>

<p>The last two lines of the listing indicate safe for initialization and safe for 
scripting, respectively. Once you know how this information is recorded in the 
Registry, you can use the Regedit utility to modify these setting by adding or 
removing these keys.
</p>
</blockquote></div>
</p>


<p>
<A HREF="javascript:fullSize('F17ph20x.htm')"> <img src="F17ph20.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-20.</B> <i>The Package and Deployment Wizard lets you mark your controls as Safe For Initialization and Safe For Scripting.</i><!--/caption-->
</p>

<p>A more sophisticated way to address the safety problem is through 
the IObjectSafety ActiveX interface, which allows your component to 
programmatically specify which methods and properties are safe. This approach offers greater 
flexibility than just marking the component as safe. This is an advanced topic, however, and 
I won't cover it in this book.
</p>

<A NAME="883"><h3>Digital signatures</h3></A>
<p>It's obvious that marking a control to be safe isn't enough for most users. After 
all, anyone can mark a control as safe. Even if they trust your good intentions and 
your ability as a programmer, they can't be absolutely sure that the control is 
actually coming from you or that it hasn't been tampered with after you compiled it.
</p>

<p>Microsoft has solved this problem by making it possible for you to add a 
digital signature to ActiveX controls by using a public key encryption algorithm. To 
digitally sign a control, you need a private encoding key, which you obtain from a 
company that issues digital certificates&#8212;for example, VeriSign Inc. You must pay a fee to 
obtain such certificates, but they are quite affordable even for individual developers. For 
more information, pay a visit to 
<I>http://www.verisign.com</I>. Once you have obtained a 
certificate, you can sign your control&#8212;or, most likely, its CAB file&#8212;using the 
SignCode utility which is included in the ActiveX SDK. You can add a digital signature to 
EXE, DLL, and OCX files, but you need to do so only if you plan to distribute them 
without packaging them in a CAB file.
</p>

<A NAME="884"><h2>Licensing</h2></A>
<p>ActiveX controls can be sold as part of a business application to users or as 
stand-alone components to other developers. In the latter case, your customers should 
be able to use the control at design time and also redistribute it with their own 
applications. If you don't want <I>their </I>customers to be able to redistribute your control, 
you need to add a license key to your control.
</p>

<A NAME="885"><h3>The Require License Key option</h3></A>
<p>If you tick the Require License Key option on the General tab of the Project 
Properties dialog box and then compile the ActiveX control, Visual Basic generates a 
VBL (Visual Basic License) file that contains the license for the control. For example, 
this is the VBL file generated for the ClockOCX control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>REGEDIT
HKEY_CLASSES_ROOT\Licenses = Licensing: Copying the keys may be a violation
of established copyrights.
HKEY_CLASSES_ROOT\Licenses\27E428DE-9145-11D2-BAC5-0080C8F21830 = 
geierljeeeslqlkerffefeiemfmfglelketf
</pre>
</td></tr>
</table>
</p>

<p>As you see, a VBL file is nothing but a script for the Registry. When you 
create a standard installation procedure, the Wizard includes this file in the package. 
When other developers buy your control and install it on their machines, the 
installation routine uses this file to patch their Registries but won't copy the file on their 
hard disks. For this reason, when they redistribute your control as part of their 
applications, the VBL isn't included in the deployment package and their customers won't be 
able to use the control at design time (unless, of course, they buy a license from you).
</p>

<p>A control that requires a license key always looks for this key when it's 
instantiated. If the control is used in a compiled program, the license key is included 
in the executable EXE file. But if the control is used in an interpreted environment, 
no executable file can provide the key and the control has to look for it in the 
Registry. This means that to use the control on a Visual Basic form or in a Microsoft 
Office application (or another VBA-powered environment), you need the license to be 
installed in the Registry.
</p>

<p>If your control includes other ActiveX controls as constituent controls, 
you should license them for distribution as well; otherwise, your control won't 
correctly work at design time. Of all the controls included in the Visual Basic package, the 
only one that you can't redistribute is the DBGrid control. Note, however, that the 
Microsoft License Agreement specifies that you can use Microsoft controls in your 
ActiveX control only if you significantly expand their functionality. I never found 
anywhere how that &quot;significantly&quot; can be measured, though.
</p>

<A NAME="886"><h3>License keys for controls on Web pages</h3></A>
<p>The mechanism that I've just described doesn't address the particular nature of 
ActiveX controls on a Web page. In fact, it doesn't make sense to require that the user 
machine have the control's license key installed in the Registry. Nor do you want to 
send the license key with the control in a readable form in the HTML page. The 
solution to this difficulty comes in the form of a License Package File (or LPK file for 
short). You create this file by using the Lpk_Tool.Exe utility that you can find in 
the \Common\Tools\Vb\Lpk_Tool subdirectory. (See Figure 17-21.) Once you 
have created an LPK file, you reference it with a parameter to the &lt;PARAM&gt; tag, as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;PARAM NAME=&quot;LPKPath&quot; VALUE=&quot;ClockOCX.lpk&quot;&gt;
</pre>
</td></tr>
</table>
</p>

<p>This parameter tells the browser where it can download the license key of 
the ActiveX control; the license key is transferred each time the page is 
downloaded because the license keys of ActiveX controls found on HTML pages are never 
added to the client machine's Registry. The value of the 
<I>LPKPath </I>parameter can be a relative or an absolute URL, but in the latter case you might have problems when 
moving the HTM file to another location of your site. The owner of the Web site 
must have purchased a license for your ActiveX control to be able to send it in HTML 
pages. In other words, as far as the license mechanism is concerned, Web site owners 
are regarded as developers.
</p>

<p>
<A HREF="javascript:fullSize('F17ph21x.htm')"> <img src="F17ph21.JPG" width=404 height=193 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-21.</B> <i>The Lpt_Tool utility can create an LPK file containing the license keys of one or more ActiveX controls.</i><!--/caption-->
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
It should be made clear that the license mechanism provided by 
Visual Basic isn't bulletproof. After all, a malicious developer has only to copy the 
VBL from the installation diskette or&#8212;if that file is no longer available&#8212;retrieve 
the relevant information from the Registry and re-create the VBL file. Actually, 
the only thing you can be sure of is that the license key won't be accidentally 
included in an installation procedure. If you need a more secure system, you should 
devise an alternative method based on alternate locations of the Registry or 
custom license files loaded in system directories.
</blockquote></div>
</p>

<p>If you have carefully read <a href="#A100">Chapter 16</a> and this chapter, you might be surprised to 
see how few features Visual Basic 6 has added to those already available in Visual 
Basic 5. But you see the real potential of components and controls when you add 
ADO to the equation and begin to build data-aware classes and components. These 
new capabilities are described in the <a href="#A111">next chapter</a>.
</p>

<a name="A111"></a><h2>8.3 Chapter 18 -- ADO Components</h2>

<A HREF="#A110">[Previous]</A> <A HREF="#A112">[Next]</A><P>


<font size="+3">Chapter 18</font>

<A NAME="887"><h1>ADO Components</h1></A>
<p>Regular COM components are great when you're working with single blocks of data held in memory&#8212;for example, all the information you have about a customer. But COM components are awkward to work with when your data is to be read from and written to a database. Yes, you can implement a persistence mechanism based on custom <I>Load </I>and <I>Save </I>methods (or based on the new persistable classes in Microsoft Visual Basic 6), but this means a lot of additional work for the author of the component and for the programmer who uses it.</p>

<p>Visual Basic 6 offers a novel solution to this problem, based on new binding capabilities in ADO. In this chapter, I show you how to create data source classes that read data from a database. I also show you how to create consumer classes that bind themselves to data sources to retrieve data and automatically receive notifications when another record becomes current. You can then turn these classes into COM components so that you can reuse them more easily. I also illustrate how to create a custom version of the ADO Data control, a feat that wasn't possible in Visual Basic 5 (whose binding capabilities permitted you to create data consumer controls only, not data sources). All the data-aware classes you create can be used exactly as data-aware objects provided by Visual Basic itself, such as the DataEnvironment designer and the ADO Data control.</p>


<a name="A112"></a><h3>8.3.1 Data Source Classes</h3>

<A HREF="#A111">[Previous]</A> <A HREF="#A113">[Next]</A><P>

<A NAME="888"><h1>Data Source Classes</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>To create a data source class, you need to follow a few elementary steps. First add a reference to the Microsoft ActiveX Data Objects 2.0 (or 2.1) Library. Then set the <I>DataSourceBehavior </I>attribute of the class to 1-vbDataSource, which automatically adds a reference to the Microsoft Data Source Interfaces type library (Msdatsrc.tlb). You can now use a new <I>GetDataMember </I>event, the <I>DataMembers </I>property, and the <I>DataMemberChanged </I>method of the class. You can set the <I>DataSourceBehavior </I>attribute to the value 1-vbDataSource in Private classes in any type of project or in Public classes in ActiveX DLL projects, but you can't do that in ActiveX EXE projects because the data source interfaces can't work across processes. You can also create a data source class by selecting the appropriate template when you add a new class module to the current project: In this case, you'll get a class with some skeleton code already present, but you have to add a reference to the Msdatsrc.tlb library manually. You can also create a data source class using the Data Form Wizard.</p>

<A NAME="889"><h2>The <I>GetDataMember </I>Event</h2></A>
<p>The key to building a data source is the code that you write in the <I>GetDataMember </I>event. This event receives a <I>DataMember </I>argument&#8212;a string that identifies which particular member the data consumer is requesting&#8212;and a <I>Data </I>argument declared as Object. In the simplest case, you can ignore the first argument and return an object that supports the necessary ADO interfaces in the <I>Data </I>argument. You can return an ADO Recordset, another data source class, or an OLEDBSimpleProvider class that you've created elsewhere in the application (as described in the &quot;<A HREF="#897">OLE DB Simple Providers</A>&quot; section later in this chapter).</p>

<p>I've prepared a demonstration program that builds on an ArrayDataSource class, whose source code is on the companion CD. The purpose of this class is to let you browse the contents of a two-dimensional array of Variants using bound controls: You can load data into an array, pass the array to the <I>SetArray </I>method of the class, and then display its contents in a DataGrid or another data-aware control. The user can modify existing values, delete records, and even add new ones. When the editing is completed, the client code can call the class's <I>GetArray </I>method to retrieve the new contents of the array.</p>

<p>The ArrayDataSource class, like most data source classes, incorporates an ADO Recordset object. The <I>SetArray </I>method creates the Recordset, adds the fields whose names have been passed in the <I>Fields </I>array argument, and then fills the Recordset with the data contained in the <I>Values </I>array passed as an argument to the method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private rs As ADODB.Recordset      ' Module-level variable

Sub SetArray(Values As Variant, Fields As Variant)
    Dim row As Long, col As Long
    ' Build a new ADO Recordset.
    If Not (rs Is Nothing) Then
        If rs.Status = adStateOpen Then rs.Close
    End If
    Set rs = New ADODB.Recordset
    ' Create the Fields collection.
    For col = LBound(Fields) To UBound(Fields)
        rs.Fields.Append Fields(col), adBSTR
    Next
    ' Move data from the array to the Recordset.
    rs.Open
    For row = LBound(Values) To UBound(Values)
        rs.AddNew
        For col = 0 To UBound(Values, 2)
            rs(col) = Values(row, col)
        Next
    Next
    rs.MoveFirst
    ' Inform consumers that the data has changed.
    DataMemberChanged &quot;&quot;
End Sub
</pre>
</td></tr></table></p>

<p>The call to the <I>DataMemberChanged </I>method informs bound controls (more generally, data consumers) that a new data set is available. Both arguments to the <I>SetArray </I>method are declared as Variants, so you can pass them an array of any data type. After the Recordset has been created, it can be safely returned in the <I>GetDataMember </I>event. This event fires the first time a data consumer asks for data and whenever the <I>DataMemberChanged </I>method is called:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return the Recordset to the data consumer.
Private Sub Class_GetDataMember(DataMember As String, Data As Object)
    Set Data = Recordset
End Sub

' Provides &quot;Safe&quot; access to the Recordset, 
' in that it raises a meaningful error if the Recordset is set to Nothing.
Property Get Recordset() As ADODB.Recordset
    If rs Is Nothing Then
        Err.Raise 1001, , &quot;No data array has been provided&quot;
    Else
        Set Recordset = rs
    End If
End Property
</pre>
</td></tr></table></p>

<p>The event procedure references the Private <I>rs </I>variable through the Public <I>Recordset </I>property; this raises an error with a meaningful message instead of the standard &quot;Object variable or With block variable not set&quot; error message that would be raised if the client code assigns the data source to a bound control before calling the <I>SetArray </I>method. A data source class should also expose all the properties and methods that you expect from an ADO source, including all the navigational <I>Move</I>xxxx methods, the <I>AddNew</I> and <I>Delete </I>methods, the <I>EOF </I>and <I>BOF </I>properties, and so on. The following code simply delegates to the inner <I>rs </I>variable through the <I>Recordset </I>property, which ensures that proper error checking is performed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Partial listing of properties and methods
Public Property Get EOF() As Boolean
    EOF = Recordset.EOF
End Property

Public Property Get BOF() As Boolean
    BOF = Recordset.BOF
End Property

Public Property Get RecordCount() As Long
    RecordCount = Recordset.RecordCount
End Property

Sub MoveFirst()
    Recordset.MoveFirst
End Sub

Sub MovePrevious()
    Recordset.MovePrevious
End Sub
' And so on...
</pre>
</td></tr></table></p>

<p>The code in the class needs to convert the data stored in the Recordset back into a Variant array when the client application requests it. This conversion occurs in the <I>GetArray </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function GetArray() As Variant
    Dim numFields As Long, row As Long, col As Long
    Dim Bookmark As Variant
    ' Remember the current record pointer.
    Bookmark = Recordset.Bookmark
    
    ' Create the result array, and fill it with data from the Recordset.
    numFields = rs.Fields.Count
    ReDim Values(0 To rs.RecordCount - 1, 0 To numFields - 1) As String
    ' Fill the array with data from the Recordset.
    rs.MoveFirst
    For row = 0 To rs.RecordCount - 1
        For col = 0 To numFields - 1
            Values(row, col) = rs(col)
        Next
        rs.MoveNext
    Next
    GetArray = Values
    ' Restore the record pointer.
    rs.Bookmark = Bookmark
End Function
</pre>
</td></tr></table></p>

<p>The complete version of the class on the companion CD supports additional properties, including the <I>BOFAction </I>and <I>EOFAction </I>properties, which let the class behave similarly to a Data control. To test-drive the ArrayDataSource class, create a form with three TextBox controls and a set of navigational buttons, as shown in Figure 18-1. Then add this code in the <I>Form_Load</I> event procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyData As New ArrayDataSource           ' Module-level variable

Private Sub Form_Load()
    ReDim Fields(0 To 2) As String           ' Create the Fields array.
    Fields(0) = &quot;ID&quot;
    Fields(1) = &quot;Name&quot;
    Fields(2) = &quot;Department&quot;
    
    ReDim Values(0 To 3, 0 To 2) As String   ' Create the Values array.
    Values(0, 0) = 100                       ' ID field
    Values(0, 1) = &quot;Christine Johnson&quot;       ' Name field
    Values(0, 2) = &quot;Marketing&quot;               ' Department field
    ' Fill other records (omitted...)
    MyData.SetArray Values, Fields           ' Initialize the data source.

    ' Bind the controls.
    Set txtID.DataSource = MyData
    txtID.DataField = &quot;ID&quot;
    Set txtName.DataSource = MyData
    txtName.DataField = &quot;Name&quot;
    Set txtDepartment.DataSource = MyData
    txtDepartment.DataField = &quot;Department&quot;
End Sub
</pre>
</td></tr></table></p>

<p>When the client program needs to retrieve the data edited by the user, it invokes the <I>GetArray </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Values() As String
Values = MyData.GetArray()
</pre>
</td></tr></table></p>

<p>
<img src="F18ph01.GIF" width=369 height=258 border=0>
<p>
<!--caption--><B>Figure 18-1.</B> <i>A client form to test-drive the ArrayDataSource class.</i><!--/caption-->


<A NAME="890"><h2>Support for the <I>DataMember </I>Property</h2></A>
<p>The ArrayDataSource class is the simplest type of data source class that you can build with Visual Basic 6 and doesn't take into account the <I>DataMember </I>argument passed to the <I>GetDataMember </I>event. You can greatly enhance your class by adding support for the <I>DataMember </I>property in bound controls. All you have to do is build and return a different Recordset, depending on the <I>DataMember </I>you receive.</p>

<p>I've prepared a sample data source class, named FileTextDataSource, which binds its consumers to the fields of a semicolon-delimited text file. If you want to bind one or more controls to such a class, you must specify the name of the text file in the control's <I>DataMember </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Code in the client form
Dim MyData As New TextFileDataSource

Private Sub Form_Load()
    ' This is the path for data files.
    MyData.FilePath = DB_PATH
    ' Bind the text controls. (Their DataField was set at design time.)
    Dim ctrl As Control
    For Each ctrl In Controls
        If TypeOf ctrl Is TextBox Then
            ctrl.DataMember = &quot;Publishers&quot;
            Set ctrl.DataSource = MyData
        End If
    Next
End Sub
</pre>
</td></tr></table></p>

<p>The TextFileDataSource class module contains more code than the simpler ArrayDataSource class does, but most of it is necessary just to parse the text file and move its contents into the private Recordset. The first line in the text file is assumed to be the semicolon-delimited list of field names:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Const DEFAULT_EXT = &quot;.DAT&quot;        ' Default extension for text files
Private rs As ADODB.Recordset
Private m_DataMember As String, m_File As String, m_FilePath As String

Private Sub Class_GetDataMember(DataMember As String, Data As Object)
    If DataMember = &quot;&quot; Then Exit Sub
    ' Re-create the Recordset only if necessary.
    If DataMember &lt;&gt; m_DataMember Or (rs Is Nothing) Then
        LoadRecordset DataMember
    End If
    Set Data = rs
End Sub

Private Sub LoadRecordset(ByVal DataMember As String)
    Dim File As String, fnum As Integer
    Dim row As Long, col As Long, Text As String
    Dim Lines() As String, Values() As String

    On Error GoTo ErrorHandler
    File = m_FilePath &amp; DataMember
    If InStr(File, &quot;.&quot;) = 0 Then File = File &amp; DEFAULT_EXT

    ' Read the contents of the file in memory.
    fnum = FreeFile()
    Open File For Input As #fnum
    Text = Input$(LOF(fnum), #fnum)
    Close #fnum
    
    ' Close the current Recordset, and create a new one.
    CloseRecordset
    Set rs = New ADODB.Recordset
    ' Convert the long string into an array of records.
    Lines() = Split(Text, vbCrLf)
    ' Get the field names, and append them to the Fields collection.
    Values() = Split(Lines(0), &quot;;&quot;)
    For col = 0 To UBound(Values)
        rs.Fields.Append Values(col), adBSTR
    Next

    ' Read the actual values, and append them to the Recordset.
    rs.Open
    For row = 1 To UBound(Lines)
        rs.AddNew
        Values() = Split(Lines(row), &quot;;&quot;)
        For col = 0 To UBound(Values)
            rs(col) = Values(col)
        Next
    Next
    rs.MoveFirst
    
    ' Remember DataMember and File for the next time.
    m_DataMember = DataMember
    m_File = File
    Exit Sub
ErrorHandler:
    Err.Raise 1001, , &quot;Unable to load data from &quot; &amp; DataMember
End Sub

' If the Recordset is still open, close it.
Private Sub CloseRecordset()
    If Not (rs Is Nothing) Then rs.Close
    m_DataMember = &quot;&quot;
End Sub
</pre>
</td></tr></table></p>

<p>The Visual Basic documentation suggests that you return the same Recordset when multiple consumers ask for the same <I>DataMember</I>. For this reason, the class stores the <I>DataMember </I>argument in the <I>m_DataMember </I>private variable and reloads the text file only if strictly necessary. When I traced the source code, however, I found that the <I>GetDataMember </I>event is called just once with a nonempty string in the <I>DataMember </I>argument when the client program assigns the instance of the class to the <I>DataSource </I>property of the first bound control. Each time after that, the event receives an empty string.</p>

<p>The TextFileDataSource class on the companion CD includes many other features that I don't have room to describe here. Figure 18-2 shows the demonstration program, which loads two forms, a record-based view of a text file and a table-based view of the same file. Because the controls on both forms are bound to the same instance of the TextFileDataSource class, any time you move the record pointer or edit a field value in one form the contents of the other form are immediately updated. The class also exposes a <I>Flush </I>method, which writes the new values back to disk. This method is automatically invoked during the <I>Class_Terminate </I>event, so when the last form unloads and the data source object is released, the <I>Flush</I> method automatically updates the data file.</p>

<p>
<A HREF="javascript:fullSize('F18ph02x.htm')"> <img src="F18ph02.JPG" width=404 height=293 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-2.</B> <i>The demonstration program of the TextFileDataSource class can open different views of the same data file. If the views use the same instance of the class, they're automatically synchronized.</i><!--/caption-->
</p>

<p>The TextFileDataSource class also offers an example of how you can add items to the DataMembers collection to inform data consumers about the available DataMembers items. The class module implements this feature in the <I>Property Let FilePath</I> procedure, where it loads the collection with all the data files in the specified directory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let FilePath(ByVal newValue As String)
    If newValue &lt;&gt; m_FilePath Then
        m_FilePath = newValue
        If m_FilePath &lt;&gt; &quot;&quot; And Right$(m_FilePath, 1) &lt;&gt; &quot;\&quot; Then
            m_FilePath = m_FilePath &amp; &quot;\&quot;
        End If
        RefreshDataMembers
    End If
End Property

' Rebuild the DataMembers collection.
Private Sub RefreshDataMembers()
    Dim File As String
    DataMembers.Clear
    ' Load all the file names in the directory.
    File = Dir$(m_FilePath &amp; &quot;*&quot; &amp; DEFAULT_EXT)
    Do While Len(File)
        ' Drop the default extension.
        DataMembers.Add Left$(File, Len(File) - Len(DEFAULT_EXT))
        File = Dir$()
    Loop
End Sub
</pre>
</td></tr></table></p>

<p>The TextFileDataSource class is bound to its consumers at run time. Therefore, there's no point in filling the DataMembers collection because the clients can't query this information. But this technique becomes useful when you're creating ActiveX controls that work as data sources because the list of all available DataMembers items appears right in the Properties windows of the controls that are bound to the ActiveX control.</p>

<A NAME="891"><h2>Custom ActiveX Data Controls</h2></A>
<p>Creating a custom Data control is simple because ActiveX controls can work as data sources exactly as classes and COM components can. So you can create a user interface that meets your needs, such as the one depicted in Figure 18-3, set the UserControl's <I>DataSourceBehavior </I>attribute to 1-vbDataSource, and add all the properties and methods that developers expect from a Data control, such as <I>ConnectionString</I>, <I>RecordSource</I>, <I>EOFAction</I>, and <I>BOFAction</I>. If you exactly duplicate the ADO Data interface, you might even be able to replace a standard ADO control with your custom Data control without changing a single line of code in client forms.</p>

<p>
<img src="F18ph03.GIF" width=320 height=96 border=0>
<p>
<!--caption--><B>Figure 18-3.</B> <I>A custom Data control that includes buttons to add and delete records.</i><!--/caption-->


<p>A custom Data control that connects to regular ADO sources doesn't need to manufacture an ADO recordset itself, as the data source classes I've shown you so far have. Instead, it internally creates an ADO Connection object and an ADO Recordset object based on the values of Public properties and then passes the Recordset to consumers in the <I>GetDataMember </I>event. The following code is a partial listing of the MyDataControl UserControl module. (The complete source code is on the companion CD.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private cn As ADODB.Connection, rs As ADODB.Recordset
Private CnIsInvalid As Boolean, RsIsInvalid As Boolean

Private Sub UserControl_GetDataMember(DataMember As String, Data As Object)
    On Error GoTo Error_Handler
    ' Re-create the connection if necessary.
    If cn Is Nothing Or CnIsInvalid Then
        ' If the Recordset and the connection are open, close them.
        CloseConnection
        ' Validate the ConnectionString property.
        If Trim$(m_ConnectionString) = &quot;&quot; Then
            Err.Raise 1001, , &quot;ConnectionString can't be an empty string&quot;
        Else
            ' Open the connection.
            Set cn = New ADODB.Connection
            If m_Provider &lt;&gt; &quot;&quot; Then cn.Provider = m_Provider
            cn.Open m_ConnectionString
            CnIsInvalid = False
        End If
    End If

    ' Re-create the Recordset if necessary.
    If rs Is Nothing Or RsIsInvalid Then
        Set rs = New ADODB.Recordset
        rs.CursorLocation = m_CursorLocation
        rs.Open RecordSource, cn, CursorType, LockType, CommandType
        rs.MoveFirst
        RsIsInvalid = False
    End If
    ' Return the Recordset to the data consumer.
    Set Data = rs
    Exit Sub

Error_Handler:
    Err.Raise Err.Number, Ambient.DisplayName, Err.Description
    CloseConnection
End Sub

' Close the Recordset and the connection in the correct way.
Private Sub CloseRecordset()
    If Not rs Is Nothing Then
        If rs.State &lt;&gt; adStateClosed Then rs.Close
        Set rs = Nothing
    End If
End Sub

Private Sub CloseConnection()
    CloseRecordset
    If Not cn Is Nothing Then
        If cn.State &lt;&gt; adStateClosed Then cn.Close
        Set cn = Nothing
    End If
End Sub
</pre>
</td></tr></table></p>

<p>A custom Data control also differs from data source classes in that the code to navigate the Recordset is included in the UserControl module. In the MyDataControl module, the six navigational buttons belong to the <I>cmdMove </I>control array, which slightly simplifies their management:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdMove_Click(Index As Integer)
    If rs Is Nothing Then Exit Sub    ' Exit if the Recordset doesn't exist.
    Select Case Index
        Case 0
            rs.MoveFirst
        Case 1
            If rs.BOF Then
                Select Case BOFAction
                    Case mdcBOFActionEnum.mdcBOFActionMoveFirst
                        rs.MoveFirst
                    Case mdcBOFActionEnum.mdcBOFActionBOF
                        ' Do nothing.
                End Select
            Else
                rs.MovePrevious
            End If
        Case 2
            If rs.EOF = False Then rs.MoveNext
            If rs.EOF = True Then
                Select Case EOFAction
                    Case mdcEOFActionEnum.mdcEOFActionAddNew
                        rs.AddNew
                    Case mdcEOFActionEnum.mdcEOFActionMoveLast
                        rs.MoveLast
                    Case mdcEOFActionEnum.mdcEOFActionEOF
                        ' Do nothing.
                End Select
            End If
        Case 3
            rs.MoveLast
        Case 4
            rs.AddNew
        Case 5
            rs.Delete
    End Select
End Sub
</pre>
</td></tr></table></p>

<p>Each time the client assigns a value to a property that affects the Connection or the Recordset, the code in the MyDataControl module resets the <I>cn </I>or the <I>rs </I>variables to Nothing and sets the <I>CnIsInvalid </I>or <I>RsIsInvalid </I>variables to True so that in the next <I>GetDataMember</I> event the connection or the Recordset is correctly rebuilt:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get ConnectionString() As String
    ConnectionString = m_ConnectionString
End Property

Public Property Let ConnectionString(ByVal New_ConnectionString As String)
    m_ConnectionString = New_ConnectionString
    PropertyChanged &quot;ConnectionString&quot;
    CnIsInvalid = True
End Property
</pre>
</td></tr></table></p>

<p>Remember to close the connection when the control is about to terminate:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_Terminate()
<I>    </I>CloseConnection
End Sub
</pre>
</td></tr></table></p>


<a name="A113"></a><h3>8.3.2 Data Consumer Classes</h3>

<A HREF="#A112">[Previous]</A> <A HREF="#A114">[Next]</A><P>

<A NAME="892"><h1>Data Consumer Classes</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>A <I>data consumer</I> is a class or a component that binds itself to a data source. There are two types of data consumer objects: simple consumer and complex consumer. A simple consumer class or component binds one or more of its properties to the current row in the data source and so resembles an ActiveX control with multiple bindable properties. A complex consumer can bind its properties to multiple rows in the data source and resembles a grid control.</p>

<A NAME="893"><h2>Simple Data Consumers</h2></A>
<p>When you're transferring data from sources to consumers, consumers are passive entities. The object that actively moves data from the source to the consumer and back is the BindingCollection object.</p>

<A NAME="894"><h3>The BindingCollection object</h3></A>
<p>To create a BindingCollection object, you need to reference the Microsoft Data Binding Collection library in the References dialog box. The BindingCollection's most important members are the <I>DataSource </I>property and the <I>Add </I>method. To set up a connection between a data source and a data consumer, you need to assign the data source object to the BindingCollection's <I>DataSource </I>property and then call the <I>Add </I>method for each data consumer that must be linked to the source. The complete syntax for the <I>Add </I>method follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add(BoundObj, PropertyName, DataField, [DataFormat], [Key]) As Binding
</pre>
</td></tr></table></p>

<p><I>BoundObj </I>is the data consumer object, <I>PropertyName </I>is the name of the property in the data consumer that's bound to a field of the data source, <I>DataField</I> is the name of the field in the source, <I>DataFormat </I>is an optional StdDataFormat object that affects how data is formatted during the transfer to and from the consumer, and <I>Key </I>is the key of the new Binding object in the collection. You can call multiple <I>Add </I>methods to bind multiple consumers or multiple properties of the same consumer.</p>

<p>A common data source is the ADO Recordset object, but you can also use a DataEnvironment object, an OLE DB Simple Provider, and any data source class or component that you've defined in code. The following code shows how you can bind two TextBox controls to fields of a database table through an ADO Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Const DBPath = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
Dim cn As New ADODB.Connection, rs As New ADODB.Recordset 
Dim bndcol As New BindingCollection

' Open the Recordset.
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.3.51;Data Source=&quot; &amp; DBPATH
rs.Open &quot;Employees&quot;, cn, adOpenStatic, adLockReadOnly 
' Use the Bindingcollection object to bind two TextBox controls to the
' FirstName and LastName fields of the Employees table.
Set bndcol.DataSource = rs
bndcol.Add txtFirstName, &quot;Text&quot;, &quot;FirstName&quot;, , &quot;FirstName&quot;
bndcol.Add txtLastName, &quot;Text&quot;, &quot;LastName&quot;, , &quot;LastName&quot;
</pre>
</td></tr></table></p>

<p>You can control how data is formatted in the consumer by defining a StdDataFormat object, setting its <I>Type </I>and <I>Format </I>properties, and then passing it as the fourth argument of a BindingCollection's <I>Add </I>method, as the code below demonstrates.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim DateFormat As New StdDataFormat
DateFormat.Type = fmtCustom
DateFormat.Format = &quot;mmmm dd, yyyy&quot;
' One StdDataFormat object can serve multiple consumers.
bndcol.Add txtBirthDate, &quot;Text&quot;, &quot;BirthDate&quot;, DateFormat, &quot;BirthDate&quot;
bndcol.Add txtHireDate, &quot;Text&quot;, &quot;HireDate&quot;, DateFormat, &quot;HireDate&quot;
</pre>
</td></tr></table></p>

<p>If the data source exposes multiple DataMember objects, as is the case for DataEnvironment objects, you select which one is bound to data consumers by using the BindingCollection's <I>DataMember</I> property, exactly as you do when you bind controls to an ADO Data control.</p>

<p>The BindingCollection object exposes a few other properties and methods that give you more control over the binding process. The <I>UpdateMode </I>enumerated property determines when data is updated in the data source: For the default value, 1vbUpdateWhenPropertyChanges, the source is updated as soon as a property's value changes, whereas the value 2-vbUpdateWhenRowChanges causes the updates to the source only when the record pointer moves to another record. When the value is 0vbUsePropertyAttributes, the decision when to update the source depends on the state of the Update Immediate option in the Procedure Attributes dialog box.</p>

<p>Each time you execute an <I>Add </I>method, you actually add a Binding object to the collection. You can later query the Binding object's properties to acquire information about the binding process. Each Binding object exposes the following properties: <I>Object</I> (a reference to the bound data consumer), <I>PropertyName</I> (the name of the bound property), <I>DataField </I>(the field in the source), <I>DataChanged </I>(True if data in the consumer has been changed), <I>DataFormat </I>(the StdDataFormat object used to format data), and <I>Key </I>(the key of the Binding object in the collection). For example, you can determine whether the value in a consumer has changed by executing the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim bind As Binding, changed As Boolean
For Each bind in bndcol
    changed = changed Or bndcol.DataChanged
Next
If changed Then Debug.Print &quot;Data has been changed&quot;
</pre>
</td></tr></table></p>

<p>If you assigned a key to a Binding object, you can directly read and modify its properties:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Set the ForeColor of the TextBox control bound to the HireDate field.
bndcol(&quot;HireDate&quot;).Object.ForeColor = vbRed
</pre>
</td></tr></table></p>

<p>The <I>UpdateControls</I> method of the BindingCollection object updates all the consumers with values from the current row in the data source and resets the <I>DataChanged </I>properties of all Binding objects to False.</p>

<p>Finally, you can trap any error that occurs in the binding mechanism by using the BindingCollection's <I>Error </I>event. To trap this event from a BindingCollection object, you must have declared it using a <I>WithEvents</I> clause:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents bndcol As BindingCollection

Private Sub bndcol_Error(ByVal Error As Long, ByVal Description As String,_
    ByVal Binding As MSBind.Binding, fCancelDisplay As Boolean)
    ' Deal here with binding errors.
End Sub
</pre>
</td></tr></table></p>

<p><I>Error </I>is the error code, <I>Description </I>is the error description, <I>Binding</I> is the Binding object that caused the error, and <I>fCancelDisplay</I> is a Boolean argument that you can set to False if you don't want to display the standard error message.</p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
When binding a property of a control to a field in the data source, you should ensure that the control correctly sends the necessary notification to the binding mechanism when the property changes. For example, you can bind the <I>Caption </I>property of a Label or Frame control to a data source, but if you then change the value of the <I>Caption </I>property through code the control doesn't inform the source that the data has changed. Consequently, the new value isn't written to the database. In this case, you must force the notification yourself by using the BindingCollection object's <I>DataChanged </I>property.
</blockquote></div></p>

<A NAME="895"><h3>Data consumer classes and components</h3></A>
<p>To create a simple data consumer class, you only need to set the <I>DataBindingBehavior </I>attribute of the class to the value 1-vbSimpleBound in the Properties window. This setting adds two new methods that you can use from within the class module: <I>PropertyChange </I>and <I>CanPropertyChange</I>.</p>

<p>Implementing a simple data consumer class or component is similar to creating an ActiveX control that can be bound to a data source. In the <I>Property Let</I> procedures of all the bound properties, you must make sure that a property value can change by invoking the <I>CanPropertyChange </I>function. Then you call the <I>PropertyChange </I>method to inform the binding mechanism that the value has indeed changed. (Be aware that the <I>CanPropertyChange </I>method always returns True in Visual Basic, as I explained in the &quot;<A HREF="#858"><I>PropertyChanged</I> and <I>CanPropertyChange</I> Methods</A>&quot; section of Chapter 17.) The following code is taken from the demonstration program on the companion CD and shows how the sample CEmployee data consumer class implements its <I>FirstName </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CEmployee class module
Dim m_FirstName As String

Property Get FirstName() As String
    FirstName = m_FirstName
End Property

Property Let FirstName(ByVal newValue As String)
    If newValue &lt;&gt; m_FirstName Then
        If CanPropertyChange(&quot;FirstName&quot;) Then
            m_FirstName = newValue
            PropertyChanged &quot;FirstName&quot;
        End If
    End If
End Property
</pre>
</td></tr></table></p>

<p>You bind the properties of a data consumer class to the fields in a data source using a BindingCollection object. The binding operation can be performed in the client form or module (as you saw in the previous section) or inside the data consumer class itself. The latter solution is usually preferable because it encapsulates the code in the class and prevents it from being scattered in all its clients. If you follow this approach, you must provide a method that lets clients pass a data source to the class: This can be a data source class, an ADO Data control or Recordset, or a DataEnvironment object. The class can use this reference as an argument to the <I>DataSource </I>property of an internal BindingCollection object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In the CEmployee class module
Private bndcol As New BindingCollection

Property Get DataSource() As Object
    Set DataSource = bndcol.DataSource
End Property

Property Set DataSource(ByVal newValue As Object)
    Set bndcol = New BindingCollection
    Set bndcol.DataSource = newValue
    bndcol.Add Me, &quot;FirstName&quot;, &quot;FirstName&quot;, , &quot;FirstName&quot;
    bndcol.Add Me, &quot;LastName&quot;, &quot;LastName&quot;, , &quot;LastName&quot;
    bndcol.Add Me, &quot;BirthDate&quot;, &quot;BirthDate&quot;, , &quot;BirthDate&quot;
End Property
</pre>
</td></tr></table></p>

<p>The following code shows how a client form can bind the CEmployee class to a Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cn As New ADODB.Connection, rs As New ADODB.Recordset
Dim employee As New CEmployee
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source=&quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
rs.Open &quot;Employees&quot;, cn, adOpenKeyset, adLockOptimistic
Set employee.DataSource = rs
</pre>
</td></tr></table></p>

<p>When the program modifies a value of a bound property in the data consumer class, the corresponding field in the data source is updated, provided that the data source is updatable. But the precise moment the field is updated depends on the <I>UpdateMode </I>setting of the BindingCollection object. If <I>UpdateMode</I> is 2vbUpdateWhenRowChanges, the data source is updated only when another record becomes the current record, whereas if the setting is 1vbUpdateWhenPropertyChanges the Recordset is updated immediately. If you set <I>UpdateMode </I>= 0-vbUsePropertyAttributes, the data source is updated immediately only if the property is marked with the <I>Update Immediately</I> attribute in the Procedure Attributes dialog box.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>Even if the data source is an ADO Recordset linked to a database, updating the data source doesn't mean that the database is immediately updated, but only that the new value is assigned to the Field's <I>Value </I>property. A way to force the update of the underlying database is to execute the Recordset's <I>Move </I>method using 0 as the argument. This doesn't actually move the record pointer but flushes to the database the current contents of the Fields collection. Oddly, the Recordset's <I>Update </I>method doesn't work in this situation.
</blockquote></div></p>

<p>Here's another peculiarity in the implementation of this feature: The setting 0vbUpdateWhenPropertyChanges doesn't seem to work as the documentation states, and it doesn't immediately update the value in the Recordset. The only way to update the Recordset when a property changes is by using the setting 0vbUsePropertyAttributes and ticking the Update Immediate check box in the Procedure Attributes dialog box.</p>

<A NAME="896"><h2>Complex Data Consumers</h2></A>
<p>Building a complex data consumer is slightly more difficult than building a simple data consumer. The reason for the additional difficulty is mostly the lack of good and complete documentation sources. The first step in creating a complex data consumer class is to set the <I>DataBindingBehavior </I>to the value 2-vbComplexBound. Alternatively, you can select the Complex Data Consumer template from the template gallery when you create a new class module. In both cases, you'll find that a couple of properties&#8212;<I>DataMember </I>and <I>DataSource&#8212;</I>have been added to the class module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get DataSource() As DataSource
End Property
Public Property Set DataSource(ByVal objDataSource As DataSource)
End Property

Public Property Get DataMember() As DataMember
End Property
Public Property Let DataMember(ByVal DataMember As DataMember)
End Property
</pre>
</td></tr></table></p>

<p>When you set <I>DataBindingBehavior</I> to 2-vbComplexBound in a UserControl module, Visual Basic doesn't create the templates for these two properties for you&#8212;you must do it manually.</p>

<p>ActiveX controls that work as complex data consumers are typically gridlike controls. They expose the <I>DataMember </I>and <I>DataSource </I>properties, but unlike ActiveX controls that behave as simple data consumers, these properties aren't Extender properties. You can't count on the automatic binding mechanism that you can specify in the Procedure Attributes dialog box, and you must implement these two properties all by yourself.</p>

<p>Now you need to add a few type libraries in the References dialog box. When you're building a complex data consumer, you need the Microsoft Data Sources Interfaces (Msdatsrc.tlb), the Microsoft Data Binding Collection (msbind.dll), and, of course, the Microsoft ActiveX Data Objects 2.0 (or 2.1) Library. The first of these libraries exposes the DataSource interface, which is supported by all the objects that can work as data sources, such as the ADO Recordset, the ADO Data control, and the DataEnvironment object.</p>

<p>On the companion CD, you'll find the complete source code for the ProductGrid ActiveX control, shown in Figure 18-4. This ActiveX control builds on a ListView control to give you a custom view of the Products table of the NWind.mdb database. I used the ActiveX Control Interface Wizard to create most of the properties and events of this control, such as <I>Font</I>, <I>BackColor</I>, <I>ForeColor</I>, <I>CheckBoxes</I>, <I>FullRowSelection</I>, and all the mouse and keyboards events. The only routines I had to write manually are those that implement the binding mechanism. The declaration section of the ProductGrid module contains the following private variables:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private WithEvents rs As ADODB.Recordset
Private bndcol As New BindingCollection
Private m_DataMember As String
</pre>
</td></tr></table></p>

<p>Implementing the <I>DataMember </I>property is as easy as creating a wrapper around the private <I>m_DataMember </I>string variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get DataMember() As String
    DataMember = m_DataMember
End Property
Public Property Let DataMember(ByVal newValue As String)
    m_DataMember = newValue
End Property 
</pre>
</td></tr></table></p>

<p>The <I>Property Let DataSource </I>procedure is where the binding process actually takes place. This procedure is called when the class or the control is bound to its data source. The binding can be done explicitly via code, or it can be done implicitly at form loading if you set the <I>DataSource </I>property in the Properties window of an ActiveX control that works as a complex data consumer. This is the implementation of the <I>DataSource </I>property for the CustomerGrid control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get DataSource() As DataSource
    ' Simply delegate to the Recordset's DataMember property.
    If Not (rs Is Nothing) Then
        Set DataSource = rs.DataSource
    End If
End Property

Public Property Set DataSource(ByVal newValue As DataSource)
    If Not Ambient.UserMode Then Exit Property
    If Not (rs Is Nothing) Then
        ' If the new value equals the old one, exit right now.
        If rs.DataSource Is newValue Then Exit Property
        If (newValue Is Nothing) Then
            ' The Recordset is being closed. (The program is shutting
            ' down.)  Flush the current record.
            Select Case rs.LockType
                Case adLockBatchOptimistic
                    rs.UpdateBatch
                Case adLockOptimistic, adLockPessimistic
                    rs.Update
                Case Else
            End Select
        End If
    End If
    If Not (newValue Is Nothing) Then
        Set rs = New ADODB.Recordset     ' Re-create the Recordset.
        rs.DataMember = m_DataMember
        Set rs.DataSource = newValue
        Refresh                          ' Reload all data.
    End If
End Property
</pre>
</td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F18ph04x.htm')"> <img src="F18ph04.JPG" width=404 height=218 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-4.</B> <I>The grid on this form is an instance of the ProductGrid ActiveX control.</i><!--/caption-->
</p>

<p>Notice that the previous routines don't include any reference to the UserControl's constituent controls. In fact, you can reuse them in nearly every class or component without changing a single line of code. The code specific to each particular component is located in the <I>Refresh </I>method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Refresh()
    ' Exit if in design mode.
    If Not Ambient.UserMode Then Exit Sub    
    ' Clear the ListView, and exit if the Recordset is empty or closed.
    ListView1.ListItems.Clear
    If rs Is Nothing Then Exit Sub
    If rs.State &lt;&gt; adStateOpen Then Exit Sub
    ' Move to the first record, but remember the current position.
    Dim Bookmark As Variant, FldName As Variant
    Bookmark = rs.Bookmark
    rs.MoveFirst
    
    ' Load the data from the Recordset into the ListView.
    Do Until rs.EOF
        With ListView1.ListItems.Add(, , rs(&quot;ProductName&quot;))
            .ListSubItems.Add , , rs(&quot;UnitPrice&quot;)
            .ListSubItems.Add , , rs(&quot;UnitsInStock&quot;)
            .ListSubItems.Add , , rs(&quot;UnitsOnOrder&quot;)
            ' Remember the Bookmark of this record.
            .Tag = rs.Bookmark
        End With
        rs.MoveNext
    Loop
    ' Restore the pointer to the current record.
    rs.Bookmark = Bookmark
    
    ' Bind the properties to the Recordset.
    Set bndcol = New BindingCollection
    bndcol.DataMember = m_DataMember
    Set bndcol.DataSource = rs
    For Each FldName In Array(&quot;ProductName&quot;, &quot;UnitPrice&quot;, &quot;UnitsInStock&quot;, _
        &quot;UnitsOnOrder&quot;)
        bndcol.Add Me, FldName, FldName
    Next
End Sub
</pre>
</td></tr></table></p>

<p>This is a rather simple implementation of a data-aware grid ActiveX control based on the ListView common control. A more sophisticated control would probably avoid loading the entire Recordset all at once in the ListView and would instead exploit a buffering algorithm to improve performance and reduce memory consumption.</p>

<p>A complex data consumer has to do a couple of things to meet the user's expectations. First, it should change the current record when the user clicks on another grid row. Second, it should highlight a record when it becomes the current record. In the ProductGrid control, the first goal is met by code in the ListView's <I>ItemClick </I>event; this code exploits the fact that the control stores the value of the <I>Bookmark </I>property for each record in the Recordset in the <I>Tag </I>property of all the ItemList elements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub ListView1_ItemClick(ByVal Item As MSComctlLib.ListItem)
    rs.Bookmark = Item.Tag
End Sub
</pre>
</td></tr></table></p>

<p>To highlight a different row in the ListView control when it becomes the current record, you need to write code in the Recordset's <I>MoveComplete </I>event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub rs_MoveComplete(ByVal adReason As ADODB.EventReasonEnum, _
    ByVal pError As ADODB.Error, adStatus As ADODB.EventStatusEnum, _
    ByVal pRecordset As ADODB.Recordset)
    Dim Item As ListItem
    ' Exit if in a BOF or EOF condition.
    If rs.EOF Or rs.BOF Then Exit Sub
    ' Highlight the item corresponding to the current record.
    For Each Item In ListView1.ListItems
        If Item.Tag = rs.Bookmark Then
            Set ListView1.SelectedItem = Item
            Exit For
        End If
    Next
    ' Ensure that the item is visible.
    If Not (ListView1.SelectedItem Is Nothing) Then
        ListView1.SelectedItem.EnsureVisible
    End If
    ListView1.Refresh
End Sub
</pre>
</td></tr></table></p>

<p>The source code for the demonstration program exploits a technique that avoids running the code in the <I>MoveComplete</I> event procedure if the move was caused by an action inside the UserControl (in which case, the control already knows which row in the grid should be highlighted).</p>

<p>You can use the ProductGrid ActiveX control exactly as you would use a DataGrid or another data-aware grid control. I found, however, that the binding mechanism still has some rough edges. For example, if you refresh an ADO Data control, a complex data consumer authored in Visual Basic doesn't seem to get any notification. Therefore, if you need to change one or more properties in an ADO Data control and then execute its <I>Refresh </I>method, you also have to reassign the ADO Data control to the <I>DataSource </I>property of the ProductGrid control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Adodc1.ConnectionString = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source=C:\Program Files\Microsoft VisualStudio\Vb98\NWind.mdb&quot; 
Adodc1.Refresh
Set ProductGrid1.DataSource = Adodc1
</pre>
</td></tr></table></p>


<a name="A114"></a><h3>8.3.3 OLE DB Simple Providers</h3>

<A HREF="#A113">[Previous]</A> <A HREF="#A115">[Next]</A><P>

<A NAME="897"><h1>OLE DB Simple Providers</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 provides you with the capability of building OLE DB Simple Providers&#8212;that is, components that can be registered in the system and that can be used by standard data sources to connect to data in a proprietary format. This capability can be useful in countless situations. For example, during the porting of a legacy application from MS-DOS to Microsoft Windows, you often need to continue to read data in the old format. Thanks to a custom OLE DB Simple Provider, you can access the old data from the new program using standard syntax and you can switch to a standard (and more efficient) OLE DB provider when the porting of the code is complete and you're ready to convert the database data to SQL Server or another major database engine for which a standard OLE DB provider exists.</p>

<p>Before you get too enthusiastic, keep in mind that Visual Basic doesn't allow you to write full-fledged OLE DB providers such as those that Microsoft has created for the Microsoft Jet Database engine, SQL Server, or Oracle. An OLE DB Simple Provider doesn't support transactions, Command objects, and batch updates, just to mention a few of its limitations. Another problem with these providers is that they don't expose information about the structure of the data: They can return the name of a column, but they don't expose a column's data type or maximum length. OLE DB Simple Providers are especially good at exposing table data that can be stored in an array in memory. These restrictions don't keep you from doing interesting things with OLE DB Simple Providers, however. For example, you can create a provider that accesses data encrypted with a proprietary algorithm or a provider that loads data from Microsoft Excel or Microsoft Outlook programs, or from any other program that you can control through Automation.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
From the perspective of an OLE DB provider, <I>data consumers </I>are the components that we've called <I>data sources </I>in the earlier parts of this chapter. In other words, the clients of an OLE DB provider are the objects that a Visual Basic program perceives as data sources, such as the ADO Data control or the DataEnvironment object.
</blockquote></div></p>

<p>To illustrate the concepts underlying the construction of an OLE DB Simple Provider, I built a sample provider that connects to a semicolon-delimited text file. It expects that the first line of the file contains all the field names. When the provider is invoked, it opens the data file and loads it into an array in memory. This example is similar to the one found in the Visual Basic documentation, but my solution is more concise and more efficient because it uses an array of arrays to store individual records. (See <a href="#A25">Chapter 4</a> for a complete description of arrays of arrays.) The code is highly generic, and you can recycle most of the routines in other types of providers. You can find the full code on the companion CD.</p>

<A NAME="898"><h2>The Structure of an OLE DB Simple Provider</h2></A>
<p>The three pieces that make up an OLE DB Simple Provider are the Msdaosp.dll library, which is provided with Visual Basic 6 (more precisely, it belongs to the OLE DB SDK), and two classes that you write in Visual Basic: the OLE DB Simple Provider class and the data source class.</p>

<p>Msdaosp.dll is what data consumers actually see. Its primary job is to add all the functionality of a full-fledged OLE DB provider that's missing in the OLE DB Simple Provider class that you write in Visual Basic. When the DLL is invoked by a data consumer, it instantiates the data source class exposed by your project and calls one of its methods. The data source class returns the DLL an instance of the OLE DB Simple Provider class; from then on, the DLL communicates with the OLE DB Simple Provider through the OLEDBSimpleProvider interface.</p>

<p>To implement the sample OLE DB Simple Provider, you start by creating an ActiveX DLL project and assigning it the name TextOLEDBProvider. Add two type libraries to the References dialog box: the Microsoft Data Source Interface library (Msdatsrc.tlb) and the Microsoft OLE DB Simple Provider 1.5 Library (Simpdata.tbl). You can optionally add a reference to the OLE DB Errors Type Library (Msdaer.dll), which includes all the symbolic constants for error codes.</p>

<p>When all the references are in place, you can add two Public classes to the project. The first class module&#8212;named TextOSP&#8212;will implement the OLE DB Simple Provider; the second class module&#8212;named TextDataSource&#8212;will implement the Data Source object. Let's see how to build these two classes.</p>

<A NAME="899"><h2>The OLE DB Simple Provider Class</h2></A>
<p>The most complicated piece of code in the sample OLE DB Simple Provider project is TextOSP, a PublicNotCreatable class module that implements all the functions that the Msdaosp.dll calls when the consumer reads or writes data. Because the communication between the class and the DLL occurs through the OLEDBSimpleProvider interface, the class must contain an <I>Implement </I>keyword in its declaration section:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Implements OLEDBSimpleProvider

Const DELIMITER = &quot;;&quot;        ' Change this at will.
Const E_FAIL = &amp;H80004005    ' A typical error code for OLE DB providers

Dim DataArray() As Variant   ' An array of arrays
Dim RowCount As Long         ' Number of rows (records)
Dim ColCount As Long         ' Number of columns (fields)
Dim IsDirty As Boolean       ' True if data has changed
Dim m_FileName As String     ' The path of the data file

Dim Listeners As New Collection
Dim Listener As OLEDBSimpleProviderListener
</pre>
</td></tr></table></p>

<p><I>DataArray </I>is an array of Variants that will store the data. Each element corresponds to a record and contains a string array that holds the values of all the fields. The element <I>DataArray(0) </I>holds the array with the field names. The <I>RowCount </I>and <I>ColCount </I>module-level variables hold the number of records and the number of fields, respectively. Whenever a field is written to, the <I>IsDirty</I> flag is set to True, so the class knows that it has to update the data file before terminating. The <I>LoadData </I>routine loads the data file in memory, and the contents of the file are assigned to the <I>DataArray </I>variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub LoadData(FileName As String)
    Dim fnum As Integer, FileText As String
    Dim records() As String, fields() As String
    Dim row As Long, col As Long

    ' Read the file in memory.
    m_FileName = FileName       ' Remember the file name for later.
    fnum = FreeFile
    On Error GoTo ErrorHandler
    Open m_FileName For Input Lock Read Write As #fnum
    FileText = Input(LOF(fnum), #fnum)
    Close #fnum
    
    ' Split the file into records and fields.
    records = Split(FileText, vbCrLf)
    RowCount = UBound(records)
    ColCount = -1
    ReDim DataArray(0 To RowCount) As Variant
    
    For row = 0 To RowCount
        fields = Split(records(row), DELIMITER)
        DataArray(row) = fields
    Next
    ' The first record sets ColCount.
    ColCount = UBound(DataArray(0)) + 1
    Exit Sub
    
ErrorHandler:
    Err.Raise E_FAIL
End Sub
</pre>
</td></tr></table></p>

<p>The <I>SaveData </I>routine writes data back to the text file. This routine is automatically invoked from within the <I>Class_Terminate </I>event procedure if the <I>IsDirty </I>variable is True:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub SaveData()
    Dim fnum As Integer, FileText As String
    Dim records() As String, fields() As String
    Dim row As Long, col As Long
    
    For row = 0 To UBound(DataArray)
        FileText = FileText &amp; Join(DataArray(row), DELIMITER) &amp; vbCrLf
    Next
    ' Drop the last CR-LF character pair.
    FileText = Left$(FileText, Len(FileText) - 2)
    ' Write the file.
    fnum = FreeFile
    On Error GoTo ErrorHandler
    Open m_FileName For Output Lock Read Write As #fnum
    Print #fnum, FileText;
    Close #fnum
    IsDirty = False
    Exit Sub
ErrorHandler:
    Err.Raise E_FAIL
End Sub
</pre>
</td></tr></table></p>

<p>The rest of the class module implements the OLEDBSimpleProvider interface, which includes 14 functions. Keep in mind that after the <I>LoadData </I>routine has loaded the data into <I>DataArray</I>, you manipulate data exclusively through this array. Therefore, you can prepare a number of providers by simply modifying the code in the <I>LoadData </I>and <I>SaveData </I>procedures. The first two methods of the OLEDBSimpleProvider interface return the number of rows and columns in the data source:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return the exact number of rows.
Private Function OLEDBSimpleProvider_getRowCount() As Long
    OLEDBSimpleProvider_getRowCount = RowCount
End Function

' Return the number of columns.
Private Function OLEDBSimpleProvider_getColumnCount() As Long
    OLEDBSimpleProvider_getColumnCount = ColCount
End Function
</pre>
</td></tr></table></p>

<p>The <I>getLocale </I>method returns information about the locale; if the provider doesn't support international settings, you can return an empty string:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return a string that determines the system's international settings
' or an empty string if the provider doesn't support different locales.
' (This one doesn't.)
Private Function OLEDBSimpleProvider_getLocale() As String
    OLEDBSimpleProvider_getLocale = &quot;&quot;
End Function
</pre>
</td></tr></table></p>

<p>Three methods of the OLEDBSimpleProvider interface are useful when your provider supports asynchronous data transfers. In this example, we return False in the <I>isAsync </I>method, so we don't need to worry about the other two methods, <I>getEstimatedRows</I> and <I>stopTransfer</I>, because they're never called. (But you must provide them anyway because of the <I>Implements </I>keyword.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return a nonzero value if the rowset is populated asynchronously.
Private Function OLEDBSimpleProvider_isAsync() As Long
    OLEDBSimpleProvider_isAsync = False
End Function

' Return the estimated number of rows or -1 if unknown.
' This method is used in asynchronous data transfers.
Private Function OLEDBSimpleProvider_getEstimatedRows() As Long
    ' The following statement is for demonstration purposes only because
    ' this method will never be called in this provider.
    OLEDBSimpleProvider_getEstimatedRows = RowCount
End Function

' Stop asynchronous transfer.
Private Sub OLEDBSimpleProvider_stopTransfer()
    ' Do nothing in this provider.
End Sub
</pre>
</td></tr></table></p>

<p>The following two methods, <I>addOLEDBSimpleProviderListener</I> and <I>removeOLEDBSimpleProviderListener</I>, are very important. They're called whenever a new consumer binds to this instance of the Provider class. The provider must keep track of all the consumers that are listening to this instance because whenever data is added, removed, or changed the provider must send a notification to all of these consumers. The TextOSP sample class records all the consumers using the Listeners module-level collection variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a Listener object to the Listeners collection.
Private Sub OLEDBSimpleProvider_addOLEDBSimpleProviderListener( _
    ByVal pospIListener As MSDAOSP.OLEDBSimpleProviderListener)
    If Not (pospIListener Is Nothing) Then Listeners.Add pospIListener
End Sub

' Remove a Listener from the Listeners collection.
Private Sub OLEDBSimpleProvider_removeOLEDBSimpleProviderListener( _
    ByVal pospIListener As MSDAOSP.OLEDBSimpleProviderListener)
    Dim i As Long
    For i = 1 To Listeners.Count
        If Listeners(i) Is pospIListener Then
            Listeners.Remove i
            Exit For
        End If
    Next
End Sub
</pre>
</td></tr></table></p>

<p>The <I>getRWStatus </I>method is invoked when the consumer requests information about the read/write status of the data source. When this method is called with <I>iRow</I> = -1, you must return the status of the column whose number is passed in <I>iColumn</I>; when the <I>iColumn </I>argument is -1, you must return the status of the record whose number is passed in <I>iRow</I>. When both arguments are positive, you must return the status of a field in a given row. In all cases, you can return one of the following values: OSPRW_READWRITE (data can be read and modified), OSPRW_READONLY (data can only be read), or OSPRW_MIXED (undetermined status). In this simple example, all fields are writable, so you don't have to test <I>iRow </I>and <I>iCol</I>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return the read/write status of a value.
Private Function OLEDBSimpleProvider_getRWStatus(ByVal iRow As Long, _
    ByVal iColumn As Long) As MSDAOSP.OSPRW
    ' Make all fields read/write.
    OLEDBSimpleProvider_getRWStatus = OSPRW_READWRITE
End Function
</pre>
</td></tr></table></p>

<p>The <I>getVariant </I>method returns an existing value. This method receives a <I>format </I>parameter, which indicates the format in which the value should be returned to the consumer. Possible values are OSPFORMAT_RAW (the default; data isn't formatted), OSPFORMAT_FORMATTED (data is a string contained in a Variant), or OSPFORMAT_HTML (data is an HTML string). In this sample provider, the <I>format </I>parameter is ignored and data is returned as it's stored in the <I>DataArray </I>array:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Read a value at given row and column coordinates.
Private Function OLEDBSimpleProvider_getVariant(ByVal iRow As Long, _
    ByVal iColumn As Long, ByVal format As MSDAOSP.OSPFORMAT) As Variant
    ' Use (iColumn _ 1) because the iColumn parameter is 1-based
    ' whereas values are stored in 0-based string arrays.
    OLEDBSimpleProvider_getVariant = DataArray(iRow)(iColumn - 1)
End Function
</pre>
</td></tr></table></p>

<p>In the <I>setVariant </I>method, you're expected to write the value in the <I>Var</I> parameter to the private array. Before assigning the value, you must notify all listeners that data is about to change (prenotification). Similarly, after you make the assignment, you must inform all listeners that data has actually changed (postnotification). You do both the notifications through methods of the OLEDBSimpleProvider object stored in the Listeners collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Write a value at given row/column coordinates.
Private Sub OLEDBSimpleProvider_setVariant(ByVal iRow As Long, _
    ByVal iColumn As Long, ByVal format As MSDAOSP.OSPFORMAT, _
    ByVal Var As Variant)
    ' Prenotification
    For Each Listener In Listeners
        Listener.aboutToChangeCell iRow, iColumn
    Next
    DataArray(iRow)(iColumn - 1) = Var
    ' Postnotification
    For Each Listener In Listeners
        Listener.cellChanged iRow, iColumn
    Next
    IsDirty = True
End Sub
</pre>
</td></tr></table></p>

<p>The <I>insertRows </I>and <I>deleteRows </I>methods are called when a consumer adds a new record or deletes an existing record, respectively. Thanks to the array of arrays structure, performing these operations is straightforward. In both cases, you must send a prenotification and a postnotification to all the consumers that are listening to this provider:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Insert one or more rows.
Private Function OLEDBSimpleProvider_insertRows(ByVal iRow As Long, _
    ByVal cRows As Long) As Long
    Dim row As Long
    ' Validate iRow - (RowCount + 1), and account for AddNew commands.
    If iRow &lt; 1 Or iRow &gt; (RowCount + 1) Then Err.Raise E_FAIL
    ReDim emptyArray(0 To ColCount) As String
    ReDim Preserve DataArray(RowCount + cRows) As Variant

    ' Prenotification
    For Each Listener In Listeners
        Listener.aboutToInsertRows iRow, cRows
    Next
    ' Make room in the array.
    If iRow &lt;= RowCount Then
        For row = RowCount To iRow Step -1
            DataArray(row + cRows) = DataArray(row)
            DataArray(row) = emptyArray
        Next
    Else
        For row = RowCount + 1 To RowCount + cRows
            DataArray(row) = emptyArray
        Next
    End If
    RowCount = RowCount + cRows

    ' Postnotification
    For Each Listener In Listeners
        Listener.insertedRows iRow, cRows
    Next
    ' Return the number of inserted rows.
    OLEDBSimpleProvider_insertRows = cRows
    IsDirty = True
End Function

' Delete one or more rows.
Private Function OLEDBSimpleProvider_deleteRows(ByVal iRow As Long, _
    ByVal cRows As Long) As Long
    Dim row As Long
    ' Validate iRow.
    If iRow &lt; 1 Or iRow &gt; RowCount Then Err.Raise E_FAIL
    ' Set cRows to the actual number, which can be deleted.
    If iRow + cRows &gt; RowCount + 1 Then cRows = RowCount - iRow + 1

    ' Prenotification
    For Each Listener In Listeners
        Listener.aboutToDeleteRows iRow, cRows
    Next
    ' Shrink the array.
    For row = iRow To RowCount - cRows
        DataArray(row) = DataArray(row + cRows)
    Next
    RowCount = RowCount - cRows
    ReDim Preserve DataArray(RowCount) As Variant

    ' Postnotification
    For Each Listener In Listeners
        Listener.deletedRows iRow, cRows
    Next
    ' Return the number of deleted rows.
    OLEDBSimpleProvider_deleteRows = cRows
    IsDirty = True 
End Function
</pre>
</td></tr></table></p>

<p>The last method, <I>Find</I>, is invoked when the consumer searches for a value. It receives the searched value in the <I>val </I>parameter, the starting row number in the <I>iStartRow </I>parameter, and the number of the column in which the value must be searched in <I>iColumn</I>. <I>Find</I> is the most complex method of the OLEDBSimpleProvider interface because it has to account for several flags and search options. The <I>findFlags </I>parameter is bit-coded: 1-OSPFIND_UP means that the search goes from the end to the beginning of the data file, and 2-OSPFIND_CASESENSITIVE means that the search is case sensitive. The <I>compType </I>parameter indicates which condition must be met: 1-OSPCOMP_EQ (equal), 2-OSPCOMP_LT (less than), 3OSPCOMP_LE (less than or equal to), 4-OSPCOMP_GE (greater than or equal to), 5-OSPCOMP_GT (greater than), and 6-OSPCOMP_NE (not equal). The <I>Find </I>method must return the row number in which the match has been found, or -1 if the search failed. The following routine accounts for all these different settings:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function OLEDBSimpleProvider_Find(ByVal iRowStart As Long, _
    ByVal iColumn As Long, ByVal val As Variant, ByVal findFlags As _
    MSDAOSP.OSPFIND, ByVal compType As MSDAOSP.OSPCOMP) As Long
    Dim RowStop As Long, RowStep As Long
    Dim CaseSens As Long, StringComp As Boolean
    Dim result As Long, compResult As Integer, row As Long
    
    ' Determine the end row and the step value for the loop.
    If findFlags And OSPFIND_UP Then
        RowStop = 1: RowStep = -1
    Else
        RowStop = RowCount: RowStep = 1
    End If
    ' Determine the case-sensitive flag.
    If findFlags And OSPFIND_CASESENSITIVE Then
        CaseSens = vbBinaryCompare
    Else
        CaseSens = vbTextCompare
    End If
    ' True if we're dealing with strings
    StringComp = (VarType(val) = vbString)
    ' -1 means not found.
    result = -1
    ' iColumn is 1-based, but internal data is 0-based.
    iColumn = iColumn - 1
    
    For row = iRowStart To RowStop Step RowStep
        If StringComp Then
            ' We're comparing strings.
            compResult = StrComp(DataArray(row)(iColumn), val, CaseSens)
        Else
            ' We're comparing numbers or dates.
            compResult = Sgn(DataArray(row)(iColumn) - val)
        End If
        Select Case compType
            Case OSPCOMP_DEFAULT, OSPCOMP_EQ
                If compResult = 0 Then result = row
            Case OSPCOMP_GE
                If compResult &gt;= 0 Then result = row
            Case OSPCOMP_GT
                If compResult &gt; 0 Then result = row
            Case OSPCOMP_LE
                If compResult &lt;= 0 Then result = row
            Case OSPCOMP_LT
                If compResult &lt; 0 Then result = row
            Case OSPCOMP_NE
                If compResult &lt;&gt; 0 Then result = row
        End Select
        If result &lt;&gt; -1 Then Exit For
    Next
    ' Return the row found or -1.
    OLEDBSimpleProvider_find = result
End Function
</pre>
</td></tr></table></p>

<A NAME="900"><h2>The Data Source Class</h2></A>
<p>The OLE DB Simple Provider project contains a Public MultiUse class named TextDataSource. This class is the component that Msdaosp.dll instantiates when a consumer uses your provider. TextDataSource must expose two Public methods: <I>msDataSourceObject </I>and <I>addDataSourceListener</I>. The <I>msDataSourceObject</I> method creates a new instance of the Provider class, asks it to load a data file, and returns the instance to the caller. From that point on, Msdaosp.dll will communicate directly with the TextOSP Provider class. In this simple implementation, you can simply return zero in the <I>addDataSourceListener</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Const E_FAIL = &amp;H80004005

' The DataMember passed to this function is the path of the text file.
Function msDataSourceObject(DataMember As String) As OLEDBSimpleProvider
    ' Raise an error if the member is invalid.
    If DataMember = &quot;&quot; Then Err.Raise E_FAIL
    ' Create an instance of the OLE DB Simple Provider component,
    ' load a data file, and return the instance to the caller.    
    Dim TextOSP As New TextOSP
    TextOSP.LoadData DataMember
    Set msDataSourceObject = TextOSP
End Function

Function addDataSourceListener(ByVal pospIListener As DataSourceListener) _
    As Long
    addDataSourceListener = 0
End Function
</pre>
</td></tr></table></p>

<p>Now that you've seen all the relevant properties and methods, you're finally ready to compile the DLL. Your job isn't finished, however, because now you must register your DLL as an OLE DB Simple Provider.</p>

<A NAME="901"><h2>The Registration Step</h2></A>
<p>To register your OLE DB Simple Provider, you must add a few entries to the Registry. Usually, you create a REG file and include it in the installation procedure of your provider so that you can easily register the provider on any machine by double-clicking it or by running the Regedit utility. Here's the contents of the TextOSP.Reg file that registers the sample provider that comes on the companion CD:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>REGEDIT4
[HKEY_CLASSES_ROOT\TextOSP_VB]
@=&quot;Semicolon-delimited text files&quot;
[HKEY_CLASSES_ROOT\TextOSP_VB\CLSID]
@=&quot;{CDC6BD0B-98FC-11D2-BAC5-0080C8F21830}&quot;
[HKEY_CLASSES_ROOT\CLSID\{CDC6BD0B-98FC-11D2-BAC5-0080C8F21830}]
@=&quot;TextOSP_VB&quot;
[HKEY_CLASSES_ROOT\CLSID\{CDC6BD0B-98FC-11D2-BAC5-0080C8F21830}\InprocServer32]
@=&quot;c:\\Program Files\\Common Files\\System\\OLE DB\\MSDAOSP.DLL&quot;
&quot;ThreadingModel&quot;=&quot;Both&quot;
[HKEY_CLASSES_ROOT\CLSID\{CDC6BD0B-98FC-11D2-BAC5-0080C8F21830}\ProgID]
@=&quot;TextOSP_VB.1&quot;
[HKEY_CLASSES_ROOT\CLSID\{CDC6BD0B-98FC-11D2-BAC5-
0080C8F21830}\VersionIndependentProgID]
@=&quot;TextOSP_VB&quot;
[HKEY_CLASSES_ROOT\CLSID\{CDC6BD0B-98FC-11D2-BAC5-
0080C8F21830}\OLE DB Provider]
@=&quot;Semicolon-delimited text files&quot;
[HKEY_CLASSES_ROOT\CLSID\{CDC6BD0B-98FC-11D2-BAC5-
0080C8F21830}\OSP Data Object]
@=&quot;TextOLEDBProvider.TextDataSource&quot;
</pre>
</td></tr></table></p>

<p>Each OLE DB Simple Provider has two entries in the Registry. The entry  HKEY_CLASSES_ROOT\<I>&lt;YourProviderName&gt;</I> contains the description of the provider (the string that appears when a programmer asks for all the OLE DB providers registered on the system) and the provider's CLSID. Don't confuse this CLSID with the CLSID of the DLL that we just created&#8212;this CLSID serves solely to uniquely identify the provider. You have to create this CLSID yourself&#8212;for example, by using the Guidgen.exe utility provided with Microsoft Visual Studio, as shown in Figure 18-5.</p>

<p>
<img src="F18ph05.GIF" width=375 height=339 border=0>
<p>
<!--caption--><B>Figure 18-5.</B> <I>The Guidgen.exe utility provides new GUIDs in different formats.</i><!--/caption-->


<p>The HKEY_CLASSES_ROOT\CLSID\&lt;<I>YourProviderClsid</I>&gt; entry gathers all the other information about the provider, including the path of the Msdaosp.dll file and the complete name of the data source class that must be instantiated when a consumer connects to the provider. The latter value is the <I>projectname.classname </I>name of the data source class that you've included in your Visual Basic project.</p>

<p>To help you in creating your customized Registry files, I prepared a template REG file, named Model_osp.reg. You can reuse this template for all the OLE DB Simple Providers you create by following this procedure:</p>

<ol>
<p><li>Run the Guidgen.exe utility, select the Registry Format option, click on the Copy button, and then close the utility.</li></p>

<p><li>Load the Model_osp.reg file into a word processor or an editor. (If you're running Windows 95 or Windows 98, Notepad isn't a good choice because it lacks search-and-replace capabilities.) Then replace all the occurrences of &quot;$ClsId$&quot; with the CLSID (which you stored in the Clipboard at the end of step 1).</li></p>

<p><li>Search for the two occurrences of the &quot;$Description$&quot; string, and replace them with a textual description of your provider&#8212;for example, &quot;Semicolon-delimiter Text Files&quot;; this is the string that identifies your provider in the list of all the OLE DB providers installed on the machine.</li></p>

<p><li>Find and replace all the occurrences of the &quot;$ProviderName$&quot; string with the name of your provider; this name is a string that identifies your provider in the Registry and is used as the <I>Provider</I> attribute in the <I>ConnectionString </I>property of an ADO Connection object. For example, the name of the sample provider that you'll find on the companion CD is &quot;TextOSP_VB&quot;.</li></p>

<p><li>Search for the only occurrence of the &quot;$DataSource$&quot; string, and replace it with the complete name of the data source class in the OLE DB provider project; in the sample project, this string is &quot;TextOLEDBProvider.TextDataSource&quot;.</li></p>

<p><li>Ensure that the Msdaosp.dll is located in the C:\Program Files\Common Files\System\OLE DB; if it's not, modify the value of the InprocServer32 key in the REG file to point to the correct location of that file.</li></p>

<p><li>Save the file with a different name so that you don't modify the template REG file.</li></p>

<p><li>Double-click on the REG file to add all the necessary keys to the Registry.</li></p>
</ol>

<A NAME="902"><h2>Testing the OLE DB Simple Provider</h2></A>
<p>You can use the OLE DB Simple Provider that you just built as you would use any other OLE DB provider. For example, you can open a Recordset and loop through its records using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cn As New ADODB.Connection, rs As New ADODB.Recordset

cn.Open &quot;Provider=TextOSP_VB;Data Source=TextOLEDBProvider.TextDataSource&quot;
rs.Open &quot;C:\Employees.Txt&quot;, cn, adOpenStatic, adLockOptimistic
rs.MoveFirst
Do Until rs.EOF
    Print rs(&quot;FirstName&quot;) &amp; &quot; &quot; &amp; rs(&quot;LastName&quot;)
    rs.MoveNext
Loop
rs.Close
cn.Close
</pre>
</td></tr></table></p>

<p>You can't test the provider inside the Visual Basic IDE, and you have to compile it to a stand-alone ActiveX component. This means that you have to forgo all the debug tools that work only in the environment and can rely only on <I>MsgBox </I>and <I>App.LogEvent </I>statements.</p>


<a name="A115"></a><h3>8.3.4 The Data Object Wizard</h3>

<A HREF="#A114">[Previous]</A> <A HREF="#A117">[Next]</A><P>

<A NAME="903"><h1>The Data Object Wizard </h1></A>
<p>The Data Object Wizard is an add-in that can help you to quickly generate data-aware class and UserControl modules. This wizard is probably the most sophisticated add-in provided with Visual Basic 6. Unfortunately, it's also one of the least intuitive to use. In the remainder of this chapter, I'll briefly introduce this utility. (Space doesn't permit me to explain all its capabilities in depth.)</p>

<A NAME="904"><h2>Preparing for the Wizard</h2></A>
<p>The Data Object Wizard works in conjunction with the DataEnvironment designer. Instead of entering all the necessary information about the data source when the Data Object Wizard is executing, you have to prepare a DataEnvironment object with one or more Command objects before running the add-in. Each Command object represents one of the actions that you can perform on the data source: select, insert, update, or delete records, lookup values, and so on. Once you run the wizard, you can't go back to the Visual Basic IDE, so you need to prepare all the Command objects in advance.</p>

<p>In this section, I guide you through a simple example based on the Products table of the NWind.mdb database. Frankly, the Data Object Wizard works best when used on SQL Server and Oracle databases. Even so, I opted for an example based on a local MDB database for those of you who don't have a client/server system available. These are the preparatory steps that you have to follow before running the wizard:</p>

<ol>
<p><li>Open the DataView window, and create a data link to the 
NWind.mdb database (if you don't have one already). Select the OLE DB Provider for ODBC, not the Provider for Microsoft Jet databases, if you want to be in sync with the following description. Test that the connection is working, and then expand the Tables subfolder under the NWind data link you just created.</li></p>

<p><li>Click the Add A DataEnvironment button in the DataView window to create a new DataEnvironment designer, and then delete the default Connection1 node that Visual Basic automatically adds to all DataEnvironment modules.</li></p>

<p><li>Drag the Products table from the DataView window into the DataEnvironment window. Visual Basic automatically creates a new Connection1 node and a Command object beneath it, named Products. The Recordset returned by this Command object doesn't necessarily have to be updatable because all the insert, update, and delete operations are performed by means of other Command objects.</li></p>

<p><li>Click on the Add Command button on the DataEnvironment toolbar to create a new Command object named Command1, and then click on the Properties button to show its Properties dialog box. Change the name of the Command object to Products_Insert, select the SQL Statement option, and enter the following SQL query string into the multiline text box under it, as shown in Figure 18-6:</li></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>INSERT INTO Products(ProductName, CategoryID, SupplierID, QuantityPerUnit, 
UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
</pre>
</td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F18ph06x.htm')"> <img src="F18ph06.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-6.</B> <i>The Properties dialog box of the </I>Products_Insert<I> Command object.</i><!--/caption-->
</p>

<p><li>Switch to the Parameters tab of the Properties dialog box, and assign a meaningful name to the nine parameters of the preceding SQL command. Each parameter should be assigned the name of the corresponding field&#8212;that is, <I>ProductName</I>, <I>CategoryID</I>, and so on. The majority of parameters are Long integers, so in most cases you don't need to modify the default settings. The exceptions are two string parameters (<I>ProductName </I>and <I>QuantityPerUnit</I>), one Currency parameter (<I>UnitPrice</I>), and one Boolean parameter (<I>Discontinued</I>). Set a greater-than-zero value for the 
<I>Size</I> attribute of string parameters; if you don't, the Command object won't be created correctly.</li></p>

<p><li>Create another Command object, assign it the name Products_Update, and enter the following string in the SQL Statement field:</li></p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
UPDATE Products SET ProductName = ?, CategoryID = ?, SupplierID = ?, 
QuantityPerUnit = ?, UnitPrice = ?, UnitsInStock = ?, UnitsOnOrder = ?,
ReorderLevel = ?, Discontinued = ? WHERE (ProductID = ?)
</pre></td></tr></table></p>

<p>Then switch to the Parameters tab and assign meaningful names 
and types for all the parameters, exactly as you did in step 5. 
(Unfortunately, there's no way to copy and paste this information between Command objects.)</p>

<p><li>Create a fourth Command object, name it Products_Delete<I>, </I>and enter the following string in the SQL Statement field:</li></p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
DELETE FROM Products WHERE ProductID = ?
</pre></td></tr></table></p>

<p>Then switch to the Parameters tab and assign the <I>ProductID </I>name to the only parameter, without changing the other attributes.</p>

<p><li>Drag the Categories and Suppliers tables from the DataView window to the DataEnvironment window. This creates two Command objects, named <I>Categories </I>and <I>Suppliers</I>, that the Data Object Wizard will use to create lookup tables for the CategoryID and SupplierID fields, respectively.</li></p>
</ol>

<p>All these steps shouldn't take more than 5 or 10 minutes. If you prefer, you can start with a blank Standard EXE project and then just load the DE1.dsr file from the project on the companion CD. This file already contains all the Command objects ready to be used by the Data Object Wizard.</p>

<p>Most of the time required to build these Command objects is spent manually entering the names and other attributes of the many parameters in the Products_Insert and Products_Update commands. You can't avoid this step when working with MDB databases because the OLE DB provider doesn't correctly recognize any parameterized QueryDef object stored in the database. The good news is that when you work with SQL Server you can create Command objects that link to stored procedures. In this case, the DataEnvironment designer is able to deduce the name and type of parameters without your help, which dramatically reduces the amount of time necessary to complete these preparatory steps.</p>

<A NAME="905"><h2>Creating the Data-Bound Class</h2></A>
<p>You're now ready to run the Data Object Wizard. If you haven't loaded it yet, select the Add-In Manager command from the Add-Ins menu, double-click on its name in the list of available add-ins, and click on the OK button. Now the wizard should be available in the Add-Ins menu. Run it, and then follow these steps:</p>

<ol>
<p><li>Click on the Next button to get past the introduction page; in the Create Object page, select the kind of object you want to create. The Data Object Wizard can create data consumer classes that bind to a data source or UserControl modules that bind to a data consumer class (which you must have created previously with the wizard). The first time you run the wizard, you have no choice; you must select the first option, A Class Object To Which Other Objects Can Bind Data. Click Next to advance to the next page.</li></p>

<p><li>In the Select Data Environment Command page, you select the source Command object&#8212;namely, the command that should be used by the class to fetch data. In this example, you select the Products command, which retrieves data directly from a database table; in real-world applications, you'll probably select a command that reads data using a stored procedure or an SQL SELECT query.</li></p>

<p><li>In the Define Class Field Information page, you indicate which fields are the primary keys in the Recordset and which fields can't be Null (required values). In this particular example, the ProductID field is the primary key, and the ProductName, SupplierID, and CategoryID fields can't be Null.</li></p>

<p><li>In the Define Lookup Table Information page, you define the lookup fields in the source command. As you know, a lookup field is a field whose value is used as a key into another table to retrieve data. For example, you can display the CompanyName field from the Suppliers table instead of the SupplierID field. In this case, you define SupplierID as a lookup field into the Suppliers table. To let the wizard generate the correct code, you must enter the following data into the page:</li></p>

<ul>
<p><li>Select SupplierID as the Source field (that is, the lookup field in the source command).</li></p>

<p><li>Select Suppliers as the Lookup command. (This tells the wizard which Command object should be used to map the lookup value onto a more readable string to be displayed to the user.)</li></p>

<p><li>Select CompanyName in the Display Field combo box. (This is the field in the Lookup Command object that provides the decoded value.)</li></p>

<p><li>Tick the SupplierID entry in the Lookup On Field(s) list box. (This is the name of the lookup field as it appears in the Lookup command; it might or might not be the same as the name of the field in the source Command.) Click on the Add button to proceed.</li></p>
</ul>

<p>Repeat the same four operations to define CategoryID as another lookup field, as shown in Figure 18-7.</p>

<p>
<A HREF="javascript:fullSize('F18ph07x.htm')"> <img src="F18ph07.JPG" width=404 height=300 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-7.</B> <i>The Define Lookup Table Information page, after you've added the SupplierID field to the list of lookup fields and just before you add the CategoryID field.</i><!--/caption-->
</p>

<p><li>In the next page, Map Lookup Fields, you define how the fields in the source Command object map onto the fields in the Lookup Command object; there are two consecutive pages for this purpose because you defined two Lookup Command objects. Because the field names are the same in the two Command objects, the wizard can do the mapping correctly all by itself, so you can click on the Next button without modifying the values in the grid.</li></p>

<p><li>In the Define And Map Insert Data Command page, you select 
which DataEnvironment Command, if any, should be used for adding 
new records to the source Recordset. In this example, you should select the Products_Insert Command object. You can then define the mapping between the fields in the source Command and the parameters in the Insert Command. Because we picked parameters' names that are the same as the fields' names, the wizard is able to do the correct mapping by itself, and you don't have to modify the proposed mapping scheme. (See Figure 18-8.)</li></p>

<p>
<A HREF="javascript:fullSize('F18ph08x.htm')"> <img src="F18ph08.JPG" width=404 height=300 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-8.</B> <i>Mapping field names to parameter names is crucial when you define Command objects for inserting, updating, and deleting records, but in most cases the wizard is able to do the mapping automatically.</i><!--/caption-->
</p>

<p><li>In the next page, Define And Map Update Data Command, you select the Command object that should be used for updating the source Command (the Products_Update Command in this example). You can also tick the Use Insert Command For Update check box when you have a stored procedure that can both append a new record and update an existing one. Again, in this example, the wizard is able to correctly map field names to parameter names, so you can skip to the next page.</li></p>

<p><li>In the Define And Map Delete Data Command page, you select 
which Command object should be used to delete a record from the source Command (the Products_Delete Command in this example). Again, you don't need to manually map fields; the wizard does the mapping automatically.</li></p>

<p><li>You're about to complete running the wizard. In the last page, enter a name for the class and click on the Finish button. The class name you provide is automatically prefixed with the <I>rscls </I>characters. For example, if you enter <I>Products</I>, the wizard will create the rsclsProducts class module.</li></p>
</ol>

<p>Going through the preceding steps might seem complex at first, but after some practice you'll see that using the wizard really takes no more than a couple of minutes. When the wizard completes its execution, you'll find that two new classes have been added to the current project: the clsDow class and the rsclsProducts class. The clsDow class module contains only the <I>EnumSaveMode </I>enumerated constants, which define the values that can be assigned to the <I>SaveMode </I>property of the rsclsProducts class: 0-adImmediate, if you want the class to save values in the source Recordset as soon as the record pointer moves to another record, or 1-adBatch, if the class should update the Recordset only when you invoke the class's <I>Update </I>method.</p>

<A NAME="906"><h2>Creating the Data-Bound UserControl</h2></A>
<p>You could use the rsclsProducts class module created by the wizard directly from your applications, but you'll find it more convenient to use it through a custom UserControl. The great news is that you can create such a UserControl in a matter of seconds, again using the Data Object Wizard.</p>

<ol>
<p><li>Run the wizard again, and in its Create Object page, select the A UserControl Object Bound To An Existing Class Object option.</li></p>

<p><li>In the next page, select the data class to use as the data source for the UserControl (the rsclsProducts class in this example).</li></p>

<p><li>In the Select User Control Type page, decide which type of UserControl you want to create. The wizard lets you choose among Single Record (a collection of individual fields), Data Grid (a DataGrid-like control), ListBox, and ComboBox. For this first run, select the Single Record option.</li></p>

<p><li>In the next page, decide which database fields are visible in the UserControl and which control type is to be used for each visible field. For example, you should select <I>(None) </I>for the ProductID field because this is an auto-increment primary key field that's meaningless to the user, and you should use a ComboBox field for the CategoryName and SupplierName lookup fields (as shown in Figure 18-9).</li></p>

<p><li>In the next page, you select a base name for the control. In most cases, you can accept the default name (<I>Products </I>in this example) and click on the Finish button. The actual name the wizard uses depends on which type of UserControl you selected in step 3. For example, if you selected a Single Record type of control, the UserControl module that the wizard generates is named uctProductsSingleRecord.</li></p>

<p>
<A HREF="javascript:fullSize('F18ph09x.htm')"> <img src="F18ph09.JPG" width=404 height=300 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-9.</B> <i>The Map Class Properties To A Control Type page of the DataObject Wizard.</i><!--/caption-->
</p>

</ol>

<p>You're now ready to use the control in the application. Close the UserControl module so that its icon in the Toolbox becomes active, create an instance of the control on a form, and add a few navigational buttons, as shown in Figure 18-10. The code behind these buttons is really simple:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdPrevious_Click()
    uctProductsSingleRecord1.MovePrevious
End Sub
Private Sub cmdNext_Click()
    uctProductsSingleRecord1.MoveNext
End Sub
Private Sub cmdAddNew_Click()
    uctProductsSingleRecord1.AddRecord
End Sub
Private Sub cmdUpdate_Click()
    uctProductsSingleRecord1.Update
End Sub
Private Sub cmdDelete_Click()
    uctProductsSingleRecord1.Delete
End Sub
</pre>
</td></tr></table></p>

<p>
<img src="F18ph10.GIF" width=359 height=382 border=0>
<p>
<!--caption--><B>Figure 18-10.</B> <i>The ActiveX control generated by the Data Object Wizard can be tested with a few navigational buttons on its parent form.</i><!--/caption-->


<p>The Data Object Wizard isn't particularly efficient when used with the OLE DB Provider for Microsoft Jet. After some experiments, I found that if you want to add new records, you <I>must </I>set the UserControl's <I>SaveMode </I>property to 1-adBatch, and therefore you have to invoke the <I>Update </I>method after entering a new record. Everything works unproblematically when you create classes and UserControls that bind to a SQL Server database.</p>

<p>When you understand the mechanism, creating the other types of UserControls is easy. For example, restart the wizard and create a DataGrid-like control. If you then place the control on a form and set its <I>GridEditable </I>property to True, you'll see that not only can you edit field values in the grid but you can also select the value of a lookup field from a drop-down list, as shown in Figure 18-11. The DataList-like and DataCombo-like controls are even simpler because they're just lists of values and don't use the Insert, Update, Delete, and Lookup Command objects.</p>

<p>You can create more flexible classes and controls if the original source Command object is based on a parameterized query or a stored procedure, such as this one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT * FROM Products WHERE ProductName LIKE ?
</pre>
</td></tr></table></p>

<p>In this case, the resulting class and UserControl modules expose a property whose name is obtained by concatenating the name of the source Command and the name of the parameter in the query (for example, <I>Products_ProductName</I>). You can set this property at design time and let the UserControl initialize the internal Recordset as soon as the control is created at run time. Or you can set the <I>ManualInitialize </I>property to True so that you can assign this property using code and then manually invoke the <I>Init</I>xxxx method exposed by the control (<I>InitProducts </I>in this example). The sample application shown in Figure 18-11 uses this technique to narrow the number of records displayed in the grid. This is the only code in the form module:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdFetch_Click()
    uctProductsDataGrid1.Products_FetchProductName = txtProductName &amp; &quot;%&quot;
    uctProductsDataGrid1.InitProducts2
End Sub
</pre>
</td></tr></table></p>

<p>The Data Object Wizard is a great add-in, and it produces very good code. In fact, I suggest that you study the generated code to learn how to get the maximum benefit from this utility and also to learn new tricks for building better data-aware classes and UserControls. The wizard also has some defects, however. Apart from those that I've already mentioned (and that are mostly caused by bugs in the OLE DB Provider for Microsoft Jet), the one that bothers me most is that the UserControl module tends to go out of sync with its instances on forms, so you often need to right-click on forms and invoke the Update UserControls menu command. This is a minor nuisance, however, when compared to the time the wizard saves.</p>

<p>
<A HREF="javascript:fullSize('F18ph11x.htm')"> <img src="F18ph11.JPG" width=404 height=200 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 18-11.</B> <I>DataGrid-like UserControls also let you select values from drop-down lists.</i><!--/caption-->
</p>

<p>In this chapter, you've seen that ADO permits you to build many new types of classes and components: data consumers, data sources, and OLE DB Simple Providers. You can build another type of database component with Visual Basic, a Remote Data Services (RDS) component. You normally use these when you're accessing a database through the HTTP protocol, and for this reason I'll describe this type of component in the <a href="#A117">next chapter</a>, together with the new Visual Basic features in the Internet area.</p>

<a name="A116"></a><h1>9. Part V: Internet Programming</h1>
<a name="A117"></a><h2>9.1 Chapter 19 -- Dynamic HTML Applications</h2>

<A HREF="#A115">[Previous]</A> <A HREF="#A118">[Next]</A><P>


<font size="+3">Chapter 19</font>

<A NAME="907"><h1>Dynamic HTML Applications</h1></A>
<p>In the beginning, there was just HTML (Hypertext Markup Language). All Web 
pages were inherently static, but they were appealing enough to fuel Web mania. Then 
came Common Gateway Interface (CGI) applications, external applications that ran on 
the server and, for the first time, allowed for pages whose content wasn't fixed. The 
next step toward dynamic content was client-side scripting, routines, or simple 
programs written in macro languages, such as Microsoft Visual Basic, Scripting Edition (VBScript), 
or scripting languages complying with the ECMAScript 
specification, that execute inside the browser. Microsoft has recently delivered new proprietary technologies 
for creating dynamic content in the browser, such as ActiveX Controls and 
ActiveX documents, whereas other vendors have focused mostly on applets written in 
Java. The most interesting, powerful, and widely accepted server-side technology is 
based on server-side scripting and Active Server Pages (ASP). The most powerful way 
to create dynamic pages on the client side is based on Dynamic HTML (DHTML).</p>

<p>All these technologies have some flaws, however. CGI applications aren't 
very efficient, they can't be easily scaled to hundreds of clients, and they aren't powerful enough for large Internet or intranet applications. Client-side scripting is definitely 
more suitable for a Visual Basic programmer, especially if the programmer uses 
VBScript. Alas, VBScript isn't currently supported by Netscape Navigator; therefore, you 
should use it only for intranet installations. Neither does Netscape Navigator support 
ActiveX controls and ActiveX documents. Many Internet developers consider Active 
Server pages (ASP) the best way to deliver pure HTML dynamic pages to any browser, but 
it's a fact that building and maintaining a large ASP-based application isn't a trivial 
task. In addition, scripts on the server aren't the most efficient solution as the number 
of clients increases.</p>

<p>Visual Basic 6 introduces two fresh approaches to Internet programming 
that might be the answer to all your needs because they combine the flexibility of 
proven Internet technologies with the power and the ease of the Visual Basic 
language. <I>DHTML applications </I>are in-process components (DLLs) that run on the client 
machine inside Microsoft Internet Explorer and trap events fired by the elements on the 
DHTML page, such as when the user clicks a button or follows a hyperlink. 
<I>IIS applications </I>(also known as 
<I>WebClasses</I>) are DLLs that run on the server machine inside 
Microsoft Internet Information Server and intercept the requests coming from the client 
browsers. Neither approach can be considered a brand-new technology because they 
simply expand what's already available. But the ability to write an entire Internet 
application using the full-featured Visual Basic language (instead of just a limited script 
language), test it inside the IDE, and then produce optimized and highly scalable 
native code (as opposed to less efficient script code) is very appealing to most developers.</p>

<p>In this chapter, I explain how to create DHTML applications. (I cover 
WebClasses in <a href="#A124">Chapter 20</a>.) But before diving into the most interesting stuff, we need to go 
over a few basic concepts.</p>


<a name="A118"></a><h3>9.1.1 A Quick Course on HTML</h3>

<A HREF="#A117">[Previous]</A> <A HREF="#A119">[Next]</A><P>

<A NAME="908"><h1>A Quick Course on HTML</h1></A>

<p>Before you can start to create a DHTML application, you need to know at least 
some rudiments of HTML, such as how an HTML page is created and the most 
important and frequently used HTML tags. If you're already familiar with HTML syntax, you 
can safely skip this section.
</p>

<p>Even though the HTML language has its own logic, it isn't as structured as 
high-level programming languages such as Visual Basic. For this reason, many 
programmers find HTML syntax rules somewhat strange. As always, nothing beats 
hands-on practice, so I prepared a simple editor that lets you write an HTML fragment 
and immediately see how the browser renders it. I wrote this piece of software using 
the WebBrowser control, which is nothing less than Internet Explorer embedded in 
an ActiveX control.</p>

<p>Although this simple editor can't compete with Microsoft FrontPage or even 
the simplest freeware HTML editor, it does offer some useful features. First, it allows 
you to swap from the editor to the preview window with the touch of a button (F4 
for the editor, F5 for the preview window). Second, it provides several shortcut 
key combinations that you can use to add the most common HTML tags and even to 
enter more complex structures such as tables and controls. All these shortcuts are listed 
in the Insert menu, as shown in Figure 19-1. The source code for this editor is on 
the companion CD, and you're welcome to improve it to add support for additional 
HTML tags or other capacities.</p>

<p>
<A HREF="javascript:fullSize('F19ph01x.htm')"> <img src="F19ph01.JPG" width=404 height=304 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-1.</B> <i>Two instances of the Cheap DHTML Editor: one in editor mode and one in preview mode.</i><!--/caption-->
</p>

<A NAME="909"><h2>Headings and Paragraphs</h2></A>

<p>An HTML page is a file that consists of plain text plus tags that tell the browser 
how the page should be rendered on the client's screen. This is the skeleton of an
HTML page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;The title of this page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
Welcome to HTML
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</td></tr>
</table></p>


<p>This code displays the string &quot;Welcome to HTML&quot; near the top border of 
an otherwise blank page. Notice that all the elements in the page are enclosed within 
a pair of tags (and each tag is enclosed between angle brackets . For example, the 
title of the page&#8212;the string that Internet Explorer displays in the caption of its 
main window&#8212;is enclosed between the &lt;TITLE&gt; and the &lt;/TITLE&gt; tags. The &lt;BODY&gt; 
and &lt;/BODY&gt; tags enclose the text that appears inside the page.</p>

<p>Typically, the body of a page contains one or more headings. HTML 
supports six different levels of headings, where level 1 corresponds to the most 
important heading and level 6 to the least important one. Headings are useful for giving 
subtitles to sections of the page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY&gt;
&lt;H1&gt;This is a level 1 heading&lt;/H1&gt;
Some normal text here
&lt;H2&gt;This is a level 2 heading&lt;/H2&gt;
Text under level 2 heading
&lt;/BODY&gt;
</pre>
</td></tr>
</table></p>


<p>An important characteristic of the HTML language is that carriage return 
characters and line feed characters in the source text don't affect the appearance of 
the page. Apart from headings and a few other tags, which add a CR-LF pair 
automatically, if you want to start a new line, you have to insert a &lt;P&gt; tag manually, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is a paragraph.&lt;P&gt;As is this.&lt;P&gt;
</pre>
</td></tr>
</table></p>


<p>The &lt;P&gt; tag forces a new line and also inserts a blank line between the 
current paragraph and the next one. If you need to break the current line but you 
don't want an extra blank line, you can use the &lt;BR&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This paragraph is subdivided&lt;BR&gt;into two distinct lines.&lt;P&gt;
</pre>
</td></tr>
</table></p>


<p>To add a horizontal line of space between two paragraphs, you can also 
use the &lt;HR&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Two paragraphs separated&lt;HR&gt;by a horizontal line&lt;P&gt;
</pre>
</td></tr>
</table></p>


<p>The &lt;PRE&gt; and &lt;/PRE&gt; pair of tags is an exception to the rule that 
carriage returns in HTML source text are ignored: Everything between these tags is 
rendered as monospaced text (typically using the Courier font), and all embedded CR-LF 
character pairs are inserted in the resulting output. These tags are often used to insert 
text as is (for example, a source code listing):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;PRE&gt;First line
second line&lt;/PRE&gt;
</pre>
</td></tr>
</table></p>


<p>By default, all text is aligned at the left, but you can use the &lt;CENTER&gt; and 
&lt;/CENTER&gt; tags to center a portion of text:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;CENTER&gt;A centered paragraph&lt;P&gt;
Another centered paragraph&lt;/CENTER&gt;
</pre>
</td></tr>
</table></p>


<P><div class="note"><blockquote><B>NOTE</B><HR>If you're using the DHTMLed editor, you can center any portion of 
text by highlighting its source code, pressing Ctrl+T to enter a tag pair, and then 
typing <I>CENTER </I>in the input box. You can use the same method for any tag 
pair, such as &lt;PRE&gt; and &lt;/PRE&gt;. Other commands in the Insert menu&#8212;for 
example, the Bold, Italic, and Hyperlink commands&#8212;automatically add a pair of tags 
at the beginning and end of the selected text.</blockquote></div>
</P>

<p>Creating lists of bulleted or numbered items is easy in HTML. You create 
bulleted items by using the &lt;LI&gt; and &lt;/LI&gt; tags to mark the beginning and the end of 
individual items and then enclosing the entire list within &lt;UL&gt; and &lt;/UL&gt;:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;UL&gt;
&lt;LI&gt;First bulleted paragraph&lt;/LI&gt;
&lt;LI&gt;Second bulleted paragraph&lt;/LI&gt;
&lt;LI&gt;Third bulleted paragraph&lt;/LI&gt;
&lt;/UL&gt;
</pre>
</td></tr>
</table></p>


<p>You create a list of numbered items in much the same way. The only difference 
is that you must enclose the list within the &lt;OL&gt; and &lt;/OL&gt; pair of tags:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OL&gt;
&lt;LI&gt;First you must do this.&lt;/LI&gt;
&lt;LI&gt;Then you must do that.&lt;/LI&gt;
&lt;/OL&gt;
</pre>
</td></tr>
</table></p>


<A NAME="910"><h2>Attributes</h2></A>

<p>Most HTML tags can embed special attributes that affect how the text between 
the tags is rendered. For example, by default, headings are left-aligned, but you 
can modify the alignment of a given heading by adding the ALIGN attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1 ALIGN=center&gt;This is a centered level 1 heading&lt;/H1&gt;
&lt;H2 ALIGN=right&gt;This is a right-aligned level 2 heading&lt;/H2&gt;
</pre>
</td></tr>
</table></p>


<p>The TEXT attribute defines the color of the text for a page element. If you 
use this attribute for the BODY tag, the color affects the entire page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY BGCOLOR=&quot;cyan&quot; TEXT=&quot;#FF0000&quot;&gt;
Text on this page is red over a cyan background.
&lt;/BODY&gt;
</pre>
</td></tr>
</table></p>


<p>You can specify a color attribute using the #RRGGBB format, which is similar to 
the Visual Basic <I>RGB </I>function, or you can use one of the following 16 color names 
accepted by Internet Explorer: Black, Maroon, Green, Olive, Navy, Purple, Teal, 
Gray, Silver, Red, Lime, Yellow, Blue, Fuchsia, Aqua, and White. The BODY tag also 
supports other color attributes, such as LINK (used for hyperlinks), ALINK (to 
render active hyperlink), and VLINK (to mark visited hyperlinks).</p>

<p>You can make text boldface by enclosing it within the &lt;B&gt; and &lt;/B&gt; pair 
of tags. Similarly, you can italicize a portion of text with the &lt;I&gt; and &lt;/I&gt; pair:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;B&gt;This text is boldface.&lt;/B&gt;&lt;P&gt;
&lt;I&gt;This text is italic.&lt;/I&gt;&lt;P&gt;
&lt;B&gt;This sentence in boldface has an &lt;I&gt;italicized&lt;/I&gt; word in it.&lt;/B&gt;
</pre>
</td></tr>
</table></p>


<p>You can use the &lt;U&gt; and &lt;/U&gt; tag pair to underline text. This isn't usually 
a good idea, however, because the underline attribute should be reserved for 
hyperlinks. You can apply attributes to an entire paragraph by enclosing them between the &lt;P&gt; 
and &lt;/P&gt; tags, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;P ALIGN=center&gt;Centered paragraph&lt;/P&gt; 
</pre>
</td></tr>
</table></p>


<p>To modify the attributes of the text, you can use the &lt;FONT&gt; tag, which 
takes three attributes: FACE, SIZE, and COLOR. The COLOR attribute is specified in the 
same way as before. The FACE attribute is the name of a font. This attribute even 
accepts a comma-delimited list of font names if you want to provide alternate choices in 
case the preferred font isn't available on the user's machine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=14 COLOR=&quot;red&quot;&gt;Red text&lt;/FONT&gt;
</pre>
</td></tr>
</table></p>


<p>This statement attempts to use the Arial font, but it reverts to Helvetica if Arial 
isn't installed on the user's system. The SIZE attribute is the font size in points. This 
attribute also accepts a number preceded by a plus or a minus sign to indicate a 
size relative to the default font size:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Text in regular size&lt;P&gt;
&lt;FONT SIZE=+4&gt;Text 4 points taller&lt;/FONT&gt;&lt;P&gt;
&lt;FONT SIZE=-2&gt;Text 2 points smaller&lt;/FONT&gt; 
</pre>
</td></tr>
</table></p>


<A NAME="911"><h2>Images</h2></A>

<p>To insert an image in an HTML page, you need the &lt;IMG&gt; tag, whose SRC 
attribute specifies the path to the image to be displayed; such a path can be absolute or 
relative to the path of the page itself. For example, the following code loads a GIF 
image located in the same directory as the HTML source file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;IMG SRC=&quot;mylogo.gif&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>Images are typically in GIF or JPEG format. GIF images can be 
<I>interlaced</I>, in which case the browser first downloads every other line of pixels and then 
downloads the remaining lines.</p>

<p>As you can for text strings, you can center an image horizontally by 
enclosing the &lt;IMG&gt; tab within the &lt;CENTER&gt; and &lt;/CENTER&gt; tags or by using the 
ALIGN attribute. If you know the size of the image being downloaded, you can specify 
it using the WIDTH and HEIGHT attributes so that the browser can correctly 
position the text around the image before actually downloading it. The image's width 
and height are expressed in pixels:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is a right-aligned image 200 pixels wide and 100 pixels high.
&lt;IMG ALIGN=right WIDTH=200 HEIGHT=100 SRC=&quot;mylogo.gif&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>If necessary, the browser will stretch or shrink the original image to fit the size 
you've specified. This feature is often exploited to insert graphical elements that separate 
areas on the page. For example, you can create a horizontal separator by using an 
image with a gradient background and a HEIGHT attribute of just a few pixels.</p>

<p>You can control how much white space is left around the image by using 
the HSPACE and VSPACE attributes, for horizontal and vertical space, respectively. 
By default, a 2-pixel transparent border is drawn around all images, but you can 
suppress it (by setting the BORDER attribute to 
<I>none</I>) or specify a different width:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>A right-aligned image with 10 pixels of horizontal white space
and 20 pixels of vertical space
&lt;IMG VSPACE=20 ALIGN=right SRC=&quot;mylogo.gif&quot; HSPACE=10&gt;
</pre>
</td></tr>
</table></p>


<p>Finally, the ALT attribute is used to provide a textual description of the 
image; this description is displayed in the browser while the image is being 
downloaded, and it completely replaces the image if the user has turned off images.</p>

<A NAME="912"><h2>Hyperlinks</h2></A>

<p>HTML supports three different types of hyperlinks: a hyperlink to another 
location on the same page, a hyperlink to another page on the same server, and a 
hyperlink to a page in another Internet domain. In all cases, you use the &lt;A&gt; and &lt;/A&gt; tags 
to define which portion of the text will appear to be underlined. These tags are 
always accompanied by the HREF attribute, which points to the hyperlink's target:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A HREF=&quot;PageTwo.htm&quot;&gt;here&lt;/A&gt; to proceed to the next page, or click
&lt;A HREF=&quot;toc.htm&quot;&gt;here&lt;/A&gt; to go to the table of contents.
</pre>
</td></tr>
</table></p>


<p>If the destination of the hyperlink is inside the same page, you need a way to 
label it. You do this with the &lt;A&gt; tag and the NAME attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A NAME=&quot;Intro&quot;&gt;Introduction&lt;/A&gt;
</pre>
</td></tr>
</table></p>


<p>(You don't need to insert a string between the opening and closing tags.) You 
can place this tag, also known as the 
<I>anchor</I>, before the first line of the target portion 
of HTML source code. To refer to an anchor inside the same page, you use the 
<I>#</I> symbol for the value of the HREF attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A HREF=&quot;#Intro&quot;&gt;here&lt;/A&gt; to go to the introduction.
</pre>
</td></tr>
</table></p>


<p>(Warning: intra-page hyperlinks aren't supported by the Cheap DHTML 
editor demo on the CD.) You can have a hyperlink point to an anchor inside another 
page by using the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A HREF=&quot;Chap1.htm#Intro&quot;&gt;here&lt;/A&gt; to go to the book's introduction.
</pre>
</td></tr>
</table></p>


<p>You can also have the hyperlink point to any page on another server by 
providing the fully qualified URL to it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Jump to the &lt;A HREF=&quot;http://www.vb2themax.com/index.htm&quot;&gt;
VB-2-The-Max&lt;/A&gt; Web site.
</pre>
</td></tr>
</table></p>


<p>You can even use images as hyperlinks. The syntax is the same, and you 
only have to insert an &lt;IMG&gt; tag instead of plain text inside the &lt;A&gt; and &lt;/A&gt; tag pair:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF=&quot;http://www.vb2themax.com&quot;&gt;&lt;IMG SRC=&quot;mylogo.gif&quot;&gt;&lt;/A&gt;
</pre>
</td></tr>
</table></p>


<p>You can create clickable images linked to an 
<I>image map.</I> In this case, the image includes multiple hot spots, each one pointing to a different target. This 
advanced technique is beyond the scope of this HTML tutorial, so I won't elaborate on 
image maps here.</p>

<A NAME="913"><h2>Tables</h2></A>

<p>The HTML language has a rich assortment of tags and keywords for creating 
and formatting tables. Tables are important in plain HTML because they offer a way 
to precisely position and align text and image elements. All the data pertaining to a 
table is enclosed between a pair of &lt;TABLE&gt; and &lt;/TABLE&gt; tags. Each new row is 
marked with a &lt;TR&gt; tag, and each column by a &lt;TD&gt; tag. You can also use the &lt;TH&gt; 
tag for cells in header rows. The &lt;/TR&gt;, &lt;/TD&gt;, and &lt;/TH&gt; closing tags are optional. 
The following example displays a table with two columns and three rows, the first of 
which is a header row:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE BORDER=1&gt;
&lt;TR&gt;
   &lt;TH&gt; HeadRow 1, Column 1&lt;/TH&gt;
   &lt;TH&gt; HeadRow 1, Column 2&lt;/TH&gt;
&lt;/TR&gt;&lt;TR&gt;
   &lt;TD&gt; Row 1, Column 1&lt;/TD&gt;
   &lt;TD&gt; Row 1, Column 2&lt;/TD&gt;
&lt;/TR&gt;&lt;TR&gt;
   &lt;TD&gt; Row 2, Column 1&lt;/TD&gt;
   &lt;TD&gt; Row 2, Column 2&lt;/TD&gt;
&lt;/TR&gt;&lt;/TABLE&gt; 
</pre>
</td></tr>
</table></p>


<p>The BORDER attribute specifies the border's width; if this attribute is omitted, the 
table doesn't display a border. You can change the border's color using the 
BORDERCOLOR attribute, and you can even create a 3-D effect with the BORDERCOLORLIGHT 
and BORDERCOLORDARK attributes. The table can have a background color 
(the BGCOLOR attribute), or it can use a background image specified by the 
BACKGROUND attribute.</p>

<p>Each cell can contain text, an image, or both. You can change the 
horizontal alignment of the contents of a cell by using the ALIGN attribute (which can take 
the values <I>left</I>, <I>center</I>, or 
<I>right</I>), and you can control the vertical alignment with 
the VALIGN attribute (which can be assigned the values 
<I>top</I>, <I>middle</I>, or <I>bottom</I>). By default, a cell is wide enough to display its contents, but you can set any size 
you want with the WIDTH and HEIGHT attributes, whose values are in pixels. For 
the WIDTH attribute, you can also specify a percentage of the table's width. You can 
apply most of these attributes to the &lt;TR&gt;, &lt;TD&gt;, and &lt;TH&gt; tags alike. The 
following example shows how to apply these tags; the result is shown in Figure 19-2:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE BORDER=1&gt;
&lt;TR &gt;
   &lt;TH HEIGHT=100&gt; A row 100 pixels tall&lt;/TH&gt;
   &lt;TH&gt; &lt;IMG SRC=&quot;mylogo.gif&quot;&gt;&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
   &lt;TD WIDTH=200 HEIGHT= 90 ALIGN=center VALIGN=bottom&gt; 
   Text aligned to center, bottom&lt;/TD&gt;
   &lt;TD WIDTH=50%&gt; This cell takes half of the table's width. &lt;/TD&gt;
&lt;/TR&gt;
&lt;TR VALIGN=bottom&gt;
   &lt;TD&gt; This row is bottom-aligned.&lt;/TD&gt;
   &lt;TD ALIGN=right&gt; This one is right-aligned.&lt;/TD&gt;
&lt;/TR&gt;&lt;/TABLE&gt;
</pre>
</td></tr>
</table></p>


<p>A cell can also contain a hyperlink or an image that works as a hyperlink. 
By default, a table is wide enough to show its contents, but you can use the 
WIDTH attribute of the &lt;TABLE&gt; tag to specify an absolute width in pixels or a 
percentage of the window's width:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE BORDER=1 WIDTH=90%&gt;
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F19ph02x.htm')"> <img src="F19ph02.JPG" width=404 height=191 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-2.</B> <i>A table with an embedded image and different formatting and alignment options.</i><!--/caption-->
</p>

<A NAME="914"><h2>Styles</h2></A>

<p>Styles offer a way to define the appearance of an HTML tag in an HTML page. If 
you don't specify a style, a given heading is always displayed with its default 
attributes&#8212;for example, a &lt;H1&gt; heading always uses a black New Times Roman font 14 
points tall. You can modify this default setting by using a surrounding &lt;FONT&gt; tag, as 
in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FONT FACE=&quot;Arial&quot; SIZE=20 COLOR=&quot;red&quot;&gt;&lt;H1&gt;Level 1 Heading&lt;/H1&gt;&lt;/FONT&gt;
</pre>
</td></tr>
</table></p>


<p>The problem with the preceding approach is that if all your Level 1 
headings need to be rendered with nondefault attributes, you must update all the 
individual occurrences of the &lt;H1&gt; tag. And when you later want to change to another 
color or font size, you need to revise all the tags once again.</p>

<p>Conversely, if you define and then apply a style you need to redefine the 
&lt;H1&gt; tag just once, and your change will affect the entire document. You can even take 
a further step, and keep your style definitions in a separate file&#8212;a Cascading Style 
Sheet file, or CSS&#8212;that can be referenced by all the HTML pages that make up your 
application. This approach gives you an effective way to keep the contents of an 
HTML document separated from its appearance so that you can easily modify either one 
of them independently from the other. While it's common practice to keep styles in 
a separate file, for the sake of clarity in the following examples I'll embed the 
definition of the style in the HTML page that uses it.</p>

<p>You can define a new style using the &lt;STYLE&gt; and &lt;/STYLE&gt; pair of tags. 
For example, see how you can redefine the &lt;H1&gt; and &lt;H2&gt; tags:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
H1 {FONT-FAMILY=Arial; FONT-SIZE=20; COLOR=&quot;red&quot;}
H2 {FONT-FAMILY=Arial; FONT-SIZE=16; FONT-STYLE=italic; COLOR=&quot;green&quot;}
&lt;/STYLE&gt;
&lt;H1&gt;This is a Red heading&lt;/H1&gt;
&lt;H2&gt;This is a Green italic heading&lt;/H2&gt;
</pre>
</td></tr>
</table></p>


<p>The name of the tag that you want to redefine is followed by a 
semicolon-delimited list of <I>ATTRIBUTE=value 
</I>pairs enclosed within braces. In most cases, 
you can also omit the double quotes that surround a string value, for example, when 
you're specifying a color attribute. You can redefine as many tags as you want within a 
single &lt;STYLE&gt; and &lt;/STYLE&gt; tag pair.</p>

<p>Style sheets even let you define contextual behaviors. Take, for instance, 
the definition of the &lt;H2&gt; tag above, which renders all the level 2 headings as 
green italicized text. Such a style actually nullifies the effect of an &lt;I&gt; tag inside the 
heading because the text is already italic. You can remedy this by specifying that &lt;I&gt; 
tags inside a &lt;H2&gt; and &lt;/H2&gt; pair should produce normal (nonitalic) characters in 
the color red. You enforce this behavior by adding this definition to the style (added 
line is in boldface):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
H1 {FONT-FAMILY=Arial; FONT-SIZE=20; COLOR=&quot;red&quot;}
H2 {FONT-FAMILY=Arial; FONT-SIZE=16; FONT-STYLE=italic; COLOR=&quot;green&quot;}
<B>H2 I {FONT-STYLE=normal; COLOR=&quot;blue&quot;}</B>
&lt;/STYLE&gt;
&lt;H2&gt;This is a heading with a &lt;I&gt;Normal Blue&lt;/I&gt; portion in it &lt;/H2&gt;
</pre>
</td></tr>
</table></p>


<p>Instead of redefining the appearance of all the tags with a given name, you 
can set the style for a specific tag using the STYLE attribute, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H3 STYLE=&quot;FONT-STYLE=bold;COLOR=blue&quot;&gt;A blue and bold Level 3 Heading&lt;/H3&gt;
</pre>
</td></tr>
</table></p>


<p>A great feature of style sheets is that they allow you to define new classes 
of style attributes. This way, you can label an item in the page according to its 
meaning and specify its appearance elsewhere in the page or (better) in a separate 
style sheet. This approach is similar to the one you follow when you define a new 
style in a word processor such as Microsoft Word. For example, suppose that some of 
your headings are book titles, and you want all book titles in your HTML pages 
formatted as bold green text. All you have to do is create the 
booktitle style class, and then apply it when you need it using the CLASS attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
.booktitle {FONT-FAMILY=Arial; FONT-STYLE=bold; COLOR=&quot;green&quot;}
&lt;/STYLE&gt;
&lt;H3 CLASS=booktitle&gt;Programming Microsoft Visual Basic 6&lt;/H3&gt;
</pre>
</td></tr>
</table></p>


<p>The CLASS attribute really shines when used with the &lt;DIV&gt; and &lt;/DIV&gt; 
tags to apply a particular style class to a portion of the page. (For additional 
information about the &lt;DIV&gt; tag, see the &quot;<A HREF="#923">Tags</A>&quot; section later in this chapter.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
.listing {FONT-FAMILY=Courier New; FONT-SIZE=12}
&lt;/STYLE&gt;

&lt;DIV CLASS=listing&gt;
' A Visual Basic listing &lt;BR&gt;
Dim x As Variant
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>Finally, here's one way to store a style definition in a separate file, based 
on the <I>@import </I>directive:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
@import URL(&quot;http://www.vb2themax.com/stylesheet.css&quot;);
&lt;/STYLE&gt; 
</pre>
</td></tr>
</table></p>


<A NAME="915"><h2>Forms</h2></A>

<p>HTML forms offer a way to let the user enter information in a page. A form can 
contain controls, including single-line and multiline text boxes, check boxes, radio 
buttons, push buttons, list boxes, and combo boxes. These controls can't compete with 
their Visual Basic counterparts, but they're sufficiently powerful for most purposes. All 
the controls in an HTML form must be enclosed between the &lt;FORM&gt; and &lt;/FORM&gt; 
tags. The &lt;FORM&gt; tag accepts several attributes, the most important of which is 
NAME, because you need to assign a name to the form if you want to access its controls 
from script routines. You can place controls outside a form, as, for example, when you 
plan to process them through scripts and don't plan to post their contents to the Web server.</p>

<p>Most of the controls in a form are inserted using the &lt;INPUT&gt; tag. The 
TYPE attribute determines the type of control, and the NAME attribute is the name of 
the control. For example, the following code builds a form with one CheckBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;formname&quot;&gt;
&lt;INPUT TYPE=Checkbox NAME=Shipped CHECKED&gt;The product has been shipped.&lt;BR&gt;
&lt;/FORM&gt;
</pre>
</td></tr>
</table></p>


<p>The NAME attribute vaguely corresponds to Visual Basic controls' 
<I>Name </I>property. The CHECKED attribute displays a mark in the control. The text that follows 
the <I>&gt;</I> character corresponds to the caption of the control, but as far as HTML is 
concerned, it's just text that happens to follow the control in the page.</p>

<p>The NAME attribute is more important for RadioButton controls because all 
the controls with the same name belong to the same group of mutually exclusive 
choices. You can select one of the controls in the group by adding the CHECKED attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Select the type of malfunction observed:&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Problem&quot; CHECKED&gt;Wrong Results&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Problem&quot;&gt;Fatal Error&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Problem&quot;&gt;General Protection Fault&lt;BR&gt;
</pre>
</td></tr>
</table></p>


<p>HTML supports three different types of push buttons: the Submit button, 
the Reset button, and the generic, programmable button. The first two buttons are 
similar, differing only for the value of the TYPE attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=Submit VALUE=&quot;Submit&quot;&gt;
&lt;INPUT TYPE=Reset VALUE=&quot;Reset values&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>In both cases, the VALUE attribute determines the caption of the button. 
The effect of the Submit button is to send the contents of all the controls on the form 
to the server. The effect of the Reset button is to clear the contents of all the 
controls on the form and restore their initial values. The third type of button is used in 
combination with a script, as I explain in the following section.</p>

<p>HTML forms can contain three types of TextBox controls: the standard 
single-line control, the control for entering passwords, and the multiline control. The 
single-line control has a TYPE attribute equal to 
<I>Text</I>, can contain a VALUE attribute to 
specify the initial contents of the control, and also supports the SIZE attribute (the width 
in characters) and the MAXLENGTH attribute (the maximum number of characters):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enter book title: &lt;BR&gt;
&lt;INPUT TYPE=Text NAME=&quot;BookTitle&quot; SIZE=40 MAXLENGTH=60 
VALUE=&quot;Programming Microsoft Visual Basic 6&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>The Password control is functionally identical to the regular TextBox 
control and supports the same attributes. It corresponds to a Visual Basic TextBox 
whose <I>PasswordChar </I>property has been set to an asterisk:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enter your password:
&lt;INPUT TYPE=Password NAME=&quot;UserPwd&quot; SIZE=40 MAXLENGTH=60&gt;&lt;BR&gt;
</pre>
</td></tr>
</table></p>


<p>The TextArea control corresponds to a Visual Basic's multiline TextBox 
control. This control is an exception to the general rule, however, because it uses 
the &lt;TEXTAREA&gt; tag instead of the &lt;INPUT&gt; tag; you can determine the control's 
size using the ROWS and COLS attributes, and the initial contents of the control can 
be inserted before the closing &lt;/TEXTAREA&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TEXTAREA NAME=&quot;Comments&quot; ROWS=5 COLS=30 MAXLENGTH=1000&gt;
Enter your comments here.
&lt;/TEXTAREA&gt;
</pre>
</td></tr>
</table></p>


<p>The text between the &lt;TEXTAREA&gt; and &lt;/TEXTAREA&gt; tags is inserted in 
the control as-is, including carriage returns. If a line is wider than the control's 
width, the user has to scroll the control to see its rightmost portion.</p>

<p>HTML forms support single-choice and multiple-choice list box controls, 
which are named <I>Select </I>controls in the HTML jargon. A Select control is defined by 
means of the &lt;SELECT&gt; and &lt;/SELECT&gt; tags, which accept the SIZE attribute for 
specifying the control's height (in number of rows), and the MULTIPLE attribute if the 
control accepts multiple choices. Each individual item of the list requires a 
&lt;OPTION&gt; and &lt;/OPTION&gt; tag pair. You can insert the SELECT attribute if the item is 
initially selected, and a VALUE attribute to specify the string that will be sent to the 
server when the form is submitted. The following code creates a multiple-choice 
Select control that's 4 rows tall and whose first item is initially highlighted:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SELECT NAME=&quot;Products&quot; SIZE=4 MULTIPLE&gt;
    &lt;OPTION SELECTED VALUE=1&gt;Computers&lt;/OPTION&gt;
    &lt;OPTION VALUE=2&gt;Monitors&lt;/OPTION&gt;
    &lt;OPTION VALUE=3&gt;Hard disks&lt;/OPTION&gt;
    &lt;OPTION VALUE=4&gt;CD-ROM drives&lt;/OPTION&gt;
&lt;/SELECT&gt;
</pre>
</td></tr>
</table></p>


<p>If you omit the MULTIPLE attribute and specify SIZE=1 (or omit it), the Select 
control turns into a combo box control.</p>

<A NAME="916"><h2>Scripting</h2></A>

<p>Now that you know how to prepare an HTML page and an HTML form, 
understanding how scripting fits in is really straightforward. First, you need the &lt;SCRIPT&gt; 
and &lt;/SCRIPT&gt; tags to reserve a section of the HTML document for your script code, 
as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
    ' Your VBScript code goes here.
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You can also specify another script language in the LANGUAGE 
attribute&#8212;for example JavaScript&#8212;but given the typical reader of this book, all my 
examples use VBScript.</p>

<A NAME="917"><h3>VBScript vs. Visual Basic for Applications</h3></A>

<p>The VBScript language is an extensive subset of Visual Basic for Applications 
(VBA) and differs from its more powerful cousin in relatively few features:</p>

<UL>
<p><li> Specific data types aren't supported. Everything in VBScript is a 
variant, so the <I>As </I>clause in the <I>Dim 
</I>statements and argument lists isn't allowed. UDTs are missing in VBScript, so you can't use the 
<I>Type...End Type </I>keywords.</li></p>

 
<p><li>     For the same reason, specific object variables are missing in VBScript, 
as is the <I>New </I>operator. You create a new external object using the 
<I>CreateObject </I>function and access it using a Varient variable and late binding. <I>TypeOf </I>tests and 
<I>With...End With </I>blocks aren't supported either.</li></p>

<p><li>   VBScript doesn't support Property procedures, Optional arguments, 
Static variables, constants, labels, <I>Goto </I>and 
<I>Gosub </I>commands, and the <I>On Error Goto 
</I>statement (<I>On Error Resume Next </I>is supported, though).</li></p>

<p><li>    All the string functions are supported, except 
<I>StrConv</I>, the <I>Like </I>operator, and the 
<I>LSet</I>, <I>RSet</I>, and <I>Mid$ </I>commands.</li></p>

<p><li>     VBScript doesn't offer file I/O commands and functions. You can use 
the FileSystemObject library to manipulate directories and files and the Dictionary object to account for the fact that VBScript doesn't support collections.</li></p>
</ul>

<P><div class="note"><blockquote><B>NOTE</B><HR>All the examples in this book are written with VBScript version 3.0.  As this book is going to print, VBScript 5 is in public beta. This 
new version supports classes, property procedures, specific object variables, and 
the <I>New </I>operator. It also allows sophisticated search and replace 
capabilities. VBScript 5 will be distributed with Internet Explorer 5.</blockquote></div>
</P>

<A NAME="918"><h3>Executing code at page load</h3></A>

<p>Most of the time, the code between the &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags consists 
of routines that are invoked from elsewhere in the page. Code can be placed 
outside any routine, however, in which case it's executed immediately after the page has 
been downloaded from the server but before it's rendered in the browser's window:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
    MsgBox &quot;About to display a page&quot;
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You can also achieve the same result by writing code for the 
<I>onload </I>event of the Window object, as in this snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
' A variable declared outside any routine is global to the page.
Dim loadtime
Sub Window_onload()
    ' Remember when the page has been loaded.
    loadtime = Now()
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<A NAME="919"><h3>Accessing form controls</h3></A>

<p>VBScript code can access any control in the form, using the 
syntax <I>formname.controlname</I>, and can also read and modify attributes of controls 
using the dot syntax, exactly as in regular Visual Basic. The following code snippet 
shows you how to assign a string to the VALUE attribute of a TextBox control when 
the form loads:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;DataForm&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;UserName&quot; VALUE=&quot;&quot;&gt;
&lt;/FORM&gt;
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
DataForm.UserName.Value = &quot;Francesco&quot;
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>If you want to access controls on the form when the page loads, the 
&lt;SCRIPT&gt; tag must follow the &lt;FORM&gt; tag; otherwise, the script attempts to reference a 
control that doesn't exist yet. You can retrieve the status of a CheckBox control 
through its <I>Checked </I>property, and the index of the selected item in a Select control 
using its <I>SelectedIndex </I>property. To check the state of a radio button, you use the 
following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If DataForm.RadioButton.Item(0).Checked Then ...
</pre>
</td></tr>
</table></p>


<p>You frequently use VBScript code to react to events raised by controls. 
For example, buttons, CheckBox and RadioButton controls raise an 
<I>onclick </I>event when they're clicked. You can react to such events as you would in standard Visual 
Basic. The following example uses a TextBox, one Button, and two RadioButton 
controls; when the push button is clicked, the code converts the TextBox's contents to 
uppercase or lowercase, according to the RadioButton currently selected:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;DataForm&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;UserName&quot; VALUE=&quot;&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot; CHECKED&gt;Uppercase
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot;&gt;Lowercase&lt;BR&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;Convert&quot; VALUE=&quot;Convert&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Convert_Onclick()
    If DataForm.Case.Item(0).Checked Then
        DataForm.UserName.Value = UCase(DataForm.UserName.Value)
    Else
        DataForm.UserName.Value = LCase(DataForm.UserName.Value)
    End If
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Another way to specify which VBScript routine should execute when the 
user acts on a control is to add an <I>onclick 
</I>attribute in the definition of the control and 
set its value to reference the code that has to be executed when the control is 
clicked. For example, the following code defines two RadioButtons that, when clicked, 
modify the contents of a TextBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;UserData&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;UserName&quot; VALUE=&quot;&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot; onClick=&quot;Convert(0)&quot; CHECKED&gt;Uppercase&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot; onClick=&quot;Convert(1)&quot;&gt;Lowercase&lt;BR&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Convert(index)
    If index = 0 Then
        UserData.Username.Value = UCase(UserData.Username.Value)
    Else
        UserData.Username.Value = LCase(UserData.Username.Value)
    End If
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Usually, the value of the <I>onclick </I>attribute is the name of the procedure that 
must be called, together with its arguments 
(<I>index</I>, in this case), but in general it can 
be any valid piece of VBScript code. </P>

<P>TextBox, TextArea, and Select controls raise 
an <I>onchange </I>event when the user types something in them or selects a new item.</p>

<p>Scripts are often used to add items to a Select control at run time. The 
sequence of actions necessary for reaching this goal will probably seem contorted to a 
Visual Basic programmer: You must use the <I>CreateElement
</I>method of the Document object, set its 
<I>Text</I> and <I>Value </I>properties, and finally add it to the 
<I>Options </I>collection of the Select control. The following example creates a form with a Select control and a 
push button. Initially, the Select control contains only one item, but you can add two 
more items by clicking on the button:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;UserForm&quot;&gt;
&lt;SELECT NAME=&quot;Countries&quot; SIZE=1&gt;
    &lt;OPTION VALUE=1&gt;US&lt;/OPTION&gt;
&lt;/SELECT&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;AddCountries&quot; VALUE=&quot;Add Countries&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub AddCountries_onclick()
    Dim e 
    Set e = Document.createElement(&quot;OPTION&quot;)
    e.Text = &quot;Italy&quot;
    e.Value = 2
    Userform.Countries.Options.Add e
    Set e = Document.createElement(&quot;OPTION&quot;)
    e.Text = &quot;Germany&quot;
    e.Value = 3
    Userform.Countries.Options.Add e
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<A NAME="920"><h3>Generating HTML code</h3></A>

<p>VBScript lets you generate a new HTML page on the fly, using the 
<I>Write </I>method of the Document object. I explain the Document object (and all the other objects 
available to HTML programmers) later in this chapter, but a simple example can give 
you a taste of what you can do:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;UserData&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;Rows&quot; VALUE=&quot;10&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;Cols&quot; VALUE=&quot;10&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=Button NAME=&quot;Generate&quot; VALUE=&quot;Generate Table&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Generate_onclick()
    Dim rows, cols
    ' We need to store these values in variables before the form is 
    ' destroyed when a new document is created.
    rows = UserData.Rows.Value
    cols = UserData.Cols.Value

    Document.Open
    Document.Write &quot;&lt;H1&gt;Multiplication Table&lt;/H1&gt;&quot;
    Document.Write &quot;&lt;TABLE BORDER=1&gt;&quot;
    For r = 1 to rows
        Document.Write &quot;&lt;TR&gt;&quot;
        For c = 1 to cols
            Document.Write &quot;&lt;TD&gt; &quot;  &amp; (r*c) &amp; &quot; &lt;/TD&gt;&quot;
        Next
        Document.Write &quot;&lt;/TR&gt;&quot;
    Next
    Document.Write &quot;&lt;/TABLE&gt;&quot;
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>This code programmatically creates a new HTML page, which contains a 
multiplication table whose size is specified by the user in two text box controls. 
(See Figure 19-3.) As soon you issue the <I>Open 
</I>method of the Document object, the <I>UserData 
</I>form doesn't exist any longer, so you need to cache the values of 
those text box controls in the <I>rows </I>and <I>cols 
</I>local variables before you create the new page.</p>

<p>
<A HREF="javascript:fullSize('F19ph03x.htm')"> <img src="F19ph03.JPG" width=404 height=339 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-3.</B> <i>An HTML page that dynamically creates a multiplication table with a given number of rows and columns.</i><!--/caption-->
</p>

<p>This concludes our quick course on HTML and VBScript. Now you're ready 
to move on to Dynamic HTML and appreciate its great flexibility and increased power.</p>


<a name="A119"></a><h3>9.1.2 An Introduction to Dynamic HTML</h3>

<A HREF="#A118">[Previous]</A> <A HREF="#A120">[Next]</A><P>

<A NAME="921"><h1>An Introduction to Dynamic HTML </h1></A>

<p>Entire books have been devoted to Dynamic HTML (DHTML), and I strongly 
advise you to get one of them if you're seriously interested in producing DHTML 
programs. As I've done with plain HTML, in this chapter I can only outline the most 
important features of this language.</p>

<p>In theory, Dynamic HTML should be considered as HTML 4.0, that is, the 
next version of HTML. In practice, Microsoft Internet Explorer and Netscape 
Navigator currently support different versions of DHTML, so it's difficult to write DHTML 
pages that work equally well with both browsers. From our particular point of view as 
Visual Basic programmers, however, this issue isn't really relevant because DHTML 
applications actually require Internet Explorer 4.01 Service Pack 1 or later, and they 
can't run inside another browser. The problem isn't the DHTML language in itself, but 
the fact that only the most recent versions of the Microsoft browser expose the 
DHTML events to the outside, whereas a DLL written in Visual Basic 6 can trap them 
and react accordingly.</p>

<A NAME="922"><h2>Main Features</h2></A>

<p>Dynamic HTML isn't radically different from regular HTML. All the old tags are 
still supported, and scripts inside the page can exploit an expanded object model 
that's compatible with the previous version, so they'll continue to work as before. In a 
sense and at the risk of oversimplifying, we can say that the real difference between 
regular HTML and Dynamic HTML is in how the page is interpreted by the browser 
when the page is being downloaded from the remote server.</p>

<p>Among the new features of DHTML, the following ones deserve special mention:</p>

<UL>
<p><li> Dynamic redrawing of the page, which means that you can change 
the style, the color or any other attribute of an element of the 
page&#8212;including its visibility&#8212;and the page automatically redraws itself without the 
user needing to download it again. This means faster response time, 
less workload on the server, and above all really dynamic behavior.</li></p>

 
<p><li>     The DHTML object model gives you access to any element of the 
page, including tags, images, paragraphs, down to the individual word or 
character if necessary. You can therefore manipulate the appearance of 
the page in its tiniest details.</li></p>

<p><li>    Styles and style sheets have been expanded with more attributes, and 
so they give you more control over the page elements.</li></p>

<p><li>     You can enforce absolute position of elements, which means that, if 
necessary, you can prepare the layout of your pages with the highest 
accuracy. Moreover, each element has a 
<I>z-index</I> attribute (similar to Visual Basic's 
<I>ZOrder</I> property) that can be used to simulate 3-D 
appearance. Because elements' coordinates can be dynamically modified, it's easy 
to create animation effects using simple scripts.</li></p>

<p><li>     The new event model adds flexibility in how a user's actions can be 
processed by scripts in the page. This includes the event bubbling 
feature, which lets scripts process events when it's more convenient to do so.</li></p>

<p><li>     Visual filters offer many eye-catching ways to render any element on 
the page and permit you to create shadowed and 3-D text. Transition 
filters let you display a portion of the page using fading effects. Internet 
Explorer offers 13 built-in transition filters, but you can also use third-party filters.</li></p>

<p><li>     DHTML includes many other improvements over traditional HTML, 
such as a better control over the creation of tables and support for 
additional graphic formats (such as PNG, Portable Network Graphics, the 
successor of the GIF format).</li></p>
</ul>

<p>Let's see the most important new features in more detail.</p>

<A NAME="923"><h2>Tags</h2></A>

<p>You've already seen how you can use the &lt;DIV&gt; and &lt;/DIV&gt; tags to group 
multiple elements and create a portion of the page that can be assigned a common style. 
For example, you can use these tags to create rectangular areas with text and 
background colors that are different from the other elements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot; WIDTH=300; HEIGHT=100; COLOR=white; BACKGROUND=red;&quot;&gt;
A red block with white text&lt;BR&gt;
Another line in the same block
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>When you're working with DHTML, you might need to process items that 
are smaller than the heading or the paragraph. You can reference such items using 
the &lt;SPAN&gt; and &lt;/SPAN&gt; pair of tags, which subdivide an element into smaller 
chunks so that each portion can have different attributes:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;WIDTH=300; HEIGHT=150; COLOR=white; BACKGROUND=red;&quot;&gt;
A red block with white text&lt;BR&gt;
&lt;SPAN STYLE=&quot;COLOR=yellow&quot;&gt;Some words in yellow,&lt;/SPAN&gt;
&lt;SPAN STYLE=&quot;COLOR=blue&quot;&gt;Other words in blue&lt;/SPAN&gt;
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>An important difference between the &lt;DIV&gt; tag and the &lt;SPAN&gt; tag is that 
the former always adds a carriage return after the closing &lt;/DIV&gt; tag, which means 
that you can't continue to insert text on the same line. Conversely, the &lt;/SPAN&gt; tag 
doesn't insert a carriage return, so, for example, the previous code snippet produces two 
lines of text, not three. The importance of the &lt;DIV&gt; and &lt;SPAN&gt; tags will be more 
evident when you see how you can use scripts to create dynamic pages.</p>

<p>The &lt;BUTTON&gt; and &lt;/BUTTON&gt; tags allow you to add more versatile 
button controls on a form. While the standard &lt;INPUT TYPE=Button&gt; tag supports only 
a text caption, these new tags let you embed anything in the text, including an image:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BUTTON ID=&quot;Button1&quot; STYLE=&quot;height=80; width=180&quot;&gt;
Click Here
&lt;IMG SRC=&quot;www.vb2themax.com/mylogo.gif&quot;&gt;
&lt;/BUTTON&gt;
</pre>
</td></tr>
</table></p>


<p>DHTML includes a sort of Frame control, which can draw a border around 
other controls. You create such a control using the &lt;FIELDSET&gt; tag and specify its 
caption using the &lt;LEGEND&gt; tag. Actually, this frame control is even more powerful than 
its Visual Basic counterpart because you can embed nearly everything between 
the &lt;LEGEND&gt; and &lt;/LEGEND&gt; tag pair:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FIELDSET&gt;
&lt;LEGEND&gt;Select a product&lt;IMG SRC=&quot;mylogo.gif&quot;&gt;&lt;/LEGEND&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Product&quot; CHECKED&gt;Tape
&lt;INPUT TYPE=Radio NAME=&quot;Product&quot;&gt;Music CD
&lt;INPUT TYPE=Radio NAME=&quot;Product&quot;&gt;Videotape
&lt;/FIELDSET&gt;
</pre>
</td></tr>
</table></p>


<p>Dynamic HTML also adds several new attributes that you can use with 
certain tags. For example, the TABINDEX attribute lets you specify the tab order of 
controls on the page, exactly as the Visual Basic property does. The ACCESSKEY 
attribute works with some types of page elements to provide a hot key for easy 
Alt+<I>key<U> </U></I>selection. The difference is that DHTML doesn't highlight the selected key in any 
way&#8212;you have to do it yourself. While this failure to highlight a selected key seems a 
flaw in DHTML, it actually gives you a lot of flexibility when building your user interface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A &quot;Click <B>H</B>ere&quot; button that you click using the Alt+H key combination
&lt;BUTTON ID=&quot;Button1&quot; ACCESSKEY=&quot;H&quot;&gt;Click &lt;B&gt;H&lt;/B&gt;ere&lt;/BUTTON&gt;
</pre>
</td></tr>
</table></p>


<p>Finally, the DISABLED attribute lets you selectively disable (and 
reenable) controls and other elements. You just need to remember that it works in a way 
opposite to the Visual Basics <I>Enabled </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=Radio ID=&quot;optMusicCD&quot; NAME=&quot;Product&quot; DISABLED&gt;Music CD

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Button1_onclick()
    ' Reenable the option button.
    optMusicCD.disabled = False
End sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<A NAME="924"><h2>Properties</h2></A>

<p>Dynamic HTML adds some new properties to the &lt;STYLE&gt; tag. These properties 
are useful in themselves, but above all they add a new dimension to scripting 
because they allow a script routine to move, hide, and change the relative z-order of the 
elements on the page, so making the page a truly dynamic one.</p>

<p>The <I>position </I>property permits you to accurately place an element on the 
page; by default this property is set to the value 
<I>static</I>, which means that the element is positioned according to the usual rules of HTML. But if you set the 
<I>position</I> property to <I>absolute</I>, you can specify the coordinates of an object with respect to the 
upper left corner of the window, using the <I>left 
</I>and <I>top </I>properties. Here's an example 
that displays white text inside a rectangle with a red background. The rectangle is 
300 pixels wide and 150 pixels high:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;POSITION=absolute; TOP=50; LEFT=100; WIDTH=300; HEIGHT=150; 
COLOR=white; BACKGROUND=red;&quot;&gt;A red block with white text&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>If the object is contained within another object&#8212;for example, another 
&lt;DIV&gt; section&#8212;the left and top coordinates are measured with respect to the 
container's upper left corner. For example, the following piece of code creates a red 
rectangle and a blue rectangle within it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;POSITION=absolute; TOP=100; LEFT=100; WIDTH=300; HEIGHT=150; 
COLOR=white; BACKGROUND=red;&quot;&gt;
Outer rectangle
   &lt;DIV STYLE=&quot;POSITION=absolute; TOP=20; LEFT=40; WIDTH=220; HEIGHT=110; 
   COLOR=white; BACKGROUND=Blue;&quot;&gt;Inner rectangle&lt;/DIV&gt;
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>If <I>position </I>is set to <I>relative</I>, the 
<I>left </I>and t<I>o</I>p<I> </I>properties refer to the upper 
left corner of the element in the page that immediately precedes the current one. 
You typically use relative mode to move a portion of text or an image to a given 
distance from the last piece of text in the page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>A string of text followed by a green rectangle
&lt;DIV STYLE=&quot;POSITION=relative; TOP:10; LEFT=0; WIDTH=300; HEIGHT=10; 
BACKGROUND=green;&quot;&gt;&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>When you have overlapping objects on the page, you can determine their 
visibility using the <I>z-order </I>property, by means of which a higher value puts an 
object in front of objects with lower values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;POSITION=absolute; TOP=100; LEFT=100; WIDTH=300; 
HEIGHT=150; COLOR=white; BACKGROUND=red; Z-INDEX=2&quot;&gt;
This rectangle overlaps the next one.&lt;/DIV&gt;
&lt;DIV STYLE=&quot;POSITION=absolute; TOP=120; LEFT=120; WIDTH=300; 
HEIGHT=150; COLOR=white; BACKGROUND=green; Z-INDEX=1&quot;&gt;&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>You can't use the <I>z-order </I>property to change the relative z-ordering of an 
object and its container because the container will always appear behind the objects 
it contains. If you omit the <I>z-order </I>property, objects stack according to the order 
they appear in the HTML source code. (That is, each object covers the object defined 
before it in code.)</p>

<p>The <I>visibility </I>property specifies whether the object is visible. It takes the 
values <I>hidden </I>or <I>visible</I>. This property is most useful when it's controlled via 
script. Another new intriguing property is 
<I>display</I>: When you set it to <I>none</I>, the 
element becomes invisible and the browser reclaims the space this element occupied to 
rearrange the other elements on the page (unless they use absolute positioning). 
You can make the element visible again by setting the 
<I>display </I>property back to an empty string. For an example of this property, see the &quot;<A HREF="#955">The First Example: A Dynamic Menu</A>&quot; section later in this chapter.</p>

<A NAME="925"><h2>Properties and Scripting</h2></A>

<p>The &quot;dynamic&quot; in Dynamic HTML means that you can modify one or more 
attributes of the page at run time and have the browser immediately render the new 
contents of the page without needing to reload the page from the server. For this reason, 
you must create script procedures to exploit the potential of DHTML.</p>

<p>You can programmatically control any attribute of any item on the page, 
provided that the item can be referenced in code. In plain HTML, you can reference 
only a few items&#8212;for example, the controls in a form&#8212;but in Dynamic HTML, you 
can reference any item that has an ID attribute. For example, the following code 
contains a &lt;DIV&gt; portion of the page associated with the 
<I>rectangle </I>ID, and a push button that, when clicked, executes a VBScript routine that modifies the background color of 
the &lt;DIV&gt; section:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV ID=&quot;rectangle&quot; STYLE=&quot;POSITION=absolute; LEFT=100; 
TOP=50; WIDTH=200; HEIGHT=100; BACKGROUND=red&quot;&gt;
Click the button to change background color
&lt;/DIV&gt;
&lt;FORM&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;ChangeColor&quot; VALUE=&quot;Change Color&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
' Randomly change the color of the rectangle.
Sub ChangeColor_onclick()
    Rectangle.style.background = &quot;#&quot; &amp; RndColor() &amp; RndColor() &amp; RndColor()
End Sub

' Return a random two-digit hexadecimal value.
Function RndColor()
    RndColor = Right(&quot;0&quot; &amp; Hex(Rnd * 256), 2)
End Function
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You need to pass through the intermediate <I>style 
</I>object to get to the <I>background </I>property. This makes sense because 
<I>background</I> is a property of the STYLE 
attribute. Likewise, you can control other properties of the 
<I>style </I>object, such as these:
</p>

<UL>

<p><li> The <I>fontFamily, fontStyle</I>, and 
<I>fontSize </I>properties determine the style of the characters. (Notice that property names are similar to names of 
style attributes but don't include the hyphen.)
</li></p>
 
<p><li> The <I>left</I>, <I>top</I>, <I>width</I>, and 
<I>height </I>properties set and return a string 
that contains the position and size of the object (for example 
<I>10px</I> for 10 pixels); there are also the 
<I>posLeft</I>, <I>posTop</I>, <I>posWidth</I> and 
<I>posHeight</I> properties, which don't append the 
<I>px</I> string to the numeric value and are therefore more useful in regular programming.
</li></p>
<p><li> The padding property is the distance in pixels between the contents 
of an element and its border. You can use the properties 
<I>paddingLeft</I>, <I>paddingTop</I>, 
<I>paddingRight</I> and <I>paddingBottom</I> to specify the 
distance from the individual borders on the four sides.
</li></p>
<p><li> The <I>textAlign</I> property affects the horizontal alignment of text in an 
element and can be left, center, or right.
</li></p>
<p><li> The <I>visibility</I> property affects whether the element is displayed (can 
be hidden or visible). The <I>zIndex</I> property sets or returns a number 
that determines whether the object is displayed in front or behind other 
elements; positive values move the element in front of the other objects 
on the page, negative values move the element behind others on the 
page. The &lt;BODY&gt; element has <I>zIndex</I> equal to 0.
</li></p>
<p><li> The <I>cssText</I> property sets and returns the argument of the STYLE 
attribute as a string.
</li></p>
</ul>

<p>To fine-tune the position and size of an item, you can strip the 
<I>px</I> characters appended to the value returned by the 
<I>left</I>, <I>top</I>, <I>width </I>and <I>height 
</I>properties. Using the <I>pos</I>xxxx properties is usually better, however, because they return 
numerical values. The following example shows how you can move an element to the right:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rectangle.style.posLeft = rectangle.style.posLeft + 10
</pre>
</td></tr>
</table></p>


<p>If a property isn't defined in the STYLE attribute, it returns Null. The 
<I>pos</I>xxxx properties are an exception to this rule because they always return numeric values.
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Use the 
<I>style.color </I>and <I>style.backgroundColor 
</I>properties to adjust the text and background color of any element on the page except the 
Document object, for which you should use the <I>fgcolor 
</I>and <I>bgcolor </I>properties.
</blockquote></div>
</p>

<A NAME="926"><h2>Text Properties and Methods</h2></A>

<p>Because a DHTML document is an active entity, you often want to modify its 
contents at run time. You can make run-time modifications in many ways, for 
example, by using the TextRange object (which is described later in this chapter). Most 
visible page elements, however, support four properties and two methods that make 
this an easy job.
</p>

<p>The four properties are <I>innerText</I>, 
<I>outerText</I>, <I>innerHTML, </I>and 
<I>outerHTML</I>. The <I>innerText </I>returns the portion of the document contained in the element as text. 
(All HTML tags are automatically filtered out.) The 
<I>outerText </I>property returns the same value as 
<I>innerText</I>, but you get a different result when you assign a string to it, 
as you'll see in a moment. The <I>innerHTML </I>property returns the HTML code 
between the opening and closing tags. The <I>outerHTML 
</I>property returns the HTML code of the element, including its opening and closing tags.
</p>

<p>To experiment with these properties, let's define an element that contains 
some HTML tags inside it, such as
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1 ID=Heading1&gt;Level &lt;I&gt;One&lt;/I&gt; Heading&lt;/H1&gt;
</pre>
</td></tr>
</table></p>


<p>which is rendered on your browser as <B>Level 
<I>One</I> Heading</B>.<I> </I>Now see what the 
preceding properties return when applied to this element:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MsgBox Heading1.innerText  ' Level One Heading
MsgBox Heading1.outerText  ' Level One Heading
MsgBox Heading1.innerHTML  ' Level &lt;I&gt;One&lt;/I&gt; Heading
MsgBox Heading1.outerHTML  ' &lt;H1 ID=Heading1&gt;Level &lt;I&gt;One&lt;/I&gt; Heading&lt;/H1&gt;
</pre>
</td></tr>
</table></p>


<p>Assigning a value to the <I>innerText </I>substitutes the text between the opening 
and closing tags; the new value isn't parsed, so it shouldn't include HTML tags. For 
example, the statement
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.innerText = &quot;A New Heading&quot;
</pre>
</td></tr>
</table></p>


<p>completely replaces the text between the &lt;H1&gt; and &lt;/H1&gt; tags, and the new 
heading appears in your browser as <B>A New 
Heading</B>. Even if the <I>outerText </I>property 
always return the same string as the <I>innerText 
</I>property, it behaves differently when a new value is assigned to it because the substitution also affects the surrounding 
tags. Hence the statement
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.outerText = &quot;A New Heading&quot;
</pre>
</td></tr>
</table></p>


<p>actually destroys the &lt;H1&gt; and &lt;/H1&gt; tags and transforms the heading element 
into plain text (unless it was contained in another pair of tags). What's worse is that 
now the object has no ID attribute associated with it, so you can't programmatically 
access it any longer. For this reason, the 
<I>outerText</I> property has a limited practical 
use, and in most cases you'll use it just to delete the tags that surround an element:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A reusable VBScript routine
Sub DeleteOuterTags(anyElement)
    anyElement.outerText = anyElement.innerText
End Sub
</pre>
</td></tr>
</table></p>


<p>If you want to replace the portion of a page inside a pair of tags with some 
HTML text, you should use that element's <I>innerHTML 
</I>property, as in this line of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.innerHTML = &quot;A &lt;U&gt;New&lt;/U&gt; Heading&quot;
</pre>
</td></tr>
</table></p>


<p>In this case, the string passed to the property is parsed and all HTML tags affect 
the result. For example, after the previous assignment the result displayed in the 
browser is <B>A <U>New</U> Heading</B>.
</p>

<p>The last property of this group, 
<I>outerHTML</I>, works like <I>innerHTML,</I> but 
the substitution also affects the surrounding tags. This means that you can modify 
the type and the ID of the element you're referencing, and you can change, for 
example, the level of a heading and the formatting of its contents in one operation:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.outerHTML = &quot;&lt;H2 ID=Heading1&gt;Level &lt;U&gt;Two&lt;/U&gt; Heading&lt;/H2&gt;&quot;
</pre>
</td></tr>
</table></p>


<p>Or you can center the heading using this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre> Heading1.outerHTML = &quot;&lt;CENTER&gt;&quot; &amp; Heading1.outerHTML &amp; &quot;&lt;/CENTER&gt;&quot;
</pre>
</td></tr>
</table></p>


<p>Thanks to the string manipulation capabilities of VBScript, you can create 
a reusable routine that lets you change the level of any heading in the page 
without altering either its ID or its contents:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ChangeHeadingLevel(element, newLevel)
    html = element.outerHTML
    pos1 = Instr(UCase(html), &quot;&lt;H&quot;)
    level = Mid(html, pos1 + 2, 1)
    pos2 = InstrRev(UCase(html), &quot;&lt;/H&quot; &amp; level, -1, 1)
    ' Because VBScript doesn't support the &quot;_&quot; continuation character,
    ' you must type the next two lines as a single statement.
    html = Left(html, pos1 + 1) &amp; newLevel &amp; Mid(html, pos1 + 3, 
        pos2 - pos1) &amp; newLevel &amp; Mid(html, pos2 + 4)
    element.outerHTML = html
End Sub
</pre>
</td></tr>
</table></p>


<p>If you modify an element's ID, the event procedure you've written for it 
won't work any longer. For this reason, you should always keep the same ID, or you 
should dynamically add the code to manage events from the new element. Also keep in 
mind that not all visible elements support all these four properties, the most notable 
exception being table cells (which expose only the 
<I>innerText</I> and <I>innerHTML </I>properties).
</p>

<p>While the four properties I've described so far let you 
<I>replace </I>a portion of the document, most elements also support two methods that enable you to 
<I>add</I> new contents to the document. The <I>insertAdjacentText 
</I>method inserts a portion of plain text immediately before or after the opening or the closing tag of the element. 
The <I>insertAdjacentHTML </I>method does the same, but its argument is parsed and all 
HTML is correctly recognized and affect the result. Here are a few examples:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Append plain text at the end of the heading.
Heading1.insertAdjacentText &quot;BeforeEnd&quot;, &quot; (added dynamically)&quot;
' As above, but appends italicized text.
Heading1.insertAdjacentHTML &quot;BeforeEnd&quot;, &quot; &lt;I&gt;(added dynamically)&lt;/I&gt;&quot;
' Add new text before the first word of the heading.
Heading1.insertAdjacentText &quot;AfterBegin&quot;, &quot;This is a &quot;
' Add a level 2 heading immediately after this heading.
Heading1.insertAdjacentHTML &quot;AfterEnd&quot;, &quot;&lt;H2&gt;New Level 2 Heading&lt;/H2&gt;&quot;
' Insert italicized text right before this heading.
Heading1.insertAdjacentHTML &quot;BeforeBegin&quot;, &quot;&lt;I&gt;Introducing...&lt;/I&gt;&quot;
</pre>
</td></tr>
</table></p>


<A NAME="927"><h2>Events</h2></A>

<p>Each page element with which you've associated an ID attribute can raise an 
event. The majority of DHTML events are similar to Visual Basic events, even though 
their names are different. All the DHTML events begin with the two characters 
<I>on</I>, such as <I>onclick</I>, 
<I>onkeypress</I>, and <I>onchange</I>. For example, when the hyperlink
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A ID=&quot;Details&quot; HREF=&quot;www.vb2themax.com/details&quot;&gt;here&lt;/A&gt; for details
</pre>
</td></tr>
</table></p>


<p>is clicked, you can trap the user's action with the following VBScript code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Details_onclick()
    MsgBox &quot;About to be transferred to another site&quot;
End Sub
</pre>
</td></tr>
</table></p>


<p>The handling of DHTML events differs significantly in a couple of ways 
from the Visual Basic' way of managing events, though. First, event procedures don't 
take arguments. Second, an event is received by the object that raised it (which is like 
the innermost of a set of Russian dolls) and in turn by all the page elements that 
contain the object that raised the event. (This feature, known as 
<I>event bubbling</I>, is explained in the following section.)
</p>

<p>All the arguments that make sense inside an event can be retrieved as (and 
possibly assigned to) properties of the <I>event 
</I>object. For example, when an <I>onkeypress 
</I>event is received, you can determine which key has been pressed by looking at 
the <I>event.keycode </I>property, and you can also &quot;eat&quot; the key by setting this property 
to 0. For example, see how you can convert to uppercase all the text entered in 
a TextBox control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=Text NAME=&quot;txtCity&quot; VALUE=&quot;&quot;&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub txtCity_onkeypress()
    window.event.keycode = Asc(UCase(Chr(window.event.keycode)))
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Inside any event procedure, you can retrieve a reference to the object the 
event is bound to by using the <I>Me </I>keyword, as in the following piece of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub txtCity_onkeypress()
    ' Clear the text box if the spacebar is pressed.
    If window.event.keycode = 32 Then 
        Me.Value = &quot;&quot;
        window.event.keycode = 0      ' Also eat the key.
    End If
End Sub
</pre>
</td></tr>
</table></p>


<A NAME="928"><h3>Event bubbling</h3></A>

<p>The <I>event bubbling </I>feature of DHTML events lets you process an event in 
multiple places on the page, which isn't something you can do in Visual Basic. A DHTML 
event is first received by the object acted on by the user, it's next raised for its 
container and then for the container's container, and so on until the event reaches the 
highest tag in the hierarchy. For example, if the user clicks on a hyperlink inside a table, 
the <I>onclick </I>event is first fired for the hyperlink object, then for the table, for the 
Body object, and finally for the Document object.
</p>

<p>The following example makes use of the event bubbling feature to write 
one event procedure that manages the keys pressed in three distinct TextBox 
controls, which have been grouped together under a &lt;DIV&gt; tag. The example also 
demonstrates that the event is generated for the Body object (provided that you label it 
with an ID attribute) and for the Document object:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY ID=&quot;Body&quot;&gt;
&lt;DIV ID=Textboxes&gt;
&lt;INPUT TYPE=Text NAME=&quot;txtName&quot; VALUE=&quot;&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;txtCity&quot; VALUE=&quot;&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;txtCountry&quot; VALUE=&quot;&quot;&gt;
&lt;/DIV&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Textboxes_onkeypress()
    ' Convert to uppercase.
    window.event.keycode = Asc(UCase(Chr(window.event.keycode)))
End Sub

Sub Body_onkeypress()
    ' The Body element also gets the event.
End Sub

Sub Document_onkeypress()
    ' The Document element also gets the event.
End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
</pre>
</td></tr>
</table></p>


<p>By setting the <I>event.cancelBubble </I>property to True, you can cancel the bubbling in any event procedure. For example, if you set this property to 
True in the <I>Body_onclick </I>procedure, the Document object won't receive the event.
</p>

<p>In any event procedure in the event chain, you can retrieve a reference to 
the element that started the event by querying the 
<I>event.srcElement </I>property. This permits you to create generalized event procedures and at the same time to account 
for special cases, as in the following example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Textboxes_onkeypress()
    ' Convert all textboxes to uppercase except txtName.
    If window.event.srcElement.Name = &lt;&gt; &quot;txtName&quot; Then
        window.event.keycode = Asc(UCase(Chr(window.event.keycode)))
    End If
End Sub 
</pre>
</td></tr>
</table></p>


<p>Don't confuse the <I>srcElement </I>property with the 
<I>Me </I>keyword, which returns a reference to the object the event procedure is bound to. The two objects 
coincide only inside the first event procedure fired by the event bubbling mechanism.
</p>

<A NAME="929"><h3>Canceling the default effect</h3></A>

<p>Most user actions on a page element produce default results. For example, a 
mouse click on a hyperlink causes a jump to another HTML page, and a key pressed 
when the focus is on a TextBox control causes the character to be added to the 
control's current contents. You can cancel this default action by assigning False to 
the <I>event.returnValue </I>property, as in this example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A ID=&quot;Link1&quot; HREF=&quot;http://www.vb2themax.com&quot;&gt;here&lt;/A&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Link1_onclick()
    'Prevent the yperlink from firing.
    window.event.returnValue = False
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Another way to cancel the default action of an event is to transform the 
event procedure into a Function and assign False to the return value, as here:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Link1_onclick()
    Link1_onclick = False
End Function
</pre>
</td></tr>
</table></p>


<A NAME="930"><h3>Timer events</h3></A>

<p>Even if HTML doesn't provide a Timer control, it's possible&#8212;indeed simple&#8212;to 
create routines that are executed at regular intervals. You can choose from two 
types of timer routines: one that fires repeatedly and one that fires only once. (This in 
fact is a standard HTML feature, so you don't need DHTML for using the code in 
this section.) You activate a timer routine using the 
<I>setTimeout </I>(for one-shot timers) or <I>setInterval 
</I>(for regular timers)<I> </I>methods of the <I>window 
</I>object. These methods have a similar syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>window.setTimeout &quot;routinename&quot;, milliseconds, language
window.setInterval &quot;routinename&quot;, milliseconds, language
</pre>
</td></tr>
</table></p>


<p>You normally invoke these methods from within the 
<I>window_onload </I>routine or outside any routine. (In both cases, the methods are executed as soon as the 
page is downloaded.) For example, the following code moves a button to the right by 
20 pixels twice per second.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=BUTTON NAME=&quot;Button1&quot; VALUE=&quot;Button Caption&quot; 
    STYLE=&quot;POSITION=absolute&quot; &gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
' This line is executed when the page is loaded.
window.setInterval &quot;TimerEvent&quot;, 500, &quot;VBScript&quot;

' The following routine is executed every 500 milliseconds.
Sub TimerEvent()
    Button1.style.posLeft = Button1.style.posLeft+5
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You can cancel the effect of a <I>setTimeout 
</I>or a <I>setInterval </I>method by using the 
<I>clearTimeout </I>or the <I>clearInterval </I>method, respectively.
</p>

<A NAME="931"><h3>Event summary</h3></A>

<p>We can subdivide DHTML events into a few categories, according to their functions.
</p>

<p>Keyboard events include <I>onkeypress</I>, 
<I>onkeydown, </I>and <I>onkeyup</I>. These are 
similar to the Visual Basic events of same names. The 
event object's <I>keycode </I>property contains the code of the pressed key , and you can read the state of shift keys 
by means of the <I>altKey</I>, <I>ctrlKey, </I>and 
<I>shiftKey </I>properties of the event object.
</p>

<p>Dynamic HTML supports the same mouse events as Visual Basic, 
including <I>onclick</I>, <I>ondblclick</I>, 
<I>onmousedown</I>, <I>onmouseup</I>, and 
<I>onmousemove</I>. The <I>onclick </I>event also fires when the user presses Enter while a push button has the focus. 
Inside a mouse event you can query the <I>event.button 
</I>property to learn which button was pressed. (The bit-coded value you get is similar to the argument received by 
Visual Basic's mouse events.)
</p>

<p>Several DHTML events have no counterparts in Visual Basic: 
<I>onmouseover </I>fires when the mouse cursor hovers over an element, and 
<I>onmouseout </I>when the mouse abandons an element. Inside these event procedures you can use the 
<I>fromElement </I>and <I>toElement </I>properties of the 
<I>event </I>object to learn which element has been 
entered or abandoned.
</p>

<p>The <I>onfocus </I>and <I>onblur </I>events are similar to Visual Basic's 
<I>GotFocus </I>and <I>LostFocus </I>events, but they also fire when the focus goes to another window or 
another application. The <I>onchange </I>event is similar to the corresponding Visual 
Basic event, but it fires only when the focus leaves the control.
</p>

<p>The <I>onselectstart </I>event fires when the user clicks on the page and starts 
selecting a portion of text or other elements; when the mouse moves and the selected 
area changes accordingly, an <I>onselect </I>event is fired. The 
<I>ondragstart</I> event fires when a drag operation starts: By trapping this event, you can cancel its default action, 
which is copying the selected text elsewhere.
</p>

<p>A few events are global to the entire page. The 
<I>onreadystatechange </I>event fires when the state of the page changes (for example, when the download has 
completed and the page is about to become interactive). The 
<I>onresize </I>event fires when the page is resized. The 
<I>onunload </I>and <I>onbeforeunload </I>events are similar to Visual 
Basic's <I>Unload </I>and <I>QueryUnload</I>, and they fire when the page is about to be 
unloaded because the user is navigating to another page or closing the browser. The 
<I>onscroll </I>event occurs when the document (or a page element) is scrolled. The 
<I>onhelp </I>event fires when the user presses the F1 key. The 
<I>onerror </I>event fires when a script error occurs or when the download of a page element (for example, an image) fails.
</p>

<p>A few events can't be trapped from a DHTML Visual Basic application: 
<I>onabort</I> (the user clicks on the Stop button on the browser's toolbar), 
<I>onreset </I>(the user clicks on the Reset button), and 
<I>onsubmit </I>(the user clicks on the Submit button).
</p>


<a name="A120"></a><h3>9.1.3 The DHTML Object Model</h3>

<A HREF="#A119">[Previous]</A> <A HREF="#A121">[Next]</A><P>

<A NAME="932"><h1>The DHTML Object Model</h1></A>

<p>To write effective Dynamic HTML applications, you must become familiar with 
the object model exposed by the browser that hosts the DHTML page. Figure 19-4 
shows the complete Window object hierarchy. I'm not going to dissect every 
property, method, and event in this hierarchy; instead, I'll focus on the objects that are the 
most interesting and useful to a Visual Basic programmer.
</p>

<p>
<A HREF="javascript:fullSize('F19ph04x.htm')"> <img src="F19ph04.JPG" width=404 height=581 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-4.</B> <i>The DHTML object model.</i><!--/caption-->
</p>

<A NAME="933"><h2>The Window Object</h2></A>

<p>The Window object is the root of the DHTML hierarchy. It represents the window 
inside which the HTML page (which is represented by the Document object) is displayed.
</p>

<A NAME="934"><h3>Properties </h3></A>

<p>If a window contains frames, you can access them by using the 
<I>Frames </I>collection, which contains other Window objects. Several other properties return a reference 
to Window objects. If the window is itself inside a frame, you can get a reference to 
its container window with the <I>parent </I>property. The 
<I>top </I>property returns a reference to the topmost window. In general, you can't anticipate which window is 
referenced by the latter two properties because the user might have loaded the page in a 
frame created by another HTML page external to your application. The 
<I>opener </I>property returns a reference to the window that opened the current one.
</p>

<p>You can query the open or closed state of the window using the 
<I>closed </I>property. The <I>status </I>property sets and returns the text displayed in the browser's 
status bar, and <I>defaultStatus </I>is the default string in the status bar.
</p>

<A NAME="935"><h3>Methods</h3></A>

<p>The Window object exposes several methods. The 
<I>open </I>method loads a new document in the window, and 
<I>showModalDialog </I>loads an HTML page in a modal 
window:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Jump to another page.
window.open &quot;http://www.vb2themax.com/tips&quot;
</pre>
</td></tr>
</table></p>


<p>You can close the window using the <I>close 
</I>method. A few other methods&#8212;<I>alert</I>, 
<I>confirm</I>, and <I>prompt</I>&#8212;display message box and input box dialog boxes, but 
you usually get a better result using Visual Basic's 
<I>MsgBox </I>and <I>InputBox </I>commands.
</p>

<p>The <I>focus </I>method is similar to Visual Basic's 
<I>SetFocus </I>method. The <I>blur </I>method moves the input focus to the next window, as if the user had pressed the Tab 
key. The <I>scroll </I>method accepts an <I>x-y 
</I>pair of coordinates and scrolls the window to 
ensure that the specified point is visible in the browser:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Scroll the window to the top.
window.scroll 0, 0
</pre>
</td></tr>
</table></p>


<p>The <I>execScript</I> method adds a lot of flexibility to your program because it 
lets you manufacture a piece of script code and execute it on the fly. The 
following example uses this method to implement a cheap calculator with just a bunch of 
lines of code (see Figure 19-5):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Insert your expression here:
&lt;INPUT TYPE=Text NAME=&quot;Expression&quot; VALUE=&quot;&quot;&gt;&lt;BR&gt;
Then click to evaluate it:
&lt;INPUT TYPE=BUTTON NAME=&quot;Evaluate&quot; VALUE=&quot;Evaluate&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;Result&quot; VALUE=&quot;&quot;&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Evaluate_onclick
    If Expression.Value = &quot;&quot; Then
        MsgBox &quot;Please enter an expression in the first field&quot;
        Exit Sub
    End If

    On Error Resume Next
    window.execScript &quot;Result.value = &quot; &amp; Expression.Value, &quot;VBScript&quot;
    If Err Then
         MsgBox &quot;An error occurred - please type a valid expression&quot;
    End If 
     End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F19ph05x.htm')"> <img src="F19ph05.JPG" width=404 height=168 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-5.</B> <i>An expression evaluator built with DHTML code.</i><!--/caption-->
</p>

<p>Don't forget to pass the &quot;VBScript&quot; string as a second argument to the 
<I>execScript </I>function because the default language is JavaScript.
</p>

<p>This powerful method can even add script procedures to the page. The 
following example demonstrates this feature by creating a table of values using an 
expression the user entered in a TextBox control. (This is something that would be very 
difficult to do in Visual Basic!)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enter an expression:   FN(x) = 
&lt;INPUT TYPE=Text NAME=&quot;Expression&quot; VALUE=&quot;x*x&quot;&gt;&lt;P&gt;
Click here to generate a table of values:
&lt;INPUT TYPE=BUTTON NAME=&quot;CreateTable&quot; VALUE=&quot;Create Table&quot;&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub CreateTable_onclick()
' Create the FUNC() function. 
' (Enter the following two lines as a single VBScript statement,)
window.execScript &quot;Function FUNC(x): FUNC = &quot; 
    &amp; Expression.Value &amp; &quot;: End Function&quot;, &quot;VBScript&quot;
' Create the HTML code for the table.
code = &quot;&lt;H1&gt;Table of values for FN(x) = &quot; &amp; Expression.Value &amp; &quot;&lt;/H1&gt;&quot;
code = code &amp; &quot;&lt;TABLE BORDER&gt;&quot;
code = code &amp; &quot;&lt;TR&gt;&lt;TH&gt;  x  &lt;/TH&gt;&lt;TH&gt;  FN(x)  &lt;/TH&gt;&lt;/TR&gt;&quot;
For n = 1 To 100
   code = code &amp; &quot;&lt;TR&gt;&lt;TD&gt; &quot; &amp; n &amp; &quot; &lt;/TD&gt;&quot;
   code = code &amp; &quot;&lt;TD&gt; &quot; &amp; FUNC(n) &amp; &quot; &lt;/TD&gt;&lt;/TR&gt;&quot;
Next
code = code &amp; &quot;&lt;/TABLE&gt;&quot;

' Write the code to a new HTML page.
window.document.clear
window.document.open
window.document.write code
window.document.close
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>I've already explained the remaining methods of the Window object: 
<I>setInterval</I>, <I>setTimeout</I>, 
<I>clearInterval</I>, and <I>clearTimeout. </I>(See the section &quot;<A HREF="#930">Timer Events</A>&quot; 
earlier in this chapter.)
</p>

<A NAME="936"><h3>The History object</h3></A>

<p>The History object represents all the URLs that the user has visited in the 
current session. It exposes only one property and three methods.</p>

<p>The <I>length </I>property returns the number of URLs stored in the object. The 
<I>back </I>and <I>forward </I>methods load the page at the previous and next URL in the history 
list and therefore correspond to a click on the Back and Forward buttons on the 
browser's toolbar. They're useful for adding buttons on the page that perform the same 
function, as here:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub cmdPrevious_onclick()
    window.history.back
End Sub
</pre>
</td></tr>
</table></p>


<p>The only other method of this object is 
<I>go</I>, which loads the URL at the <I>n</I>th position in the history list:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the third page in the history list.
window.history.go 3
</pre>
</td></tr>
</table></p>


<A NAME="937"><h3>The Navigator object</h3></A>

<p>The Navigator object represents the browser program and provides information 
about it capabilities. The <I>appCodeName</I>, <I>appName, 
</I>and <I>appVersion </I>properties return the code name, the product name, and the version of the browser. The 
<I>cookieEnabled</I> property returns True if the browser supports cookies; 
<I>userAgent </I>is the browser name sent as a string to the server in the HTTP request. You can use the following 
VBScript code to display some information about your browser:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Dynamically create an HTML page with all the requested information.
Set doc = window.document
Set nav = window.navigator
doc.open
doc.write &quot;&lt;B&gt;appCodeName&lt;/B&gt; = &quot; &amp; nav.appCodeName &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;appName&lt;/B&gt; = &quot; &amp; nav.appName &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;appVersion&lt;/B&gt; = &quot; &amp; nav.appVersion &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;cookieEnabled&lt;/B&gt; = &quot; &amp; nav.cookieEnabled &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;userAgent&lt;/B&gt; = &quot; &amp; nav.userAgent &amp; &quot;&lt;BR&gt;&quot;
doc.close
</pre>
</td></tr>
</table></p>


<p>A few other properties return information about the browser, including 
<I>cpuType</I>, <I>userLanguage</I>, 
<I>systemLanguage</I>, and <I>platform</I>. The only method worth noting 
is <I>javaEnabled</I>, which returns True if the browser supports the Java language.
</p>

<p>The Navigator object also exposes two collections: The 
<I>mimeTypes </I>collection includes all the document and file types that the browser supports, and the 
<I>plugins </I>collection contains all the objects in the page.
</p>

<A NAME="938"><h3>The Location object</h3></A>

<p>The Location object represents the URL of the page currently displayed in the 
browser. Its most important property is 
<I>href</I>, which returns the complete URL string. All 
the other properties contain a portion of the URL string: 
<I>hash </I>(the portion following the # symbol), 
<I>hostname </I>(the name of the host), <I>host 
</I>(the <I>hostname:port </I>portion of the URL), 
<I>port </I>(the port number), <I>protocol </I>(the first part of the URL that holds the 
protocol name), and <I>search </I>(the portion following the ? in the URL).
</p>

<p>This object also exposes three methods: <I>assign 
</I>(loads a different page), <I>replace </I>(loads a page and substitutes the current entry in the history list), and 
<I>replace </I>(reloads the current page).
</p>

<A NAME="939"><h3>The Screen object</h3></A>

<p>The Screen object exposes properties about the screen and doesn't support 
any methods. The <I>width </I>and <I>height </I>properties are the dimensions of the screen in 
pixels and can be useful when you're deciding where to place a new window. 
The <I>colorDepth </I>property is the number of color planes supported and is typically 
used when the server site contains several similar images and you want to download 
the one that best fits the number of colors supported by the user's video card. 
The <I>bufferDepth </I>is a writable property that corresponds to the color depth of the 
off-screen buffer that the browser uses to display images. This property lets you display an 
image with a color depth different from its original color depth. The 
<I>updateInterval </I>property can be assigned the interval at which the browser redraws the page. (This 
is especially useful to reduce flickering when you're doing animations.)
</p>

<p>Internet Explorer also supports the 
<I>availWidth</I> and <I>availHeight </I>properties, 
which return the size of the screen that isn't occupied by visible taskbars (such as the 
Microsoft Windows and the Microsoft Office taskbars), and the 
<I>fontSmoothingEnabled</I> Boolean property, which specifies whether the browser should 
use smoother fonts if necessary.
</p>

<A NAME="940"><h3>The Event object</h3></A>

<p>I explained many features of the Event object earlier in this chapter. This object 
is used within VBScript event procedures to read and possibly modify event 
arguments, to specify whether the default action should be canceled, and to cancel event 
bubbling. The Event object exposes only properties, no methods.
</p>

<p>Four pairs of properties return the coordinates of the mouse cursor.The 
<I>screenX </I>and <I>screenY </I>properties give you the position relative to the upper left corner of 
the screen, <I>clientX </I>and <I>clientY </I>give you the position relative to the upper left corner 
of the browser's client area; <I>x </I>and <I>y 
</I>give you the position relative to the container 
of the object that fired the event; and <I>offsetX 
</I>and <I>offsetY </I>give you the position 
relative to the object that fired the event. A ninth property, 
<I>button</I>, returns the state of the mouse button as a bit-fielded value (1=left button, 2=right button, 4=middle button).
</p>

<p>Four properties have to do with the state of the keyboard: The 
<I>keycode </I>property is the ASCII code of the key that was pressed (and you can assign it to 
modify the effect of a key press), whereas 
<I>altKey</I>, <I>ctrlKey </I>and <I>shiftKey </I>return the state of 
the corresponding shift key.</p>

<p>Three properties return a reference to an element of the page. The 
scrElement is the item that originally fired the event; it can be different from the 
Me object if you're trapping the event within the event procedure of an object that's higher in the 
hierarchy. The <I>fromElement </I>and the <I>toElement 
</I>properties return the element being left and entered, respectively, during 
<I>onmouseout </I>or <I>onmouseover </I>events.
</p>

<p>You can set the <I>cancelBubble </I>property to False to cancel event bubbling. 
You can set the <I>returnValue </I>property to False to cancel the default action associated 
with the event. The <I>type </I>property returns the name of the event without the leading 
<I>on </I>characters (such as <I>click</I>, 
<I>focus</I>, and so on).

<A NAME="941"><h2>The Document Object</h2></A>

<p>The Document object represents the contents of the page currently loaded in 
the browser. It's probably the richest DHTML object in terms of properties, 
methods, events, and functionality.
</p>

<A NAME="942"><h3>Properties</h3></A>

<p>Several properties return information about the state of the document and the 
page loaded in it. The <I>title </I>property contains the title of the document (the string 
defined by the &lt;TITLE&gt; tag); <I>URL</I> holds the Uniform Resource Locator of the page (such 
as <I>http://www.vb2themax.com</I>); <I>domain 
</I>returns the security domain of the document; and 
<I>lastModified </I>returns the date and time of the most recent edit operation for 
the document. The <I>referrer </I>property is the URL of the page that referred the current one.
</p>

<p>Some properties set or return color values. For example, 
<I>fgcolor </I>and <I>bgcolor </I>give you the text and background colors of the page; changing these properties has 
an immediate effect on the page (except in the areas where specific color settings 
have been defined). Three properties control the color of hyperlinks: 
<I>linkColor </I>returns the color for links that haven't been visited yet; 
<I>vLinkColor </I>tells you the color for visited links, and 
<I>alinkColor </I>returns the color for active links (that is, links under the 
cursor when the mouse button is pressed).
</p>

<p>A number of properties return references to other objects in the page. The 
<I>body </I>property gives you a reference to the Body object; 
<I>parentWindow</I> returns a reference to the Window object that this document belongs to; 
<I>location</I> is a reference to the Location object exposed by the parent Window; and 
<I>activeElement </I>is a reference to the page element that has the focus. (When you've just downloaded the page 
this property returns a reference to the Body element.)
</p>

<p>The <I>readyState </I>property returns a string that describes the current 
download state of the document. This is a valuable information because it lets you avoid 
the errors that would occur if you reference an object&#8212;such as an image&#8212;while the 
page is still downloading:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If document.readyState = &quot;complete&quot; Then
    ' Fill the text box control only if the page has been completely
    ' downloaded.
    MyTextBox.Value = &quot;Good morning dear user!&quot;
End If
</pre>
</td></tr>
</table></p>


<p>This property is so important that the Document object fires a special 
event, <I>onReadyStateChange</I>, when its value changes. Thanks to this event, you don't 
have to continuously poll this property to determine when it's safe to act on page elements.
</p>

<A NAME="943"><h3>Methods</h3></A>

<p>We have already seen several methods of the Document object, namely the 
<I>clear</I>, <I>open</I>, <I>write</I>, and <I>close 
</I>methods that we've used to dynamically create new 
HTML pages. The <I>writeln </I>method is a variant of the 
<I>write </I>method that adds newline characters and supports multiple arguments:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>document.writeln &quot;First Line&lt;BR&gt;&quot;, &quot;Second Line&quot;
</pre>
</td></tr>
</table></p>


<p>Remember that the added newline character usually has no effect if the 
output is pure HTML unless you're inserting text inside a pair of &lt;PRE&gt; and &lt;/PRE&gt; tags or &lt;TEXTAREA&gt; and &lt;/TEXTAREA&gt; tags.
</p>

<p>The <I>elementFromPoint </I>method returns the element that corresponds to a 
given pair of coordinates (It's therefore is similar to the 
<I>HitTest </I>method exposed by a few Visual Basic controls.) You can use this method inside a mouse event procedure 
to display a description of the object under the mouse cursor:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Document_onmousemove()
     On Error Resume Next     ' Not all elements have a Name property.
    ' Fill a text box with the description of the element under the mouse.
    Set element = document.elementFromPoint(window.event.x, window.event.y)
     Select Case element.Name
        Case &quot;txtUserName&quot;
            txtDescription.Value = &quot;Enter your username here&quot;
        Case &quot;txtEmail&quot;
            txtDescription.Value = &quot;Enter your e-mail address here&quot;
        ' And so on.
    End Select
End Sub 
</pre>
</td></tr>
</table></p>


<p>Earlier in this chapter, I showed you how to use the Document's 
<I>createElement</I> method to create new Option objects and dynamically fill a Select control at run 
time. You can also use this method to create new &lt;IMG&gt; tags and &lt;AREA&gt; tags. (The 
latter tags create image maps, which aren't covered in this book, however.)
</p>

<A NAME="944"><h3>Child collections</h3></A>

<p>The Document object exposes several child collections, which let you iterate on 
all the elements in the page. These collections aren't disjoint, so an element can 
belong to more than one collection. For example, the 
all collection gathers all the tags and the elements in the body of the document, but the Document object also 
exposes the anchors, images, and links 
collections, whose names are self-explanatory. 
The scripts collection contains all the &lt;SCRIPT&gt; tags, 
forms is the collection of existing forms, 
styleSheets gathers all the styles defined for the document. A few 
collections concern objects that I haven't covered in this chapter, such as the 
frames, embeds, and plugins collections.
</p>

<p>Working with these collections is similar to working with Visual Basic's 
collections. You can refer to an element in the collection using its index (collections 
are zero-based) or key (in most cases the key corresponds to the name of the 
element). The most relevant difference is that DHTML collections support the 
<I>length </I>property instead of the <I>Count</I> property. You can iterate on all the items of a collection 
using a <I>For Each...Next </I>loop, and you can determine the type of an element by 
peeking at its <I>tagName </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the tags of all the items in the page.
For Each x In document.all
    text = text &amp; x.tagName &amp; &quot;, &quot;
Next
text = Left(text, Len(text) _ 2)        ' Drop the last comma.
MsgBox text
</pre>
</td></tr>
</table></p>


<p>If you want to retrieve only elements with a given tag, you can filter the 
collection using its <I>tags </I>method, which accepts the name of the tag you're filtering on:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the names of all &lt;INPUT&gt; elements.
For Each x In document.all.tags(&quot;INPUT&quot;)
    text = text &amp; x.Name &amp; &quot;, &quot;
next
MsgBox Left(text, Len(text) _ 2)        ' Drop the last comma.
</pre>
</td></tr>
</table></p>


<p>The <I>tags</I> method returns a collection, so you can store its return value in 
a variable for later. Or you can query its <I>length 
</I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set imgCollection = document.all.tags(&quot;IMG&quot;)
MsgBox &quot;Found &quot; &amp; imgCollection.length &amp; &quot; images.&quot;
</pre>
</td></tr>
</table></p>


<p>The forms collection is special, in that it exposes the child 
elements collection, which in turn contains all the controls in the form. A page can contain multiple 
forms, even though all the examples in this chapter use only one form:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' List the names of all the controls on the first form in the page.
For Each x In document.forms(0).elements
    text = text &amp; x.name &amp; &quot;, &quot;
Next
MsgBox Left(text, Len(text) _ 2)

' Move the input focus on the control named &quot;txtUserName&quot;
' of the form named &quot;UserData.&quot;
document.forms(&quot;UserData&quot;).elements(&quot;txtUserName&quot;).focus
</pre>
</td></tr>
</table></p>


<A NAME="945"><h3>The Selection object</h3></A>

<p>The Selection object represents the portion of the document that's currently 
highlighted by the user. Its only property is 
<I>type</I>, which returns a string that tells 
which kind of elements are selected. (The choices are 
<I>none</I> or <I>text.</I>)
</p>

<p>The Selection object supports three methods. The 
<I>empty </I>method cancels the selection and reverts its 
<I>type </I>property to <I>none</I>. The <I>clear 
</I>method actually deletes the contents of the selection. If the selection includes text, controls, or an entire 
table, they are physically removed from the document and the page is automatically 
refreshed. (The <I>empty</I> method doesn't delete tables that are only partially 
selected, however):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Delete the selected portion of the document 
' when the user presses the &quot;C&quot; key.
Sub Document_onkeypress()
    If window.event.keycode = Asc(&quot;C&quot;) Then
        document.selection.clear
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The last method of the Selection object is 
<I>createRange</I>, which returns a reference to the TextRange object that describes the text currently selected. I'll 
explain what to do with such a TextRange object in the next section.
</p>

<A NAME="946"><h2>The TextRange Object</h2></A>

<p>The TextRange object represents a portion of the document. This can be the 
area currently selected by the user or an area defined programmatically. The 
TextRange object lets you access the contents of a portion of the page&#8212;either as HTML 
source code or as text visible to the user&#8212;and exposes several methods that let you 
define the size and position of the range itself.
</p>

<p>You can create a <I>TextRange</I> property from the Selection object, as we've 
just seen, or you can use the <I>createTextRange 
</I>methods of the Body object or a Button, TextArea or TextBox element:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set bodyTxtRange = document.body.createTextRange
Set inputTxtRange = document.all(&quot;txtUserName&quot;).createTextRange
</pre>
</td></tr>
</table></p>


<A NAME="947"><h3>Properties</h3></A>

<p>The TextRange object exposes only two properties, 
<I>text </I>and <I>htmlText</I>. The former can set or return the textual contents of the portion of the document defined by 
the object but doesn't let you specify its formatting. The latter property is read-only 
and returns the portion of the document in HTML format. For example, the following 
piece of VBScript code displays the HTML contents of the selected text when the 
user presses the <I>C</I> key and converts the text to uppercase when the user presses the 
<I>U </I>key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Document_onkeypress()
    If window.event.keycode = Asc(&quot;C&quot;) Then
        MsgBox document.selection.createRange.htmlText
    ElseIf window.event.keycode = Asc(&quot;U&quot;) Then
        ' Type the following two-line statement as one line.
        document.selection.createRange.text = 
            UCase(document.selection.createRange.text)    
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>htmlText </I>property always returns syntactically correct HTML code. 
For example, if the TextRange object comprises only the starting &lt;B&gt; tag of a portion 
of bold text, the value returned by this property correctly includes the closing &lt;/B&gt; 
tag, so you can safely reuse it in the same or another document without any 
problem. The value returned by this property also includes &lt;SCRIPT&gt; tags inside the area.
</p>

<p>The <I>text </I>property always returns the characters in a TextRange object, but 
an assignment to it works only if the area doesn't extend over portions of the 
document with different attributes.
</p>

<A NAME="948"><h3>Methods</h3></A>

<p>The TextArea object exposes 27 methods, but I'll explain just the most useful 
ones. The first method to get familiar with is 
<I>select</I>, which makes the TextRange object appear to be selected: It's useful for getting visual feedback about what you're 
doing to the object.
</p>

<p>The <I>moveStart</I>, <I>moveEnd, </I>and <I>move 
</I>methods change the position of the starting point, the ending point, or both ends of the area. You can move these points 
by the specified number of characters, words, and whole sentences:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Extend the selection 10 characters to the right.
Set selRange = document.selection.createRange
selRange.moveEnd &quot;character&quot;, 10
' Extend it one word to the left. 
' (Negative values move toward the beginning of the document.)
selRange.moveStart &quot;word&quot;, -2
selRange.select
' Extend it one sentence to the right. (The value &quot;1&quot; can be omitted.)
selRange.moveEnd &quot;sentence&quot;
selRange.select
' Restore it as it was.
selRange.move &quot;textedit&quot;
</pre>
</td></tr>
</table></p>


<p>The <I>collapse</I> method reduces the size of a TextRange method to either its 
start point (if the method's argument is True) or to its ending point (if the argument is False):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>selRange.collapse True     ' Reduce the range to its starting point.
</pre>
</td></tr>
</table></p>


<p>The <I>moveToElementText </I>method is useful when you want the TextRange 
object to move over a particular element in the page. This method works only if 
the TextRange already includes the element, so you often create a TextRange object 
from the body element and then shrink it to the desired element, as in the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a TextRange corresponding to the &quot;MyControl&quot; element.
Set range = document.body.createTextRange
range.moveToElementText document.all(&quot;MyControl&quot;)
</pre>
</td></tr>
</table></p>


<p>You can use the <I>moveToPoint </I>method to have the TextRange point to a 
given <I>x-y </I>pair of coordinates, typically the mouse coordinates:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Retrieve the word the user clicked on.
Sub Document_onclick()
    Set range = document.body.createTextRange
    range.moveToPoint window.event.x, window.event.y
    range.expand &quot;word&quot;
    MsgBox range.text
End Sub
</pre>
</td></tr>
</table></p>


<p>Use the <I>findText </I>method to have a TextRange move over a given text string 
in the page. In its simplest form, this method takes one argument, the string 
being searched, and returns True if the search succeeds (in which case the range has 
moved over the searched text). Otherwise, it returns False:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set range = document.body.createTextRange
If range.findText(&quot;ABC&quot;) Then
    range.select
Else
    Msgbox &quot;Text not found&quot;
End If
</pre>
</td></tr>
</table></p>


<p>Concerning the remaining methods of the TextRange object, it's worth 
mentioning <I>scrollIntoView </I>(which ensures that the text range is visible in the browser's 
window), <I>parentElement </I>(which returns a reference to the element that 
completely contains the text range), <I>pasteHTML 
</I>(which replaces the contents of the text range with HTML code), and 
<I>duplicate </I>(which creates a new TextRange object that 
points to the same range).
</p>

<A NAME="949"><h2>The Table Object</h2></A>

<p>In Dynamic HTML, tables are defined exactly as they are in pure HTML&#8212;that is, 
with the &lt;TABLE&gt; and &lt;/TABLE&gt; tag pair and a series of &lt;TR&gt; and &lt;TD&gt; tags. The 
real difference is that under DHTML a table exposes the 
rows and cells collections, which let you access individual cells without having to assign them a specific ID 
attribute. More precisely, the table object exposes a 
rows collection, and each row object exposes a 
cells collection. The following piece of code extracts the contents of the 
table as a tab-delimited string that's ready to be exported to a text file:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set table = document.all(&quot;Table1&quot;)
For each thisRow in table.rows
    For each thisCell In thisRow.cells
        text = text &amp; thisCell.innerText &amp; Chr(9)
    Next
    ' Replace the last tab char with a CR-LF pair.
    text = Left(text, Len(text) - 1) &amp; Chr(13) &amp; Chr(10)
Next
MsgBox text
</pre>
</td></tr>
</table></p>


<p>You can directly reference a cell using this syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Modify the first cell in the third row. (Row/column indices are
' zero-based.)
table.rows(2).cells(0).innerText = &quot;New Value&quot;
</pre>
</td></tr>
</table></p>


<p>Because individual cells don't support the <I>innerHTML 
</I>property, to modify the attributes of a given cell you must create a TextRange object and use its 
<I>pasteHTML </I>method instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set thisCell = table.rows(2).cells(0)
Set range = document.body.createTextRange
range.moveToElementText thisCell
range.pasteHTML &quot;&lt;B&gt;New Value in Boldface&lt;/B&gt;&quot;
</pre>
</td></tr>
</table></p>


<p>Even more exciting is your ability to add new rows and columns, thanks to 
the <I>insertRow </I>method of the table object, and the 
<I>insertCell </I>method of the row object:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a row as the fifth row of the table.
set newRow = table.insertRow(4)
' Insert a cell in the first column, and set its contents.
set newCell = newRow.insertCell(0)
newCell.innerText = &quot;New Cell in Column 1&quot;
' Add other cells, using a more concise syntax.
newRow.insertCell(1).innerText = &quot;New cell in Column 2&quot;
newRow.insertCell(2).innerText = &quot;New cell in Column 3&quot;
</pre>
</td></tr>
</table></p>


<p>You can also delete cells or entire rows using the row object's 
<I>deleteCell </I>method and the table object's 
<I>deleteRow </I>method, respectively. The table, row, and cell 
objects have a few properties in common&#8212;such as 
<I>align</I>, <I>vAlign</I>, and 
<I>borderColor</I>&#8212;that let you format data they contain.
</p>


<a name="A121"></a><h3>9.1.4 The DHTMLPage Designer</h3>

<A HREF="#A120">[Previous]</A> <A HREF="#A122">[Next]</A><P>

<A NAME="950"><h1>The DHTMLPage Designer</h1></A>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The big news about Visual Basic 6 is that you can write DHTML code using 
your favorite language, thanks to the DHTMLPage designer. Like all designers, 
the DHTMLPage designer exposes a visual part (the HTML page) and a code 
section. When you compile the program, you produce an ActiveX DLL that runs inside 
Internet Explorer 4.01 or later versions. Being able to access the DHTML object from a 
compiled DLL written in Visual Basic has a lot of advantages:
</p>

<UL>

<p><li> The appearance of the page is completely separated from the code 
that manages it, which permits a better subdivision of the work among 
the programmer and the page author.
</li></p>
<p><li> You enjoy source code protection: the code is embedded in a DLL 
and can't be peeked at by just reading the contents of the page.
</li></p>
<p><li> Visual Basic compiled code is typically faster than routines written 
in VBScript or other script languages. The speed advantage is even 
more noticeable if you compile to native code with some optimization 
turned on.
</li></p>
<p><li> You don't have to guess the names of the properties and methods of 
each object in the hierarchy because IntelliSense is there to help you. Ditto 
for the syntax of event procedures, which are created for you by 
the DHTMLPage designer code editor.
</li></p>
<p><li> The DHTMLPage designer is well integrated in the environment, so 
you can modify the initial properties of any element by using the 
Properties window rather than by writing cryptic HTML tags.
</li></p>
</ul>

<A NAME="951"><h2>A First Look at the DHTMLPage Designer</h2></A>

<p>The fastest way to show you the DHTMLPage designer in action is to select the 
DHTML Application template from the project gallery. This template adds one instance of 
the DHTMLPage designer and one standard BAS module, which contains some 
useful routines. In a typical DHTML application you'll create several DHTMLPage 
designers, one for each DHTML page your program consists of.
</p>

<p>Figure 19-6 shows the DHTMLPage designer, with a treeview pane on the 
left and a detail pane on the right. The two panes are actually different 
representations of the contents of the page: In the treeview pane you see the hierarchical 
relationships of the elements of the page, in the detail pane you see (and arrange) the 
elements as if they were controls on a form. The designer doesn't provide access to 
the HTML code behind the page, so you can't add script routines or HTML tags 
directly. Fortunately, you don't really need to use scripts any longer because you'll be 
using Visual Basic, and you can use an external editor to author an HTML page 
and then import it into the designer.
</p>

<p>
<A HREF="javascript:fullSize('F19ph06x.htm')"> <img src="F19ph06.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-6.</B> <i>The DHTMLPage designer.</i><!--/caption-->
</p>

<p>When the designer is active, a new tab appears in the Toolbox window, 
containing all the HTML controls that you can drop in the detail pane. All the 
controls we've seen so far are included in the toolbox, plus a few new ones: hidden 
TextBox controls, InputImage controls, FileUpload controls. To simplify the developer's 
job, you have distinct icons for the one-line Select control and for the multiline 
(and optionally multiselect) List control, even though they're rendered using the 
same HTML tags. The toolbox also contains a few items which aren't controls in the 
stricter sense of the word: the HorizontalRule element (for drawing horizontal lines) 
and Hyperlink element. You can also create a Hyperlink by selecting a portion of text 
and clicking on the Make Selection Into Link button on the toolbar. Moreover, if you 
write text that's formatted as a Web address (such as 
<I>www.microsoft.com</I>) the designer automatically turns it into a hyperlink.
</p>

<p>As you know, an HTML page can contain ActiveX controls, and the 
DHTMLPage designer supports this capability too. You can drop an external ActiveX control 
on the page, such as a TreeView or an ActiveX control you've authored in Visual 
Basic and compiled as a stand-alone OCX file. You can't use intrinsic Visual Basic 
controls, nor can you use UserControl objects that are private in the current project.
</p>

<p>The topmost portion of the DHTMLPage designer toolbar (visible in Figure 
19-7) gives you the ability to format the text or the element currently selected. The 
second combo box from the left is filled with all the styles defined for the current 
page, including those defined in an external Cascading Style Sheet that the page refers 
to. Because you can't define a style in the DHTMLPage designer, this combo box 
can contain elements only if you've imported an external HTML page written with a 
more powerful editor.
</p>
<p>
<A HREF="javascript:fullSize('F19ph07x.htm')"> <img src="F19ph07.JPG" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-7.</B> <I>The toolbar of the DHTMLPage designer.</I><!--/caption-->
</p>

<p>Using the DHTMLPage Designer Properties button, you can decide whether 
the HTML page being built should be saved together with the current project or as 
a separate HTM file. Each choice has its advantages, but because the designer 
can't compete with more powerful HTML editors, such as Microsoft FrontPage, I 
suggest that you use the latter option so that you can use an external HTML editor to 
embellish the page.
</p>

<p>The Launch Editor button lets you edit the current page using the external 
editor of your choice. By default, this editor is Notepad, which hardly qualifies as an 
HTML editor but is used by many HTML programmers nonetheless. You can define a 
better editor in the Advanced tab of the Options dialog of the Visual Basic IDE. You 
can edit the page in an external editor only if you saved it as an external HTM file. 
When you click on this button, Visual Basic automatically saves the project with the 
most recent edits, and then runs the external editor. Visual Basic continuously checks 
the file's date and time, and as soon as you save the page in the editor Visual Basic 
asks whether you want to reload it in the DHTMLPage designer.
</p>

<p>As with all designers, you can click on a control (in either of the two 
panes) and then press the F4 key to bring up the Properties window. In the 
DHTMLPage designer, you can modify the attributes of 
<I>any </I>element, including plain text. I suggest that you create an empty HTML page and drop an instance of each control 
in the toolbox and then press F4 to become familiar with the properties it exposes. 
In the Properties window, you can read the type of each element, according to the 
name classification used by the designer. For example, many of the controls dropped 
from the toolbox are of type 
<I>DispIHTMLInputElement</I> and are further classified by their 
<I>type </I>property (which can be <I>text</I>, 
<I>password</I>, <I>image</I>, and so on). The class of 
Hyperlink elements is <I>DispHTMLAnchorElement</I>.  Tables are of class 
<I>DispHTMLTable, </I>and they contain elements whose class is 
<I>DispHTMLTableCell</I>.
</p>

<p>Speaking of tables, you have a lot of options when creating and editing 
tables, for example using the drop-down menu from the designer's toolbar or by 
right-clicking on the table itself in the detail pane. The pop-up menu includes the 
Properties command, which brings up the Properties dialog box shown in Figure 19-8. In 
this dialog box, you can set a lot of attributes, and you can also span cells to take 
multiple rows and columns. Also notice that a button on the toolbar lets you show 
and hide table borders at design time, without affecting the actual 
<I>Border </I>attribute. Having a table with visible borders at design time usually simplifies your editing chores.
</p>
<p>
<img src="F19ph08.GIF" width=401 height=395 border="0">
<p>
<!--caption--><B>Figure 19-8.</B> <I>The Properties dialog box of a DispHTMLTable object.</I><!--/caption-->


<p>If you click on an external ActiveX control and press the F4 key, you get 
the list of supported HTML attributes, not the usual list of properties specific to 
that control. To edit the intrinsic properties of an external ActiveX control, you must 
right-click on it and bring up its Properties dialog box. The List and the Select 
DHTML controls support a custom Properties dialog box as well, so you can use it for 
specifying the list of items these controls contain.
</p>

<p>The designer can work in two position modes, relative or absolute. In 
<I>relative </I>mode, you let the browser position all the elements in the page when the page 
itself is resized, as it happens for all the (non-Dynamic) HTML pages. In 
<I>absolute </I>mode, the element stays where you drop it. On the toolbar, two buttons affect position 
mode: One button affects the current mode, and the other affects the absolute position 
attribute of the element that's currently selected. The latter button is disabled when 
you select text elements because you can modify the position of a text element only 
by pressing the Enter key to add empty lines, as you do in a word processor. 
Because hyperlinks are just text elements, they're subject to the same rules for 
positioning. All the other elements can be moved with the mouse, but you have to grab them 
from their border. You can control the z-order position of page elements by using the 
Order submenu on the designer's toolbar.
</p>

<p>Setting text properties in the internal designer isn't the most intuitive action. 
In fact, a &lt;P&gt; element doesn't initially expose any font or style property. To force it 
to expose such attributes, you must change its appearance using the topmost 
toolbar, for example, by modifying the font size. When you change the standard 
appearance of a paragraph, a &lt;FONT&gt; element appears in the treeview as a child of the &lt;P&gt; 
item. You can then select this new item and press the F4 to display the Properties 
window, and then change other attributes, such as 
<I>color</I> and <I>face</I>.
</p>

<A NAME="952"><h2>Programming DHTML Elements</h2></A>

<p>To exploit the dynamic capabilities of DHTML, you must write code that reacts 
to events raised by the page or its elements. In a Visual Basic 6's DHTML 
application, you write code that reacts to events raised by the page and its elements, exactly 
as you write code behind the controls on a form. When you then compile the 
application, Visual Basic creates one or moreHTM files and a DLL that contains 
the compiled code you've written inside event procedures. This DLL will be loaded 
in the address space of Internet Explorer, and can trap DHTML events exposed to 
the outside by that browser.
</p>

<p>All Visual Basic 6's DHTML applications are actually ActiveX DLL 
applications, whose threading model is apartment threading. You shouldn't use the 
DHTMLPage designer inside single-threaded ActiveX projects. All theHTM files produced when 
you compile the application contain an OBJECT tag with a reference to the 
corresponding DLL. The first time the user navigates to the page, the DLL is 
automatically downloaded from the server and installed in the client's system. This mechanism 
is identical to the one used for downloading an ActiveX control in an HTML page.
</p>

<A NAME="953"><h3>The DHTMLPage object</h3></A>

<p>The DHTMLPage object represents the component in the DLL that's bound to 
a particular HTM page. Like all objects, it exposes an 
<I>Initialize </I>and a <I>Terminate </I>events, which fire the first time the page is used and immediately before the DLL is unloaded, 
respectively. It also exposes two events, <I>Load 
</I>and <I>Unload</I>, which fire when the page is loaded and unloaded, respectively.
</p>

<p>The DHTMLPage object exposes four design-time properties. The 
<I>SourceFile </I>property is the path of theHTM file that contains the HTML source of the page 
being built or an empty string if you aren't editing the page using an external editor. 
The <I>BuildFile </I>property is the path of theHTM file that will be built during the 
compilation process and that should be distributed with the DLL. (It's initially the same 
value as the <I>SourceFile </I>property.) The <I>AsynchLoad 
</I>property specifies whether the page should be loaded asynchronously. (See more on this in the section &quot;<A HREF="#961">Loading a Page Asynchronously</A>&quot; later in this chapter.) Specifying the 
<I>id </I>property makes the page programmable. In the Properties window, you'll also find a fifth property, 
<I>Public</I>, but you can't actually count it because it's set to True and can't be changed. (You 
can't have private DHTMLPage objects.)
</p>

<p>These properties are available only at design time. At run time, 
the DHTMLPage object exposes a different set of properties: 
<I>BaseWindow</I>, <I>Document</I>, and 
<I>DHTMLEvent</I> (as shown in Figure 19-9). They return a reference to the 
all-important DHTML Window, Document, and Event objects respectively, and so 
they're the links between the Visual Basic program and the Dynamic HTML object 
mode. Notice that while you can access DHTML objects from within the DHTMLPage 
designer module, you can't access the designer from a script inside the HTML page. 
The page is oblivious to the fact that it's being processed by a DLL.
</p>

<p>
<A HREF="javascript:fullSize('F19ph09x.htm')"> <img src="F19ph09.JPG" width=404 height=196 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-9.</B> <I>The runtime properties of the DHTMLPage object.</I><!--/caption-->
</p>

<p>When inside a DHTML module, you can directly reference the DHTMLPage object's properties in code, exactly as you do with a form's properties inside a form code module.  The following example demonstrates this concept:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' (This code must run inside a DHTMLPage code module.)
' Change the background color of the page.
Document.bgcolor = &quot;red&quot;
' Retrieve the state of the Alt key inside an event procedure.
If DHTMLEvent.altKey Then ...
</pre>
</td></tr>
</table></p>


<A NAME="954"><h3>The <I>id </I>property</h3></A>
<p>Not all the page elements can be associated with event procedures. In order to 
be programmable, a page element must have a nonempty 
<I>id </I>property. This <I>id</I> becomes the name by which you refer to that element in code. This requirement can 
mislead Visual Basic programmers because many HTML elements also support a 
<I>Name </I>property, which is usually meaningless in pure HTML programming. As I explained in 
the HTML tutorial at the beginning of this chapter, the 
<I>Name </I>property is mostly used for grouping mutually exclusive Option controls. In DHTML applications, you need 
different <I>id </I>values even for the items in a group of Option controls if you want to 
refer to them individually.
</p>

<p>Under standard DHTML, the <I>id </I>properties of multiple controls don't need to 
be different. Within a DHTML application written in Visual Basic, however, all the 
<I>id</I>'s in a page must be unique. When you import an existing .hml file into the 
designer, Visual Basic checks all the <I>id </I>values, and if necessary, it automatically appends 
a number to them to ensure that their values are unique in the page. So always 
double-check the <I>id </I>assigned to an element when you import an HTM page.
</p>

<p>Not all the elements in the page need to have an 
<I>id </I>property. In fact, in most cases they don't: Only the elements that you want to write code for have to be 
assigned an <I>id</I>. The treeview in the leftmost pane shows such programmable 
elements in boldface. The designer automatically creates an 
<I>id </I>for all the elements and controls that you drop from the Toolbox. To assign an 
<I>id </I>to an element, you select it in the treeview, switch to the Properties window, and then type a unique value for 
the <I>id </I>property. You can also select a page element in the combo box controls at the 
top of the Properties window. (Use this method to change the properties of 
the DHTMLPage object itself.)  Moreover, you can always access the properties and methods of a page element through the All property and other collections of the Document object.
</p>

<A NAME="955"><h3>The first example: A dynamic menu</h3></A>

<p>To show you how you can leverage what you learned about DHTML 
programming, let's build a practical example: a dynamic menu consisting of items that appear 
and disappear when you click on the menu header and that are rendered as bold 
text when the mouse passes over them.
</p>

<p>To begin with, create a new DHTML page, save it in an HTM file, and then 
add a few paragraphs as shown in Figure 19-10. Set these paragraphs' 
<I>id </I>properties to <I>MainMenu</I>, 
<I>MenuItem1</I>, <I>MenuItem2</I>, and <I>MenuItem3 
</I>respectively. You can change the color of each paragraph by changing its font size from the toolbar, and then 
editing the properties of the &lt;FONT&gt; item that the designer creates for you.
</p>

<p>
<A HREF="javascript:fullSize('F19ph10x.htm')"> <img src="F19ph10.JPG" width=404 height=309 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-10.</B> <I>The first DHTML application: a dynamic menu.</I><!--/caption-->
</p>


<p>Now you can finally write code for managing these items. You write code 
behind a page element the same way you write code for a control on a regular form: 
You double-click on the element (in the treeview pane) to access the code window, 
and then select the event procedure in the rightmost combo box. You can also access 
the code window by pressing the F7 function key or by selecting the View Code 
command from the menu that appears when you right-click on the designer window. 
This is the code you should enter in the code module. (Or you can load the sample 
application from the companion CD.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DHTMLPage_Load()
    ' Make the submenu choices invisible when the page loads.
    SetVisibility False
End Sub

' Change the display attribute of all the menu items.
Private Sub SetVisibility(newValue As Boolean)
    MenuItem1.Style.display = IIf(newValue, &quot;&quot;, &quot;none&quot;)
    MenuItem2.Style.display = IIf(newValue, &quot;&quot;, &quot;none&quot;)
    MenuItem3.Style.display = IIf(newValue, &quot;&quot;, &quot;none&quot;)
End Sub 

' When the MainMenu paragraph is clicked, 
' switch menu items from hidden to visible and back.
Private Function MainMenu_onclick() As Boolean
    If MenuItem1.Style.visibility = &quot;hidden&quot; Then
        SetVisibility True
    Else
        SetVisibility False
    End If
End Function

' Change the boldface attribute of the element under the mouse, but only
' if this element is one of the three MenuItem paragraphs.
Private Sub Document_onmouseover()
    Select Case DHTMLEvent.srcElement.innerText
        Case &quot;Click here&quot;, &quot;Acknowledgments&quot;, &quot;Table of contents&quot;, _
            &quot;Appendix&quot;
            DHTMLEvent.srcElement.Style.fontWeight = &quot;800&quot;
    End Select
End Sub

' Restore the original font attribute when the mouse leaves the element.
Private Sub Document_onmouseout()
    Select Case DHTMLEvent.srcElement.innerText
        Case &quot;Click here&quot;, &quot;Acknowledgments&quot;, &quot;Table of contents&quot;, _
            &quot;Appendix&quot;
            DHTMLEvent.srcElement.Style.fontWeight = &quot;&quot;
    End Select
End Sub
</pre>
</td></tr>
</table></p>


<p>In its simplicity, the preceding code is a good example of how you can 
put DHTML features to good use. Because all the menu items behave in a similar 
way, it doesn't make any sense to repeat the same code inside their 
<I>onmouseover </I>and <I>onmouseout </I>event procedures. In fact, it's much better to exploit the event 
bubbling features of Dynamic HTML and trap those events at the Document level. This 
is something that you couldn't do if this were a regular Visual Basic form.
</p>

<p>This approach has its drawbacks, however, because you need to be sure that 
the <I>onmouseover </I>and <I>onmouseout </I>events were raised by one of the four &lt;P&gt; 
elements you're interested in, and not by something else on the page. The Event object 
exposes a <I>srcElement </I>property that returns a reference to the object that first originated the 
event. The problem is this: How can you determine whether this object is one of the four 
&lt;P&gt; items that make up the menu? At first I believed that I could compare the 
<I>id </I>properties of those four items<I> </I>with the value returned by 
the <I>DHTMLEvent.srcElement.id</I> property, but&#8212;to my surprise&#8212;I discovered that the latter property always 
returns an empty string and so can't be used for this purpose. Fortunately, you can solve 
the problem with the <I>innerText </I>property. If multiple elements on the page have the 
same value for the <I>innerText </I>property, you should assign them a unique 
<I>Name </I>and use this property to find out which element is raising the event.
</p>

<A NAME="956"><h3>Using DIV and SPAN tags</h3></A>

<p>In most cases, you don't need to resort to the unusual technique based on 
<I>id</I>, <I>innerText,</I> or some other property to figure out whether you're interested in the 
event because under Dynamic HTML you can precisely delimit the range of event 
bubbling by creating an area of the document that exactly contains only the items you're 
interested in. If you don't have a container that holds all the elements you want 
receive events from (and only them), you can group the elements you're interested in 
using a &lt;DIV&gt; and &lt;/DIV&gt; pair of tags.
</p>

<p>For the dynamic menu example, you need to create a DIV section that 
comprises the four menu items. This is really simple: In the pane on the right side of 
the DHTMLPage designer, select the four paragraphs and then click on the third 
button from the left in the lower line of buttons in the designer's toolbar. This action 
creates a DIV section, but you need to assign it a nonempty 
<I>id </I>property to make it programmable. So type 
<I>DynMenu </I>in the Properties window, and then go to the 
code window to enter this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DynMenu_onmouseover()
    DHTMLEvent.srcElement.Style.fontWeight = &quot;800&quot;
End Sub

Private Sub DynMenu_onmouseout()
    DHTMLEvent.srcElement.Style.fontWeight = &quot;&quot;
End Sub
</pre>
</td></tr>
</table></p>


<p>As you see, you don't need to test the <I>srcElement.innerText 
</I>property because you're sure that the event comes from one of those four &lt;P&gt; items.
</p>

<p>As an exercise, let's see how you use the &lt;SPAN&gt; tag, which is often useful 
for referencing smaller portions of the HTML page. Let's suppose that you want to 
change the text of the <I>MainMenu </I>element to 
<I>Click here to close the menu</I> when the menu 
is open, and you want to restore it to <I>Click 
here</I> when the menu is closed. One way to obtain this behavior is to extend the text of the 
<I>MainMenu </I>element to <I>Click here to close the 
menu</I>, select the last four words, and click the fourth button on the 
designer toolbar to turn this small portion of text into a &lt;SPAN&gt; section. To refer to this 
section from within code, you need to assign this &lt;SPAN&gt; object an 
<I>id </I>(<I>CloseMenu</I>, for example) and then update the code as follows. (Added statements are in boldface.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function MainMenu_onclick() As Boolean
    If MenuItem1.Style.visibility = &quot;hidden&quot; Then
        SetVisibility True
<B>        MenuClose.Style.visibility = &quot;visible&quot;</B>
    Else
        SetVisibility False
<B>        MenuClose.Style.visibility = &quot;hidden&quot;</B>
    End If
End Function
</pre>
</td></tr>
</table></p>


<p>As you see, Dynamic HTML lets you achieve eye-catching results with a small 
amount of code.
</p>

<A NAME="957"><h3>DHTML event procedures</h3></A>

<p>If you look carefully at the code in the sample application, you'll notice that 
many (but not all) event routines are functions, rather than procedures. As I explained 
in the &quot;<A HREF="#929">Canceling the Default Effect</A>&quot; section earlier in this chapter, all DHTML 
events expect a return value that, if False, cancels the default action for the event. In 
order to return a value, the event procedure must be declared as a function.
</p>

<p>The way you return a value from an event inside a DHTMLPage designer 
is different from the technique used within script routines inside the HTM file. 
In VBScript, you must explicitly set the return value of a procedure to False to 
cancel the default action of a given event, or you must set the 
<I>event.returnValue </I>property to False to reach the same result. In Visual Basic, however, False is the default 
value for any Function, and DHTML event procedures are no exception to this rule. In 
other words, if you write an event procedure you must explicitly set its return value to 
True if you don't want to cancel the default action.
</p>

<p>To explain this concept with an example, let's say that you have a 
hyperlink and you want to ask for a confirmation before letting the user navigate to the 
specified URL. This is the code you have to write in the Hyperlink object's 
<I>onclick </I>event procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function Hyperlink1_onclick() As Boolean
    If MsgBox(&quot;Do you really want to jump there?&quot;, vbYesNo) = vbYes Then
        Hyperlink1_onclick = True
    End If
End Function
</pre>
</td></tr>
</table></p>


<p><div class="note"><blockquote>
<b>NOTE</b><hr>Setting the <I>DHTMLEvent.returnValue </I>property to True doesn't work.
</blockquote></div>
</p>

<A NAME="958"><h3>The MSHTML library</h3></A>

<p>All DHTML applications include a reference to the MSHTML type library, which 
contains all the objects that make up the Dynamic HTML object model. You'll 
probably need some time to get acquainted with this huge library&#8212;the version that comes 
with Internet Explorer 5 includes about 280 classes and interfaces! Its elements also 
have names that are different from what you might expect. For example, the Window 
object corresponds to the HTMLWindow2 class, the Document object derives from 
the HTMLDocument class, the Event object is of class CeventObj, and so on. I don't 
have enough room to describe all the classes and their properties, methods, and 
events here, so I can only suggest that you to spend some time with the Object Browser 
to see the most relevant features of each object.
</p>

<A NAME="959"><h2>DHTML Applications</h2></A>

<p>When programming Visual Basic 6's DHTML applications, you have to solve a 
new class of problems. In this section, I illustrates a few of them.
</p>

<A NAME="960"><h3>Navigating to other pages</h3></A>

<p>You can let the user navigate to other pages by simply placing one or more 
hyperlinks on the page and carefully preventing any of the hyperlinks from returning False 
in their <I>onclick </I>event procedures. If you're building the target URL in a dynamic 
way, however, you can't assign it to the &lt;HREF&gt; tag of a hyperlink at design time, and 
you need to follow one of the following methods:
</p>

<UL>

<p><li> You can use the Navigate method of the Window object you can get 
a reference to the latter object using the 
<I>BaseWindow</I> property of the DHTMLPage global object. This is the code that you need to execute:
</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Note: This is an absolute URL.
BaseWindow.Navigate &quot;http://www.vb2themax.com&quot;
</pre>
</td></tr>
</table>
</p>

<p><li> If you're inside the <I>onclick </I>event procedure of a Hyperlink object, you 
can change this object's <I>href</I> property and then confirm that you want to 
follow the hyperlink by assigning True to the event procedure's return value:
</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Function Hyperlink1_onclick() As Boolean
    ' This code assumes that the global InternetIsUnavailable variable has 
    ' been set to True if you're connected to the Internet and False if you're
    ' navigating on your private intranet.

    If InternetIsUnavailable Then

        Hyperlink1.href = &quot;localpage.htm&quot;

    End If

    ' In all cases, you need to return True to enable the jump.

    Hyperlink1_onclick = True

End Function
</pre>
</td></tr>
</table>
</p>

<p><li> Finally, when you can, navigate to another page in your DHTML 
application using this syntax:
</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>BaseWindow.Navigate &quot;DHTMLPage2.htm&quot;
</pre>
</td></tr> 
</table>
</p>

<p>where the argument is the name of the HTM file to which you saved the 
target DHTML page. (The previous code assumes that all HTM files that make up 
the application have been deployed in the same directory on the Web server.)
</p>
</ul>
<p>Whatever method you choose, you should pay attention to how you use 
relative and absolute paths. In general, all the references to other pages in your 
application&#8212;whether or not they're associated with a DHTMLPage designer&#8212;should be 
relative so that you can easily deploy all the pages of your application to a new Web site 
without having to recompile the source code. Conversely, all the references to pages 
outside your Web site should be absolute and be preceded by the 
<I>http:// </I>prefix.
</p>

<A NAME="961"><h3>Loading a page asynchronously </h3></A>

<p>The first time a DHTMLPage is referenced in code, it fires an 
<I>Initialize </I>event. You should use this element exclusively to initialize local variables. Because all the 
page elements haven't been created yet, an error occurs if you reference them.
</p>

<p>By default, a DHTLMPage object becomes active when the page has been 
completely downloaded from the Web server. At this point, this object fires the 
<I>Load </I>event. Because all the elements now exist, you can reference them without any 
problem. The problem with this simple approach, however, is that the download phase 
of complex pages with several objects in them&#8212;large images, for example&#8212;can 
take a long time to complete. Until the page has been completely downloaded, users 
are locked out because the controls on the page won't react to their actions.
</p>

<p>You can activate asynchronous download by setting the DHTMLPage 
object's <I>AsyncLoad </I>property to True. In this situation, the 
<I>Load </I>event fires when the download phase begins and not all the elements on the page have been downloaded 
yet. This means that you might reference a page element before it's available, which 
would result in an error. Here are a few techniques that you can use when you turn on 
the asynchronous loading feature:
</p>

<UL>

<p><li> In general, you shouldn't reference any object from within an event 
procedure, except the object that fired the event. You can't even reference 
other objects that appear earlier in the page than the one that's raising the 
event in the HTML page because the browser can load elements in 
random order.
 </li></p>
<p><li> If the logic of your application forces you to reference other objects, 
always add an <I>On Error </I>statement to protect your code from unanticipated errors.
</li></p>
<p><li> Don't access any object (except the one that's raising the event) until 
the Document's <I>readyState </I>property returns the value 
<I>complete</I>. You can poll this property before accessing any object, or you can wait for 
the Document's <I>onreadystatechange </I>event and check the property there.
</li></p>
</ul>
<p>Most of the time, you'll have to mix all three techniques. For example, 
when the page is loaded asynchronously, don't execute critical code in 
the <I>DHTMLPage_Load </I>event but move it to the 
<I>Document_onreadystatechange </I>event instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Document_onreadystatechange()
    If Document.readyState = &quot;complete&quot; Then
        ' Here you can safely access all the elements in the page.
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>If you can't wait for the <I>onreadystatechange 
</I>event, you must protect your code from unanticipated errors that would occur when a user tries to access a 
nonexistent object, or you can use the following routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A reusable function that checks whether an element is available
Function IsAvailable(ByVal id As String) As Boolean
    On Error Resume Next
    id = Document.All(id).id
    IsAvailable = (Err = 0)
End Function
</pre>
</td></tr>
</table></p>


<p>For example, a click on the MainMenu element should be ignored until the 
menu items are ready:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function MainMenu_onclick() As Boolean
    If Not IsAvailable(&quot;MenuItem1&quot;) Then Exit Function
    ' Don't execute this code if the menu items aren't available yet.
    ...
End Function
</pre>
</td></tr>
</table></p>


<A NAME="962"><h3>Managing the state</h3></A>

<p>DHTML applications are different from regular Visual Basic applications for an 
important reason: Because the user is free to navigate from one page to another 
page&#8212;including pages for which you don't provide a hyperlink&#8212;you can't be certain 
about the order in which pages will be visited. This situation contrasts with the usual 
Visual Basic programming model, which let's you decide which forms can be 
visited at a given moment.
</p>

<p>Another key difference between DHTML and Visual Basic applications is 
that Internet applications are <I>stateless</I>, in the sense that the HTTP protocol doesn't 
store any information between requests; it's up to you to maintain the state, if 
necessary. You can do this using the <I>PutProperty 
</I>and <I>GetProperty </I>routines that you find in 
the modDHTML.Bas module included in the DHTML Application template project. 
This is the source code of the two routines, after stripping out some comment lines:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PutProperty(objDocument As HTMLDocument, strName As String, _
    vntValue As Variant, Optional Expires As Date)
    objDocument.cookie = strName &amp; &quot;=&quot; &amp; CStr(vntValue) &amp; _
        IIf(CLng(Expires) = 0, &quot;&quot;, &quot;; expires=&quot; &amp; _
        Format(CStr(Expires), &quot;ddd, dd-mmm-yy hh:mm:ss&quot;) &amp; &quot; GMT&quot;) 
End Sub

Function GetProperty(objDocument As HTMLDocument, strName As String) _
    As Variant
    Dim aryCookies() As String
    Dim strCookie As Variant
    On Local Error GoTo NextCookie

    ' Split the document cookie object into an array of cookies.
    aryCookies = Split(objDocument.cookie, &quot;;&quot;)
    For Each strCookie In aryCookies
        If Trim(VBA.Left(strCookie, InStr(strCookie, &quot;=&quot;) - 1)) = _
            Trim(strName) Then
            GetProperty = Trim(Mid(strCookie, InStr(strCookie, &quot;=&quot;) + 1))
            Exit Function
        End If
NextCookie:
        Err = 0
    Next strCookie
End Function
</pre>
</td></tr>
</table></p>


<p>As you see, both routines are nothing more than an interface to the 
Document object's <I>cookie </I>property, so you can directly access this property from your code 
for some special tasks (for example, to enumerate all the defined cookies). To save a 
value in a persistent way, call the <I>PutProperty 
</I>routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Store the name of the user in the &quot;UserName&quot; cookie.
PutProperty Document, &quot;UserName&quot;, txtUserName.Value
</pre>
</td></tr>
</table></p>


<p>You can also set an expiration date for the cookie, for example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The user password is valid for one week.
PutProperty Document, &quot;UserPwd&quot;, txtPassword.Value, Now() + 7
</pre>
</td></tr>
</table></p>


<p>If you don't set an expiration date, the cookie is automatically deleted at 
the end of the session, when the browser is closed. You can retrieve a cookie using 
the <I>GetProperty </I>function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This returns an empty string if the cookie doesn't exist.
txtUserName.Value = GetProperty(Document, &quot;UserName&quot;)
</pre>
</td></tr>
</table></p>


<p>The sample application PropBag.vbp on the Visual Basic CD demonstrates 
how you can use these routines to pass data between two pages in your project.
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The PropBag.vbp demo project raises an error when you run it on 
a system on which Internet Explorer 5 is installed. The error is caused by 
slight differences in the browser object model. You can fix it by 
substituting <I>WindowBase.Document </I>with just 
<I>Document </I>in the code that calls the 
<I>PutProperty </I>and <I>GetProperty </I>routines. I'm testing this with a late beta of Internet Explorer 
5, so it's possible that the error will disappear in the official release.
</blockquote></div>
</p>

<p>You typically save a page's state in the <I>Unload 
</I>event. Don't wait until the <I>Terminate </I>event because when this event fires the page has been already destroyed, 
and you can't reference its elements any longer. This is similar to the situation you 
have in the <I>Initialize </I>event.
</p>

<p>One last note: The PropBag.vbp demo application might make you believe 
that you need a cookie any time you're passing data between two pages of your 
DHTML application, but it isn't strictly necessary. In fact, when you're directly calling 
another page of your application&#8212;using one of the methods outlined in the &quot;<A HREF="#960">Navigating to Other Pages</A>&quot; section, earlier in this chapter&#8212;you just need to store the value in 
a global variable of your ActiveX DLL project. You actually need to resort to a 
cookie (directly, or indirectly through the routines in the modDHTML.Bas module) only 
if you want to make some data available to another page that you aren't calling 
directly or if you want to preserve data among subsequent sessions. (In this latter case, 
you should specify a suitable value for the <I>Expires 
</I>argument of the <I>PutProperty </I>routine.)
</p>

<A NAME="963"><h3>Creating elements</h3></A>

<p>While you're programming in Visual Basic, you shouldn't forget that you can 
leverage all the power of Dynamic HTML. To give you an idea of what you can do 
with Visual Basic and DHTML together in the same application, I'll show you how 
you can use Visual Basic to query an ADO data source and then dynamically build a 
table of results right in the browser using the many HTML methods that modify the 
contents of a page already loaded in the browser. (See the &quot;<A HREF="#926">Text Properties and Methods</A>&quot; section, earlier in this chapter.)
</p>

<p>When you plan to fill a portion of the page at run time, for example, with 
the results of a database query, you need to place a &lt;DIV&gt; section in the proper 
place. This section should be associated with a nonempty 
<I>id </I>property so that you can reference it from code. Figure 19-11 shows a typical search page, with two TextBox 
controls in which the user enters search criteria, and a Search button that starts the search.
</p>
<p>
<A HREF="javascript:fullSize('F19ph11x.htm')"> <img src="F19ph11.JPG" width=404 height=281 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-11.</B> <I>A simple search page.</I><!--/caption-->
</p>

<p>The button is followed in the HTML source by an empty (and therefore 
invisible) &lt;DIV&gt; section whose <I>id </I>is 
<I>divResults</I>. When the user clicks on the button, the 
Visual Basic code executes the query and builds an ADO Recordset:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DB_PATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;

Private Function cmdSearch_onclick() As Boolean
    Dim rs As New ADODB.Recordset
    Dim conn As String, sql As String
    Dim AuthorSearch As String, TitleSearch As String
    Dim resText As String, recIsOK As Boolean, recCount As Long

    On Error GoTo Error_Handler

    ' Prepare the query string.
    AuthorSearch = txtAuthor.Value
    TitleSearch = txtTitle.Value
    sql = &quot;SELECT Author, Title, [Year Published] AS Year FROM Titles &quot; _
        &amp; &quot;INNER JOIN ([Title Author] INNER JOIN Authors &quot; _
        &amp; &quot;ON [Title Author].Au_ID = Authors.Au_ID) &quot; _
        &amp; &quot;ON Titles.ISBN = [Title Author].ISBN&quot;
    ' You can filter author names right in the SQL query string.
    If Len(AuthorSearch) Then
        sql = sql &amp; &quot; WHERE Author LIKE '&quot; &amp; AuthorSearch &amp; &quot;%'&quot;
    End If
    ' Open the Recordset.
    conn = &quot;Provider=Microsoft.Jet.OLEDB.3.51;Data Source=&quot; &amp; DB_PATH
    rs.Open sql, conn, adOpenStatic, adLockReadOnly
</pre>
</td></tr>
</table></p>


<p>At this point, you start to build a table, with a header row that displays the 
names of the fields:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    ' Prepare the header of the table.
    resText = &quot;&lt;TABLE BORDER&gt;&quot; _
        &amp; &quot;&lt;TR ALIGN=left&gt;&quot; _
        &amp; &quot;&lt;TH WIDTH=150&gt;Author&lt;/TH&gt;&quot; _
        &amp; &quot;&lt;TH WIDTH=300&gt;Title&lt;/TH&gt;&quot; _
        &amp; &quot;&lt;TH WIDTH=80&gt;Year&lt;/TH&gt;&quot; _
        &amp; &quot;&lt;/TR&gt;&quot; &amp; vbCrLf
</pre>
</td></tr>
</table></p>


<p>You can loop through the Recordset and filter out all the records that 
don't contain the specified string in the Title field (if the user actually entered some 
text in the <I>txtTitle </I>control). For each record that matches the criteria, this code adds a 
row to the table:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    Do Until rs.EOF
        recIsOK = True
        ' Filter out unwanted records.
        If Len(TitleSearch) Then
            If InStr(1, rs(&quot;Title&quot;), TitleSearch, vbTextCompare) = 0 Then 
                recIsOK = False
            End If
        End If
        ' If the record meets the search criteria, add it to the page.
        If recIsOK Then
            recCount = recCount + 1
            resText = resText &amp; &quot;&lt;TR&gt;&quot; _
                &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Author&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
                &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Title&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
                &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Year&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
                &amp; &quot;&lt;/TR&gt;&quot; &amp; vbCrLf
        End If
        rs.MoveNext
    Loop
    rs.Close
</pre>
</td></tr>
</table></p>


<p>When the Recordset has been completely processed, you need simply to 
append a &lt;/TABLE&gt; tag and prepare a simple message that informs about the 
number of records found. This is the remaining part of the routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    If recCount = 0 Then
        ' If no record matched the search criteria, drop the table.
        resText = &quot;&lt;I&gt;No record matches the search criteria&lt;/I&gt;&quot;
    Else
        ' Otherwise add the number of found records and complete the table.
        resText = &quot;Found &quot; &amp; recCount &amp; IIf(recCount = 1, _
            &quot; record&quot;, &quot; records&quot;) &amp; &quot;.&lt;P&gt;&quot; &amp; vbCrLf &amp; resText _
            &amp; &quot;&lt;/TABLE&gt;&quot; &amp; vbCrLf
    End If
    ' Substitute the current contents of the divResults section.
    divResults.innerHTML = resText
    Exit Function
    
Error_Handler:
    MsgBox &quot;Error #&quot; &amp; Err.Number &amp; vbCr &amp; Err.Description, vbCritical
End Function
</pre>
</td></tr>
</table></p>


<p>Figure 19-12 shows the program in action, after a query has been 
successfully completed. You can refine this first version in countless ways, for example, by 
adding a maximum number of returned records or by creating Next and Previous 
buttons to let the user navigate through pages of results. (Here's some advice: Prepare 
Next and Previous buttons on the page and make them visible when needed.)
</p>

<p>
<A HREF="javascript:fullSize('F19ph12x.htm')"> <img src="F19ph12.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-12.</B> <I>The result of a successful database search.</I><!--/caption-->
</p>
<P>
A problem that you must solve when dynamically adding new controls 
(as opposed to just plain text elements) is how to reference them in code and trap 
their events. As an example, I'll show you how you can add two controls at the right 
of each element in the result table: a CheckBox control that lets the user add that 
particular title to the order, and a Button control that lets him or her ask for 
additional details, such as the image of the cover, the table of contents, and so on.
</p>

<p>Dynamically creating the controls while the code is building the table isn't 
difficult, and in fact you only have to ensure that each new control is assigned a 
unique value for its <I>id </I>property. You must assign this 
<I>id</I> in order to later get a reference to the control. Here's the code that adds one table row for each record that meets 
the search criteria (added lines are in boldface):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>recCount = recCount + 1
<B>bookmarks(recCount) = rs.Bookmark</B>
resText = resText &amp; &quot;&lt;TR&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Author&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Title&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Year&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
<B>    &amp; &quot;&lt;TD&gt;&lt;INPUT TYPE=BUTTON ID=cmdDetails&quot; &amp; Trim$(recCount) _
    &amp; &quot; VALUE=&quot;&quot;Details&quot;&quot;&gt;&lt;/TD&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&lt;INPUT TYPE=Checkbox ID=Buy&quot; &amp; Trim$(recCount) _
    &amp; &quot; NAME=Buy?&gt;&lt;/TD&gt;&quot; _</B>
    &amp; &quot;&lt;/TR&gt;&quot; &amp; vbCrLf
</pre>
</td></tr>
</table></p>


<p>The <I>bookmarks </I>array holds the bookmarks for all the records that meet 
the search criteria; it's defined as a module-level variable, so it's accessible from 
any routine in the DHTMLPage module.</p>

<p>The next step is to trap the <I>onclick </I>event from the Detail buttons, which at 
first seems impossible because you've created the buttons dynamically and no code 
exists for them in the DHTMLPage designer. Fortunately, thanks to event bubbling 
you just need to trap the <I>onclick </I>event for the Document object and check whether 
the event comes from one of the controls you've added dynamically:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function Document_onclick() As Boolean
    Dim index As Long, text As String
    ' Not all the elements support the Name or ID property.
    On Error GoTo Error_Handler
    ' Check the ID of the element that fired the event.
    If InStr(DHTMLEvent.srcElement.id, &quot;cmdDetails&quot;) = 1 Then
        ' Retrieve the index of the button.
        index = CLng(Mid$(DHTMLEvent.srcElement.id, 11))
        ' Move the Recordset's pointer to that element.
        rs.Bookmark = bookmarks(index)
        ' Show the title of the selected book. (This is just a demo!)
        MsgBox &quot;You requested details for title &quot; &amp; rs(&quot;Title&quot;)
    Else
        ' Return True to enable the default action of Checkbox controls.
        Document_onclick = True
    End If
End Function
</pre>
</td></tr>
</table></p>


<p>Notice how you can test whether the <I>onclick 
</I>event was raised by one of the Detail buttons and how you extract the index of the control.
</p>

<p>Your next task is to prepare a list of all the titles that have been flagged 
for ordering, which you accomplish using the following piece of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim text As String
For index = 1 To UBound(bookmarks)
    If Document.All(&quot;Buy&quot; &amp; Trim$(index)).Checked Then
        rs.Bookmark = bookmarks(index)
        text = text &amp; rs(&quot;Title&quot;) &amp; vbCr
    End If
Next
If Len(text) Then
    text = &quot;Confirm the order for the following title(s)&quot; &amp; vbCr &amp; text
    If MsgBox(text, vbYesNo + vbExclamation) = vbYes Then
        ' In a real application, you would insert the code that processes
        ' the order right here.
        MsgBox &quot;Order filed!&quot;, vbInformation
    Else
        MsgBox &quot;Order canceled!&quot;, vbCritical
    End If
End If
</pre>
</td></tr>
</table></p>


<p>For more information, see the demonstration application provided on the 
companion CD. The project includes two distinct DHTMLPage modules: One does a 
simple search, and the other builds a more complex page with Button and CheckBox 
controls inside the grid. (See Figure 19-13.) Select the page to run in the Debugging 
tab of the Project Properties dialog box. I explain how to do this in the next section.
</p>

<p>
<A HREF="javascript:fullSize('F19ph13x.htm')"> <img src="F19ph13.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-13.</B> <I>A DHTML page that dynamically builds its own array of controls.</I><!--/caption-->
</p>

<A NAME="964"><h3>Testing DHTML applications</h3></A>
<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>The beauty of DHTML applications is that you can test your code inside the IDE, 
using all the tools that make debugging Visual Basic applications a relatively easy job. 
You're so used to such debugging features that you've probably missed a rather 
important point: You're executing your DHTML application inside the environment but 
Internet Explorer is behaving as if you compiled your code to an ActiveX DLL that runs 
inside the Explorer's address space. This little magic is made possible by the 
VB6Debug DLL, a file that you find in the main Visual Basic installation directory. Be careful 
not to delete it, or you won't be able to do such cross-process debugging any longer.
</p>

<p>When you test a DHTML application, you can take advantage of all the 
options you find in the Debugging tab of the Project Properties dialog box, shown 
in Figure 19-14. This tab is new to Visual Basic 6 and is disabled in Standard 
EXE projects because it's useful only when you're developing ActiveX components 
intended for consumption by client programs such as Internet Explorer. The 
options this tab offers (which I'll describe shortly) greatly simplify the testing of such 
components because they let you automatically start the client application that uses 
them. You can choose one of four different actions when the current project starts its 
execution inside the environment:
</p>

<p><B>Wait For Components to be Created</B> This is the default action: The Visual Basic 
IDE silently waits until the client application asks the COM subsystem to create the 
component.
</p>

<p><B>Start Component</B> You start one of the components defined in the current 
project and let it decide what to do. The default behavior for DHTMLPage designers is 
to load theHTM source file into Internet Explorer so that the component is 
automatically activated immediately afterward. If you select a UserControl or a 
UserDocument, Visual Basic creates a temporaryHTM page that contains a reference to it and 
then loads the page into the browser; this option lets you test how the control behaves 
in an HTML page. The component you select in this combo box control doesn't 
interfere with the selection you make in the Startup Object combo box in the General 
tab of the same dialog box. For example, you can select a DHTMLPage designer as a 
Start Component and still have the Sub Main procedure automatically execute when 
the component is instantiated.
</p>

<p><B>Start Program</B> This option lets you specify the path of the executable to launch 
when you run the project. Select this option when you know that the selected program 
will in turn create an instance of the component being developed. For example, you 
can create another application in Visual Basic that creates an instance of the 
component under development.
</p>

<p><B>Start Browser with URL</B> You can start the default browser and load an HTML 
page in it. This option enables you to test an ActiveX Control or DLL referenced in 
an existingHTM page. as opposed to the blank temporary page that Visual Basic 
automatically creates when you select the Start Component option.
</p>

<p>The page also contains a check box that you can tick if you want to use 
the existing instance of the browser (if one is already running), or clear if you want 
to start a new instance each time you run the project.
</p>

<p>To have Internet Explorer automatically create an instance of the ActiveX 
DLL that's being developed in the IDE, Visual Basic adds an &lt;OBJECT&gt; tag at the 
beginning of the HTM page that contains all the elements defined in the 
DHTMLPage designer:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT 
ID=&quot;DHTMLPage1&quot; CLASSID=&quot;clsid:8F0A368F-C5BC-11D2-BAC5-0080C8F21830&quot; 
WIDTH=0 HEIGHT=0&gt;&lt;/OBJECT&gt;
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F19ph14x.htm')"> <img src="F19ph14.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-14.</B> <I>The Debugging tab of the Project Properties dialog box.</I><!--/caption-->
</p>

<A NAME="965"><h3>Deploying a DHTML application</h3></A>

<p>Once you've thoroughly tested your DHTML application, you must prepare a 
distribution package for it. This package comprises the following elements:
</p>

<UL>
<p><li> The main DLL that contains all the compiled code of the application
</li></p>
<p><li> The Visual Basic 6 and OLE Automation runtime files
</li></p>
<p><li> The HTM files that make up the application&#8212;both those that host 
the ActiveX DLL and other regular HTML pages
</li></p>
<p><li> Other files referenced by the HTM files, such as images, data files, and so on
</li></p>
</ul>

<p>You create the distribution package using the Package and Deployment 
Wizard, which you can run as a Visual Basic add-in or as a stand-alone program. This is 
the sequence of actions you should perform:
</p>

<ol>
<p><li> In the topmost field in the Package and Deployment Wizard, select 
the DHTML project, and click on the Package button. The wizard asks 
whether you want to recompile the project if it finds that the DLL file is older 
than any of the source code files.
</li></p>
<p><li> In the Select Type page, select the Internet Package type and click Next.
</li></p>
<p><li> In the Package Folder page, enter the path of a directory in which 
you want the wizard to place the distribution package.
</li></p>
<p><li> In the Included Files page, you'll see a list of all the files that make 
up the application, including Visual Basic and OLE Automation libraries 
but excluding .hml files and data files needed by the application.
</li></p>
<p><li> In the File Source page (see Figure 19-15), specify the site from which 
each file should be downloaded. By default, all the Visual Basic, ADO, and 
other system files are downloaded from the Microsoft Web site, which is often 
the best choice.
</li></p>

<p>
<A HREF="javascript:fullSize('F19ph15x.htm')"> <img src="F19ph15.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-15.</B> <I>The File Source page of the Package and Deployment Wizard.</I><!--/caption-->
</p>

<p><li> In the Safety Setting tab, you decide whether the components 
included in the DLL are Safe For Scripting and Safe For Initialization. (For 
more information about these terms, see the section &quot;<A HREF="#880">Component Download</A>&quot; in Chapter 17.)
</li></p>
<p><li> In the last page of the wizard, you can assign a name to the current 
script so that you can easily repeat these steps in the future.
</li></p>
</ol>

<p>The wizard creates a new directory and puts in it a CAB file (which 
contains the DLL) and all the HTM files belonging to your application. You now need to 
deploy these files to a Web server, and you can use the Package and Deployment Wizard 
to achieve this:
</p>

<ol>
<p><li> Click on the Deploy button and select the script name you entered in 
step 7 of the previous sequence.
</li></p>
<p><li> In the Deployment Method page, select the Web Publishing 
option.
</li></p>
<p><li> In the Items To Deploy page, select which files should be deployed. 
The first time you run the wizard, you normally deploy all the files except 
those that are on the Microsoft Web site, but in subsequent deployment 
operations you can omit the files that haven't changed in the meantime.
</li></p>
<p><li> In the Additional Items To Deploy page, you can select files and 
entire folders for deployment. Here you select all the ancillary files, such 
as images, data files, WAV files, and so on.
</li></p>
<p><li> In the Web Publishing Site page (see Figure 19-16), you must enter 
the complete URL of the site to which items should be deployed (for 
example <I>http://www.yoursite.com</I>).You also enter the Web publishing protocol 
to be used (FTP or HTTP Post). Tick the Unpack And Install Server-Side 
Cab option if you want the CAB file be unpacked after deployment. When 
you press the Next button, the wizard asks whether you want to save 
information about this site in the Registry.
</li></p>

<p>
<A HREF="javascript:fullSize('F19ph16x.htm')"> <img src="F19ph16.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-16.</B> <I>The Web Publishing Site page of the Package and Deployment Wizard.</I><!--/caption-->
</p>

<p><li> In the last page of the wizard, you can give a name to this 
deployment script and click the Finish button to initiate the deployment phase.
</li></p>
</ol>

<p>When the deployment is complete, uninstall the ActiveX DLL from your 
system, and then use your browser to navigate to the main HTM page of the application. 
If everything is OK, the browser should download the CAB file, install the DLL, and 
start your compiled DHTML application. The browser knows from what site the DLL 
can be downloaded because the Package and Deployment wizard has patched the 
&lt;OBJECT&gt; tags inside all theHTM pages with a CODEBASE attribute. (The text added 
by the wizard is in boldface.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT <B>CODEBASE=Search.CAB#Version1,0,0,0 </B>
ID=&quot;DHTMLPage2&quot; CLASSID=&quot;clsid:8F0A368F-C5BC-11D2-BAC5-0080C8F21830&quot; 
WIDTH=0 HEIGHT=0&gt;&lt;/OBJECT&gt;


</pre>
</td></tr>
</table></p>
<P>As you can see in the preceding HTML fragment, the Package and Deployment Wizard produces an incorrect CODEBASE attribute; the version number should be preceded by an equal sign. So you need to manually edit it, like this:
</P>
<P><TABLE><TR><TD><PRE>&lt;OBJECT CODEBASE=Search.CAB#Version=1,0,0,0
</PRE></TD></TR></TABLE>
</P>

<A NAME="966"><h3>Troubleshooting</h3></A>

<p>I conclude this section with a few tips for building better DHTML applications:
</p>

<UL>

<p><li> Ensure that your DHTML page works correctly even if the user has 
disabled image downloading.
</li></p>
 
<p><li> Always use relative URLs when referencing another page in the same 
Web site so that you can then deploy your project to another location 
without breaking the code in it.
</li></p>
<p><li> Use separate style sheets for keeping the appearance of all your 
pages uniform.
</li></p>
<p><li> Don't forget that page elements inherit most, but not all, the 
attributes of their containers. For example, paragraphs inherit the font of the 
Document, but they don't inherit its background color.
</li></p>
<p><li> When working with an external HTML editor, ensure that all the 
programmable elements have been assigned unique values for the 
<I>id </I>property. If there are any duplicates, the DHTMLPage designer adds a digit to 
make them unique, but script code in the page that references that item 
won't work any longer.
</li></p>
</ul>


<a name="A122"></a><h3>9.1.5 Remote Data Services</h3>

<A href="#A121">[Previous]</A> <A href="#A123">[Next]</A><P>

<A NAME="967"><h1>Remote Data Services</h1></A>
<p>In a previous example, I showed you how a DHTML application can use ADO 
to perform a search on an MDB database and display the results as a table in an 
HTML page. When creating real-world Internet applications, however, you obviously 
can't use the approach used in that example because the database isn't local and you 
don't have a path to it.
</p>

<p>Another problem that you must solve when a client communicates with a 
Web browser is that HTTP is a <I>stateless </I>protocol, which means that no information is 
retained between consecutive requests from the browser. This sharply contrasts 
with the ADO way of doing things, which in general expects that the client is always 
in touch with the data source, from its logon and until the connection is closed. 
The ADO objects that get closer to the concept of a connectionless state are 
disconnected Recordsets, which update data through optimistic batch updates.
</p>

<p>How can you read data from and write data to a database located on a 
remote Web server? The answer to this question is provided by Remote Data Services 
(RDS). You can choose one of two ways to use such objects: You can use bound 
DHTML controls or "pure" ADO code.
</p>

<A NAME="968"><h2>DHTML Data Binding </h2></A>

<p>The simplest way to display data coming from a data source on an HTML page is 
to place an RDS.DataControl object on the page and bind one or more controls to 
it. This is conceptually similar to having bound controls on a regular Visual Basic 
form, but the actions you have to undertake are different.
</p>

<A NAME="969"><h3>Creating the RDS.DataControl object</h3></A>

<p>The first thing you have to do is add a RDS.DataControl to the HTML page. This 
object is an ActiveX component exposed by the RDS library, and you can place it on 
an HTML page with the following &lt;OBJECT&gt; tag in the body of the page:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT CLASSID=clsid:BD96C556-65A3-11D0-983A-00C04FC29E33 
   ID=dcPublishers HEIGHT=1 WIDTH=1&gt;
    &lt;PARAM NAME="Server" VALUE="http://www.yourserver.com"&gt;
    &lt;PARAM NAME="Connect" VALUE="DSN=Pubs"&gt;
    &lt;PARAM NAME="SQL" VALUE="SELECT * FROM Publishers"&gt;
&lt;/OBJECT&gt;
</pre>
</td></tr>
</table></p>


<p>You must set at least three properties of the RDS.DataControl object: The 
<I>Server </I>property is the URL of the server where the data source resides, the 
<I>Connect</I> property points to the data source on that server, and 
<I>SQL </I>is the text of the query. You can also create the RDS.DataControl dynamically, which is especially useful when 
you want to assign these properties at run time, when the page has been already 
loaded. You can dynamically create a RDS.DataControl object using plain VBScript 
code placed in the <I>Window_onload </I>event or outside any VBScript procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE="VBScript"
' This code executes when the page loads.
Dim dcPublishers
Set dcPublishers = CreateObject("RDS.DataControl")
dcPublishers.Server = "http://www.yourserver.com"
dcPublishers.Connect = "DSN=Pubs"
dcCustomer.SQL = "SELECT * From Publishers"
dcCustomer.Refresh
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>The <I>Server </I>property can point to an HTTP URL address or to an HTTPS 
URL address for a secure protocol (HTTPS is the Secure Hypertext Transfer Protocol). 
In both cases, the URL can include a port number. If you're retrieving data 
through DCOM, you can assign the name of the machine where the data source is. Finally, 
if you're working with a local database (typically, during earlier debug phases) you 
can assign an empty string to this property or omit it in the &lt;OBJECT&gt; tab. If you 
don't specify the server, the RDS.DataControl object is instantiated as an in-process 
object. All the demonstration applications on the companion CD use a local 
NWind.mdb, so this property is always left blank. Remember to assign it a meaningful value 
when you move the application to your local network or intranet.
</p>

<A NAME="970"><h3>Binding DHTML elements</h3></A>

<p>You can bind many different types of DHTML elements to a RDS.DataControl 
object, some of which are listed in Table 19-1. All bindable elements support 
three properties:
</p>

<UL>
<p><li> DATASRC<I> </I>is the name of the RDS.DataControl the element is bound 
to, preceded by a # sign, for example, 
<I>#dcPublishers</I>. (It corresponds to the <I>DataSource 
</I>property of a Visual Basic bound control.) 

  <P></P>
 
<p></p><li> DATAFLD is the name of the field in the data source this element 
binds to. (It corresponds to the <I>DataField </I>Visual Basic's property.) 
  <P></P>

<p></p><li> DATAFORMATAS<I> </I>can be <I>text </I>or 
<I>HTML</I>, depending on whether the contents of the source field must be interpreted as plain text or HTML 
code. The default for this property is <I>text</I>, and you can use 
<I>HTML </I>only for the controls that support the 
<I>innerHTML </I>property. 
  <P></P>
</li>
</UL>

<p>Here's an example of TextBox controls that are bound to the 
<I>dcPublishers </I>RDS.DataControl created previously:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Publisher Name: &lt;BR&gt;
&lt;INPUT ID="txtPubName" DATASRC="#dcPublishers" DATAFLD="Pub_Name"&gt;&lt;BR&gt;
City: &lt;BR&gt;
&lt;INPUT ID="txtCity" DATASRC="#dcPublishers" DATAFLD="City"&gt;&lt;BR&gt;
</pre>
</td></tr>
</table></p>
<p>
<B>Table 19-1.</B> <I>Some of the HTML elements that can be bound to 
an RDS.DataControl object.</I>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Element</i></th>
<th><i>Bound Property</i></th>
<th><i>Updatable</i></th>
</tr>

<tr>
<td valign="top">A</td>
<td valign="top"><I>href</I></td>
<td valign="top">No</td>
</tr>

<tr>
<td valign="top">BUTTON</td>
<td valign="top"><I>innerText/innerHTML</I></td>
<td valign="top">Yes</td>
</tr>

<tr>
<td valign="top">DIV</td>
<td valign="top"><I>innerText/innerHTML</I></td>
<td valign="top">Yes</td>
</tr>

<tr>
<td valign="top">IMG</td>
<td valign="top"><I>src</I></td>
<td valign="top">No</td>
</tr>

<tr>
<td valign="top">INPUT</td>
<td valign="top"><I>value </I>or <I>checked</I> (depending on the TYPE attribute)</td>
<td valign="top">Yes</td>
</tr>
     
<tr>
<td valign="top">SELECT</td>
<td valign="top">the text of the selected OPTION tag</td>
<td valign="top">Yes</td>
</tr>

<tr>
<td valign="top">SPAN</td>
<td valign="top"><I>innerText/innerHTML</I></td>
<td valign="top">Yes</td>
</tr>

<tr>
<td valign="top">TEXTAREA</td>
<td valign="top"><I>value</I></td>
<td valign="top">Yes</td>
</tr>
</table>
</p>


<A NAME="971"><h3>Navigating and updating the Recordset</h3></A>

<p>Unlike the standard ADO Data control, the RDS.DataControl object doesn't have 
a visible interface, so you must provide the buttons for navigating the Recordset. 
Such buttons use the methods of the Recordset exposed by the RDS.DataControl 
object. This VBScript code assumes that you've created the four 
<I>btnMove</I>xxxx buttons, plus the <I>btnDelete 
</I>and the <I>btnAddNew </I>controls:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub btnMoveFirst_onclick()
    dcPublishers.Recordset.MoveFirst
End Sub

Sub btnMovePrevious_onclick()
    dcPublishers.Recordset.MovePrevious
    If dcPublishers.Recordset.BOF Then dcPublishers.Recordset.MoveFirst
End Sub

Sub btnMoveNext_onclick()
    dcPublishers.Recordset.MoveNext
    If dcPublishers.Recordset.EOF Then dcPublishers.Recordset.MoveLast
End Sub

Sub btnMoveLast_onclick()
    dcPublishers.Recordset.MoveLast
End Sub

Sub btnDelete_onclick()
    dcPublishers.Recordset.Delete
    dcPublishers.Recordset.MoveNext
    If dcPublishers.Recordset.EOF Then dcPublishers.Recordset.MoveLast
End Sub

Sub btnAddNew_onclick()
    dcPublishers.Recordset.AddNew
End Sub
</pre>
</td></tr>
</table></p>


<p>The RDS.DataControl object works with disconnected Recordsets, so all 
the changes you make to it through bound controls are cached locally. When 
you're ready to send the changes to the data source, you execute the 
RDS.DataControl's <I>SubmitChanges </I>method. You typically invoke this method in the 
<I>Window_onunload </I>event or from the <I>onclick 
</I>event of a button:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub btnUpdate_onclick()
    dcPublishers.SubmitChanges
End Sub
</pre>
</td></tr>
</table></p>


<p>You can cancel all pending updates using the 
<I>CancelUpdate </I>method. On the companion CD, you'll find an application that uses bound HTML controls to 
connect to the Customers table of a local copy of NWind.mdb; you'll probably have to 
change the <I>Connect </I>property of the RDS.DataControl to have it point to a valid path on 
your system.
</p>

<p>All bound controls can raise two events, which you can trap from a script 
in the page or from Visual Basic code in a DHTML application. The 
<I>onbeforeupdate </I>event fires before a modified value is transferred from the control to the data source; if 
you don't cancel it, the control fires an <I>onafterupdate 
</I>event immediately after the update operation finishes executing. You can use these events to validate the data that 
the user has entered in bound controls, as you can see in Figure 19-17.
</p>

<p>
<A href="javascript:fullSize('F19ph17x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=303 src="F19ph17.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 19-17.</B> <I>This DHTML application uses bound controls and some VBScript code behind the navigational buttons.</I><!--/caption-->
</p>

<A NAME="972"><h3>Tabular binding</h3></A>

<p>If you prefer displaying the result of a query in tabular format, you can take 
advantage of the special binding features of the DHTML tables. In this case, you have 
to assign the DATASRC property in the &lt;TABLE&gt; tag and then prepare one single 
row of table cells containing &lt;SPAN&gt; tags with appropriate DATAFLD attributes. 
The following code is taken from the demonstration program (shown in Figure 
19-18) provided on the companion CD:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE DATASRC="#dcCustomers" BORDER=1&gt;
 &lt;THEAD&gt;&lt;TR&gt;   
   &lt;TH&gt;Company Name&lt;/TH&gt;
   &lt;TH&gt;Address&lt;/TH&gt;
   &lt;TH&gt;City&lt;/TH&gt;
   &lt;TH&gt;Region&lt;/TH&gt;
   &lt;TH&gt;Country&lt;/TH&gt;
  &lt;/TR&gt;&lt;/THEAD&gt;
 &lt;TBODY&gt;&lt;TR&gt;   
   &lt;TD&gt;&lt;B&gt;&lt;SPAN DATAFLD="CompanyName"&gt;&lt;/SPAN&gt;&lt;B&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;SPAN DATAFLD="Address"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;SPAN DATAFLD="City"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;SPAN DATAFLD="Region"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;SPAN DATAFLD="Country"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
  &lt;/TR&gt; &lt;/TBODY&gt;
&lt;/TABLE&gt;
</pre>
</td></tr>
</table></p>


<p>For each record in the source, the RDS.DataControl object generates a new 
row of cells. For such dynamically generated rows, RDS.DataControl uses the HTML 
template included between the &lt;TBODY&gt; and &lt;/TBODY&gt; tags. You can format and 
align individual columns by using standard HTML tags. For example, the sample 
application displays the CompanyName field in boldface.
</p>

<p>
<A href="javascript:fullSize('F19ph18x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=303 src="F19ph18.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 19-18.</B> <I>Bound DHTML tables automatically resize their columns to display the contents of their cell in the most appropriate way.</I><!--/caption-->
</p>

<A NAME="973"><h3>More on the RDS.DataControl object</h3></A>
<p>The RDS.DataControl object exposes several other properties and methods that 
can be used for fine-tuning your application. For example, the 
<I>InternetTimeout </I>property gives you the timeout in milliseconds for HTTP transmissions, while the 
<I>SortColumn</I> and the <I>SortDirection </I>properties let you sort data in the underlying Recordset:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Sort on the City field in ascending order.
dcPublishers.SortDirection = True
dcPublishers.SortColumn = "City"
dcPublishers.Reset
</pre>
</td></tr>
</table></p>


<p>The <I>FilterColumn</I>, <I>FilterCriterion</I>, and 
<I>FilterValue </I>properties work together to apply a filter on the retrieved data:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display only U.S. publishers.
dcPublishers.FilterColumn = "Country"
' FilterCriterion supports the following operators: &lt;  &lt;=  &gt;  &gt;=  =  &lt;&gt;.
dcPublishers.FilterCriterion = "="
dcPublishers.FilterValue = "USA"
dcPublishers.Reset
</pre>
</td></tr>
</table></p>


<p>By default, the RDS.DataControl executes the query and fetches the 
Recordset asynchronously. You can control how queries are executed using the 
<I>ExecuteOptions </I>property, which can be 1-adcExecSync or 2-adcExecAsync. Similarly, you can 
determine how the Recordset is fetched using the 
<I>FetchOptions </I>property, which can take one of the following values: 1-adcFetchUpFront (synchronous execution, the 
control is returned to the application when the Recordset has been completely 
populated); 2-adcFetchBackground (the control is returned to the application when the first 
batch of records is returned, and the remaining data is retrieved asynchronously); 
or 3adcFetchAsync (the default mode, all the records are retrieved in the background).
</p>

<p>When the RDS.DataControl is working asynchronously, you must test 
the <I>ReadyState</I> property, which returns one of the following values: 
2-adcReadyStateLoaded (the Recordset is open but no data has been retrieved yet); 
3-adcReadyStateInteractive (the Recordset is being populated); 4-adcReadyStateComplete (the Recordset has 
completed retrieving data). When this property receives a new value, the 
RDS.DataControl fires an <I>onreadystatechange 
</I>event. You can cancel an asynchronous operation 
using the <I>Cancel </I>method.
</p>

<p>When an error occurs and no VBScript code is executing, the 
RDS.DataControl object raises an <I>onerror </I>event.
</p>

<A NAME="974"><h2>Using RDS Objects</h2></A>

<p>While binding is always great for creating a prototype, in most cases you must 
write code if you want to remain in control of the whole process. The RDS library 
comprises a few objects that make it possible for a disconnected client to exchange 
data using a stateless protocol. More precisely, when developing applications based 
on RDS you use objects from <I>three </I>different libraries. (See Figure 19-19.)
</p>

<UL>

<p><li> <I> RDS.DataSpace </I>is a 
  component that runs in the client application and represents a link to the 
  server on which the data actually resides. This object is exposed by the 
  Microsoft Remote Data Services library (Msadco.dll). 
  <P></P>
 
<p></p><li> <I>RDSServer.DataFactory</I> is 
  a component that runs on the server. It queries the data source and optionally 
  updates it with data coming from the client. This object is exposed by the 
  Microsoft Remote Data Services Server library (Msadcf.dll). You don't need to 
  install this library on client workstations. 
  <P></P>
<p></p><li> <I>RDS.DataControl</I> 
  (described in the previous section) is an ActiveX component that you can drop 
  on an HTML page. It allows you to bind one or more elements on the page to the 
  remote data source. This object is included in the Msadco.dll library and 
  encompasses the functionality in both RDS.DataSpace and RDSServer.DataFactory. 

  <P></P>
<p></p><li> <I>ADOR.Recordset</I> is 
  functionally similar to a regular ADO Recordset, but it takes fewer resources 
  and is therefore a better choice when the application runs inside the browser 
  and doesn't need the full power and versatility of ADO. This object is exposed 
  by the Microsoft ActiveX Data Object Recordset library (Msador15.dll). The 
  ADOR library also includes the Field and the Property objects, but not the 
  Connection and Command objects. This library is automatically installed with 
  Internet Explorer, so it never requires you to download and install it on the 
  client workstation. 
  <P></P>          
            
            
            
          
           
           
           
</li>
</UL>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Just to give you an idea about the relative weight of the ADOR 
library compared to the regular ADO library, compare these facts: The Msador15.dll 
file a mere 37 KB in size, whereas the full-fledged Msado15.dll file is 332 KB.
</blockquote></div>
<P></P>

<p>
<A href="javascript:fullSize('F19ph19x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=118 src="F19ph19.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 19-19.</B> <I>All the objects that partake of a typical RDS session.</I><!--/caption-->
</p>

<A NAME="975"><h3>Establishing a connection</h3></A>

<p>If you're accustomed to the ADO way of doing things, the approach you must 
follow with RDS to establish a connection might seem at first unnatural and 
unnecessarily complex. But it has its inner logic and also offers a lot of flexibility.
</p>

<p>Before trying the code that follows in the Visual Basic IDE, add a reference 
to the RDS and the ADOR libraries in the References dialog box. The next step is to 
create an instance of the RDS.DataSource object and use its 
<I>CreateObject </I>method to create an instance of the remote RDSServer.DataFactory object. You don't need to add 
a reference to the RDSServer library because you're going to assign the return 
value of the <I>CreateObject </I>method to a generic Object variable.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim ds As New RDS.DataSpace
Dim df As Object
Set df = ds.CreateObject("RDSServer.DataFactory", _
    "http://www.yourserver.com")
</pre>
</td></tr>
</table></p>


<p><div class="note"><blockquote><b>NOTE</b><hr>
All the examples in this section are written in Visual Basic code 
running inside a standard Visual Basic application or a DHTMLPage designer 
module. You can easily convert the code so that it runs as a script in an HTML 
page by dropping the <I>As </I>clause in all the 
<I>Dim </I>statements and using the <I>CreateObject 
</I>method instead of the <I>New </I>keyword.
</blockquote></div>
<P></P>

<p>The second argument of the RDS.DataSpace's 
<I>CreateObject</I> method can be an HTTP or HTTPS URL address, the name of another computer in the network, or 
an empty string if you're instantiating a DataFactory object on the same machine on 
which the program is running.
</p>

<p>After you've obtained a reference to a valid RDSServer.DataFactory object, 
you can use its <I>Query </I>method to actually retrieve the Recordset object that contains 
the result of the query:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rs As ADOR.Recordset
Set rs = df.Query("DSN=Pubs", "SELECT * FROM Publishers")
</pre>
</td></tr>
</table></p>


<p>The first argument of the <I>Query </I>method is the connection string that the 
DataFactory object will use to connect to the data source, so you can use all the arguments 
you would use for the <I>ConnectionString </I>property of an ADO.Connection object. 
Don't forget that this connection string will be used by a component that already runs 
on the server (so you don't need a lengthy timeout value), and ensure that you're 
referring to a DSN or other connection attributes that are valid for that particular server.
</p>

<A NAME="976"><h3>Displaying and updating data</h3></A>

<p>You can use the ADOR.Recordset object as you would use a regular ADO 
Recordset because the differences between the two objects are minimal. (See ADO 
documentation for more details.) You can navigate the Recordset and update its fields, but 
all your changes are cached locally. Because you don't have bound controls, you 
must provide the code that moves data to and from the Recordset and the fields in the 
page. It turns out that you can take advantage of the 
<I>dataFld </I>property even when the control isn't bound to a data source. In fact, you can assign the name of the field that 
you want to display in the control to this property and then move data back and 
forth using the following routines:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can reuse these routines in any DHTMLPage module.
Sub GetFieldData()
    ' Move data from the Recordset to the fields in the page.
    ' All the "pseudo-bound" controls have a nonempty DataFld property,
    ' so you just need to iterate on the "all" collection.
    Dim ctrl As Object
    On Error Resume Next
    For Each ctrl In Document.All
        If Len(ctrl.dataFld) = 0 Then
            ' Empty or unsupported DataFld property.
        Else
            ' Append an empty string to account for Null values.
            ctrl.Value = rs(ctrl.dataFld) &amp; ""   
        End If
    Next
End Sub

Sub PutFieldData()
    ' Move data from the fields in the page to the Recordset.
    Dim ctrl As Object
    On Error Resume Next
    For Each ctrl In Document.All
        If Len(ctrl.dataFld) = 0 Then
            ' Empty or unsupported DataFld property.
        ElseIf rs(ctrl.dataFld) &amp; "" &lt;&gt; ctrl.Value Then
            ' Don't update the Recordset if it isn't necessary.
            rs(ctrl.dataFld) = ctrl.Value
        End If
    Next
End Sub
</pre>
</td></tr>
</table></p>


<p>Thanks to these routines, it's easy to write the code associated with 
navigational buttons. For example, this is the code that executes when the user clicks 
on the Next button:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function btnMoveNext_onclick() As Boolean
    PutFieldData                   ' Save current values.
    rs.MoveNext                    ' Move to the next record.
    If rs.EOF Then rs.MoveLast     ' Go back if you moved too far.
    GetFieldData                   ' Display the current record.
End Function
</pre>
</td></tr>
</table></p>


<p>When you're ready to submit changes to the server, you must invoke 
the <I>SubmitChanges </I>method of the RDSServer.DataFactory object. This method 
expects the connection string and a reference to the Recordset that must be marshaled 
back to the data source:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Specify that you want to marshal only modified values.
rs.MarshalOptions = adMarshalModifiedOnly
' Send modified values to the server.
df.SubmitChanges conn, rs
</pre>
</td></tr>
</table></p>


<p>The <I>SubmitChanges </I>method fails if there were conflicts in just one single 
record. In this circumstance, the RDS library is far less sophisticated than the ADO 
library because in the ADO library you can manage conflicts on a record-by-record basis.
</p>

<A NAME="977"><h2>Custom Business Components</h2></A>

<p>Remote Data Services technology promises much more than a way to move 
a Recordset back and forth between the server and the client. In fact, the 
DataSource's <I>CreateObject </I>method can instantiate 
<I>any </I>ActiveX component that resides on the 
Web server. In a sense, you might consider RDS the extension of DCOM to the HTTP 
and HTTPS protocols. This new technique opens up a new world of opportunities for 
the brave programmer.
</p>

<p>From this perspective, the RDSServer.DataFactory object is just one of the 
many components that can be instantiated on the Web server and deserves special 
attention only because it's provided in the RDS package. But when you dive into 
the production of real world applications, you see that this component has one 
defect: Once the client has created a link to the server, it can query 
<I>any </I>database on that server, provided that it has a correct user name and password. In fact, using a 
trial-and-error approach, a client equipped this way can discover user names and 
passwords it doesn't have. This security scheme is inadequate for a Web server, which 
is exposed to attack from any browser in the world.
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
RDS allows a (limited) customization of the behavior of 
the RDSServer.DataFactory object through a default handler object 
named MSDFMAP.Handler or through a custom handler object that you provide. 
The default handler can be controlled by editing the msdfmap.ini configuration 
file in the Windows directory. Open this file with an editor to get an idea of 
what you can achieve with this object, and read the RDS documentation for 
additional details.
</blockquote></div>
<P></P>

<p>The solution to the security problem is to build a custom ActiveX 
component and install it on the Web server. Such a component can expose梩hrough its 
properties and methods梠nly the data that you want to make available to the 
outside. Additionally, because client workstations access the database through this 
custom component, you have all the benefits of a three-tier architecture:
</p>

<UL>
<p><li> The code in client applications is simplified because 
  the custom component can expose higher level methods that access and process 
  data. 
  <P></P>
<p></p><li> The clients never see the physical structure of the 
  database on the server, so you can change the implementation of the database 
  without worrying about any adverse impact on clients. 
  <P></P>
<p></p><li> The component can process data locally before 
  returning a result to a client, which often makes for a better overall 
  performance. 
  <P></P>            
         
</li>
</UL>

<A NAME="978"><h3>Writing a custom component</h3></A>

<p>A custom component intended to be instantiated via a RDS.DataSpace's 
<I>CreateObject </I>method isn't really different from a regular ActiveX component, so you can make 
use of all you've learned in <A href="#A100">Chapter 16</a>. The component should expose methods 
that enable the client to execute a query and send new and updated records back 
to the component.
</p>

<p>On the companion CD, you'll find a simple ActiveX DLL component 
named NWindFactory.Shipper. This component lets a Web client query the Shippers 
table in the NWind.mdb database installed on the server computer. The component 
exposes just three methods: <I>GetShippers </I>returns a disconnected ADOR.Recordset with all 
the records in the Shippers table, <I>UpdateShippers 
</I>updates the table with values from the ADOR.Recordset passed to it in its argument, and 
<I>GetEmptyShippers </I>returns an empty ADOR.Recordset that the client can use to insert information about new shippers. 
This is the complete source code of the component:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is the path of the NWind.mdb database on the server.
Const DBPATH = "C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb"
Dim conn As String

Private Sub Class_Initialize()
    ' Initialize the connection string.
    conn = "Provider=Microsoft.Jet.OLEDB.3.51;Data Source=" &amp; DBPATH
End Sub

' Return the Shippers table in a Recordset object.
Function GetShippers() As ADOR.Recordset
    Dim rs As New ADOR.Recordset
    ' Query the Shippers table.
    rs.CursorLocation = adUseClient
    rs.Open "SELECT * FROM Shippers", conn, adOpenStatic, _
        adLockBatchOptimistic
    ' Disconnect the Recordset.
    Set rs.ActiveConnection = Nothing
    Set GetShippers = rs
End Function

' Update the Shippers table with data contained in a Recordset.
Function UpdateShippers(rs As ADOR.Recordset) As Boolean
    On Error Resume Next
    rs.ActiveConnection = conn           ' Reconnect the Recordset.
    rs.UpdateBatch                       ' Perform the updates.
    Set rs.ActiveConnection = Nothing    ' Disconnect it once again.
    UpdateShippers = (Err = 0)           ' Return True if everything is OK.
End Function

' Return an empty Recordset.
Function GetEmptyShippers() As ADOR.Recordset
    Dim rs As New ADOR.Recordset
    ' Retrieve an empty Recordset from the Shippers table.
    rs.CursorLocation = adUseClient
    ' Notice the WHERE clause in the following SQL SELECT command.
    rs.Open "SELECT * FROM Shippers WHERE 0", conn, adOpenStatic, _
        adLockBatchOptimistic
    ' Disconnect the Recordset.
    Set rs.ActiveConnection = Nothing
    Set GetEmptyShippers = rs
End Function
</pre>
</td></tr>
</table></p>


<p>For better results, you should compile your custom ActiveX DLL 
components using the Unattended Execution option and the Apartment Threading model. 
Both these options are in the General tab of the Project Properties dialog box.
</p>

<A NAME="979"><h3>Registering the component</h3></A>

<p>To make the ActiveX custom component available for installation through RDS, 
you have to take one more step. Not all the components installed on the server can 
be instantiated from an Internet client because it would be very difficult to enforce 
decent security. Only the components that are listed under a given key in the server's 
Registry can be instantiated through RDS. More precisely, you must create the 
following key in the server's Registry:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W3SVC\Parameters\
    ADCLaunch\&lt;servername.classname&gt;
</pre>
</td></tr>
</table></p>


<p>Notice that this key has no value. Moreover, a component for RDS should 
be marked as Safe For Scripting and Safe For Initialization, which means adding 
two more keys to the Registry, as explained in the section "<A href="#880">Component Download</A>" 
in Chapter 17.
</p>

<p>When you're building the installation package of a component, the best 
way to go is to prepare a REG file that patches the Registry automatically. For 
example, the next code snippet is the REG file for the sample NWindFactory.Shippers 
component. The first entry marks the component as an object that can be instantiated 
through the RDS.DataSpace's <I>CreateObject </I>method, whereas the remaining two entries 
mark it with the Safe For Scripting and Safe For Initialization settings. When you create a REG file for your 
own component, you have to substitute the "NWindFactory.Shippers" string with the component's ProgID, and the string {03C410F7-C7FD-11D2-BAC5-0080C8F21830} with the component's CLSID.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>REGEDIT4
[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W3SVC\Parameters\
    ADCLaunch\NWindFactory.Shippers]
[HKEY_CLASSES_ROOT\CLSID\{03C410F7-C7FD-11D2-BAC5-0080C8F21830}\
    Implemented Categories\{7DD95801-9882-11CF-9FA9-00AA006C42C4}]
[HKEY_CLASSES_ROOT\CLSID\{03C410F7-C7FD-11D2-BAC5-0080C8F21830}\
    Implemented Categories\{7DD95802-9882-11CF-9FA9-00AA006C42C4}]
</pre>
</td></tr>
</table></p>


<p>You don't need to create a key for the RDSServer.DataFactory object 
because the Registry patching is part of the RDS installation package on the server.
</p>

<A NAME="980"><h3>Using the component</h3></A>

<p>Using a custom component via RDS is similar to using the 
RDSServer.DataFactory object. You just have to create an instance of your component through 
the RDS.DataSpace object's <I>CreateObject</I> and then use your component's methods 
to retrieve and update the Recordset. Because your clients never have to directly 
perform queries on the database, they simply need to reference the ADOR 
lightweight library instead of the full-fledged ADO library.
</p>

<p>Figure 19-20 shows the demonstration client application. Its three 
TextBox controls are dynamically bound to the Recordset retrieved from the component. 
This is a partial listing of the code in the main form of the application:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Modify this constant to point to your Web server, 
' or use an empty string to connect to a local component.
Const WEB_SERVER = "www.yourserver.com"

Dim ds As New RDS.DataSpace
Dim myObj As Object
Dim rs As ADOR.Recordset

Private Sub Form_Load()
    ' Create the remote component.
    Set myObj = ds.CreateObject("NWindFactory.Shippers", WEB_SERVER)
End Sub

Private Sub cmdGetShippers_Click()
    ' Ask the component to query the table and then return a Recordset.
    Set rs = myObj.GetShippers()
    ' Bind the controls to this Recordset.
    SetDataSource rs
End Sub

Private Sub cmdGetEmptyShippers_Click()
    ' Ask the component to create an empty Recordset.
    Set rs = myObj.GetEmptyShippers()
    ' Bind the controls to this Recordset.
    SetDataSource rs
End Sub

Private Sub cmdUpdateShippers_Click()
    ' This optimizes the update operation.
    rs.MarshalOptions = adMarshalModifiedOnly    
    ' Pass the updated Recordset to the component, and test the result.
    If myObj.UpdateShippers(rs) Then
        MsgBox "Update successful", vbExclamation
    Else
        MsgBox "Unable to update!", vbCritical
    End If
End Sub

Sub SetDataSource(obj As Object)
    ' Use the Recordset as a data source for the fields.
    Set txtShipperID.DataSource = obj
    Set txtCompanyName.DataSource = obj
    Set txtPhone.DataSource = obj
End Sub
</pre>
</td></tr>
</table></p>


<p>
<IMG border=0 height=278 src="F19ph20x.gif" width=404>
</p><p>
<!--caption--><B>Figure 19-20.</B> <I>A demonstration application using dynamically bound controls.</I><!--/caption-->
</p>

<p>You can optimize the update process using the Recordset's 
<I>MarshalOptions </I>property; if you set this property to 1-adMarshalModifiedOnly, only the records 
that have been modified, added, or deleted are transferred back to the server. If the 
update operation fails, you can figure out what happened by checking the 
<I>Status </I>property for each record in the Recordset. For all the records that weren't successfully 
updated, this property returns a value different from adRecUnmodified.
</p>
<p><div class="note"><blockquote><b>NOTE</b><hr>
Don't forget that offering a custom component for querying and manipulating a database on the Web server doesn't mean that you've solved all your security problems. For example, a client might connect through the standard RDSServer.DataFactory object, and if he or she happens to know a valid login name and password, your data is at stake. For this reason, you might decide to disable the remote instantiation of the RDSServer.DataFactory object by deleting the corresponding entry in the ADCLaunch key of the Registry.

</blockquote></div>
<P></P>


<a name="A123"></a><h3>9.1.6 The DHTML Edit Control</h3>

<A HREF="#A122">[Previous]</A> <A HREF="#A124">[Next]</A><P>

<A NAME="981"><h1>The DHTML Edit Control</h1></A>

<p>
<img src="new.jpg" width=102 height=87 border="0">
</p>

<p>Relatively few Visual Basic programmers are aware that Microsoft has made 
publicly available part of the technology on which the DHTMLPage designer is based, in 
the form of a DHTML Edit control. This control can be freely downloaded from 
the Microsoft Web site at <I>http://www.microsoft.com/workshop/author/dhtml/edit
/download.asp</I>. (The site also contains a version that works with earlier versions 
of Internet Explorer.) The control includes all the functionality found in the 
rightmost pane of the DHTMLPage designer and so makes it possible for you to add a 
Dynamic HTML editor to your application.
</p>

<A NAME="982"><h2>Installation</h2></A>

<p>Run the EXE file you've downloaded and select a target installation directory. At 
the end of the unpacking process, you'll find several files, including the complete 
documentation and a few interesting samples. You'll find also some include files, but 
they're of no interest to Visual Basic programmers. (The package includes also a version 
for the C++ language)
</p>

<p>Run the Visual Basic IDE, press the Ctrl+T key to bring up the list of 
installed ActiveX controls, and select the new DHTML Edit Control component. This 
operation adds two new icons to the Toolbox window. Each icon corresponds to a 
different flavor of the control: One is the complete version, the other is marked as 
Safe For Scripting and Safe For Initialization and doesn't permit a few operations, 
for example, saving files. In general, you'll use the former version in your Visual 
Basic applications and the latter one in HTML pages or in DHTML applications that 
run inside a browser.
</p>

<p>To get a feeling of what this control gives you, drop an instance of it on a 
form and run the program. You can type any text in the control's window as if the 
window were a standard TextBox. Unlike a standard TextBox control, however, you 
can format the selected text with bold, italic, and underline attributes (using the 
Ctrl+B, Ctrl+I and Ctrl+U key combinations, respectively). The control supports many 
other operations through shortcut keys:  You can insert a hyperlink by pressing the 
Ctrl+L key combination, increase and decrease paragraph indentation by using the 
Ctrl+T and Ctrl+Shift+T key combinations, and display the Find dialog box by using the 
Ctrl+F key combination. The control supports also multilevel undo and redo features, 
by means of the Ctrl+Z and Ctrl+Y key combinations, and some sophisticated 
drag-and-drop capabilities for moving elements on the page.
</p>

<A NAME="983"><h2>Properties and Methods</h2></A>

<p>The rest of the DHTML Edit control's functionality, however, can be reached 
only through its methods and properties. For example, you can create a new 
document, load an existingHTM file, or save the contents of the control to a file using 
the <I>NewDocument</I>, <I>LoadDocument</I>, and 
<I>SaveDocument </I>methods, respectively. (The 
latter two methods can also display a common dialog box for file selection.). Or you 
can load an HTM file from a URL using the <I>LoadURL 
</I>method, as here:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DHTMLEdit1.LoadURL = &quot;http://www.vb2themax.com/index.htm&quot;
</pre>
</td></tr>
</table></p>


<p>You can also load and save HTML source without using a file, by assigning 
a string to the <I>DocumentHTML </I>property. This property gives you an effective way 
to store and retrieve a formatted document stored in a database field or to build a 
sophisticated DHTML editor that lets you enter plain HTML source code, a feature 
that's missing even in the DHTMLPage designer. As an exercise, you might revise 
the DHTMLEd.vbp project on the companion CD to use the DHTML Edit control 
instead of the WebBrowser control. Just a warning: Using the 
<I>DocumentHTML </I>property raises an error if a document is being loaded, a condition that you can test using the 
<I>Busy </I>property.
</p>

<p>The DHTML Edit control can also work in preview mode, in which you see 
how the page you're building will appear inside a browser. You can switch to and 
from preview mode by setting the <I>BrowserMode 
</I>property to True or False, respectively.
</p>

<p>The DHTML Edit control supports formatting commands in an unusual 
way. Instead of exposing dozens of properties or methods, one for each available 
option, you issue commands through the all-in-one 
<I>ExecCommand </I>method, whose first argument is a constant that tells the method what to do. I counted over 50 
different commands, for changing text attributes, inserting or deleting table cells, 
performing cut-and-paste operations, changing the z-order or the alignment of an element, 
and so on. For example, see how you can change the font size of the current 
selected text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The second argument suppresses the default dialog box.
' The third argument is the new font's size.
DHTMLEdit1.ExecCommand DECMD_SETFONTSIZE, OLECMDEXECOPT_DONTPROMPTUSER, fs
</pre>
</td></tr>
</table></p>


<p>The <I>DOM </I>property of the DHTML Edit control returns a reference to the 
Document object of the page hosted in the control. Thanks to this property, you can 
do virtually anything to the document being edited. For example, you can change 
the background color of the HTML page with this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>DHTMLEdit1.DOM.bgColor = &quot;red&quot;
</pre>
</td></tr>
</table></p>


<p>The DHTML Edit control also exposes several events that let you react to 
actions of the user who's editing the document. The most important event is 
<I>DisplayChange</I>, which fires any time the user selects a new element or simply moves the 
insertion point. You typically react to this event by updating a status bar and the state of 
the buttons on a toolbar. The <I>DocumentComplete 
</I>event fires when the page has been completely loaded and is ready for editing. The 
<I>ShowContextMenu </I>and the <I>ContextMenuAction 
</I>events let you decide what appears when users right-click on 
the control and what happens when they select a menu command.
</p>

<p>I was surprised by how many sample programs are provided with this 
control. VBEdit.vbp is a complete WYSIWYG editor for Dynamic HTML pages, and its 
source code provides a great occasion for you to see how you can exploit the features 
of the DHTML Edit control. (See Figure 19-21.) The VBDom.vbp project shows you 
how to access the Document Object Model of the document hosted in the control. 
Finally, in the Web subdirectory you'll find many examples of HTML pages that host 
the DHTML Edit control.
</p>

<p>
<A HREF="javascript:fullSize('F19ph21x.htm')"> <img src="F19ph21.JPG" width=404 height=272 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-21.</B> <I>The VBEdit.vbp sample application.</I><!--/caption-->
</p>

<p>This chapter has been a long one, but we had a lot of ground to cover. You've 
seen what HTML and Dynamic HTML are, how you can exploit the power of the 
new HTMLPage designer, and how you can take advantage of RDS and remote 
Automation over the Internet. You're now ready for the final leap: You can build Visual 
Basic applications that run inside a Web server. This topic is covered in the <a href="#A124">next chapter</a>.
</p>

<a name="A124"></a><h2>9.2 Chapter 20 -- Internet Information Server Applications</h2>

<A HREF="#A123">[Previous]</A> <A HREF="#A125">[Next]</A><P>


<font size="+3">Chapter 20</font>

<A NAME="984"><h1>Internet Information Server Applications</h1></A>
<p>In <a href="#A117">Chapter 19</a>, you learned how to create client applications that connect to a Web server through the Internet or an intranet. It's now time to find out how you can leverage your Visual Basic expertise to build applications and components that run on the server, right inside Microsoft Internet Information Server (IIS) and its Active Server Pages (ASP). Before we delve into the nitty-gritty details of Web server programming, however, you need to have at least a general idea of what IIS is and how you can do ASP programming without using Visual Basic.</p>


<a name="A125"></a><h3>9.2.1 An Introduction to Internet Information Server 4</h3>

<A href="#A124">[Previous]</A> <A href="#A126">[Next]</A><P>

<A NAME="985"><H1>An Introduction to Internet Information Server 4</H1></A>
<p>There are several Web server programs on the market, from various vendors. Some of them are expensive; others are free. Internet Information Server 4 is Microsoft's offering in this area, and it belongs to the "free" group. In fact, it's part of the Windows NT 4 Option Pack, together with other all-important applications such as Component Services (formerly known as Transaction Server, or MTS), Microsoft Message Queue Server (MSMQ), and Microsoft Index Server. You can install the Windows NT 4 Option Pack from a Visual Studio CD or you can download it from Microsoft's Web site. All these products, in addition to other strategic software梥uch as Microsoft SQL Server, Microsoft Exchange Server, Microsoft Systems Management Server (SMS), Microsoft Cluster Server, and Microsoft SNA Server梞ake up the Microsoft BackOffice platform upon which you can create efficient, scalable, and robust enterprise solutions.</p>

<A NAME="986"><h2>Main Features</h2></A>
<p>Even if your primary job is programming a Web site rather than administering it, you still need to have at least a basic understanding of what IIS can do. To put it simply, when you run IIS, you're transforming your Windows NT machine into a Web server that is able to accept and process requests from clients on an intranet or the Internet.</p>

<p>IIS 4 fully supports the HTTP 1.1 protocol, but it can also accept requests through the older and less efficient HTTP 1.0 protocol. In addition, it supports other widely accepted Internet standards, such as File Transfer Protocol (FTP) for file downloading and Simple Mail Transport Protocol (SMPT) for sending e-mail messages from within a Web application.</p>

<p>IIS 4 is a departure from its previous versions in that it can run as an MTS component. This has a substantial impact on its performance and robustness. In fact, a script that runs inside an ASP page can instantiate an ActiveX DLL that runs as an MTS component and still consider the DLL as an in-process component. In comparison, a script running under IIS 3 had to cross its process boundaries to access components inside MTS, and you know how slow out-of-process components are. You need MTS components to build reliable component-based transactional applications. If you care for robustness more than performance, however, you can run a Web application in a separate process. That way, if the application breaks with an error or some other malfunctioning, the other applications aren't affected.</p>

<p>IIS 4 includes support for multiple Web sites, and it even supports different administrators, one for each Web site. Individual Web administrators have full control of the sites they're in charge of梩hey can grant permissions, assign content rating and expiration, activate log files, and so on. But they're prevented from modifying global settings that would affect other sites hosted inside IIS, such as the Web site name or the bandwidth assigned to each Web site.</p>

<p>In spite of its power, IIS can be administered using a simple and user-friendly interface based on the Microsoft Management Console. You can also configure IIS to accept administrative commands through a Web-based Internet Service Manager (which lets an administrator work remotely using a regular browser), and you can even write your own applications that manipulate IIS through the COM object model that it exposes. Thanks to the tight integration between IIS and Windows NT, administrators can also manage users and groups using the system tools they're already familiar with and can use standard debug utilities such as Event Viewer and Performance Monitor.</p>

<A NAME="987"><h2>The Microsoft Management Console</h2></A>
<p>As just mentioned, you can administer IIS梐s well as most other components of the BackOffice platform梩hrough the Microsoft Management Console (MMC), which is shown in Figure 20-1. This utility doesn't do anything in itself; it works only as a container for one or more <I>snap-in</I> applications. You can install and remove snap-in applications for other programs from the Add/Remove Snap-in command in the Console menu.</p>

<p>
<A href="javascript:fullSize('F20ph01x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=303 src="F20ph01.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-1.</B> <i>The Microsoft Management Console.</i><!--/caption-->
</p>

<A NAME="988"><h3>Computers and directories</h3></A>
<p>The MMC utility can manage multiple computers on your LAN. Under the name of each computer in the leftmost pane, you'll find all the Web and FTP sites hosted on that computer. You can create a new site by right-clicking on a computer node and selecting the Web Site command from the New menu. A wizard starts, asking you 
for the site's description, its IP address and port number, the path to a directory that will act as the home directory for the site, and the access permissions for the home directory. You can leave the "(All Unassigned)" default value for the IP address during the development phase, but you should assign a different port number to each Web site defined on a given machine. 

</P><P>When working with a Web site, you need to account for several types of directories. The <I>home directory</I> is a local directory (or a directory located on another computer in the LAN) that is the entry point for the Web site when it is accessed through the Internet. For example, on my machine, the URL <I>http://www.vb2themax.com</I> is mapped to the directory C:\inetpub\vb2themax. All the subdirectories of the home directory can be accessed as subdirectories in the URL. For example, <I>http://www.vb2themax.com/tips</I> is mapped to C:\inetpub\vb2themax\tips.</p>

<p>A <I>virtual directory</I> is a directory that doesn't physically belong to the directory tree that originates under the home directory but that will appear as if it did. For example, I might have the <I>www.vb2themax.com/buglist</I> URL subdirectory mapped to the D:\KnowledgeBase\VbBugs physical directory. You create a virtual directory by right-clicking on a Web site node and selecting the Virtual Directory command from the New menu. The physical and virtual directories are marked with different icons in the leftmost pane of the MMC.</p>

<A NAME="989"><h3>Web site, directory, and file properties</h3></A>
<p>You can modify the properties of a Web site by right-clicking on its node and selecting the Properties menu command (or by clicking the Properties button on the toolbar). The Properties dialog box has nine tabs:</p>

<UL>
<p><li>In the Web Site tab (shown in Figure 20-2), you can 
  modify the IP address and port number of the site, the number of allowed 
  connections, the connection timeout (the number of seconds after which the 
  server disconnects an inactive user), and logging settings.
  <P></P>

<p>
<A href="javascript:fullSize('F20ph02x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=397 src="F20ph02.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-2.</B> <i>The Web Site tab of the Properties dialog box of an IIS Web site.</i><!--/caption-->
</p>

<p></p><li>In the Operators tab, you select which Windows NT 
  users are granted operator privileges on this site梚n other words, who is the 
  administrator of this site. By default, Windows NT administrators are also the 
  Web site administrators, but this isn't a requirement.
  <P></P>

<p></p><li>The Performance tab lets you fine-tune the Web site performance by tailoring it to the number of expected hits per day. In this tab, you can also enable one of the most useful features of IIS for multiple site management, <I>bandwidth throttling,</I> which lets 
  you limit the bandwidth of one site so that it doesn't affect the performance 
  of another site hosted on the same machine.
  <P></P>

<p></p><li>In the ISAPI Filters tab, you select which ISAPI 
  filters this Web site uses. You often don't need to specify any filter here 
  because all Web sites inherit the filters defined for the computer (which you 
  can set using the Properties dialog box of the Computer node).
  <P></P>

<p></p><li>In the Home Directory tab (shown in Figure 20-3), you 
  establish the mapping between the URL path and a physical directory on the 
  local machine or on another machine on the LAN and the read/write permissions 
  on the directory. In the Application Settings frame, you decide whether this 
  directory is the starting point of a Web application.
  <P></P>
 
<p>
<A href="javascript:fullSize('F20ph03x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=397 src="F20ph03.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-3.</B> <i>The Home Directory tab of the Properties dialog box of an IIS Web site.</i><!--/caption-->
</p>

<p>A <I>Web application</I> is defined as the files and the subdirectories contained in a directory marked as an application starting point. Click the Configure button to specify which ISAPI application will process files with nonstandard extensions (such the Asp.dll for managing ASP files). A Web application can optionally run as an isolated process, which means that other IIS applications and the Web server itself won't be affected if this application fails. Finally, you can set the execute permissions for the files in this directory. The options are None, Script (only scripts are allowed to execute), or Execute (scripts, DLLs, and EXEs can execute in this directory).</p>

<p></p><li>The Documents tab lets you select one or more default 
  files for the Web site's home directory. The default document is the one sent 
  to client browsers when they access the directory without specifying a 
  particular file. This file is typically named index.html, default.htm, or 
  default.asp, but you can add other filenames and even set priorities for them.
  <P></P>

<p></p><li>The Directory Security tab contains push buttons that 
  let you open other dialog boxes. In the Authentication Methods secondary 
  dialog box, you decide whether clients can log in to this Web site using 
  anonymous access, a basic authentication method based on user names and 
  passwords (which are sent as plain text); or the Windows NT Challenge/Response 
  method, in which access is restricted using Windows NT File System's Access 
  Control Lists and information is exchanged in encrypted form.
  <P></P>
 
<p>In the IP Address And Domain Name Restriction secondary dialog box, you select which computers are granted or denied access to this Web site. When publishing a Web site, you obviously have to grant access to anyone. But you can enforce stricter access permissions for selected portions of the site. All the settings in this tab are inherited from the properties of the parent computer node.</p>

<p></p><li>The HTTP Headers tab lets you set an expiration date 
  or interval for the documents in the Web site. This setting is crucial because 
  it tells the client browser whether it can reuse the information in its local 
  cache, thereby reducing download times dramatically.
  <P></P>

<p></p><li>The Custom Errors tab lets you specify which page of 
  your server the client browser is redirected to when an HTTP error occurs. You 
  don't usually need to alter the settings in this tab, unless you want to 
  override the default action or localize the error message to a different 
  language.
  <P></P>                                                  </li>
</UL>
 
<p>You can modify the properties of a physical or a virtual directory by right-clicking on the corresponding node in either pane of the MMC and selecting the Properties menu command. The Properties dialog box contains a subset of the tabs that are found in the Web site's Properties dialog box. For this reason, I won't describe them again. The same thing happens with the Properties dialog box of individual document files.</p>

<p>Just to remind you, IIS lets you define the behavior and the attributes of each individual element in the computer/site/directory/file hierarchy. At the same time, it saves you a lot of time by automatically assigning to an object all the attributes of its parent. The tabs in the Properties dialog boxes for these elements are identical, and the user interface is logical and coherent.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
Make sure that the NTFS security settings for a file or a directory don't differ from the settings in the Properties dialog box of that object. If the two sets of security settings don't match, IIS will use the more limiting ones.
</blockquote></div>
<P></P>

<A NAME="990"><h3>Browsing the Web site</h3></A>
<p>To browse the pages hosted in a Web site, you must activate the site first, either by clicking on it and selecting the Start command from its context menu or by clicking on the Start Item button on the toolbar. You can also stop or pause a Web site using other menu commands or toolbar buttons.</p>

<p>To see how a page will appear in a client's browser, right-click on an HTM or an ASP document in the rightmost pane and select the Browse menu command. Browsing a page from within the MMC rather than directly from within Windows Explorer might deliver completely different results, because if the page contains server-side scripts they will be executed correctly. This approach permits you to test your ASP programs on the same machine you're developing them.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
If you're using Microsoft Internet Explorer 4.0 to browse pages hosted in a local IIS, you get an error if the browser is configured to connect to the Internet using a modem. If you get an error, bring up the Internet Options dialog box and make sure that the Connect To The Internet Using A Local Area Network option is selected.
</blockquote></div>
<P></P>

<p>The context menu that appears when you right-click a file also contains an Open command, which loads the file into the application that has registered itself as the default HTML editor. For example, if you have Microsoft InterDev installed, this command will load the HTM or the ASP file into InterDev for editing.</p>

<A NAME="991"><h2>Active Server Pages</h2></A>
<p>In a nutshell, an ASP page is a document that resides on the Web server and that contains a mixture of HTML code and server-side scripts. Such scripts process requests coming from client browsers and can build a response page for that particular client, for example, by querying a database through ADO. This capability is very important, because it lets you create "dynamic" HTML pages that can be downloaded by any browser that supports plain HTML. For this reason, ASP can play a key role in Internet applications, whereas DHTML should be used only in more controlled environments梥uch as a company intranet梚n which all clients can standardize on Internet Explorer.</p>

<p>Don't let the adjective "dynamic" confuse you. We're not talking about dynamic pages in the DHTML sense. The ASP technology doesn't deliver pages with animation and transition effects. Rather, with it you can create pages on the fly that are customized for each individual client. For example, you can have the server accept a request from a client, perform a query on a database, and then return the results of the query as a standard HTML table to that particular client.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
You can develop ASP applications using the Personal Web Server 4 that runs on Windows 95 and Windows 98. For serious Web development, however, you absolutely need the "real" IIS that runs on Windows NT or Windows 2000 Server family. All the examples in this book were developed on Windows NT Server.
</blockquote></div>
<P></P>

<A NAME="992"><h3>ASP basics</h3></A>
<p>An HTML page can contain two types of scripts: <I>server-side</I> scripts, which are executed on the server and contribute to creating the HTML document sent back to the browser, and <I>client-side</I> scripts, such as VBScript or JScript procedures executed within the client browser. The two types of scripts require different tags in an ASP page because the ASP filtering mechanism must execute server-side scripts without sending them to the browser but has to send client-side scripts to the browser without interpreting them.</p>

<p>You can insert a server-side script inside an ASP page in two ways. The first way is to use the &lt;SCRIPT&gt; tag with the RUNAT attribute, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE="VBScript" RUNAT="Server"&gt;
' Add server-side VBScript code here.
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>You can specify either VBScript or JScript in the LANGUAGE attribute. Unlike client-side scripts, however, the default script language for ASP is VBScript, so you can safely omit the language specification. The second way to insert server-side scripts is to use the <I>&lt;%</I> and <I>%&gt;</I> delimiters. For example, the following statement assigns the current server time to the <I>currTime</I> variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% currTime = Now() %&gt;
</pre></td></tr></table></p>

<p>I won't show ASP examples written in JScript, but for the sake of completeness, I'll show you how you can change the default script language for all server-side script fragments enclosed in the <I>&lt;%</I> and <I>%&gt;</I> delimiters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%@ LANGUAGE = JScript %&gt;
</pre></td></tr></table></p>

<p>Two types of statements can be enclosed between the script delimiters: those that execute a command and those that return a value. For statements that return a value, you must insert an equal sign (= character) immediately after the opening delimiter, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% = Now() %&gt;
</pre></td></tr></table></p>

<p>(Note that you can insert comments in statements that execute a command, but not in those that return a value.) The value returned by the VBScript expression is inserted in the HTML page exactly where the code snippet is. This means that you can (and often do) mix plain HTML text and server-side script code in the same line. For example, here is the source for a complete ASP document that displays the current date and time on the server:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Your first ASP document&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Welcome to the XYZ Web server&lt;/H1&gt;
Today is &lt;% = FormatDateTime(Now, 1) %&gt;. &lt;P&gt;
Current time on this server is &lt;% = FormatDateTime(Now, 3) %&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></td></tr></table></p>

<p>You can use the &lt;SCRIPT&gt; tag to enclose individual statements and entire routines:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT RUNAT="Server"&gt;
Function RunTheDice()
    RunTheDice = Int(Rnd * 6) + 1
End Function
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>The routine defined in the page can be called elsewhere in the script:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% Randomize Timer %&gt;
First die shown &lt;% = RunTheDice %&gt; &lt;P&gt;
Second die shown &lt;% = RunTheDice %&gt;
</pre></td></tr></table></p>

<p>You can also embed a VBScript statement within <I>&lt;%</I> and <I>%&gt;</I> delimiters, but without the = symbol. The following example is more complex than the previous ones in that it alternates plain HTML and server-side statements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% h = Hour(Now)
If h &lt;= 6 Or h &gt;= 22 Then %&gt;
Good Night
&lt;% ElseIf h &lt;= 12 Then %&gt;
Good Morning
&lt;% ElseIf h &lt;= 18 Then %&gt;
Good Afternoon
&lt;% Else %&gt;
Good Evening
&lt;% End If %&gt;
</pre></td></tr></table></p>

<A NAME="993"><h3>Server-side VBScript programming</h3></A>
<p>Server-side scripting isn't a lot different from client-side scripting, at least syntactically. The real difficulty in writing ASP code is in trying to anticipate what your script produces when IIS executes it.</p>

<p>The only relevant difference between regular VBScript code and server-side VBScript code is that a few statements are prohibited in the latter, most notably those statements that show a dialog box on the screen. This prohibition is understandable, though. After all, the script will be executed on an unattended server; no one will be there to click the OK button in a message box. So just stay clear of the <I>MsgBox</I> and <I>InputBox</I> statements when you're writing server-side VBScript code.</p>

<p>Server-side scripts support <I>include files</I>, that is, files that reside on the server and that are included as-is in the HTML page being generated. This is the syntax for inserting an include file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!-- #include file="Routines.inc " --&gt;
</pre></td></tr></table></p>

<p>The filename can be either a physical path (such as C:\Vbs\Routines.inc) and in this case can be absolute or relative to the current file, or it can be virtual, but in this case you need a slightly different syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!-- #include virtual="/Includes/Routines.inc" --&gt;
</pre></td></tr></table></p>

<p>There's no restriction on the file's extension, but it's common practice to use the .inc extension, to differentiate these files from other files on the Web site. The include file can contain virtually anything: plain text, HTML code, server-side scripts, and so on. The only restriction is that it can't contain incomplete portions of scripts, such as an opening &lt;SCRIPT&gt; tag without the corresponding &lt;/SCRIPT&gt; tag.</p>

<p>A typical use for include files is to make a number of constants available to your ASP scripts. But if these constants come from a type library, as all the ADO constants do, there's a better way to work: Just include the following directive at the very beginning of a page or in the Global.asa file. (For more information about this file, see the "<A href="#1014">The Global.asa file</A>" section, later in this chapter.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!--METADATA TYPE="typelib"
    FILE="c:\program files\common files\system\ado\msado15.dll" --&gt;
</pre></td></tr></table></p>

<A NAME="994"><h3>Server-side ActiveX components</h3></A>
<p>If ASP pages were only able to run server-side scripts written in VBScript or JScript, they would hardly qualify as a viable means for writing complex Internet applications. Fortunately, you can augment the power of plain VBScript by instantiating external ActiveX components, either standard or custom ones. For example, a server-side script can query a database by instantiating an ADO Recordset object and then using its properties and methods. To create ActiveX components, you have to use the <I>Server.CreateObject</I> method instead of the simpler CreateObject command, but apart from this detail, you can process the returned object reference as you would in plain VBScript (or Visual Basic, for that matter). The following ASP code snippet demonstrates how you can use this capability to dynamically build a table with the results of a query on the Authors table of a copy of the Biblio.mdb database stored on the server machine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%
Dim rs, conn, sql
Set rs = Server.CreateObject("ADODB.Recordset")
' Modify the next lines to match your directory structure.
conn = "Provider=Microsoft.Jet.OLEDB.3.51;" 
conn = conn &amp; "Data Source=c:\Microsoft Visual Studio\Vb98\Biblio.MDB"
' Return all the authors whose birth year is known.
sql = "SELECT * FROM Authors WHERE NOT ISNULL([Year Born])"
rs.Open sql, conn  
%&gt;

&lt;H1&gt;A query on the Authors Table&lt;/H1&gt;
&lt;TABLE WIDTH=75% BGCOLOR=LightGoldenrodYellow BORDER=1 
CELLSPACING=1 CELLPADDING=1&gt;
    &lt;TR&gt;
        &lt;TH ALIGN=center&gt;Author ID&lt;/TH&gt;
        &lt;TH&gt;Name&lt;/TH&gt;
        &lt;TH ALIGN=Center&gt;Year Born&lt;/TH&gt;
    &lt;/TR&gt;
&lt;% Do Until rs.EOF %&gt;     
    &lt;TR&gt;
        &lt;TD ALIGN=center&gt; &lt;%= rs("Au_Id")%&gt;      &lt;/TD&gt;
        &lt;TD&gt;              &lt;%= rs("Author")%&gt;     &lt;/TD&gt;
        &lt;TD ALIGN=center&gt; &lt;%= rs("Year Born") %&gt; &lt;/TD&gt;
    &lt;/TR&gt;
&lt;%    rs.MoveNext
    Loop 
    rs.Close %&gt;
&lt;/TABLE&gt;
</pre></td></tr></table></p>

<p>The result of this ASP code is shown in Figure 20-4. An important point is that the browser on the client receives a plain HTML table and doesn't see a single line of server-side script code. Unlike client-side scripts, no one can peek at the code that makes your application work.</p>

<p>
<A href="javascript:fullSize('F20ph04x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=390 src="F20ph04.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-4.</B> <i>You can process a database query on the server and send the results as a pure HTML table to the client browser.</i><!--/caption-->
</p>


<a name="A126"></a><h3>9.2.2 The ASP Object Model</h3>

<A href="#A125">[Previous]</A> <A href="#A127">[Next]</A><P>

<A NAME="995"><h1>The ASP Object Model</h1></A>
<p>As you've seen, the basic concepts of ASP programming are simple, especially if you're already familiar with scripting and ADO programming. To build complete and effective ASP applications, you only need to learn how to use the ASP object model, which isn't that complex, at least compared with other object hierarchies you've mastered.</p>

<p>The ASP object model, which is outlined in Figure 20-5, consists of just six main objects, which I'll describe in depth in the next sections. As you can see in the figure, this model isn't a hierarchy because there are no direct relationships among the six objects.</p>

<A NAME="996"><h2>The Request Object</h2></A>
<p>The Request object represents the data coming from the client browser. It exposes six properties (<I>QueryString, Form, ServerVariables, Cookies</I>, <I>ClientCertificate</I> and <I>TotalBytes</I>), the first five of which are actually collections, and one method (<I>BinaryRead)</I>. All the properties are read-only, which makes sense because the ASP running on the server has no way to affect the data the client sends.</p>

<p>
<IMG border=0 height=777 src="F20ph05.GIF" width=378>
<p>
<!--caption--><B>Figure 20-5.</B> <i>The ASP object model.</i><!--/caption-->


<A NAME="997"><h3>Sending data to the server</h3></A>
<p>To fully understand the Request object's features, you need to know how data is sent from the client. An HTML form in the client browser can send data in two distinct ways: using the GET method or using the POST method. The method chosen depends on the METHOD attribute of the &lt;FORM&gt; tag. For example, the following form sends some values using the GET method. (It is part of the form shown in Figure 20-6.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1&gt;Send data through the GET method&lt;/H1&gt;

&lt;FORM ACTION="http://www.yourserver.com/Get.asp" METHOD=get NAME=FORM1&gt;&lt;P&gt;
Your Name: &lt;INPUT name=txtUserName &gt;
Your Address: &lt;INPUT name=txtAddress &gt;
Your City: &lt;INPUT name=txtCity &gt;
&lt;INPUT NAME=reset1 TYPE=reset VALUE=Reset&gt;
&lt;INPUT NAME=submit1 TYPE=submit VALUE=Submit&gt; 
&lt;/FORM&gt;
</pre></td></tr></table></p>

<p>
<A href="javascript:fullSize('F20ph06x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=295 src="F20ph06.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-6.</B> <i>A form that sends a few values over the Internet using the GET method.</i><!--/caption-->
</p>

<p>The value of the ACTION attribute is the URL of another page that will be executed and will receive the values in the three TextBox controls. When the user clicks the Submit button of a form that uses the GET method, the values of the controls in the form are appended to the URL specified in the ACTION parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
    <pre>http://www.yourserver.com/Get.asp?txtUserName=Francesco+Balena&amp;txtCity=Bari&amp;txtCountry=Italy&amp;submit1=Submit
</pre></td></tr></table></p>

<p>Notice that a question mark is appended immediately after the URL and that ampersand characters are used as delimiters for the <I>controlname=value</I> pairs sent to the server. When the user clicks the Submit button, the above string will appear in the browser's Address combo box when the browser finishes downloading the target page. Once you understand how the URL is built, nothing prevents you from building it yourself, for example, by using a client-side VBScript routine that fires when a button is clicked. If you choose to do so, you'll need to add the expected delimiters yourself, and you'll also have to replace all the spaces and other special characters with valid symbols:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=VBScript&gt;
' This is a client-side script routine.
Sub btnSendData_onclick()
    url = "http://www.yourserver.com/get.asp?"
    url = url &amp; "txtUserName=" &amp; Replace(Form1.txtUserName.Value, " ", "+")
    url = url &amp; "&amp;txtCity=" &amp; Replace(Form1.txtCity.Value, " ", "+")
    url = url &amp; "&amp;txtCountry=" &amp; Replace(Form1.txtCountry.Value, " ", "+")
    Window.Navigate url
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>As you can see, this approach requires more code, but it's also more flexible than sending data via the GET method of a form because the client-side script can validate and preprocess the data before sending it. At times, you don't even need a script. For example, you can have two or more hyperlinks on the same page, and all of them can point to the same URL in spite of your having appended different values to that URL:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF="http://www.yourserver.com/Get.asp?Request=Titles&gt;
Show me the titles&lt;/A&gt;
&lt;A HREF="http://www.yourserver.com/Get.asp?Request=Authors&gt;
Show me the authors&lt;/A&gt;
</pre></td></tr></table></p>

<p>Building a URL via code does have one drawback, however: a few characters have a special meaning when they appear in a URL. For example, you should replace all spaces with <I>+</I> symbols, and you should use <I>%</I> characters only as escape characters. For additional information about characters with special meanings, see the section "<A href="#1010">Encoding HTML Text and URLs</A>" later in this chapter.</p>

<p>The GET method for sending data has two drawbacks. First, because of limitations of the HTTP protocol, a browser can send only about 1,000 characters with the URL, so the data might be truncated. Second, data is sent as text over the Internet, which makes intercepting it easier. (This second problem is less serious if you build the URL yourself because you can encrypt the data being sent.)</p>

<p>If you want to work around the first problem and make your data harder to get at, you can use the POST method of sending data. In this method, the data is sent in the HTTP header, and the user doesn't see anything in the browser's Address combo box. To send data through the POST method instead of the GET method, you have to change only the value of the METHOD attribute of the &lt;FORM&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM ACTION="http://www.yourserver.com/Get.asp" METHOD=post NAME=FORM1&gt;&lt;P&gt;
</pre></td></tr></table></p>

<A NAME="998"><h3>Receiving data from the client</h3></A>
<p>On the client side, the only difference between the two methods of sending data is the value of the METHOD attribute, but the code in the ASP page that has to process the incoming data is completely different in the two cases. When data has been sent through the GET method (or by manually appending data to the URL), you can retrieve it by using the Request object's <I>QueryString</I> property. This property has a dual nature; it can work both as a regular property and as a collection. When used as a collection, you can pass it the name of a control on the form and it will return the value of that argument. What follows is the Get.asp page that retrieves the data being passed by the form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1&gt;This is what the ASP script has received:&lt;/H1&gt; 
&lt;B&gt;The entire Request.QueryString: &lt;/B&gt; &lt;% = Request.QueryString %&gt;

&lt;P&gt;&lt;I&gt;The string can be broken as follows:&lt;/I&gt;&lt;P&gt;
&lt;B&gt;UserName:&lt;/B&gt;  &lt;% = Request.QueryString("txtUserName") %&gt; &lt;/BR&gt;
&lt;B&gt;City:&lt;/B&gt;  &lt;% = Request.QueryString("txtCity") %&gt; &lt;/BR&gt;
&lt;B&gt;Country:&lt;/B&gt;  &lt;% = Request.QueryString("txtCountry") %&gt; &lt;/BR&gt;
</pre></td></tr></table></p>

<p>If the argument passed to the <I>QueryString</I> doesn't match the name of a control sent on the URL, the property returns an empty string, without raising an error. You can also take advantage of the collection nature of the <I>QueryString</I> property and enumerate all the values it contains using a <I>For Each&amp; Next</I> loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% For Each item In Request.QueryString %&gt;
&lt;B&gt;&lt;% = item %&gt;&lt;/B&gt; = &lt;% Request.QueryString(item) %&gt;&lt;BR&gt;
&lt;% Next %&gt;
</pre></td></tr></table></p>

<p>When the client sends data through the POST method, the <I>QueryString</I> property returns an empty string and you have to retrieve data using the Form collection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;B&gt;UserName:&lt;/B&gt;  &lt;% = Request.Form("txtUserName") %&gt; &lt;/BR&gt;
</pre></td></tr></table></p>

<p>You can also retrieve the values in all the controls in the form using a <I>For Each&amp; Next</I> loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% For Each item In Request.Form %&gt;
&lt;B&gt;&lt;% = item %&gt;&lt;/B&gt; = &lt;% Request.Form(item) %&gt;&lt;BR&gt;
&lt;% Next %&gt;
</pre></td></tr></table></p>

<p>When working with the controls on a form, you have to account for controls that have the same name. You need to consider two cases. When the controls with the same name are radio buttons and when they are something else. When the controls are radio buttons, the rule is simple: Only the single radio button control the user has selected is returned in the <I>QueryString</I> or the <I>Form</I> property. For example, if you have the following controls in your form
</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=radio NAME=optLevel VALUE=1&gt;Beginner
&lt;INPUT TYPE=radio NAME=optLevel VALUE=2&gt;Expert
</pre></td></tr></table></p>


<P>the script statement <I>Request.QueryString("optLevel")</I>&#8212;or <I>Request.Form("optLevel"),</I> if the form sends data with the POST method&#8212;will return 1 or 2, depending on the selected control.</p>



<p>When you have multiple controls with the same name and a type other than Radio, the QueryString of the Form collection will include a subcollection that holds all the controls whose value isn't empty. This detail is important to remember: If the form contains two controls named <I>chkSend</I>, the <I>Request.QueryString("chkSend")</I> or the <I>Request.Form("chkSend")</I> element might contain zero, one, or two elements, depending on how many check boxes the user has flagged:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=checkbox NAME=chkSend VALUE="Catalog"&gt;Send me your catalog
&lt;INPUT TYPE=checkbox NAME=chkSend VALUE="News"&gt;Send me your newsletter
</pre></td></tr></table></p>

<p>If you have two or more check boxes with the same name, you can distinguish among the many cases using the <I>count</I> property, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%    If Request.QueryString("chkSend").Count = 1 Then %&gt;
    &lt;B&gt;Send:&lt;/B&gt; &lt;% = Request.QueryString("chkSend") %&gt;&lt;BR&gt;
&lt;%    Else
    For i = 1 To Request.QueryString("chkSend").Count %&gt;
        &lt;B&gt;Send:&lt;/B&gt; &lt;% = Request.QueryString("chkSend")(i) %&gt;&lt;BR&gt;
&lt;%  Next
   End If %&gt;
</pre></td></tr></table></p>

<p>The preceding source code is meant for use with the GET method. The source code for the server-side script that reads data sent using the POST is similar, except it will use the Form collection instead of the QueryString collection. The companion CD includes two examples of HTM pages that send data to an ASP page: one using the GET method and another using the POST method. An example of a result from the ASP page is shown in Figure 20-7.</p>

<p>
<A href="javascript:fullSize('F20ph07x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=379 src="F20ph07.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-7.</B> <i>This page has been dynamically created by an ASP server-side script and sent back to the client; notice the URL in the browser's Address combo box.</i><!--/caption-->
</p>

<A NAME="999"><h3>The ServerVariables collection</h3></A>
<p>Each request from the client browser carries a lot of information in the HTTP header, including critical information about the user, the client browser, and the document itself. You can access this information using the ServerVariables collection of the Request object. To test this capability, you can write a short server-side script that lists the contents of this collection. The following code is an excerpt from the ServerVa.asp file on the companion CD:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1&gt;The ServerVariables collection&lt;/H1&gt;
&lt;TABLE BORDER=1 WIDTH = 90%&gt;
&lt;TR&gt;
    &lt;TH&gt;Variable&lt;/TH&gt;
    &lt;TH&gt;Value&lt;/TH&gt;
&lt;/TR&gt;
&lt;%    For Each item In Request.ServerVariables  %&gt;
&lt;TR&gt;
    &lt;TD&gt;&lt;B&gt;  &lt;% = item %&gt;                         &lt;/B&gt;&lt;/TD&gt;
    &lt;TD&gt;     &lt;% = Request.ServerVariables(item) %&gt;    &lt;/TD&gt;
&lt;/TR&gt;
&lt;%    Next %&gt;
&lt;/TABLE&gt;
</pre></td></tr></table></p>

<p>A few items in this collection are particularly useful. For example, you can use the following code to determine the method the page used to send data:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% Select Case UCase(Request.ServerVariables("REQUEST_METHOD"))
    Case "GET"
        ' Data is being sent through the GET method.
    Case "POST"
        ' Data is being sent through the POST method.
    Case ""
        ' No data is being sent from the client.
End Select %&gt;
</pre></td></tr></table></p>

<p>Another important item in this collection is HTTP_USER_AGENT , which holds the name of the client browser, thereby permitting you to filter out unsupported HTML statements. For example, you might return DHTML code to Internet Explorer 4 or later but stick to standard HTML code in all other cases:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  Supports_DHTML = 0     ' Assume that the browser doesn't support DHTML.
    info = Request.ServerVariables("HTTP_USER_AGENT")
    If InStr(info, "Mozilla") &gt; 0 Then
        ' This is a Microsoft Internet Explorer browser.
        If InStr(info, "4.") &gt; 0 Or InStr(info, "5.") &gt; 0 Then
            ' You can safely send DHTML code.
            Supports_DHTML = True
        End If
    End If
%&gt;
</pre></td></tr></table></p>

<p>Other items of interest in the ServerVariables collection are APPL_PHYSICAL_PATH (the physical path of the application), SERVER_NAME (the name or IP address of the server), SERVER_PORT (the port number used on the server), SERVER_SOFTWARE (the name of the Web server software, for example, Microsoft-IIS/4.0), REMOTE_ADDR (the client's IP address), REMOTE_HOST (the client's host name), REMOTE_USER (the client's user name), URL (the URL of the current page. which might be useful for referencing other files on the server), HTTP_REFERER (the URL of the page that contains the link the user clicked to get to the current page), HTTPS (returns <I>on</I> if you're using a secure protocol), and HTTP_ACCEPT_LANGUAGE (a list of natural languages the client browser supports).</p>

<A NAME="1000"><h3>The Cookies collection</h3></A>
<p>Cookies are pieces of information stored as individual files on the client machine. The browser sends this information to the server with each request, and an application running on the server can use the cookies to store data about that specific client. This method of storing data is necessary because HTTP is a stateless protocol and therefore the server can't associate a given set of variables with a given client. Actually, the server can't even find out whether this is the first time the client is accessing one of its pages. To obviate this problem, the server can send a cookie to the client, which will store the cookie and resubmit it to the server at the next request. Depending on the expiration date set at creation time, the cookie can expire at the end of the current session or at a given date and time. or it can never expire. For example, Web servers that let their clients customize the home page often use cookies that never expire.</p>

<p>From within ASP code, you can access cookies in two different ways: as a collection of the Request object or as a collection of the Respond object. The difference between the two modes of access is important. The Request.Cookies collection is read-only because the server is just accepting a request from the client and can only examine the cookies that come with it. Conversely, you can create and send new cookies to a client only through the Response.Cookies collection (which is explained in the section "<A href="#1002">The Response Object</A>" later in this chapter). You can retrieve the contents of a cookie within an ASP script by using the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>User Preference: &lt;% = Request.Cookies("UserPref") %&gt;
</pre></td></tr></table></p>

<p>You can also use a <I>For Each&amp; Next</I> loop to enumerate all the cookies sent by the client. But you must account for an added difficulty. the fact that a cookie can have multiple values, which are held in a secondary collection. You can test whether a cookie has multiple values by checking its <I>HasKeys</I> Boolean property. The following code prints the contents of the Cookies collection and all its subcollections:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% 
For Each item In Request.Cookies 
    If Request.Cookies(item).HasKeys = 0 Then %&gt;
        &lt;% = item %&gt; = &lt;% Request.Cookies(item) %&gt;
 &lt;% Else
        For Each subItem In Request.Cookies(item) %&gt;
           &lt;% = item &amp; "(" &amp; subItem &amp; ")" %&gt; = 
           &lt;% Request.Cookies(item)(subItem&gt; %&gt;
 &lt;%     Next
    End If
Next %&gt;
</pre></td></tr></table></p>

<A NAME="1001"><h3>Other properties and methods</h3></A>
<p>The Request object supports two more properties and one method. The ClientCertificate collection lets you transfer data using the more secure HTTPS protocol rather than the simpler HTTP protocol. Security over the Internet is a complex and delicate matter, however, and well beyond the scope of this book.</p>

<p>The remaining property and the only method of the Request object are almost always used together. The <I>TotalBytes</I> property returns the total number of bytes received from the client as a result of a POST method, and the <I>BinaryRead</I> method performs a low-level access to the raw data sent by the client:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  bytes = Request.TotalBytes
    rowData = Request.BinaryRead(bytes)   %&gt;
</pre></td></tr></table></p>

<p>The <I>BinaryRead</I> method can't be used with the Form collection, so you have to choose one or the other. In practice, you won't often use this method.</p>

<A NAME="1002"><h2>The Response Object</h2></A>
<p>The Response object represents the data being sent from the Web server to the client browser. It exposes five properties (<I>Expires</I>, <I>ContentType</I>, <I>CharSet</I>, <I>Status</I>, and <I>Pics</I>), four methods (<I>Write</I>, <I>BinaryWrite</I>, <I>IsClientConnected</I>, and <I>AppendToLog</I>) and one collection (Cookies).</p>

<A NAME="1003"><h3>Sending data to the browser</h3></A>
<p>The <I>Write</I> method of the Response object sends a string or an expression right to the client's browser. This method isn't strictly necessary because you can always use the <I>&lt;%=</I> delimiter. For example, the following three statements are equivalent:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;B&gt;Current Time is &lt;% = Time %&gt; &lt;/B&gt;
&lt;% = "&lt;B&gt;Current Time is " &amp; Time &amp; "&lt;/B&gt;" %&gt;
&lt;% Response.Write "&lt;B&gt;Current Time is " &amp; Time &amp; "&lt;/B&gt;" %&gt;
</pre></td></tr></table></p>

<p>Choosing one over another is mostly a matter of programming style. When you're already inside a server-side script block, however, using the <I>Response.Write</I> method often delivers more readable code. at least to Visual Basic programmers.</p>

<p>The <I>Buffer</I> property gives you control over when the browser receives the page. The default for this property is False, which means that the browser receives the page while it's being built. If you set this property to True, all the data the ASP page produces is stored in a buffer and then sent to the client as a block of data when you invoke the Response object's <I>Flush</I> method. This buffering capability has a couple of advantages. First, in some cases, your ASP page will appear to be faster than it really is. Second, and most important, at any moment you can decide to discard what you've produced by using a <I>Response.Clear</I> method. For example, you might have a database query that sends output to the buffer; at the end of the process, you can check to find out whether an error has occurred and cancel the results built so far:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    &lt;% ' Here you
    execute  the query.
    If Err Then
        Response.Clear
        Response.Write "An error has occurred"
    Else
        ' Send the result of the query to the client.
        Response.Flush
    End If
%&gt;
</pre></td></tr></table></p>

<p>You can also use the Response object's <I>End</I> method, which stops processing the ASP page and returns the page built so far to the browser.</p>

<p>The Response object also supports another method for sending data to a client, the <I>BinaryWrite</I> method. This method is rarely used, though. One situation in which you would use it is when you're sending nonstring data to a custom application.</p>

<A NAME="1004"><h3>Cookies</h3></A>
<p>The Response object's <I>Cookies</I> property (unlike that of the Request object) lets you create and modify the value of a cookie. The Cookies collection behaves much like a Dictionary object, so you can create a new cookie simply by assigning a new value to this property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Remember the user's login name. 
    Response.Cookies("LoginName") = Request.Form("txtLoginName")  %&gt;
</pre></td></tr></table></p>

<p>As I explained in the section "<A href="#1000">The Cookies Collection</A>" earlier in the chapter, a cookie can have multiple values. For example, an Internet shopping site might have a shopping bag in which you can put multiple values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Add a new item to the Bag cookie.
    product = Request.Form("txtProduct")
    quantity = Request.Form("txtQty")
    Response.Cookies("Bag")(product) = quantity      %&gt;
</pre></td></tr></table></p>

<p>  Remember that  cookies are sent back to the client in the HTTP header, and for this reason they must be assigned before sending the very first line of text to the client. otherwise, an error will occur. When it's impractical to assign a cookie before sending the first line of HTML text. and it often is. you can activate buffering before sending any text to the client. By default, cookies are stored on the client's machine only during the current session and are deleted when the browser is closed. You can change this default behavior by assigning a value to the <I>Expires</I> property of the cookie, as in the following code snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' This cookie is valid until December 31, 1999.
    Response.Cookies("LoginName").Expires = #12/31/1999#  %&gt;
</pre></td></tr></table></p>

<p>The Cookie object has other important properties as well. You can set the <I>Domain</I> property to a specific domain so that only the pages in that domain will receive that particular cookie. The <I>Path</I> property lets you be even more selective and decide that only the pages in a given path in that domain receive the cookie. Finally, the <I>Secure</I> Boolean property lets you specify whether the cookie should be transmitted exclusively over a Secure Sockets Layer (SSL) connection. Here's an example that uses all the properties of the Cookie object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Create a secure cookie that expires after one year and that
    ' is valid only on the /Members path of the vb2themax.com site.
    Response.Cookies("Password") = Request.Form("txtPassword")
    Response.Cookies("Password").Expires = Now() + 365
    Response.Cookies("Password").Domain = "/vb2themax.com"
    Response.Cookies("Password").Path = "/members"
    Response.Cookies("Password").Secure = True   %&gt;
</pre></td></tr></table></p>

<p>A final example demonstrates how a page can keep track of whether or not the user has already visited the site and also shows how an ASP page can query the user for missing values and then take the control again:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%    ' We're going to create cookies, so we need to turn on buffering.
    Response.Buffer = True  %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H1&gt;Using Cookies to manage login forms&lt;/H1&gt;

&lt;%    If Request.Cookies("LoginName") &lt;&gt; "" Then 
    ' This isn't the first time the user has visited this site. %&gt;

    It's nice to hear from you again, &lt;% = Request.Cookies("LoginName") %&gt;.

&lt;%    Elseif Request.Form("txtLoginName") &lt;&gt; "" Then
    ' This is the user's first visit to this site, and
    ' she has just filled out the login form.
    ' Save the user's login name as a cookie for subsequent sessions.
    Response.Cookies("LoginName") = Request.Form("txtLoginName")
    Response.Cookies("LoginName").expires = Now() + 365 %&gt; 
    
    Welcome to this site, &lt;% = Request.Form("txtLoginName") %&gt; 
&lt;% Else
    ' This is the user's first visit to this site, ' so prepare a login form.   %&gt;
    This is the first time you've logged in. Please enter your name:&lt;P&gt;
&lt;% url = Request.ServerVariables("URL")%&gt;  
    &lt;FORM ACTION="&lt;%= url %&gt;" METHOD=POST NAME=form1&gt;
    &lt;INPUT TYPE="text" NAME=txtLoginName&gt;
    &lt;INPUT TYPE="submit" VALUE="Submit" NAME=submit1&gt;
    &lt;/FORM&gt;
&lt;%  End If %&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></td></tr></table></p>

<p>The preceding page can work in three different ways. The first time this page is accessed, it sends back an HTML form that asks for the user's name, as shown in the top portion of Figure 20-8. This information is then reposted to the page. notice how it builds the ACTION attribute of the &lt;FORM&gt; tag. which retrieves the contents of the <I>txtLoginName</I> control and stores it in a cookie that expires after one year. (See the middle part of Figure 20-8.) Finally, when the user navigates again to this page, the server is able to recognize the user and display a different "Welcome back" greeting. (See the bottom part of Figure 20-8.)</p>

<p>
<A href="javascript:fullSize('F20ph08x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=657 src="F20ph08.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-8.</B> <i>An ASP script can behave differently, according to whether a cookie is stored on the client side.</i><!--/caption-->
</p>

<A NAME="1005"><h3>Page attributes</h3></A>
<p>Some properties of the Response object let you control important attributes of the page sent back to the client. All these attributes are transmitted to the client in the HTTP header and therefore must be set before sending the contents of the page (or you have to activate the page buffering).</p>

<p>The <I>expires</I> property determines how many minutes the returned page can be held in the client browser's local cache. For example, if your page contains stock exchange data, you might want to set a relatively short expiration timeout:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' This page expires after 5 minutes.
    Response.Expires = 5    %&gt;
</pre></td></tr></table></p>

<p>In other circumstances, you might need to set an absolute expiration date and time, which you do through the <I>ExpiresAbsolute</I> property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' This page expires 1 minute before the year 2000.
    Response.expiresabsolute = #12/31/1999  23:59:00#  %&gt;
</pre></td></tr></table></p>

<p>You can decide whether the page can be held in a proxy server's cache by setting the <I>CacheControl</I> property to <I>public</I>; you set it to <I>private</I> to disable this kind of caching.</p>

<p>In most cases, the ASP code sends back HTML text to the client browser, but this isn't a requirement. In fact, you can produce any MIME (Multipurpose Internet Mail Extensions) contents the browser supports, provided that you inform the client what's going to arrive. You notify the browser by assigning a suitable value to the <I>ContentType</I> property, such as <I>text/plain</I> for plain text or <I>text/richtext</I> for MIME Rich Text format. You can also send back data in binary format, such as <I>image/tiff</I> or <I>image/gif</I> for an image extracted from a database. (If you use a binary format, you need to send the data using the <I>BinaryWrite</I> method.)</p>

<p>The <I>CharSet</I> property lets the ASP code inform the client browser that the text uses a given character set. The value of this property instructs the browser to use the right code page and ensures that the characters are displayed correctly on the client's screen. For example, to use the Greek code page, you execute this statement at the beginning of the page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% Response.CharSet = "windows-1253" %&gt;
</pre></td></tr></table></p>

<p>The properties listed so far allow you to set some of the data that is sent to the client in the HTTP header. If you want to, you can modify any standard header information and even create custom header data, using the <I>AddHeader</I> method.</p>

<A NAME="1006"><h3>Redirection</h3></A>
<p>You can redirect the browser to another page using the <I>redirect</I> method. A typical use for this method is to redirect the browser to a particular page after reading one or more of the values stored in its ServerVariables collection. For example, a company that has international customers can prepare multiple home pages, one for each language, and automatically redirect the (potential) customer to the proper page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  If InStr(Request.ServerVariables("HTTP_ACCEPT_LANGUAGE"), "it") Then
        ' If the browser supports Italian, go to a specific page.
        Response.Redirect "Italy.asp"
    Else
        ' If the browser doesn't support Italian use the standard page.
        Response.Redirect "English.asp"
    End If    
%&gt;
</pre></td></tr></table></p>

<p>You must use the <I>Redirect</I> method before sending any contents because redirection is achieved by sending an HTTP header back to the browser.</p>

<A NAME="1007"><h3>Other properties and methods</h3></A>
<p>The Response object has two properties and two methods remaining: the <I>Status</I> and <I>Pics</I> properties and the<I> IsClientConnected</I> and the <I>AppendToLog</I> methods. The <I>Status</I> property sets or returns the HTTP status line returned to the browser. For example, it returns <I>200 OK</I> if everything is correct or <I>404 Page not found</I> if the page requested isn't available. The <I>Pics</I> property lets you add a value to the PICS-Label field in the HTTP header, which in turn lets the browser filter out pages whose content doesn't conform to the rules set in the browser's Content Advisor dialog box.</p>

<p>The <I>IsClientConnected</I> function returns False if the client has disconnected after the most recent <I>Response.Write</I> operation. This property is useful if the server-side script is engaged in a lengthy operation and you want to ensure that the client is still connected and waiting for an answer provided that logging has been enabled in IISO. Finally, the <I>AppendToLog</I> method writes a string to the Web Server log file; because this log file is comma-delimited, you shouldn't use commas in the string passed as an argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% Response.AppendToLog "This page was loaded at " &amp; Now()  %&gt;
</pre></td></tr></table></p>

<A NAME="1008"><h2>The Server Object</h2></A>
<p>As you can deduce from its name, the Server object represents the Web server application. Although it has just one property (<I>ScriptTimeout</I>) and four methods (<I>CreateObject, HTMLEncode, URLEncode,</I> and <I>MapPath</I>), but the Server object plays a key role in most ASP applications.</p>

<p>The <I>ScriptTimeout</I> property sets or returns the number of seconds after which the server-side script is forced to terminate and an error is returned to the client. This property, whose default value is 90 seconds, is very useful to terminate extremely long queries or programming errors such as infinite loops.</p>

<A NAME="1009"><h3>Creating external objects</h3></A>
<p>You've already seen the Server object's <I>CreateObject</I> method in action. Recall that this method permits you to instantiate an external COM object, either from a standard library such as ADODB or from a custom component you've written yourself or bought from a third-party vendor. This method is especially useful with the Scripting library to create a FileSystemObject or a Dictionary object to make up for a few deficiencies of the VBScript language. (For example, VBScript doesn't support collections or file I/O statements.) Here's an interesting example of an ASP page that dynamically builds a list of hyperlinks to all the other HTM documents in its directory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1&gt;CreateObject demo&lt;/H1&gt;
This page demonstrates how you can use a FileSystemObject object
to dynamically create hyperlinks to all the other pages in 
this directory.&lt;P&gt;

&lt;%
Set fso = Server.CreateObject("Scripting.FileSystemObject")
' Get a reference to the folder that contains this file.
aspPath = Request.ServerVariables("PATH_TRANSLATED")
Set fld = fso.GetFile(aspPath).ParentFolder 
' For each file in this folder, create a hyperlink.
For Each file In fld.Files
     Select Case UCase(fso.GetExtensionName(file))
        Case "HTM", "HTML"
            Response.Write "&lt;A HREF=""" &amp; file &amp; """&gt;" &amp; file &amp; "&lt;/A&gt;&lt;BR&gt;"
    End Select
Next
%&gt;
</pre></td></tr></table></p>

<p>Don't forget that the object being created must be correctly registered on the machine the Web server application is running on. It's a good idea to protect all the <I>Server.CreateObject</I> methods with an <I>On Error Resume Next</I> statement.</p>

<p>Even if you create objects in ASP scripts following a method similar to the one you follow under Visual Basic or VBScript, you must pay attention to an important difference: The scope of all such objects is the page, and the objects are released only when the page has been completely processed. This means that setting an object variable to Nothing won't destroy the object because ASP retails a reference to the object and therefore keeps the object alive. This may have many nasty consequences. Take for example the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim rs
Set rs = Server.CreateObject("ADODB.Recordset")
rs.Open "Authors", "DSN=Pubs"
 ...
Set rs = Nothing
</pre></td></tr></table></p>

<p>In regular Visual Basic or VBScript, the last statement would close the Recordset and release all the associated resources. In an ASP script, however, this doesn't happen, unless you explicitly close the Recordset:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rs.Close
Set rs = Nothing
</pre></td></tr></table></p>

<A NAME="1010"><h3>Encoding HTML text and URLs</h3></A>
<p>As you know, HTML uses angle brackets as special characters for defining tags. Although this way of encoding information is simple, it can cause problems when you're sending data read from somewhere else, such as from a database or a text file. In fact, any <I>&lt;</I> character found in the database field would make the browser mistakenly believe that an HTML tag is arriving. The easiest way to work around this issue is by resorting to the Server object's <I>HTMLEncode</I> method, which takes a string and returns the corresponding HTML code that makes that string appear in the browser as-is. The following code example relies on this method to display values from a hypothetical database of math formulas (which are highly likely to contain special symbols):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%
Set rs = Server.CreateObject("ADODB.Recordset")
rs.Open "SELECT * FROM Formulas", "DSN=MathDB"
Do Until rs.EOF
    Response.Write Server.HTMLEncode(rs("Formula")) &amp; "&lt;BR&gt;"
Loop
%&gt;
</pre></td></tr></table></p>

<p>This method is also useful when you want to show HTML code in a page rather than having it interpreted by the browser. For example, the following ASP code displays the contents of the <I>htmltext</I> variable without interpreting the HTML tags it contains:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is the typical beginning of an HTML page&lt;P&gt;
&lt;%  htmltext = "&lt;HTML&gt;&lt;BODY&gt;"
    Response.Write Server.HTMLEncode(htmltext)
%&gt;
</pre></td></tr></table></p>

<p>This is what is actually sent to the client, as you can see by using the View command from the Source menu of the browser:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is the typical beginning of an HTML page&lt;P&gt;
&amp;lt;HTML&amp;gt;&amp;lt;BODY;&amp;gt&lt;P&gt;
</pre></td></tr></table></p>

<p>It's then rendered into this in the brower's window:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is the typical beginning of an HTML page
&lt;HTML&gt;&lt;BODY&gt;
</pre></td></tr></table></p>

<p>Sending the special <I>&lt;%</I> and <I>%&gt;</I> pair of characters is a bit more complex because these characters confuse the ASP script parser. For example, say that you want to send the following string to the browser:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;% Set obj = Nothing %&gt;
</pre></td></tr></table></p>

<p>Unfortunately, you can't simply use the following ASP script because it raises an error, "Unterminated string constant":</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' CAUTION: This doesn't work!
    Response.Write Server.HTMLEncode("&lt;% Set obj = Nothing %&gt;")
%&gt;
</pre></td></tr></table></p>

<p>One way to avoid this problem is to keep the two characters of the <I>%&gt;</I> pair apart, using the concatenation operator:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' This works!
    Response.Write Server.HTMLEncode("&lt;% Set obj = Nothing %" &amp; "&gt;")
%&gt;
</pre></td></tr></table></p>

<p>Another solution is to use the backslash (\) character to inform the ASP script that the character that comes next is to be taken literally:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' This works too!
    Response.Write Server.HTMLEncode("&lt;% Set obj = Nothing %\&gt;")
%&gt;
</pre></td></tr></table></p>

<p>The <I>URLEncode</I> method lets you solve similar problems caused by the unusual way in which HTML formats URLs. We first encountered this problem in the section "<A href="#997">Sending Data to the Server</A>", when we were building client-side scripts that use the <I>Window.Navigate</I> method to open a new page and send it additional values via its URL. Sometimes you also have to solve this problem when you're writing server-side scripts. but in this case, the solution is simple. For example, you can 
dynamically create a hyperlink that jumps to another page and passes the contents of a database field via the URL:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>         &lt;% ' This code assumes that rs contains a reference to an open Recordset.DoUntilrs.EOF
    Response.Write "&lt;A HREF=""Select.asp?Name="
    Response.Write Server.URLEncode(rs("Name")) &amp; """&gt;"
    Response.Write rs("Name") &amp; "&lt;/A&gt;&lt;/BR&gt;"
    rs.MoveNext
Loop
%&gt;
</pre></td></tr></table></p>

<A NAME="1011"><h3>Mapping paths</h3></A>
<p>The final method of the Server object is <I>MapPath</I>, which converts a logical path as seen by the client browser into a physical path on the server machine. If the argument passed to this method has a leading <I>/</I> or <I>\</I> character, the path is considered to be absolute with respect to the application's root directory; without such a leading character, it is considered to be relative to the directory where the current ASP document is. For example, the following code redirects the browser to the default.asp page located in the root directory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  Response.Redirect Server.MapPath("\default.asp") %&gt;
</pre></td></tr></table></p>

<p>This code redirects the browser to the two.asp page in the same directory where the current page is:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  Response.Redirect Server.MapPath("two.asp") %&gt;
</pre></td></tr></table></p>

<p>You can determine the name of the root directory, the current directory, and the parent directory using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  rootDir = Server.MapPath("\")
    curDir = Server.MapPath(".")
    parentDir = Server.MapPath("..")     %&gt;
</pre></td></tr></table></p>

<A NAME="1012"><h2>The Application Object</h2></A>
<p>The Application object represents the Web server application running inside IIS. This is a global object that is shared by all the clients that are accessing one of the pages that make up the application in a given moment. An Application object comes to life when the first client accesses one of its pages and ends only when the administrator stops the Web server or when the server machine crashes. If the Application object runs in its own address space, you can also terminate it by clicking the Unload button in the Directory tab of the Application object's Property Pages dialog box.</p>

<p>The Application object has a rather simple interface, with just one property (<I>Value</I>), two collections (<I>Contents</I> and <I>StaticObjects</I>), and two methods (<I>Lock</I> and <I>Unlock</I>). Unlike all the other objects examined so far (but similar to the Session object, which is described in "<A href="#1018">Session Events</A>"), the Application object exposes events (<I>OnStart</I>, <I>OnEnd</I>).</p>

<A NAME="1013"><h3>Sharing data among clients</h3></A>
<p>The main use for the Application object is storing data that should be available to all the scripts that are serving client requests in a given moment. Examples of such data include the location of a database file or a flag that indicates whether a given resource is accessible. Such shared data is available through the Application's object <I>Value</I> property, which expects the name of the variable you want to read or set. Because this is the default property of the Application object, in most cases it is omitted:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Increment a global counter. (WARNING: This might not work correctly.)
    Application("GlobalCounter") = Application("GlobalCounter") + 1
%&gt;
</pre></td></tr></table></p>

<p>This code snippet has a problem, though. Because the Application object is shared among all the ASP scripts that are serving the currently connected clients , a server-side script might execute the same statement in exactly the same moment as another script. This would cause incorrect values for the Application variable. To avoid such undesirable situations, any time you're going to access one or a group of Application object's variables, you should bracket the code within a <I>Lock</I> and <I>Unlock</I> pair of methods:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Increment a global counter. (This code always works correctly.)
    Application.Lock
    Application("GlobalCounter") = Application("GlobalCounter") + 1
    Application.Unlock
%&gt;
</pre></td></tr></table></p>

<p>When you use this approach, only one script can execute the code in the critical section between the two methods. The second script that encounters the <I>Lock</I> method will patiently wait until the first script executes the <I>Unlock</I> method. It goes without saying that you should avoid inserting any lengthy operation after the <I>Lock</I> method and that you should invoke the <I>Unlock</I> method as soon as possible.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
In general, you should invoke the <I>Lock</I> and <I>Unlock</I> methods even when just <I>reading</I> an Application object's variables. This precaution might seem  excessive, but remember that under Windows NT and Windows 2000 Server a thread can be preempted at any time. When you're dealing with variables that hold objects, locking is even more important because many properties and methods of the object might not be reentrant.
</blockquote></div>
<P></P>

<A NAME="1014"><h3>The Global.asa file</h3></A>
<p>The <I>onstart</I> and <I>onend</I> events of the Application object fire. not surprisingly. when the Web application starts and ends, respectively. The problem with these events is that when the Application object is created, no ASP document is active yet. For this reason, the code for these events must be located in a special file, named Global.asa, that <I>must</I> reside in the root directory of the application. Here's an example of a Global.asa file that records the time the application starts:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Application_OnStart()
    Application("StartTime") = Now()    
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
   The events in the Global.asa file fire only when the client accesses an ASP file. The events don't fire when an HTM or&nbsp;HTML file is read.
</blockquote></div>
<P></P>

<p>You can't use the &lt;% and %&gt; delimiters in the Global.asa. The only valid way to insert VBScript code is by using the &lt;SCRIPT RUNAT=Server&gt; tag. <I>OnStart</I> events are often useful for creating an instance of an object when the application starts so that individual scripts don't need to invoke a <I>Server.CreateObject</I> method. For example, you might create an instance of the FileSystemObject class and use it inside ASP scripts, which will speed up the execution of individual scripts:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Application_OnStart()
    Set fso = Server.CreateObject("Scripting.FileSystemObject")
    ' This is an object, so we need a Set command.
    Set Application("FSO") = fso    
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>The <I>OnEnd</I> event is less useful than the <I>OnStart</I> event. You typically use it to release resources, for example, to close a connection opened in the <I>OnStart</I> event. Another common use is to permanently store on a database the value of a global variable (such as a counter that keeps track of how many visitors a given page has had) that you don't want to reinitialize the next time the application is started.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Because the Global.asa file must reside in the home directory of an application, two distinct applications share the same Global.asa file if they share the home directory. Needless to say, this can be the source of countless problems. For example, if you modify the Global.asa for one application, the other one is also affected. I strongly advise you to assign a different home directory to each application.
</blockquote></div>
<P></P>

<A NAME="1015"><h3>The Contents and StaticObjects collections</h3></A>
<p>Because the <I>Value</I> property isn't a collection, you can't enumerate all the Application object's variables. However, the Application object does provide you with two collections that let you retrieve information about global values available to all the scripts.</p>

<p>The Contents collection contains references to all the elements that have been added to the application object via a script and can be accessed by ASP code. This collection includes simple values and objects created with the <I>Server.CreateObject</I> method. You can therefore enumerate all the Application's variables using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  For Each item In Application.Contents
        If IsObject(Application.Contents(item)) Then
            objClass = TypeName(Application.Contents(item))
            Response.Write item &amp; " = object of class " &amp; objClass
        Else
            Response.Write item &amp; " = " &amp; Application.Contents(item)
        End If
    Next
%&gt;
</pre></td></tr></table></p>

<p>The StaticObjects collection is similar to the Contents collection, but it contains only the objects that have been created with an &lt;OBJECT&gt; tab in the Application's scope. Because you're guaranteed that this collection contains only objects, you can iterate through the objects using a simple loop:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  For Each item In Application.StaticObjects
        objClass = TypeName(Application.StaticObjects(item))
        Response.Write item &amp; " = object of class " &amp; objClass
    Next
%&gt;
</pre></td></tr></table></p>

<A NAME="1016"><h2>The Session Object</h2></A>
<p>The Session object represents the connection between a given client and the Web server. Whenever a client accesses one of the ASP documents on the server, a new Session object is created and is given a unique ID. This object will live as long as the client keeps the browser open. By default, it's destroyed when the server doesn't receive a request from that client within a given timeout interval. The default for this timeout is 20 minutes, but you can change it by assigning a new value to the Session's <I>Timeout</I> property. For example, you might want to reduce this value if your Web site is receiving too many requests and you want to release the resources allocated to users as often as possible:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Reduce the timeout to 10 minutes.
    Session.Timeout = 10 %&gt;
</pre></td></tr></table></p>

<p>The Session object resembles the Application object in that both expose the Contents and the StaticObjects collections, the <I>Value</I> property, and the <I>OnStart</I> and <I>OnEnd</I> events. The main difference between the two objects is that IIS creates only one Application object for each application but as many Session objects as the number of users that are connected in a given moment.</p>

<A NAME="1017"><h3>Sharing data among pages</h3></A>
<p>The Session object's <I>Value</I> property lets you store and retrieve values with a session scope, which means that only the pages requested by a given client can share a particular set of values. The difference between variables with application scope and those with session scope is illustrated in Figure 20-9.</p>

<p>
<A href="javascript:fullSize('F20ph09x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=392 src="F20ph09.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-9.</B> <i>Application variables and session variables.</i><!--/caption-->
</p>

<p>Session variables are especially important because all the variables declared in an ASP script are destroyed when the browser jumps to another page. Session variables bring state management to the stateless HTTP protocol. At first, it might seem impossible for the Web browser to keep information pertinent to one user distinct from the information belonging to another user because the protocol doesn't even maintain information about who's making the request. The solution to this problem is provided by a special cookie that the Web server sends to the client browser and that the browser sends back to the server at each subsequent request. Because this cookie has no specific expiration date, it expires when the browser is closed or after the timeout. You can also force the Session object to terminate using its <I>Abandon</I> method.</p>

<p>You reference Session object's variables by using the <I>Value</I> property, which is the default property for this object and therefore can be omitted:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Remember the user's name while the session is open.
    Session("UserName") = Request.Form("txtUserName")   %&gt;
</pre></td></tr></table></p>

<p>Session objects are great, but they have an adverse impact on the performance and the scalability of the application. Each Session object consumes resources on the server, and some session operations are serialized, so each session must wait for its turn. You can minimize these problems by creating Session objects only if you really need them. You can limit the number of Session objects created by adding the following line at the beginning of all your ASP scripts:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%@ EnableSessionState = False %&gt;
</pre></td></tr></table></p>

<p>Alternatively, you can disable Session variables for the ASP subsytem by changing the AllowSessionState value of the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP\Parameters Registry key from 1 to 0.</p>

<p>When a client accesses a page that doesn't support session state, no Session object is created and the <I>Session_OnStart</I> event procedure isn't executed. This means that you can't store values in the Session object any longer and that you must implement your own persistence scheme, for example, one based on a real, multiuser database.</p>

<A NAME="1018"><h3><i>Session</i> events</h3></A>
<p>As I mentioned in the previous section, the Session object exposes the <I>OnStart</I> and <I>OnEnd</I> events. As is the case with the Application object, because you write the code for these events in the Global.asa file, all the Sessions objects share the same event procedures. Typically, you use the <I>OnStart</I> event to create a resource that is to be used during the entire session, such as an ADO Connection object. The following code demonstrates how you can make the Application and Session objects cooperate:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Application_OnStart()
    ' Initialize the Connect string that points to the shared database.
    ' In a real application, the string might be read from an INI file.
    conn = "Provider=SQLOLEDB;Data Source= MySrv;UserID=sa;Password=MyPwd"
    Application("ConnString") = str
End Sub

Sub Session_OnStart()
    Set cn = Server.CreateObject("ADODB.Connection")
    cn.Open Application("ConnString")
    ' Make this Connection object available to all the ASP scripts  
    ' in the session.
    Set Session("Connection") = cn
End Sub

Sub Session_OnEnd()
    ' Release all the resources in an orderly way.
    Set cn = Session("Connection")
    cn.Close
    Set cn = Nothing
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>Here's another example that uses the <I>OnStart</I> and <I>OnEnd</I> events to keep track of how many sessions are currently active:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Application_OnStart()
    Application("SessionCount") = 0
End Sub

Sub Session_OnStart()
    Application.Lock
    Application("SessionCount") = Application("SessionCount") + 1
    Application.Unlock
End Sub

Sub Session_OnEnd()
    Application.Lock
    Application("SessionCount") = Application("SessionCount") - 1
    Application.Unlock
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<A NAME="1019"><h3>Locale-aware properties</h3></A>
<p>The Session object exposes two properties that permit you to create Web sites that can accommodate international users. The <I>LCID</I> property sets or returns the locale ID that will be used when sorting and comparing strings, and for all the date-related and time-related functions. For example, the following code snippet displays the current date and time using the Italian format and then restores the original locale ID.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  currLocaleID = Session.LCID
    ' The locale ID of Italy is hex 410.
    Session.LCID = &amp;H410
    Response.Write "Current date/time is " &amp; Now()
    ' Restore the original locale ID.
    Session.LCID = currLocaleID
%&gt;
</pre></td></tr></table></p>

<p>The other property that lets you add an international flavor to a Web site is <I>CodePage</I>, which sets or returns the code page used when reading text from or writing text to the browser. For example, most Western languages use code page 1252, and Hebrew uses code page 1255.</p>

<A NAME="1020"><h3>Session collections</h3></A>
<p>The Session object exposes the Contents and StaticObjects collections in the same way that the Application object does, so I won't describe those collections again here. (See the section: "<A href="#1015">The Contents and StaticObjects Collections</A>" earlier in this chapter for details about these collections.) These collections contain only elements with a session scope, which raises an interesting question: How can you have a session-scoped &lt;OBJECT&gt; tag in the Global.asa file? The answer is in the SCOPE attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT RUNAT=Server SCOPE=Session ID=Conn ProgID="ADODB. Connection"&gt;
</pre></td></tr></table></p>

<A NAME="1021"><h2>The ObjectContext Object</h2></A>
<p>The sixth and final object in the ASP object model is the ObjectContext object. This object is used only when an ASP script runs in a transaction and is managed by Microsoft Transaction Server. Such transaction pages contain a &lt;%@ TRANSACTION %&gt; directive at the beginning of the script.</p>

<p>The ObjectContext object exposes two methods, <I>SetComplete</I> and <I>SetAbort</I>, which commit and abort the transaction, respectively. It also exposes two events, <I>OnTransactionCommit</I> and <I>OnTransactionAbort</I>, which fire after a transaction is completed successfully or is aborted, respectively. Because this book doesn't cover MTS programming, I won't explain these methods and events in detail.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
As I'm writing this, Internet Information Server 5.0 is in beta, so it's possible to get an idea of the new features of ASP technology, although the final release may still change some of the details. The Server object has been enhanced with three new methods. The <I>Execute</I> method executes another ASP document and then returns to the current ASP script. The <I>Transfer</I> method is similar to the <I>Response.Redirect</I> method but is more efficient because no data is sent to the client browser. The <I>GetLastError</I> method returns a reference to the new ASPError object, which contains detailed information about errors. The Application and Session's Contents collections have been improved with the <I>Remove</I> and <I>RemoveAll</I> methods, which let you delete one or all the elements of the collection. Finally, the ASP parser is more efficient, so pages will be processed faster.
</blockquote></div>
<P></P>


<a name="A127"></a><h3>9.2.3 ASP Components</h3>

<A href="#A126">[Previous]</A> <A href="#A128">[Next]</A><P>

<A NAME="1022"><h1>ASP Components</h1></A>
<p>As you know, ASP scripts can instantiate and use ActiveX components, which can add tremendous flexibility and power to ASP scripts.</p>

<A NAME="1023"><h2>Using Components in ASP Scripts</h2></A>
<p>There are two ways to instantiate ActiveX components in ASP scripts: by using the <I>Server.CreateObject</I> method and by using an &lt;OBJECT&gt; tag with the SCOPE attribute set to <I>server</I>. The former technique is more likely to appeal to Visual Basic programmers, whereas the latter will sound more natural to HTML programmers.</p>

<p>In at least one case, however, it makes sense even for Visual Basic programmers to use an &lt;OBJECT&gt; tag梟amely, to create an object reference that has application scope or session scope. Let's say that you want to create an ADO Connection object that is shared by all the scripts in the session. You can achieve this by creating the object in the <I>Session_OnStart</I> event procedure and then storing the reference in a Session variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Session_OnStart()
    ' Create the ADO Connection object.
    Set conn = Server.CreateObject("ADODB.Connection")
    ' Open it.
    connStr = "Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs"
    conn.Open connStr, "sa", "myPwd" 
    ' Make it available to all ASP scripts.
    Set Session("conn") = conn
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>An ASP script can use this session-scoped Connection object, but it has to extract it from the Session object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Inside an ASP script
    Set conn = Session("conn")
    conn.BeginTrans               %&gt;
</pre></td></tr></table></p>

<p>Let's see what happens when the object is declared in Global.asa using a &lt;SCRIPT&gt; tag with a proper SCOPE attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT RUNAT=server SCOPE=Session ID="Conn" PROGID="ADODB.Connection"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Session_OnStart()
    ' Open the connection (no need to create it).
    connStr = "Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs"
    conn.Open connStr, "sa", "myPwd" 
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>When an object is declared in this way, you can reference it from any session in the application just by using its name, as in the following ASP script:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  conn.BeginTrans %&gt;
</pre></td></tr></table></p>

<p>Objects can be defined this way with Application scope as well as with Session scope. In both cases, they appear in the StaticObjects collection of the corresponding object.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Most components designed for ASP pages are in-process components. From time to time, however, you might need to create out-of-process components. To do so, you must manually modify the AllowOutOfProcCmpts value in the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP \Parameters Registry key from 0 (the default value) to 1.
</blockquote></div>
<P></P>

<A NAME="1024"><h2>Using Custom ASP Components</h2></A>
<p>You can use any ActiveX component from an ASP page, including those written in Visual Basic. For example, you can write a component that augments VBScript in the areas in which this script language is weak, such as file management, fast math calculations, string routines, and so on. These components can't really be classified as ASP components, however, because they don't interact with the ASP object model. What we need is a component that can read data coming from an HTML form through the Request object and write data using the Response object.</p>

<A NAME="1025"><h3>Writing ASP components in Visual Basic</h3></A>
<p>Writing an ASP component in Visual Basic is surprisingly simple梕xcept for one detail, it's exactly like writing a standard ActiveX component. The first thing you do is start an ActiveX DLL project, set the threading model to Apartment model, and check the Unattended Execution option in the General tab of the Project Properties dialog box.</p>

<p>
<IMG border=0 height=87 src="new.jpg" width=102>
</p>

<p>Visual Basic 6 offers a new option for components marked for unattended execution, the Retained In Memory flag. (See Figure 20-10.) When this option is enabled, the component is held in memory until the client process terminates. This capability is especially useful when you expect that your component will often be loaded in memory and then discarded because it saves Windows the overhead of continuously loading it from disk. When the component is running inside IIS or MTS, which typically serve hundreds or even thousands of clients, this option is going to speed up the overall performance noticeably.</p>

<p>
 <IMG border=0 height=364 src="F20ph10x.gif" width=404>
</p><p>
<!--caption--><B>Figure 20-10.</B> <i>The suggested Project settings for a typical ASP component.</i><!--/caption-->
</p>

<p>Now you have to add a reference to the ASP type library. Two such libraries are registered in a system on which IIS has been installed: the Microsoft Active Server Pages Object Library and the Microsoft Active Server Pages 2.0 ObjectContext Class Type Library. The former library includes the five main ASP objects, and the latter includes only the definition of the ObjectContext object, which you need only when developing ASP components that must run under MTS. Both type libraries are contained in the Asp.dll file.</p>

<p>As you see, up to this point there isn't really anything special about an ASP component. The only problem left to be resolved is this: How can the component get a reference to one of the five main ASP objects? Well, the script code might pass such an object to a property or a method of the component, soon after creating it, but this technique isn't recommended and isn't even necessary if you know the little secret about writing ASP components in Visual Basic.</p>

<p>As soon as the component is created by an ASP script, IIS invokes the component's <I>OnStartPage</I> method, if the component exposes such a method. Therefore the only thing to do is to add the code for this method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is a class-level variable.
Dim sc As ASPTypeLibrary.ScriptingContext

Sub OnStartPage(AspSC As ASPTypeLibrary.ScriptingContext)
    ' Save the reference for later.
    Set sc = AspSC
End Sub
</pre></td></tr></table></p>

<p>The ScriptingContext object passed to the <I>OnStartPage</I> method is nothing but the root object of the ASP type library. A quick trip to the object browser reveals that this object exposes five properties?I>Application</I>, <I>Request</I>, <I>Response</I>, <I>Server</I>, and <I>Session</I>梬hich are just the main elements of the ASP object model. It is therefore simple to set or retrieve a Session or Application variable or send HTML text by using the <I>Response.Write</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the component
Sub IncrementCounter(CounterName As String)
    sc.Application.Lock
    sc.Application(CounterName) = Application(CounterName) + 1
    sc.Application.Unlock
End Sub
</pre></td></tr></table></p>

<p>When the page that instantiated the component is about 
to be unloaded, the component receives an <i>OnEndPage</i> event, in which you close the connection and release the resources that you allocated in the <i>OnStartPage</i> event. But you'd usually use the <i>Terminate</i> event instead.</p>

<A NAME="1026"><h3>A real, useful component</h3></A>
<p>Now that you're nearing the end of this huge book about Visual Basic programming, you're ready for something more complex than an unsophisticated Hello-World-like ASP component. On the companion CD, you'll find the complete source code for the ASPSample.QueryToTable component, which accepts a connection string and a query string and automatically builds an HTML table that contains the result of the query against the specified data source. It even supports alignment and formatting on a field-by-field basis.</p>

<p>Before describing the source code, let me show you how you can use this custom component from an ASP script:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%    
Set tbl = Server.CreateObject("ASPSample.QueryToTable")
' Enter the next two lines as a single VBScript statement.
conn = "Provider=SQLOLEDB;Data Source=MyServer;" &amp;
    "Initial Catalog= Pubs;UserID=sa;Password=MyPwd"
tbl.Execute conn, "SELECT * FROM Authors WHERE State = 'CA'"
tbl.GenerateHTML
%&gt;
</pre></td></tr></table></p>

<p>It couldn't be simpler! The <I>Execute</I> method expects the connection string and the text of the SQL query, and the <I>GenerateHTML</I> method sends the generated HTML text to the page being built. You can fine-tune the format of the output table by using the component's <I>ShowRecNumbers</I> property (set it to True to display record numbers in the leftmost column) and <I>AddField</I> method, which lets you decide which fields appear in the table, the horizontal and vertical alignment attributes of the corresponding cells in the table, and the formatting of their values. The syntax of <I>AddField</I> method follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>AddField FldName, Caption, HAlign, VAlign, PrefixTag, PostfixTag
</pre></td></tr></table></p>

<p>To display a field using default options, you just need to pass the field's name:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  tbl.AddField "au_lname"
    tbl.AddField "au_fname"    %&gt;
</pre></td></tr></table></p>

<p>You can specify the caption of the column header (if it's different from the field's name) and the horizontal and vertical alignment attributes of the table cells like this:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  tbl.AddField "au_lname", "Last Name", "center", "middle"
    tbl.AddField "au_fname", "First Name", "center", "middle"    %&gt;
</pre></td></tr></table></p>

<p>Finally, you can format the cells by using the <I>PrefixTag</I> and <I>PostfixTag</I> arguments, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Display the State field using boldface characters.
    tbl.AddField "State", , "center", , "&lt;B&gt;", "&lt;/B&gt;"
    ' Display the ZIP field using boldface and italic attributes.
    tbl.AddField "ZIP", , "center", , "&lt;B&gt;&lt;I&gt;", "&lt;/I&gt;&lt;/B&gt;"       %&gt;
</pre></td></tr></table></p>

<p>The component doesn't validate the last two arguments; you must ensure that the tags you're passing form a valid HTML sequence. The field layout that you set with a sequence of <I>AddField</I> methods is preserved across consecutive queries, but you can clear the current layout by using the <I>ResetFields</I> method.</p>

<A NAME="1027"><h3>Implementing the component</h3></A>
<p>Now that you know what the component does, understanding how its source code works shouldn't be too difficult. The component holds all the information about the columns to be displayed in the Fields array of UDTs. The <I>AddField</I> method does nothing but store its arguments in this array. If the script calls the <I>Execute</I> method without first calling the <I>AddField</I> method, the component builds a default field layout.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Public Properties ------------------------
' True if Record numbers must be displayed
Public ShowRecNumbers As Boolean

' Private Members ---------------------------
Private Type FieldsUDT
    FldName As String
    Caption As String
    HAlign As String
    VAlign As String
    PrefixTag As String
    PostfixTag As String
End Type

' A reference to the ASP library entry point
Dim sc As ASPTypeLibrary.ScriptingContext
' The Recordset being opened
Dim rs As ADODB.Recordset
' Array information about the fields
Dim Fields() As FieldsUDT
' Number of elements in the Fields array
Dim FieldCount As Integer
</pre></td></tr></table></p>

<p>When the component is instantiated by an ASP script, its <I>OnStartPage</I> method is called. In this method, the component stores a reference to the ASPTypeLibrary.ScriptingContext object and initializes the Fields array:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the component is instantiated
' from within the ASP script.
Sub OnStartPage(AspSC As ASPTypeLibrary.ScriptingContext)
    ' Save the reference for later.
    Set sc = AspSC
    ResetFields
End Sub

' Reset the field information.
Sub ResetFields()
    Dim Fields(0) As FieldsUDT
    FieldCount = 0
End Sub
</pre></td></tr></table></p>

<p>The <I>Execute</I> method is just a wrapper around the ADO Recordset's <I>Open</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Execute an SQL query.
Function Execute(conn As String, sql As String)
    ' Execute the query.
    Set rs = New ADODB.Recordset
    rs.Open sql, conn, adOpenStatic, adLockReadOnly
End Function
</pre></td></tr></table></p>

<p>The <I>AddField</I> method does a minimal validation of its arguments and stores them in the first available element in the <i>Fields</i> array:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a field to the table layout.
Sub AddField(FldName As String, Optional Caption As String, _
    Optional HAlign As String, Optional VAlign As String, _
    Optional PrefixTag As String, Optional PostfixTag As String)
    ' Check the values.
    If FldName = "" Then Err.Raise 5

    ' Add to the internal array.
    FieldCount = FieldCount + 1
    ReDim Preserve Fields(0 To FieldCount) As FieldsUDT
    With Fields(FieldCount)
        .FldName = FldName
        .Caption = Caption
        .HAlign = HAlign
        .VAlign = VAlign
        .PrefixTag = PrefixTag
        .PostfixTag = PostfixTag
        
        ' The default caption is the field's name.
        If .Caption = "" Then .Caption = FldName
        
        ' The default horizontal alignment is "left."
        Select Case LCase$(.HAlign)
            Case "left", "center", "right"
            Case Else
                .HAlign = "left"
        End Select
        .HAlign = " ALIGN=" &amp; .HAlign
        
        ' The default vertical alignment is "top."
        Select Case LCase$(.VAlign)
            Case "top", "middle", "bottom"
            Case Else
                .VAlign = "top"
        End Select
        .VAlign = " VALIGN=" &amp; .VAlign
    End With
End Sub
</pre></td></tr></table></p>

<p>The heart of the QueryToTable component is the <I>GenerateHTML</I> method, which uses the contents of the Recordset and the layout information held in the <i>Fields</i> array to build the corresponding HTML table. Although this code might seem complex at first, it took me just a few minutes to build it. Notice that I obtained cleaner code by using a private <I>Send</I> procedure, which actually sends the HTML code to the Response object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Generate the HTML text for the table.
Sub GenerateHTML()
    Dim i As Integer, recNum As Long, f As FieldsUDT
    
    ' Initialize the Fields array if not done already.
    If FieldCount = 0 Then InitFields
    ' Restart from the first record.
    rs.MoveFirst
    
    ' Output the table header and the border.
    Send "&lt;TABLE BORDER=1&gt;"
    Send "  &lt;THEAD&gt;"
    Send "   &lt;TR&gt;"
    ' Insert a column for the record number, if requested.
    If ShowRecNumbers Then
        Send "    &lt;TH ALIGN=Center&gt;Rec #&lt;/TH&gt;"
    End If
    ' These are the fields' captions.
    For i = 1 To UBound(Fields)
        f = Fields(i)
        Send "    &lt;TH" &amp; f.HAlign &amp; "&gt;" &amp; f.Caption &amp; "&lt;/TH&gt;"
    Next
    Send "   &lt;/TR&gt;"
    Send "  &lt;/THEAD&gt;"
    Send " &lt;TBODY&gt;"
    
    ' Output the body of the table.
    Do Until rs.EOF
        ' Add a new row of cells.
        Send "  &lt;TR&gt;"
        ' Add the record number if requested.
        recNum = recNum + 1
        If ShowRecNumbers Then
            Send "   &lt;TD ALIGN=center&gt;" &amp; recNum &amp; "&lt;/TD&gt;"
        End If
        
        ' Send all the fields of the current record.
        For i = 1 To UBound(Fields)
            f = Fields(i)
            Send "   &lt;TD" &amp; f.HAlign &amp; f.VAlign &amp; "&gt;" &amp; f.PrefixTag &amp; _
                rs(f.FldName) &amp; f.PostfixTag &amp; "&lt;/TD&gt;"
        Next
        Send "  &lt;/TR&gt;"
        ' Advance to the next record.
        rs.MoveNext
    Loop
        
    ' Close the table.
    Send " &lt;/TBODY&gt;"
    Send "&lt;/TABLE&gt;"
End Sub

' Send a line of text to the output stream.
Sub Send(Text As String)
    sc.Response.Write Text
End Sub

' Initialize the Fields() array with suitable values.
Private Sub InitFields()
    Dim fld As ADODB.Field
    ResetFields
    For Each fld In rs.Fields
        AddField fld.Name
    Next
End Sub
</pre></td></tr></table></p>

<p>On the companion CD, you'll find the complete source code for this component and a Test.asp page that uses it. The great thing about writing ASP components in Visual Basic 6 is that you can debug them without having to compile them to a DLL. This is a little magic that the Visual Basic IDE does for us: IIS believes that the script is executing an in-process DLL while you're comfortably testing it in the environment, using the full range of debugging tools that Visual Basic provides. (See Figure 20-11.) An example of a table produced by the component is shown in Figure 20-12. I encourage you to augment the component's versatility by adding other properties and methods, for example, to control cell color, value formatting, and so on.</p>

<p>
<A href="javascript:fullSize('F20ph11x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=299 src="F20ph11.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-11.</B> <i>Add a breakpoint in the OnStartPage procedure, and then press F8 to single-step through the component's source code as the ASP script invokes its methods.</i><!--/caption-->
</p>

<p>
<A href="javascript:fullSize('F20ph12x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=303 src="F20ph12.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-12.</B> <i>An HTML table built by the sample component. Notice that you can refine and reexecute the query by entering text in the controls in the upper portion of the page.</i><!--/caption-->
</p>


<a name="A128"></a><h3>9.2.4 WebClasses</h3>

<A HREF="#A127">[Previous]</A> <A HREF="#A129">[Next]</A><P>

<A NAME="1028"><h1>WebClasses</h1></A>
<p>
<img src="new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 adds a new tool to your bag of Internet programming techniques: the WebClass component. A WebClass is an in-process component that runs inside IIS and that intercepts and then processes all the requests that clients make to an ASP document. Figure 20-13 diagrams how a WebClass works.</p>

<p>
<A HREF="javascript:fullSize('F20ph13x.htm')"> <img src="F20ph13.JPG" width=404 height=96 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-13.</B> <i>A WebClass acts as an intermediary between the browser and ASP.</i><!--/caption-->
</p>

<p>Before diving into the details, let me clarify one point: WebClasses can't do anything that you can't do already with an ASP script and a custom component written in Visual Basic (or another language capable of delivering ActiveX DLLs). The difference is in how the technologies work at a lower level and in how the programmer uses them. In a standard ASP application, the ASP script takes the control when the client browser requests an ASP document and relinquishes it when the resulting HTML page is sent back to the client. In a WebClass application, the WebClass comes into existence when the client browser references a page in the application, and from that point on it reacts to the actions that the user performs on the page, such as clicking a hyperlink or a Submit button.</p>

<p>A key advantage of WebClasses over traditional script-based and component-based ASP programming is that you develop a WebClass application entirely within the Visual Basic environment, so you have all the usual debugging tools at hand. Because a WebClass usually comprises multiple pages, it should be considered a higher level component. For example, a single WebClass can implement an entire online order management system and can therefore be reused in another application much easier than a collection of loosely coupled ASP pages can. Other evidence of WebClasses' higher level of abstraction is that you don't need to do anything special to maintain the state of a session between consecutive requests from users&#8212;such as use cookies or Session variables&#8212;because the WebClass does everything for you, even if at the expense of some scalability. (You can decide to disable this option and produce more scalable but stateless WebClass components.) Finally, unlike ASP scripts, the code for the WebClass is isolated from the HTML code that affects the appearance of its pages; therefore, it's easier to partition the task of building the application among developers and HTML authors.</p>

<A NAME="1029"><h2>First Impressions</h2></A>
<p>You create a WebClass by using a special designer provided with Visual Basic 6. Unlike the DHTMLPage designer, which lets you create an entire page from scratch without resorting to an external HTML editor, the WebClass designer is meant to import HTML pages created outside the Visual Basic environment. What the designer does is graphically display all the items in an HTML page that are capable of sending requests to the server, such as the ACTION attribute of a FORM tag or the HREF attribute of a hyperlink element. In general, all the tags and attributes that can contain a URL are candidates for being the source of a request to the server. You can then associate such items with actions that the WebClass will perform when that particular request is received. In a sense, this scenario is nothing but the Visual Basic event-driven programming model applied to IIS and ASP applications.</p>

<A NAME="1030"><h3>Creating an IIS project</h3></A>
<p>You create a WebClass by selecting the IIS Application project type from the project gallery. This template project includes one WebClass module and has all of the necessary project attributes already set for you. An IIS project is an ActiveX DLL project whose threading model is set to Apartment Threading and that contains one or more WebClass designer modules. In the General tab of the Project Properties dialog box, you'll also find that this project is marked for unattended execution (which makes sense, because it will run under IIS) and that the Retained In Memory flag is set. When this flag is set, the Visual Basic run-time library won't be unloaded even if no WebClass components are currently running in IIS. This arrangement allows the components to be instantiated very quickly when a request comes from a client.</p>

<p>WebClass modules have some properties of their own. They have a <I>Name</i> property (the name used inside the current project to reference the WebClass from Visual Basic code), a <I>NameInURL</i> property (the name used when referencing this class from HTML and ASP code), a <I>Public</i> property (can only be True), and a <I>StateManagement</i> property.</p>

<p>The <I>StateManagement</i> property indicates what happens between consecutive requests from a client. If this property is set to 1-wcNoState (the default value), the WebClass component is automatically destroyed after it sends a response to the client browser; if this property is set to 2-wcRetainInstance, the WebClass component is kept alive between consecutive requests from the same client. Each option has its pros and cons. If the instance of the WebClass is retained, all the variables in the WebClass module are automatically preserved between consecutive requests, which makes the programmer's job much easier. On the other hand, each component running on the server takes memory and CPU resources, so setting 1-wcNoState creates more scalable solutions&#8212;but at the cost of some added complexity in programming. (See the section &quot;<A HREF="#1046">State Management</A>&quot; later in this chapter for more details.)</p>

<p>A WebClass contains and manages one or more <I>WebItems</I>. Each WebItem corresponds to an HTML page that is sent back to the client browser. There are two types of WebItems: HTML template WebItems and custom WebItems. An HTML template WebItem is based on an existing HTML page that's used as a template for building the response page. This page is then sent to the client browser, usually after substituting one or more placeholders with data. A custom WebItem doesn't correspond to any existing HTML page, and it builds the page returned to the client browser using only code, typically with a series of <I>Response.Write</i> commands. A WebClass can contain only HTML template WebItems, only custom WebItems, or (more often) a mixture of the two types.</p>

<p>The first thing to do when working on an IIS application is to establish the directory structure of the project. To separate all the items in the project in an orderly manner, you need at least three directories:</p>

<UL>
<p><li>A directory for the HTML pages that will serve as the templates of your WebClass.</li></p>

<p><li>A directory for the Visual Basic source files. In this directory, the WebClass designer stores the modified HTML templates, that is, the HTML pages whose URL tags have been replaced with references to WebItems in the project.</li></p>

<p><li>A directory for deployment, in which you store the DLL produced by the compilation process, the main ASP document, all the HTM files that must distributed, and other ancillary files, such as the images used by HTML pages. This directory will also contain the main ASP file that represents the entry point for the WebClass application. When a browser references this file, the WebClass DLL is activated and the application starts its execution.</li></p>
</UL>
 
<p>You can use a single directory for the three different types of files used by the project if you want to, though it isn't usually a good idea. If you create an HTML template file in the same directory where the WebClass source file is located, the designer will automatically create a new HTML file whose name is obtained by appending a number to the original name. For example, if you have an Order.htm template file, the designer will create an Order1.htm file in the same directory. Such a rename operation doesn't occur if the original template file is located in a directory different from the one in which the WebClass project is stored. If you work with numerous template files, you'll prefer having those generated by the WebClass differentiated.</p>

<A NAME="1031"><h3>Adding HTML Template WebItems</h3></A>
<p>HTML Template WebItems are undoubtedly the simplest WebItems to work with. To create such a WebItem, you must have prepared an HTML template file using an HTML editor such as Microsoft FrontPage or Microsoft InterDev. When creating such a template file, you don't need to pay attention to the destination of hyperlinks and other URLs in the page because they'll be replaced by the WebClass designer anyway. The same applies to the ACTION attribute of forms, to the SRC attribute of the IMG tag, and other HTML attributes that can be assigned a URL. You can't directly associate an event with a button on a form, but you need to associate an event with the ACTION attribute of the form that contains that button. The type of the button must be SUBMIT.</p>

<p>Before importing any HTML template file, you must first save the IIS application to disk. This step is necessary because Visual Basic must know where the modified HTML template file is to be stored. As mentioned in the previous section, it's usually a good idea to keep the original HTML files in a separate directory so that you don't force Visual Basic to create a different name for the modified template file. After you've saved the project, you can import an HTML template file by clicking the fifth button from the left in the WebClass designer's toolbar. This operation creates a new HTML Template WebItem, which you can rename with a meaningful name: This is the name that will be used in code to refer to that WebItem.</p>

<p>Figure 20-14 shows the WebClass designer after importing two HTML template files. As you can see, the StartPage WebItem contains three items that can send requests to the server and that can raise an event in the WebClass: the BACKGROUND attribute of the BODY element and two hyperlinks. Even if the designer displays all the possible sources for requests, in most cases, you can focus on just a small subset of them&#8212;such as the hyperlinks, ACTION attributes in FORM tags, and SRC attributes in IMG tags. If the tag in the original HTML file is associated with an ID, this ID will be used to identify the tag in the designer; otherwise, the designer automatically generates unique IDs for each tag capable of raising an event. For example, the first hyperlink in the page that doesn't have an ID is assigned the <I>Hyperlink1</i> ID, the second hyperlink without an ID is assigned the <I>Hyperlink2</i> ID, and so on. Such IDs are temporary and aren't stored in the HTML file unless you connect the tag to an event. If you connect these tags to a WebItem, the ID becomes permanent and is stored in the HTML file.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
If the HTML template file contains errors&#8212;for example, unmatched opening and closing tags&#8212;you get an error when importing the template into the designer. In addition, you can only import forms whose METHOD attributes are set to POST because only forms of this type send the server a request that can be trapped by the WebClass. If you add an HTML template WebItem containing a form that uses the GET method, the WebClass designer displays a warning and then automatically modifies the form's METHOD attribute to the POST value.
</blockquote></div></p>

<p>
<A HREF="javascript:fullSize('F20ph14x.htm')"> <img src="F20ph14.JPG" width=404 height=199 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-14.</B> <i>The WebClass designer, after creating two HTML Template WebItems.</i><!--/caption-->
</p>

<A NAME="1032"><h3>Connecting a WebItem</h3></A>
<p>To activate one of these potential sources for requests (requests that become events in the WebClass), you must connect it to a WebItem or a custom event, which you do by right-clicking on such a source in the right pane of the WebClass designer. For now, let's focus on the Connect To WebItem menu command, which brings up the dialog box shown in Figure 20-15. In this dialog box, you can select any of the WebItems currently defined in the WebClass. (You can't connect an attribute to a WebItem defined in another WebClass.) After you close the dialog box, the selected WebItem's name appears in the Target column in the right pane of the designer, near the attribute it has been connected to.</p>

<p>
<img src="F20ph15.GIF" width=338 height=279 border=0>
<p>
<!--caption--><B>Figure 20-15.</B> <i>This dialog box appears when you connect an attribute of a tag in an HTML template to a WebItem defined in the WebClass.</i><!--/caption-->


<p>You can't edit the original HTML template from inside the Visual Basic project, but you can quickly invoke your favorite HTML editor on that page, using a button on the designer's toolbar. You can configure which editor should be launched by setting the External HTML Editor option in the Advanced tab of the Options dialog box of the Tools menu. The Visual Basic environment continuously monitors the date and time of HTML template files, and as soon as it finds that one of them has changed, it asks you if you want to reload and parse the new version of the file into the designer. You can also refresh a template in another way, by right-clicking on an HTML Template WebItem and choosing the Refresh HTML Template command from the pop-up menu. This command is useful if for some reason the Visual Basic environment doesn't correctly recognize that the HTML template file has been changed. The designer is usually able to maintain all the associations you set previously, so you don't have to reconnect attributes to WebItems each time you edit the HTML template file.</p>

<p>If the HTML file references other HTML files, these files should be manually copied in the same directory as the WebClass project or in one of its subdirectories. For the same reason, all URLs need to be relative to the current directory so that you can freely copy these files to the deployment directory without having to edit them. Using absolute URLs is acceptable in only two cases: when you refer to files that are always in the same position in your Web site and when you refer to files located at another Web site.</p>

<A NAME="1033"><h3>Writing code</h3></A>
<p>You must write some code inside the WebClass designer before running the project. This code is necessary because the WebClass doesn't know what to do when it is activated, and it doesn't know which WebItem should be sent to the client when the WebClass application is first activated.</p>

<p>You decide what happens when the WebClass application is activated&#8212;that is, when the browser references its main ASP file&#8212;by writing code in the WebClass's <I>Start</i> event. In this event, you typically redirect the browser to a WebItem by assigning a WebItem reference to the WebClass's <I>NextItem</i> property, as in the following piece of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the WebClass is activated for the first time,
' that is, when a client browser references its main ASP file.
Private Sub WebClass_Start()
    Set NextItem = StartPage
End Sub
</pre></td></tr></table></p>

<p>Starting the processing of a WebItem doesn't automatically send it to the client's browser. In fact, when a WebItem is assigned to the <I>NextItem</i> property, what happens is that the WebClass fires it's the WebItem's <I>Respond</i> event. In this event procedure, you might want to do additional processing&#8212;for example, you might query a database and retrieve the values that must be displayed in the client's browser. The assignment to the <I>NextItem</i> property doesn't alter the execution flow immediately because Visual Basic fires the target WebItem's <I>Respond</i> event only when the current event procedure has completed.</p>

<p>When you're ready to send the data to the browser, you can invoke the WebItem's <I>WriteTemplate</i> method as in the following piece of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the user jumps to the StartPage page.
Private Sub StartPage_Respond()
    StartPage.WriteTemplate
End Sub
</pre></td></tr></table></p>

<p>At this point, the client's browser displays the StartPage.htm page. In this particular case, the start page doesn't contain any portions that are to be substituted, so the WebClass sends it unmodified to the client. (This case isn't the norm, however.) When the user clicks on a hyperlink, the WebClass receives the <I>Respond</i> event of the WebItem that is connected to that hyperlink. Again, you reply to this event by executing the <I>WriteTemplate</i> method of the involved WebItem:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the user clicks the hyperlink on the 
' StartPage page that is linked to the QueryOrder WebItem.
Private Sub QueryOrder_Respond()
    QueryOrder.WriteTemplate
End Sub
</pre></td></tr></table></p>

<p>At first you might be puzzled by the amount of code you have to write just to run a simple application like this one. Don't forget, however, that the WebClass designer really shines when the pages sent back to the client contain dynamic data.</p>

<p>You can run the application built so far: the Visual Basic environment will start IIS and will load the start page into Internet Explorer. Set a breakpoint in the <I>WebClass_Start</i> event to see what happens when you click on a hyperlink. Remember that you can debug a WebClass only on the machine where IIS is running. Also, it is generally preferable to have only one instance of the browser running during the debug phase because Visual Basic doesn't keep track of which instance is showing the output coming from the WebClass, and all the instances might be affected during the debug session.</p>

<A NAME="1034"><h3>Extending the example</h3></A>
<p>The best way to learn how to use WebClasses is to see a complete example in action. For this reason, I've prepared a nontrivial IIS application based on the NorthWind database that comes with SQL Server 7. This sample application lets users do three different things:</p>

<UL>
<p><li>Users can query the Products database, filter products on their categories, and search them by product name or supplier name.</li></p>

<p><li>After they've found a product of interest, they can specify how many items they want to order and then add the product to their shopping bag list. When the order is complete, the users can confirm it by specifying their name, address, and other data requested. The customer's data is automatically added to the Customers table (if it isn't already there). When the order is completed, the system assigns an ID to it.</li></p>

<p><li>At any time, the user can track down the current status of an order placed previously by using the ID obtained when the order was completed.</li></p>
</UL>
 
<p>Figure 20-16 sketches the outline of the sample application. As you can see, there are eight template WebItems and two custom WebItems. The figure doesn't show all the possible hyperlinks, such as the hyperlinks that bring users back to the StartPage WebItem at the end of a search or after the confirmation or cancellation of an order.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
To have the sample application work correctly, you must create a system DSN named &quot;NorthWind&quot; that points to the NorthWind SQL Server 7 database. If you don't have SQL Server 7 installed, you can create a version of this database that works under SQL Server 6.5 database using Access's Upsizing Wizard to convert the NWind.mdb database.
</blockquote></div></p>

<p>
<A HREF="javascript:fullSize('F20ph16x.htm')"> <img src="F20ph16.JPG" width=404 height=350 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-16.</B> <i>The structure of the sample application.</i><!--/caption-->
</p>

<p>The most complex WebItem in the application is Products, for many reasons. This WebItem has to display the input fields for entering search criteria and then display a table with the results of the current search. In general, if the page contains an HTML table with a variable number of rows, you need a custom WebItem because you have to generate the table dynamically using the <I>Response.Write</i> method, exactly as you would in a regular ASP application that doesn't rely on WebClasses.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
As I'm writing this, Microsoft is launching a new Web site at <I><a href="http://vblive.rte.microsoft.com" target="_window2">http://vblive.rte.microsoft.com</a></I>. This site is completely written using WebClasses, and it's the best place to see the potential this technology offers. Even more astonishing is that you can download the complete Visual Basic source code of the site, so you can learn dozens of tricks to make the best use of WebClasses.
</blockquote></div></p>

<A NAME="1035"><h2>WebClass Basic Techniques</h2></A>
<p>Now that you have a basic idea of what a WebClass is, let's see how you can use it to solve the most common problems you'll encounter when developing IIS applications.</p>

<A NAME="1036"><h3>Accessing the ASP object model</h3></A>
<p>One of the advantages of the WebClass programming model is that all the objects in the ASP object model are accessible as properties of the WebClass itself. For example, to write HTML code to the output stream, you can use the Response object, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Response.Write &quot;&lt;BODY&gt;&quot; &amp; vbCrLf
</pre></td></tr></table></p>

<p>Besides the main ASP objects&#8212;that is, Request, Response, Server, Application, and Session&#8212;the WebClass also makes another object available: the BrowserType object. This object lets the WebClass query the capabilities of the client browser, such as its support for ActiveX controls, cookies, and VBScript. All these capabilities are exposed as properties, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If BrowserType.VBScript Then
    ' Send VBScript code to the client browser.
    ...
ElseIf BrowserType.JavaScript Then
    ' Send JavaScript code to the client browser.
    ...
End If
</pre></td></tr></table></p>

<p>Other supported properties, whose names are self-explanatory, are <I>Frames</I>, <I>Tables</I>, <I>Cookies</I>, <I>BackgroundSounds</I>, <I>JavaApplets</I>, <I>ActiveXControls</I>, <I>Browser</i> (can return &quot;IE&quot; or &quot;Netscape&quot;), <I>Version</I>, <I>MajorVersion</I>, <I>MinorVersion</I>, and <I>Platform</i> (can return &quot;Win95&quot; or &quot;WinNT&quot;). This object relies on the Browscap.ini file that is installed with IIS in its main directory. Load it into an editor to get an idea of which properties are supported and the possible values they can have. Also remember to periodically visit Microsoft's Web site to download the most recent version of this file, which includes information on the newer browsers. You can also find an up-to-date version of this file at other Web sites, such as <I><a href="http://www.cyscape.com/browscap" target="_window2">http://www.cyscape.com/browscap</a></I>.</p>

<A NAME="1037"><h3>WebClass events</h3></A>
<p>As with all classes, WebClass modules have their own life cycle. These are the relevant events in the life of a WebClass:</p>

<UL>
<p><li>The <I>Initialize</i> event fires when the WebClass is first instantiated. If the <I>StateManagement</i> property is set to wcNoState, the WebClass is re-created each time a request comes from the client browser; otherwise, this event fires only at the first request coming from a given client. Remember that in the latter case the same instance of the WebClass will serve only the requests coming from a given client.</li></p>

<p><li>The <I>BeginRequest</i> event fires immediately after the <I>Initialize</i> event, and in general it is invoked any time the WebClass receives a request from the client browser. Typically, you use this event to retrieve state information if the <I>StateManagement</i> property is set to wcNoState. (See the &quot;<A HREF="#1046">State Management</A>&quot; section later in this chapter for additional information on this issue.)</li></p>

<p><li>The <I>Start</i> event fires when the client browser activates the WebClass application for the first time&#8212;that is, when it requests to download the main ASP file that hosts the WebClass and that represents the entry point for the application. In general, you shouldn't count on this event, however, because the client might reference an HTML page that corresponds to a template WebItem. If this happens, the <I>Start</i> event doesn't fire and the WebClass fires the <I>Respond</i> event for the corresponding WebItem instead.</li></p>

<p><li>The <I>EndRequest</i> event fires when the WebClass has finished processing an HTTP request and has sent a page back to the client browser. You can use this event to release any resource allocated in the <I>BeginRequest</i> event procedure, to close any database, and to perform other cleanup tasks.</li></p>

<p><li>The <I>Terminate</i> event fires immediately before the WebClass is destroyed. Depending on the value of the <I>StateManagement</i> property, this event might occur only once during the interaction with a given client browser (if <I>StateManagement</i> is set to wcRetainInstance), or it can occur after each <I>EndRequest</i> event (if <I>StateManagement</i> is set to wcNoState). If <I>StateManagement</i> is set to wcRetainInstance, a WebClass instance is released when the WebClass invokes the <I>ReleaseInstance</i> method.</li></p>

<p><li>The <I>FatalErrorResponse</i> event fires when a fatal error occurs, for example, because of an internal error in the run-time DLL or because the WebClass can't find the appropriate WebItem to send back to the client. In these cases, you can use this event to send a custom error message to the client, but you can't prevent the application from being shut down.</li></p>
</UL>
 
<p>WebClasses offer no <I>Load</i> and <I>Unload</i> events; you can use the <I>BeginRequest</i> and <I>EndRequest</i> events for performing the tasks that you would typically perform in the <I>Load</i> and <I>Unload</i> events, respectively.</p>

<A NAME="1038"><h3>Tag replacement</h3></A>
<p>One of the advantages of WebClasses over plain ASP programming is that you don't need to bury script code inside the HTML body of a page to create dynamic contents. At least for the simplest cases, WebClasses offer a better way.</p>

<p>If you need to send back to the client browser an HTML page that contains one or more variable parts&#8212;such as the name of the user, the total amount of an order, the details about a product&#8212;you just need to insert a pair of special tags in the HTML template page. When the WebClass processes the template, typically as the result of a <I>WriteTemplate</i> method, the corresponding WebItem object receives a series of <I>ProcessTag</i> events, one for each pair of the special tags. Inside this event, you can assign a value to a parameter, and that value will replace the text between the tags.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The <I>WriteTemplate</i> method supports an optional <I>Template</i> argument, which lets you specify a different template to be returned to the client. This argument is useful when you have to choose among several templates with a number of events in common.
</blockquote></div></p>

<p>By default, the special tags that fire the <I>ProcessTag</i> events are &lt;WC@tagname&gt; and &lt;/WC@tagname&gt;. <I>WC@</i> is the tag prefix and is the same for all the tags of a given WebItem; <I>tagname</I> can vary from tag to tag and is used inside the <I>ProcessTag</i> event procedure to identify which particular pair of tags is to be replaced. Here's a fragment of an HTML template page that contains two pairs of such tags, which will be replaced by the user name and the current date and time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;&lt;BODY&gt;
Welcome back, &lt;WC@USERNAME&gt;Username&lt;/WC@USERNAME&gt;. &lt;P&gt;
Current date/time is &lt;WC@DATETIME&gt;&lt;/WC@DATETIME&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</pre></td></tr></table></p>

<p>The text embedded between the opening and closing WC@ tag is the tag contents. Here's the code in the WebClass module that processes these tags and replaces them with meaningful information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This code assumes that the previous template is associated
' with a WebItem named WelcomeBack.
Private Sub WelcomeBack_ProcessTag(ByVal TagName As String, _
    TagContents As String, SendTags As Boolean)
    Select Case TagName
        Case &quot;WC@USERNAME&quot;
            ' Replace with the user's name, held in a Session variable.
            TagContents = Session(&quot;UserName&quot;)
        Case &quot;WC@DATETIME&quot;
            ' Replace with the current date and time.
            TagContents = Format$(Now)
    End Select
End Sub
</pre>
</td></tr></table></p>

<p>On entry to the event, the <I>TagContents</i> parameter holds the text found between the opening and closing WC@ tags. In most cases, you use this parameter only to output the replacement value, but nothing prevents you from using it to discern which kind of replacement should be done. For example, the QueryResults WebItem in the sample application on the companion CD uses a single tag&#8212;WC@FIELD&#8212;and uses the value of the <I>TagContents</i> parameter to retrieve the name of the database field that will be used to fill the various cells of a table. As you can see in the following code snippet, this approach simplifies the structure of the <I>ProcessTag</i> event procedure because you don't need to test the <I>TagName</i> parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The module-level rs variable points to the record that holds the results.
Private Sub QueryResults_ProcessTag(ByVal TagName As String, _
    TagContents As String, SendTags As Boolean)
    If rs.EOF Then
        ' Don't display anything if there isn't a current record.
        TagContents = &quot;&quot;
    ElseIf TagContents = &quot;Freight&quot; Then
        ' This field needs special formatting.
        TagContents = FormatCurrency(rs(TagContents))
    Else
        ' All other fields can be output as they are, but we need to
        ' account for Null fields.
        TagContents = rs(TagContents) &amp; &quot;&quot;
    End If
End Sub
</pre></td></tr></table></p>

<p>An example of a result HTML page sent to the client browser is shown in Figure 20-17. Here are a few other details that concern tag substitution inside the <I>ProcessTag</i> event:</p>

<UL>
<p><li>You can change the WC@ tag prefix if you want to. This string corresponds to the <I>TagPrefix</i> property of the WebItem object and can be changed both at design time in the Properties window and at run time through code, as here:</li></p>

<p><table width="95%" cellpadding="5"><tr><td>
<pre>QueryResults.TagPrefix = &quot;QR@&quot;
</pre></td></tr></table></p>
 
<p>The readmevb.htm file that comes with Visual Basic 6 suggests changing the default tag prefix to <I>WC:</I> (but without explaining the reason for doing so). In the sample application, I retained the default WC@ without any adverse effects, but in production code you should probably follow this suggestion.</p>

<p><li>If an HTML template doesn't contain any replacement tag, you can improve the execution speed slightly by setting the <I>TagPrefix</i> property to an empty string; this informs the WebClass that no replacements are needed, and the parsing process is skipped.</li></p>

<p><li>The <I>SendTags</I> parameter is set to False on entry to the <I>ProcessTag</i> event procedure, which means that the opening and closing tags are discarded and aren't sent to the output stream. If you set this parameter to True, the replacement tags are included in the output stream. Even if these tags don't usually affect the appearance of the text displayed in the browser, there's no point in setting the <I>SendTags</i> parameter to True unless you also set the <I>ReScanReplacements</i> property to True. (See the next entry.)</li></p>

<p><li>The <I>ProcessTag</I> event fires once for each pair of replacement tags found in the HTML template. In some cases, you might want to do multiple passes, for example, when in the first pass you leave the original replacement tags or add new ones. To force the WebClass to make multiple passes, you must set the WebItem's <I>ReScanReplacements</i> property to True. You can set this property both at design time and at run time.</li></p>
 
<p>
<A HREF="javascript:fullSize('F20ph17x.htm')"> <img src="F20ph17.JPG" width=404 height=248 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-17.</B> <i>The results of a successful query on an OrderID, as they appear in the client's browser.</i><!--/caption-->
</p>
</ul>

<A NAME="1039"><h3>Custom events</h3></A>
<p>Not all the requests the browser sends to the server can be directly mapped to a WebItem. In most cases, in fact, you'll probably want to process the request with some custom code and then decide which WebItem should be processed. In some cases, you don't even want to move to another WebItem, for example, when you process the data in a form and find that the information the user entered is incomplete or incorrect. In these situations, you need a custom event.</p>

<p>To create a custom event, you must right-click in the right pane of the WebClass designer on an attribute that is a candidate as an event source and select the Connect To Custom Event menu command. This operation creates the custom event and links the attribute to it in a single operation. You can then rename the custom event in the left pane of the designer, and the right pane will automatically update to reflect the new name. After you've created the custom event, you can double-click on it to enter some code for processing it. (You can also issue the View Code command from the pop-up menu.)</p>

<p>In the sample application provided on the companion CD, any time I need to process the Submit button in a form, I create a <I>Submit</i> custom event that processes the data the user entered and redisplays the same page&#8212;but with a suitable error message&#8212;if the data is incomplete or incorrect. For example, the following code in the <I>Submit</i> event of the QueryOrder WebItem checks whether the OrderID the user entered is an empty string and then retrieves the record in the Orders table that contains the information about that particular order. Notice that if the OrderID is empty or doesn't correspond to an existing order, the routine stores an error message in the <I>QueryOrderMsg</i> variable and then reprocesses the QueryOrder WebItem. This WebItem contains one replacement tag, which serves to display the error message (if an error message was stored in the <I>QueryOrderMsg</I> variable):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The message that appears on top of the QueryOrder page
Dim QueryOrderMsg As String

' This event fires when the user enters an OrderID in the Query
' page and clicks the Submit button.
Private Sub QueryOrder_Submit()
    ' Don't accept a query with an empty order ID.
    If Request.Form(&quot;txtOrderID&quot;) = &quot;&quot; Then
        QueryOrderMsg = &quot;Please insert an Order ID&quot;
        QueryOrder.WriteTemplate
        Exit Sub
    End If
    
    OpenConnection
    ' This Recordset has to retrieve data from three different tables.
    rs.Open &quot;SELECT OrderID, Customers.CompanyName As CompanyName,&quot; _
        &amp; &quot; OrderDate, RequiredDate, ShippedDate, Freight, &quot; _
        &amp; &quot; Shippers.CompanyName As ShipVia, &quot; _
        &amp; &quot;FROM Orders, Customers, Shippers &quot; _
        &amp; &quot;WHERE Orders.CustomerID = Customers.CustomerID &quot; _
        &amp; &quot;AND Orders.ShipVia = Shippers.ShipperID &quot; _
        &amp; &quot;AND Orders.OrderID = &quot; &amp; Request.Form(&quot;txtOrderID&quot;)
    If rs.EOF Then
        ' No record matches the search criteria.
        CloseConnection
        QueryOrderMsg = &quot;OrderID not found&quot;
        QueryOrder.WriteTemplate
        Exit Sub
    End If
    ' If everything is OK, display the results.
    Set NextItem = QueryResults
End Sub

Private Sub QueryResults_Respond()
    ' Show the results, and then close the connection.
    QueryResults.WriteTemplate
    CloseConnection
End Sub
</pre></td></tr></table></p>

<p>(See the previous section for the source code of the <I>QueryResults_ProcessTag</i> event procedure.) Two separate routines perform the actual opening and closing of the database connection:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Open the connection to the database.
Private Sub OpenConnection()
    ' Close the Recordset if necessary.
    If rs.State And adStateOpen Then rs.Close
    ' If the connection is closed, open it.
    If (cn.State And adStateOpen) = 0 Then
        cn.Open &quot;DSN=NorthWind&quot;
        Set rs.ActiveConnection = cn
    End If
End Sub

' Close the Recordset and the connection.
Private Sub CloseConnection()
    If rs.State And adStateOpen Then rs.Close
    If cn.State And adStateOpen Then cn.Close
End Sub
</pre></td></tr></table></p>

<p>Here's an important point to keep in mind: In general, you shouldn't store information in WebClass variables to share values among distinct event procedures, because if the <I>StateManagement</i> property is set to wcNoState, the WebClass is destroyed between consecutive calls and so are the values in the variables. The code above seems to violate this rule because it stores information in the <I>QueryOrderMsg</I>, <I>cn</I>, and <I>rs</i> variables. If you look more closely, however, you'll see that this information is never maintained across consecutive requests from clients, so this method of passing data is safe. For example, the <I>QueryOrder_Submit</i> event assigns a string to the <I>QueryOrderMsg</I> variable and then invokes the <I>QueryOrder.WriteTemplate</i> method. This method immediately fires the <I>QueryOrder_ProcessTag</i> event procedure, in which that variable is used. The same reasoning applies to the ADO Recordset that is opened in the <I>QueryOrder_Submit</i> event and closed in the <I>QueryResults_Respond</i> event.</p>

<A NAME="1040"><h3>Custom WebItems</h3></A>
<p>As I mentioned earlier, there are two different types of WebItems: template WebItems and custom WebItems. Whereas template WebItems are always associated with an HTML template file, custom WebItems are made of Visual Basic code and generate an HTML page by using plain <I>Response.Write</i> methods. Needless to say, working with custom WebItems is more difficult than using template WebItems. Nevertheless, using custom WebItems pays off in terms of greater flexibility. For example, a custom WebItem is usually necessary when you want to create a table of results and you don't know in advance how many rows the table has.</p>

<p>A custom WebItem can be the target of an event from a template WebItem, and it exposes the <I>Respond</i> event and custom events as template WebItems do. For example, the Products custom WebItem in the sample application is the target of a hyperlink in the StartPage WebItem. The purpose of the Products WebItem is to provide a form in which the user can select a product category from a combo box control and enter the first characters of the desired product's name. (See Figure 20-18.) At first, you might think that you can display such a form using a template WebItem, but a closer look reveals that you need a custom WebItem because you have to fill the products combo box with the list of the product categories, something you can't do with the simple replacement approach permitted by template WebItems. The <I>Products_Respond</i> event procedure uses an auxiliary routine, named <I>BuildProductsForm</I>, that actually creates the form; the reason for using a separate procedure will become clear later:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the Products WebItem is reached
' from the Start page.
Private Sub Products_Respond()
    ' Display the Products form.
    BuildProductsForm False
End Sub

' Dynamically build the Products form; if the argument is True,
' the three controls are filled with data coming from Session variables.
Private Sub BuildProductsForm(UseSessionVars As Boolean)
    Dim CategoryID As Long, ProductName As String, SupplierName As String
    Dim selected As String
    If UseSessionVars Then
        CategoryID = Session(&quot;cboCategory&quot;)
        ProductName = Session(&quot;txtProduct&quot;)
        SupplierName = Session(&quot;txtSupplier&quot;)
    Else
        CategoryID = -1
    End If
    
    ' Build the page dynamically.
    Send &quot;&lt;HTML&gt;&lt;BODY&gt;&quot;
    Send &quot;&lt;H1&gt;Search the products we have in stock&lt;/H1&gt;&quot;
    Send &quot;&lt;FORM action=&quot;&quot;@@1&quot;&quot; method=POST id=frmSearch name=frmSearch&gt;&quot;, _
        URLFor(&quot;Products&quot;, &quot;ListResults&quot;)
    Send &quot;Select a category and/or type the first characters of the &quot; _
        &amp; &quot;product's name or the supplier's name&lt;P&gt;&quot;
    Send &quot;&quot;
    ' We need a table for alignment purposes.
    Send &quot;&lt;TABLE border=0 cellPadding=1 cellSpacing=1 width=75%&gt;&quot;
    Send &quot;&lt;TR&gt;&quot;
    Send &quot;  &lt;TD&gt;&lt;DIV align=right&gt;Select a category&amp;nbsp; &lt;/DIV&gt;&lt;/TD&gt;&quot;
    Send &quot;  &lt;TD&gt;&lt;SELECT name=cboCategory style=&quot;&quot;HEIGHT: 22px; &quot; _
        &amp; &quot;WIDTH: 180px&quot;&quot;&gt;&quot;

    ' Fill the combo box with category names.
    ' The first item is selected only if CategoryID is -1.
    selected = IIf(CategoryID = -1, &quot;SELECTED &quot;, &quot;&quot;)
    Send &quot;&lt;OPTION &quot; &amp; selected &amp; &quot;VALUE=-1&gt;(All categories)&quot;
    ' Then add all the records in the Categories table.
    OpenConnection
    rs.Open &quot;SELECT CategoryID, CategoryName FROM Categories&quot;
    ' Add all the categories to the combo box.
    Do Until rs.EOF
        selected = IIf(CategoryID = rs(&quot;CategoryID&quot;), &quot;SELECTED &quot;, &quot;&quot;)
        Send &quot;    &lt;OPTION @@1 value=@@2&gt;@@3&lt;/OPTION&gt;&quot;, selected, _
            rs(&quot;CategoryID&quot;), rs(&quot;CategoryName&quot;)
        rs.MoveNext
    Loop
    rs.Close
    Send &quot;&lt;/SELECT&gt;&quot;
    Send &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
    
    ' Add the txtProduct text box, and fill it with the correct value.
    Send &quot;&lt;TR&gt;&quot;
    Send &quot; &lt;TD&gt;&lt;DIV align=right&gt;Product name&amp;nbsp; &lt;/DIV&gt;&lt;/TD&gt;&quot;
    Send &quot; &lt;TD&gt;&lt;INPUT name=txtProduct value=&quot;&quot;@@1&quot;&quot; style=&quot;&quot;HEIGHT: &quot; _
        &amp; &quot; 22px; WIDTH: 176px&quot;&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&quot;, ProductName
    Send &quot;&lt;TR&gt;&quot;
    Send &quot; &lt;TD&gt;&lt;DIV align=right&gt;Supplier&amp;nbsp;&lt;/DIV&gt;&quot;
    Send &quot; &lt;TD&gt;&lt;INPUT name=txtSupplier value=&quot;&quot;@@1&quot;&quot; style=&quot;&quot;HEIGHT: &quot; _
        &amp; &quot;22px; WIDTH: 177px&quot;&quot;&gt;&quot;, SupplierName
    Send &quot;&lt;TR&gt;&lt;TD&gt;&lt;TD&gt;&quot;
    Send &quot;&lt;TR&gt;&quot;
    Send &quot; &lt;TD&gt;&lt;DIV align=right&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/TD&gt;&quot;
    Send &quot; &lt;TD&gt;&lt;INPUT type=submit value=&quot;&quot;Search&quot;&quot; id=submit1 &quot; _
        &amp; &quot;style=&quot;&quot;HEIGHT: 25px; WIDTH: 90px&quot;&quot;&gt;&quot;
    If BrowserType.VBScript Then
        Send &quot;     &lt;INPUT type=button value=&quot;&quot;Reset fields&quot;&quot; id=btnReset&quot; _
            &amp; &quot; Name=btnReset style=&quot;&quot;HEIGHT: 25px; WIDTH: 90px&quot;&quot;&gt;&quot;
    End If
    Send &quot;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;&lt;/P&gt;&lt;P&gt;&lt;/P&gt;&quot;
    Send &quot;&lt;/TABLE&gt;&quot;
    Send &quot;&lt;/FORM&gt;&quot;
    Send &quot;&lt;HR&gt;&quot;

    ' Insert client-side script for the Reset Fields button.
    If BrowserType.VBScript Then
        Send &quot;&lt;SCRIPT LANGUAGE=VBScript&gt;&quot;
        Send &quot;Sub btnReset_onclick()&quot;
        Send &quot;   frmSearch.cboCategory.Value = -1&quot;
        Send &quot;   frmSearch.txtProduct.Value = &quot;&quot;&quot;&quot;&quot;
        Send &quot;   frmSearch.txtSupplier.Value = &quot;&quot;&quot;&quot;&quot;
        Send &quot;End Sub&quot;
    End If
    Send &quot;&lt;/SCRIPT&gt;&quot;

    ' If this is a blank form, we must complete it.
    If Not UseSessionVars Then
        Send &quot;&lt;P&gt;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;Go Back to the Welcome page&lt;/A&gt;&quot;, _
            URLFor(Default)
        Send &quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;
    End If
End Sub
</pre></td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F20ph18x.htm')"> <img src="F20ph18.JPG" width=404 height=248 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-18.</B> <i>The form produced by the Products custom WebItem. The combo box control contains all the categories in the Categories table in the NorthWind database.</i><!--/caption-->
</p>

<p>You'll probably agree that this isn't what you'd call &quot;readable code.&quot; Still, it didn't take me much effort to create it. In fact, I just ran Microsoft InterDev (you can use your HTML editor of choice, of course) and created a sample form with three controls inside a table. (I used a table only for alignment purposes.) Then I imported the code in the Visual Basic code editor and wrote some code &quot;around&quot; the static HTML text. The entire process took about 10 minutes.</p>

<p>The previous routine has many interesting characteristics. First of all, to streamline the Visual Basic code, I created an auxiliary routine, named <I>Send</I>, which sends data to the output stream by using the <I>Response.Write</i> method. But the <I>Send</i> routine does a lot more; it also provides a way to dynamically replace variable portions in the output string, based on numbered placeholders. The routine is even capable of dealing with replaced arguments that occur inside a quoted string. These arguments must be processed in a special way because any double quote character inside them must be doubled in order to be displayed correctly on the client's browser. The complete source code of the routine follows. As you can see, the code isn't specific to this particular program and can therefore be easily reused in any other WebClass application.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Send a string to the output stream, and substitute @@n placeholders
' with the arguments passed to the routine. (@@1 is replaced by the
' first argument, @@2 by the second argument, and so on.) Only one
' substitution per argument is permitted. If the @@n placeholder
' is enclosed with double quotes, any double quote is replaced by
' two consecutive double quotes.
Private Sub Send(ByVal Text As String, ParamArray Args() As Variant)
    Dim i As Integer, pos As Integer, placeholder As String
    For i = LBound(Args) To UBound(Args)
        placeholder = &quot;@@&quot; &amp; Trim$(Str$(i + 1))
        ' First search the quoted placeholder.
        pos = InStr(Text, &quot;&quot;&quot;&quot; &amp; placeholder)
        If pos Then
            ' Double all the quotes in the argument.
            pos = pos + 1
            Args(i) = Replace(Args(i), &quot;&quot;&quot;&quot;, &quot;&quot;&quot;&quot;&quot;&quot;)
        Else
            ' Else, search the unquoted placeholder.
            pos = InStr(Text, placeholder)
        End If
        If pos Then
            ' If a placeholder found, substitute it with an argument.
            Text = Left$(Text, pos - 1) &amp; Args(i) &amp; Mid$(Text, pos + 3)
        End If
    Next
    ' Send the result text to the output stream.
    Response.Write Text &amp; vbCrLf
End Sub
</pre></td></tr></table></p>

<p>Another intriguing technique used in the <I>BuildProductsForm</i> routine is sending a piece of VBScript code to be processed on the client workstation when the user clicks the Reset Fields button. You can't rely on a standard button with TYPE=Reset because such a button would restore the contents that the fields have when the form is received from the server, and in some cases the server doesn't send blank fields to the client. For this reason, the only way to enable users to clear the fields on the form is to provide a button and associate a client-side script with it. Mixing server-side and client-side code is a powerful technique, and it also provides maximum scalability because it frees the server from the tasks that the client machine can conveniently perform. The client browser might not be capable of executing VBScript code, however, and for this reason the WebClass sends the client-script code only if the <I>BrowserType.VBScript</i> property returns True. A better approach is to send JavaScript code, which both Microsoft and Netscape browsers should accept.</p>

<A NAME="1041"><h3>The <I>URLFor</I> method</h3></A>
<p>The last point of interest in the <I>BuildProductsForm</i> routine is where it defines what happens when the user clicks the Search button. As you know, both template WebItems and custom WebItems can expose custom events, which appear in the left pane of the WebClass designer. The way you create and invoke such custom events, however, is different for the two types of WebItems. When working with template WebItems, you implicitly create a custom event when you select the Connect To Custom Event menu command in the right pane of the designer. A custom WebItem creates its HTML code dynamically at run time, and therefore the designer can't display anything in the right pane. For this reason, you can create custom events for custom WebItems only manually, that is, by right-clicking on the WebItem and selecting the Add Custom Event menu command. (You can manually add a custom event to a template WebItem as well, if necessary.)</p>

<p>The Products WebItem in the sample application exposes two custom events, <I>ListResults</i> and <I>RestoreResults</I>, in addition to its standard <I>Respond</i> event. (See Figure 20-19.) The <I>ListResults</I> event fires when the user clicks the Search button, whereas the <I>RestoreResults</i> event fires when the user goes back to the Products page from the OrderRecap page. (See Figure 20-16.) When the user clicks the Search button, the Products WebItem uses the values in the form to dynamically build a table with all the products that match the search criteria and appends this table to the form itself.</p>

<p>
<A HREF="javascript:fullSize('F20ph19x.htm')"> <img src="F20ph19.JPG" width=404 height=221 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-19.</B> <i>The WebClass designer, after adding the custom Products WebItem and its ListResults and RestoreResults custom events.</i><!--/caption-->
</p>

<p>So here's the problem: How can you have the WebClass module fire the <I>ListResult</i> event in the Products WebItem when the user clicks the Search button? The answer to this question is the following line of code in the <I>BuildProductsForm</i> procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Send &quot;&lt;FORM action=&quot;&quot;@@1&quot;&quot; method=POST id=frmSearch name=frmSearch&gt;&quot;, _
    URLFor(&quot;Products&quot;, &quot;ListResults&quot;)
</pre></td></tr></table></p>

<p>The <I>URLFor</i> method expects two arguments, the name of a WebItem and the name of an event, and generates a URL that&#8212;when the request is sent to the server&#8212;will fire that particular event for that particular WebItem. You can omit the second argument for this method; if you do, the WebClass will activate the default <I>Response</i> event.</p>

<P><div class="TIP"><blockquote>
<B>TIP</B><HR>
The first argument of the <I>URLFor</I> method is defined as type Variant and can accept either a reference to a WebItem object or its name. For performance reasons, you should always pass the WebItem's name, as in the following example:

<p><table><tr><td><PRE>
' The following two lines yield the same results, but the second
' line is slightly more efficient.
Response.Write URLFor(Products, &quot;ListResults&quot;)
Response.Write URLFor(&quot;Products&quot;, &quot;ListResults&quot;)
</PRE></td></tr></table></p>
</blockquote></div></p>

<p>You respond to custom events in a custom WebItem as you would in a template WebItem. For example, the following code is executed when the user clicks the Search button in the Products WebItem. As you can see, it reuses the <I>BuildProductsForm</i> routine and then runs another auxiliary routine, <I>BuildProductsTable</I>, which generates the HTML table containing the results of the search.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the Product WebItem is invoked
' from the Search button on the form itself.
Private Sub Products_ListResults()
    ' Move data from controls on the form to Session variables.
    ' This allows you to return to the page later and reload these
    ' values in the controls.
    Session(&quot;cboCategory&quot;) = Request.Form(&quot;cboCategory&quot;)
    Session(&quot;txtProduct&quot;) = Request.Form(&quot;txtProduct&quot;)
    Session(&quot;txtSupplier&quot;) = Request.Form(&quot;txtSupplier&quot;)
    ' Rebuild the Products form, and then generate the result table.
    BuildProductsForm True
    BuildProductsTable
End Sub

' This private procedure builds the table that contains the
' result of the search on the Products table.
Private Sub BuildProductsTable()
    Dim CategoryID As Long, ProductName As String, SupplierName As String
    Dim selected As String, sql As String
    Dim records() As Variant, i As Long
    ' Retrieve the values from the Session variables.
    CategoryID = Session(&quot;cboCategory&quot;)
    ProductName = Session(&quot;txtProduct&quot;)
    SupplierName = Session(&quot;txtSupplier&quot;)
    
    ' Dynamically build the query string.
    sql = &quot;SELECT ProductID, ProductName, CompanyName, QuantityPerUnit, &quot; _
        &amp; &quot;UnitPrice FROM Products, Suppliers &quot; _
        &amp; &quot;WHERE Products.SupplierID = Suppliers.SupplierID &quot;
    If CategoryID &lt;&gt; -1 Then
        sql = sql &amp; &quot; AND CategoryID = &quot; &amp; CategoryID
    End If
    If ProductName &lt;&gt; &quot;&quot; Then
        sql = sql &amp; &quot; AND ProductName LIKE '&quot; &amp; ProductName &amp; &quot;%'&quot;
    End If
    If SupplierName &lt;&gt; &quot;&quot; Then
        sql = sql &amp; &quot; AND CompanyName LIKE '&quot; &amp; SupplierName &amp; &quot;%'&quot;
    End If
    ' Open the Recordset.
    OpenConnection
    rs.Open sql
    
    If rs.EOF Then
        Send &quot;&lt;B&gt;No records match the specified search criteria.&lt;/B&gt;&quot;
    Else
        ' Read all the records in one operation.
        records() = rs.GetRows()
        ' Now we know how many products meet the search criteria.
        Send &quot;&lt;B&gt;Found @@1 products.&lt;B&gt;&lt;P&gt;&quot;, UBound(records, 2) + 1
        Send &quot;You can order a product by clicking on its name.&quot;
    
        ' Build the result table.
        Send &quot;&lt;TABLE BORDER WIDTH=90%&gt;&quot;
        Send &quot; &lt;TR&gt;&quot;
        Send &quot;  &lt;TH WIDTH=35% ALIGN=left&gt;Product&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=30% ALIGN=left&gt;Supplier&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=25% ALIGN=left&gt;Unit&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=20% ALIGN=right&gt;Unit Price&lt;/TH&gt;&quot;
        Send &quot; &lt;/TR&gt;&quot;
        ' Add one row of cells for each record.
        For i = 0 To UBound(records, 2)
            Send &quot; &lt;TR&gt;&quot;
            Send &quot;  &lt;TD&gt;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;@@2&lt;/A&gt;&lt;/TD&gt;&quot;, _
                URLFor(&quot;OrderProduct&quot;, CStr(records(0, i))), records(1, i)
            Send &quot;  &lt;TD&gt;@@1&lt;/TD&gt;&quot;, records(2, i)
            Send &quot;  &lt;TD&gt;@@1&lt;/TD&gt;&quot;, records(3, i)
            Send &quot;  &lt;TD ALIGN=right&gt;@@1&lt;/TD&gt;&quot;, _
                FormatCurrency(records(4, i))
            Send &quot; &lt;/TR&gt;&quot;
        Next
        Send &quot;&lt;/TABLE&gt;&quot;
    End If
    CloseConnection
    
    ' Complete the HTML page.
    Send &quot;&lt;P&gt;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;Go Back to the Welcome page&lt;/A&gt;&quot;, _
        URLFor(&quot;StartPage&quot;)
    Send &quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;
End Sub
</pre></td></tr></table></p>

<p>An example of the result of this event procedure is shown in Figure 20-20.</p>

<p>
<A HREF="javascript:fullSize('F20ph20x.htm')"> <img src="F20ph20.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-20.</B> <i>A successful search in the Products table.</i><!--/caption-->
</p>

<A NAME="1042"><h3>The <I>UserEvent</I> event</h3></A>
<p>Let's continue analyzing the code in the <I>BuildProductsTable</I>. Notice that each product name in the leftmost column of the result table is a hyperlink created using this statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Send &quot;  &lt;TD&gt;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;@@2&lt;/A&gt;&lt;/TD&gt;&quot;, _
    URLFor(&quot;OrderProduct&quot;, CStr(records(0, i))), records(1, i)
</pre></td></tr></table></p>

<p>The second argument passed to the <I>URLFor</i> method is the ProductID of the product whose name is made visible to the user. Obviously, the OrderProduct WebItem can't expose one event for each possible ProductID value, and in fact it doesn't need to. When the WebClass raises a WebItem event whose name doesn't correspond to either a standard event (such as <I>Respond</I>) or a custom event defined at design time, the WebItem element receives a <I>UserEvent</i> event. This event receives an <I>EventName</i> parameter that contains the name of the event specified as the second argument of the <I>URLFor</i> method. In this particular example, when the user clicks on a product name in the result table, the WebClass fires the <I>OrderProduct_UserEvent</i> event and passes it the ID of the selected product:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the user clicks on a product's name
' in the Products page, asking to order a given product.
' The name of the event is the ID of the product itself.
Private Sub OrderProduct_UserEvent(ByVal EventName As String)
    Dim sql As String
    ' Build the query string, and open the Recordset.
    sql = &quot;SELECT ProductID, ProductName, CompanyName, QuantityPerUnit,&quot; _
        &quot;UnitPrice FROM Products INNER JOIN Suppliers &quot; _
        &amp; &quot; ON Products.SupplierID = Suppliers.SupplierID &quot; _
        &amp; &quot;WHERE ProductID = &quot; &amp; EventName
    OpenConnection
    rs.Open sql
    ' Use the URLData property to send the ProductID to the page
    ' being shown in the browser. This value is then sent
    ' to the OrderRecap WebItem if the user confirms the inclusion
    ' of this product in the shopping bag.
    URLData = CStr(rs(&quot;ProductID&quot;))
    ' Write the template. (This fires an OrderProduct_ProcessTag event.)
    OrderProduct.WriteTemplate
    CloseConnection
End Sub
</pre></td></tr></table></p>

<p>Because OrderProduct is a template WebItem, the <I>UserEvent</i> procedure can execute the WebItem's <I>WriteTemplate</i> method, which in turn fires a <I>ProcessTag</i> event. The code inside this event procedure performs a tag replacement and fills a one-row table with data about the selected product. (See Figure 20-21.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The WebClass fires this event when the OrderProduct template is
' being interpreted. The only WC@ tag in this template is WC@FIELD, and the
' TagContents corresponds to the database field that must be displayed.
Private Sub OrderProduct_ProcessTag(ByVal TagName As String, _
    TagContents As String, SendTags As Boolean)
    If TagContents = &quot;UnitPrice&quot; Then
        TagContents = FormatCurrency(rs(&quot;UnitPrice&quot;))
    Else
        TagContents = rs(TagContents)
    End If
End Sub
</pre></td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F20ph21x.htm')"> <img src="F20ph21.JPG" width=404 height=261 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-21.</B> <i>The result of the processing of the OrderProduct WebItem.</i><!--/caption-->
</p>

<A NAME="1043"><h3>The <I>URLData</I> property</h3></A>
<p>When the user enters the number of units of a given product to buy, the control jumps to the OrderRecap custom WebItem, which displays the list of all the items that are included in the current order and evaluates the total value of the order so far. To correctly implement this WebItem, you must solve a minor problem: how to pass the ID of the product selected by the user in the OrderProduct page. If the <I>StateManagement</i> property is set to wcRetainInstance, you can simply store it in a WebClass variable; but if the WebClass component is destroyed after the page has been sent back to the browser, you have to take a different approach.</p>

<p>Among the many techniques that you can adopt to preserve data among client requests, one of the simplest ones is based on the <I>URLData</i> property. When you assign a string to this property, the string is sent to the browser. When the browser sends the next request, the string is sent back to the server, and the WebClass can read it by querying the <I>URLData</i> property. In other words, the string assigned to this property isn't stored anywhere and continues to be pinged from the server to the client and back. This statement sets the <I>URLData</i> property in the <I>OrderProduct_UserEvent</i> procedure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>URLData = CStr(rs(&quot;ProductID&quot;))
</pre></td></tr></table></p>

<p>The ProductID value is then retrieved in the <I>OrderRecap_Respond</i> event procedure, where the application adds the new product to the current contents of the user's shopping bag. Such a shopping bag is implemented as a two-dimensional array stored in a Session variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub OrderRecap_Respond()
    ' The shopping bag is a two-dimensional array in a Session variable.
    ' This array has three rows: row 0 holds ProductID, row 1 holds
    ' Quantity, and row 2 holds UnitPrice. Each new product appends
    ' a new column.
    Dim shopBag As Variant, index As Integer, sql As String
    ' Retrieve the current shopping bag.
    shopBag = Session(&quot;ShoppingBag&quot;)

    If URLData &lt;&gt; &quot;&quot; Then
        ' Add a new product to the shopping bag.
        If IsEmpty(shopBag) Then
            ' This is the first product in the bag.
            ReDim shopBag(2, 0) As Variant
            index = 0
        Else
            ' Else extend the bag to include this product.
            index = UBound(shopBag, 2) + 1
            ReDim Preserve shopBag(2, index) As Variant
        End If
        ' Store the product in the array.
        shopBag(0, index) = URLData
        shopBag(1, index) = Request.Form(&quot;txtQty&quot;)
    End If
    
    ' Dynamically build the response page.
    Send &quot;&lt;HTML&gt;&lt;BODY&gt;&quot;
    Send &quot;&lt;CENTER&gt;&quot;
    If IsEmpty(shopBag) Then
        ' No items are in the bag.
        Send &quot;&lt;H1&gt;Your shopping bag is empty&lt;/H1&gt;&quot;
    Else
        ' Open the Products table to retrieve the products in the order.
        sql = &quot;SELECT ProductID, ProductName, CompanyName, &quot; _
            &amp; &quot;QuantityPerUnit, UnitPrice &quot; _
            &amp; &quot;FROM Products INNER JOIN Suppliers &quot; _
            &amp; &quot;ON Products.SupplierID = Suppliers.SupplierID &quot;
        For index = 0 To UBound(shopBag, 2)
            sql = sql &amp; IIf(index = 0, &quot; WHERE &quot;, &quot; OR &quot;)
            sql = sql &amp; &quot;ProductID = &quot; &amp; shopBag(0, index)
        Next
        OpenConnection
        rs.Open sql
        
        ' Build the table with the products in the shopping bag.
        Send &quot;&lt;H1&gt;Your shopping bag contains the following items: &lt;/H1&gt;&quot;
        Send &quot;&lt;TABLE BORDER WIDTH=100%&gt;&quot;
        Send &quot; &lt;TR&gt;&quot;
        Send &quot;  &lt;TH WIDTH=5% ALIGN=center&gt;Qty&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=30% ALIGN=left&gt;Product&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=25% ALIGN=left&gt;Supplier&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=20% ALIGN=left&gt;Unit&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=10% ALIGN=right&gt;Unit Price&lt;/TH&gt;&quot;
        Send &quot;  &lt;TH WIDTH=10% ALIGN=right&gt;Price&lt;/TH&gt;&quot;
        Send &quot; &lt;/TR&gt;&quot;
        
        ' Loop on all the records in the Recordset.
        Dim total As Currency, qty As Long
        Do Until rs.EOF
            ' Retrieve the quantity from the shopping bag.
            index = GetBagIndex(shopBag, rs(&quot;ProductID&quot;))
            ' Remember the UnitPrice for later so that you don't need to
            ' reopen the Recordset when the order is confirmed.
            shopBag(2, index) = rs(&quot;UnitPrice&quot;)
            
            ' Get the requested quantity.
            qty = shopBag(1, index)
            ' Update the running total. (No discounts in this demo!)
            total = total + qty * rs(&quot;UnitPrice&quot;)
            ' Add a row to the table.
            Send &quot; &lt;TR&gt;&quot;
            Send &quot;  &lt;TD ALIGN=center&gt;@@1&lt;/TD&gt;&quot;, qty
            Send &quot;  &lt;TD ALIGN=left&gt;@@1&lt;/TD&gt;&quot;, rs(&quot;ProductName&quot;)
            Send &quot;  &lt;TD ALIGN=left&gt;@@1&lt;/TD&gt;&quot;, rs(&quot;CompanyName&quot;)
            Send &quot;  &lt;TD ALIGN=left&gt;@@1&lt;/TD&gt;&quot;, rs(&quot;QuantityPerUnit&quot;)
            Send &quot;  &lt;TD ALIGN=right&gt;@@1&lt;/TD&gt;&quot;, _
                FormatCurrency(rs(&quot;UnitPrice&quot;))
            Send &quot;  &lt;TD ALIGN=right&gt;@@1&lt;/TD&gt;&quot;, _
                FormatCurrency(qty * rs(&quot;UnitPrice&quot;))
            Send &quot; &lt;/TR&gt;&quot;
            rs.MoveNext
        Loop
        CloseConnection
        
        ' Store the shopping bag back in the Session variable.
        Session(&quot;ShoppingBag&quot;) = shopBag
        ' Add a row for the total.
        Send &quot; &lt;TR&gt;&quot;
        Send &quot;  &lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&lt;TD&gt;&lt;/TD&gt;&quot;
        Send &quot;  &lt;TD ALIGN=right&gt;&lt;B&gt;TOTAL&lt;/B&gt;&lt;/TD&gt;&quot;
        Send &quot;  &lt;TD ALIGN=right&gt;@@1&lt;/TD&gt;&quot;, FormatCurrency(total)
        Send &quot; &lt;/TR&gt;&quot;
        Send &quot;&lt;/TABLE&gt;&lt;P&gt;&quot;
        ' Add a few hyperlinks.
        Send &quot;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;Confirm the order&lt;/A&gt;&lt;P&gt;&quot;, _
            URLFor(&quot;CustomerData&quot;)
        Send &quot;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;Cancel the order&lt;/A&gt;&lt;P&gt;&quot;, _
            URLFor(&quot;OrderCancel&quot;)
    End If
    
    Send &quot;&lt;A HREF=&quot;&quot;@@1&quot;&quot;&gt;Go back to the Search page&lt;/A&gt;&quot;, _
        URLFor(&quot;Products&quot;, &quot;RestoreResults&quot;)
    Send &quot;&lt;/CENTER&gt;&quot;
    Send &quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;
End Sub
</pre></td></tr></table></p>

<p>The preceding routine uses an auxiliary function that searches for a ProductID value in the shopping bag and returns the corresponding column index, or -1 if the ProductID isn't found:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function GetBagIndex(shopBag As Variant, ProductID As Long) As Long
    Dim i As Integer
    GetBagIndex = -1
    For i = 0 To UBound(shopBag, 2)
        If shopBag(0, i) = ProductID Then
            GetBagIndex = i
            Exit Function
        End If
    Next
End Function
</pre></td></tr></table></p>

<p>The result of the processing of the OrderRecap WebItem is shown in Figure 20-22.</p>

<p>
<A HREF="javascript:fullSize('F20ph22x.htm')"> <img src="F20ph22.JPG" width=404 height=280 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 20-22.</B> <i>The result of the processing of the OrderRecap WebItem, showing the current contents of the shopping bag.</i><!--/caption-->
</p>

<A NAME="1044"><h2>The Professional Touch</h2></A>
<p>With what you've learned so far, you can build fairly complex and powerful WebClass components. To create highly efficient and scalable applications, however, you need to learn a few additional details.</p>

<A NAME="1045"><h3>Navigation</h3></A>
<p>A WebClass application differs from a standard application in many respects. One area in which the differences are remarkable is in navigating from one WebItem to another. In a traditional application, the programmer can control what the user can do at any moment, and no form in the program can be reached if the developer doesn't provide the user with a means to display it. In an Internet application, on the other hand, the user can navigate to any page by simply typing its URL in the browser's address field. This fact has a number of implications in the way you define the structure of the program:</p>

<UL>
<p><li>In general, you have no guarantee that the first page loaded in the WebClass application is its main ASP file, and therefore you can't be sure that the WebClass's <I>Start</i> event fires. For example, the user can jump directly to a WebItem by referencing it in the address field of the browser:</li></p>

<p><table width="95%" cellpadding="5"><tr><td><pre>
http://www.myserver.com/MyWebClass.asp?WCI=Products
</pre></td></tr></table></p>
 
<p>For this reason, if you need to read some initialization data or perform any other kind of initialization chores, you should rely on the <I>Initialize</i> or <I>BeginRequest</i> events instead of on the <I>Start</I> event.</p>

<p><li>Don't start a transaction in one page on the assumption that you can close it in the following page because you can't be sure that the user will proceed in that direction. For example, the user might press the Back button or type another URL in the browser's address field, in which case the transaction would never be completed and data and index pages on the database would be locked.</li></p>

<p><li>When a user returns to a page that he's already visited, you should restore the previous contents of the page, for example, by reloading all the values in the fields in an HTML form. (The sample application uses this technique for the Products custom WebItem.) An exception to this rule is when a user has completed a transaction&#8212;for example, by confirming an order&#8212;in which case, pressing the Back button should display a blank form, which will make it clear that the operation has been completed and can't be undone.</li></p>

<p><li>The preferred way to navigate among WebItems is by means of the <I>NextItem</i> property. Keep in mind that assignments to this property are ignored in the <I>ProcessTag</I>, <I>EndRequest</I>, and <I>FatalErrorResponse</i> events.</li></p>

<p><li>In applications that consist of multiple WebClass modules, you might want to jump from one WebClass to another. You can do this using the <I>Response.Redirect</i> method:</li></p>

<p><table width="95%" cellpadding="5" valign="TOP"><tr><td><PRE>
' Assumes that the WebClass2's main directory is the same 
' as the current WebClass's directory.
Response.Redirect &quot;WebClass2.asp&quot;
</PRE></td></tr></table></p>

<p>You can also use this method to jump to a custom event of a WebItem in the same application:</p>

<p><table width="95%" cellpadding="5" valign="TOP"><tr><td><PRE>
Response.Redirect URLFor(&quot;Products&quot;, &quot;RestoreResults&quot;)
</PRE></td></tr></table></p>

</UL>
 
<A NAME="1046"><h3>State management</h3></A>
<p>State management plays an important role in the development of WebClass applications. As you know, the HTTP protocol is inherently stateless, which means that it doesn't &quot;remember&quot; information from previous requests. As for regular ASP applications, when working with WebClasses you have several ways to overcome this issue, and each solution has advantages and disadvantages.</p>

<p>If the <I>StateManagement</i> property of the WebClass is set to wcRetainInstance, you can safely store all the information in the WebClass's variables because the instance of the WebClass is kept alive between client requests and will be destroyed only when the code explicitly invokes the <I>ReleaseInstance</i> method. You pay for this convenience with reduced scalability of the IIS application. Also, because WebClass components use the apartment threading model and can run only in the thread in which they were created, when a subsequent client request arrives, it might have to wait until that particular thread becomes available.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
By default, IIS initially allocates 2 threads to ASP and increases this number as necessary, up to 10 threads per processor. You can modify the default values by assigning different numbers to the values for NumInitialThreads and ProcessorMaxThreads of the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP\Parameters Registry key. The highest valid number for the ProcessorMaxThreads setting is 200.
</blockquote></div></p>

<p>You can store values in Application and Session variables so that they persist among client requests even if the WebClass component is destroyed and then re-created. If you have to store a lot of information, you might create a server-side component that stores the data and then assign it to an Application or a Session variable. In general, if the server-side component uses the apartment threading model&#8212;as all components authored in Visual Basic do&#8212;you shouldn't store them in an Application variable.</p>

<p>If you have to store a lot of data, you can resort to a database on the server machine. This solution permits the sharing of data among multiple clients, but it requires that you set up a connection and open a Recordset each time you need to read or write a value. Opening and closing a connection isn't as inefficient as it might sound, though, because database connections are pooled.</p>

<p>You can use the <I>URLData</I> property to move data back and forth between the server and the client, as explained in the section &quot;<A HREF="#1043">The <I>URLData</I> Property</A>&quot; section, earlier in this chapter. This technique is equivalent to using the <I>Request.QueryString</i> property, but its implementation is considerably simpler. One of its advantages is that the data is stored in the page itself; therefore, if the user clicks the Back button and then resubmits the form, the WebClass receives the same data originally sent to the page. Another advantage is that the <I>URLData</I> property works even with browsers that don't support cookies. This technique isn't without disadvantages, however. You can't store more than about 2 KB of data in the <I>URLData</i> property, and moving data back and forth in this way slightly slows down each request. You can't use this technique if the HTML page includes a form whose METHOD attribute is set to GET, but this isn't a real limitation because WebClasses only work with forms that use the POST method.</p>

<p>You can use cookies, as you would in a regular ASP application&#8212;that is, through the Request.Cookies and the Response.Cookies collections. As is the case for the <I>URLData</i> property, you can pass only a limited amount of data through cookies. Even worse, the user might have disabled cookies for security reasons, or the browser might not support them at all (a rare occurrence, though). Moreover, you have a performance hit when moving many cookies with a lot of information in them, so you might be best off using cookies only to store the ID of a record that you later load from a database.</p>

<p>Another way to store state information in the page is by using an HTML Hidden Control, which the WebClass initializes when it creates the page and reads back when the page is resubmitted to the server, through the Request.Form collection of variables. The problems with this approach are that you can use it only when the page includes a form and that the contents of such hidden fields are visible in the source code of the page. If this visibility is a problem, you should encrypt the data stored in these fields.</p>

<A NAME="1047"><h3>Testing and deployment</h3></A>
<p>Testing a WebClass application isn't much different from testing any ASP component in the sense that you can take advantage of all the debug tools offered by the Visual Basic environment. A couple of additional WebClass features are very useful in the debug phase.</p>

<p>The <I>Trace</i> method sends a string to the 
<I>OutputDebugString</I> Windows API function. A few debugging tools, such as the DBMON utility, can intercept such strings. Using the <I>Trace</I> method with a debugger in this way is especially useful after you've compiled the WebClass because you can't rely on other ways for displaying messages. Remember that WebClass applications use the Unattended Execution option therefore, you can't use <I>MsgBox</I> statements to display a message on the screen. However, you can use the methods of the App object to write to a log file or to the Windows NT event log.</p>

<p>When the WebClass application raises a fatal error (and therefore can't continue), the code receives a <I>FatalErrorResponse</i> event. You can react to this event by sending your custom message to the client browser using the <I>Response.Write</i> method, after which you should set the <I>SendDefault</i> argument to False to suppress the WebClass standard error message:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub WebClass_FatalErrorResponse(SendDefault As Boolean)
    Response.Write &quot;A fatal error has occurred.&lt;P&gt;&quot;
    Response.Write &quot;If the problem persists, please send an e-mail&quot;
    Response.Write &quot;message to the Web administrator.&quot;
    SendDefault = False
End Sub
</pre></td></tr></table></p>

<p>Inside a <I>FatalErrorResponse</i> event you can query the WebClass's Error object, which returns detailed information through its <I>Number</I>, <I>Source</I>, and <I>Description</i> properties. This object always returns Nothing outside the<I> FatalErrorResponse</I> event. All the fatal errors that can occur correspond to one of the wcrErr<I>xxxx</I> enumerated constants exposed by the WebClass library, such as wcrErrCannotReadHtml or wcrErrSystemError.</p>

<p>Fatal errors are automatically registered in the Windows NT event log, but you can disable this feature by changing the LogErrors value of the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Visual Basic\6.0\WebClass Registry key from 1 to 0. Under Windows 95 and Windows 98, a log file is created in the Windows directory.</p>

<p>Finally, you should account for some behavioral differences between the interpreted and the compiled versions of the WebClass component:</p>

<UL>
<p><li>In the compiled version, only system DSNs will work; all other types of DSNs work only in the interpreted version.</li></p>

<p><li>MDB databases work in the interpreted version but not in the compiled version. The readmevb.htm file that comes with Visual Basic mentions this issue, and in fact I experienced all sorts of problems when trying to access an MDB file from a compiled WebClass. But I can't be sure that no compiled WebClass will work with MDB databases.</li></p>

<p><li>When accessing an SQL Server database from within a compiled WebClass, you'll find that the component can't correctly log in unless you've granted login access to the user corresponding to the identity of the WebClass component. You can set this identity in the Directory Security tab of the Property dialog box of the directory that contains the WebClass application.</li></p>

<p><li>An interpreted program can store a reference to a WebClass object in an Application variable without any problem, but this operation causes an error in compiled applications.</li></p>

<p><li>You can deploy a WebClass application using the Package And Deployment Wizard. But keep in mind that the wizard doesn't automatically recognize all the ASP, HTM, and images files used by the application, so you have to manually add them to the list of distribution files.</li></p>
</UL>
 
<p>To have a compiled WebClass component execute correctly under IIS, you must distribute the special WebClass run-time file, which is contained in the Mswcrun.dll file.</p>

<p>We've finally come to the end of this long journey through Internet Information Server, ASP applications, and WebClass components. This chapter is the last one about Internet programming technologies. Both DHTML applications and WebClass components require a different approach than traditional programming, but in return you get the capability to write great Internet and intranet applications while still using your favorite programming language. Internet programming would be also the last topic covered in this book, but there are so many interesting ways to expand the Visual Basic language using Windows API functions, that I couldn't resist the temptation to include an <a href="#A129">Appendix</a> exclusively devoted to these advanced techniques.</p>

<a name="A129"></a><h1>10. Appendix -- Windows API Functions</h1>

<A HREF="#A128">[Previous]</A> <A HREF="#A130">[Next]</A><P>


<A NAME="1048"><h1>Appendix -- Windows API Functions</h1></A>

<p>The Visual Basic language provides a rich set of functions, commands, and 
objects, but in many cases they don't meet all the needs of a professional programmer. 
Just to name a few shortcomings, Visual Basic doesn't allow you to retrieve system 
information&#8212;such as the name of the current user&#8212;and most Visual Basic controls 
expose only a fraction of the features that they potentially have.
</p>

<p>Expert programmers have learned to overcome most of these limitations by directly calling one or more Windows API 
functions. In this book, I've resorted to API functions on many occasions, and it's 
time to give these functions the attention they deserve. In contrast to my practice in 
most other chapters in this book, however, I won't even try to exhaustively describe 
all you can do with this programming technique, for one simple reason: The 
Windows operating system exposes several thousands different functions, and the 
number grows almost weekly.
</p>

<p>Instead, I'll give you some ready-to-use routines that perform specific tasks 
and that remedy a few of the deficiencies of Visual Basic. You won't see much theory 
in these pages because there are many other good sources of information available, 
such as the Microsoft Developer Network (MSDN), a product that should always have 
a place on the desktop of any serious developer, regardless of his or her 
programming language.
</p>


<a name="A130"></a><h2>10.1 A World of Messages</h2>

<A HREF="#A129">[Previous]</A> <A HREF="#A131">[Next]</A><P>

<A NAME="1049"><h1>A World of Messages</h1></A>

<p>The Windows operating system is heavily based on messages. For example, 
when the user closes a window, the operating system sends the window a 
WM_CLOSE message. When the user types a key, the window that has the focus receives 
a WM_CHAR message, and so on. (In this context, the term 
<I>window </I>refers to both top-level windows and child controls.) Messages can also be sent to a window or a 
control to affect its appearance or behavior or to retrieve the information it contains. 
For example, you can send the WM_SETTEXT message to most windows and 
controls to assign a string to their contents, and you can send the WM_GETTEXT message 
to read their current contents. By means of these messages you can set or read 
the caption of a top-level window or set or read the 
<I>Text</I> property of a TextBox control, just to name a few common uses for this technique.
</p>

<p>Broadly speaking, messages belong to one of two families: They're 
<I>control messages</I> or <I>notification 
messages</I>. Control messages<I> </I>are sent by an application to a window or a control 
to set or retrieve its contents, or modify its behavior or appearance . Notification 
messages are sent by the operating system to windows or controls as the result of 
the actions users perform on them.
</p>

<p>Visual Basic greatly simplifies the programming of Windows applications 
because it automatically translates most of these messages into properties, methods, and 
events. Instead of using WM_SETTEXT and WM_GETTEXT messages, Visual Basic 
programmers can reason in terms of <I>Caption </I>and 
<I>Text </I>properties. Nor do they have to worry about trapping WM_CLOSE messages sent to a form because the Visual Basic 
runtime automatically translate them into <I>Form_Unload 
</I>events. More generally, control messages map to properties and methods, whereas notification messages map to events.
</p>

<p>Not all messages are processed in this way, though. For example, the 
TextBox control has built-in undo capabilities, but they aren't exposed as properties or 
methods by Visual Basic and therefore they can't be accessed by &quot;pure&quot; Visual Basic code. 
(In this chapter, <I>pure</I> Visual Basic means code that doesn't rely on external API 
functions.) Here's another example: When the user moves a form, Windows sends the form 
a WM_MOVE message, but the Visual Basic runtime traps that message without 
raising an event. If your application needs to know when one of its windows moves, 
you're out of luck.
</p>

<p>By using API functions, you can work around these limitations. In this section, I' show 
you how you can send a control message to a window or a control to affect its 
appearance or behavior, while in the &quot;<A HREF="#1064">Callback and Subclassing</A>&quot; section of this chapter, 
I' illustrate a more complex programming technique, called 
<I>window subclassing</I>, which lets you intercept the notification messages that Visual Basic doesn't translate to events.
</p>

<p>Before you can use an API function, you must tell Visual Basic the name of 
the DLL that contains it and the type of each argument. You do this with a 
<I>Declare </I>statement, which must appear in the declaration section of a module. 
<I>Declare </I>statements must be declared as Private in all types of modules except BAS modules (which 
also accept Public <I>Declare </I>statements that are visible from the entire application). 
For additional information about the <I>Declare 
</I>statement, see the language documentation.
</p>

<p>The main API function that you can use to send a message to a form or a 
control is <I>SendMessage</I>, whose 
<I>Declare</I> statement is this:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function SendMessage Lib &quot;user32&quot; Alias &quot;SendMessageA&quot; _
    (ByVal hWnd As Long, ByVal wMsg As Long, _
    ByVal wParam As Long, lParam As Any) As Long
</pre>
</td></tr>
</table>
</p>

<p>The <I>hWnd </I>argument is the handle of the window to which you're sending 
the message (it corresponds to the window's <I>hWnd 
</I>property), <I>wMsg </I>is the message number (usually expressed as a symbolic constant), and the meaning of the 
<I>wParam </I>and <I>lParam </I>values depend on the particular message you're sending. Notice 
that <I>lParam </I>is declared with the <I>As 
Any</I> clause so that you can pass virtually anything 
to this argument, including any simple data type or a UDT. To reduce the risk of 
accidentally sending invalid data, I've prepared a version of the 
<I>SendMessage</I> function, which accepts a Long number by value, and another version that expects a String 
passed by value. These are the so called type-safe 
<I>Declare</I> statements:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function SendMessageByVal Lib &quot;user32&quot; _
    Alias &quot;SendMessageA&quot; (ByVal hWnd As Long, ByVal wMsg As Long, _
    ByVal wParam As Long, Byval lParam As Long) As Long

Private Declare Function SendMessageString Lib &quot;user32&quot; _
    Alias &quot;SendMessageA&quot; ByVal hWnd As Long, ByVal wMsg As Long, _
    ByVal wParam As Long, ByVal lParam As String) As Long
</pre>
</td></tr>
</table>
</p>

<p>Apart from such type-safe variants, the 
<I>Declare</I> functions used in this chapter, as well as the values of message symbolic constants, can be obtained by running 
the API Viewer utility that comes with Visual Basic. (See Figure A-1.)
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
When working with API functions, you're in direct touch with 
the operating system and aren't using the safety net that Visual Basic offers. 
If you make an error in the declaration or execution of an API function, 
you're likely to get a General Protection Fault (GPF) or another fatal error that will 
immediately shut down the Visual Basic environment. For this reason, you 
should carefully double-check the <I>Declare</I> statements and the arguments you 
pass to an API function, and you should always save your code before running 
the project.
</blockquote></div>
</p>

<p>
<A HREF="javascript:fullSize('F_APH01x.htm')"> <img src="F_APH01.JPG" width=404 height=375 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-1.</B> <i>The API Viewer utility has been improved in Visual Basic 6 with the capability to set the scope of</i> Const <i>and</i> Type <i>directives, and</i> Declare <i>statements.</i><!--/caption-->
</p>

<A NAME="1050"><h2>Multiline TextBox Controls</h2></A>

<p>The <I>SendMessage </I>API function is very useful with multiline TextBox controls 
because only a small fraction of their features is exposed through standard properties 
and methods. For example, you can determine the number of lines in a multiline 
TextBox control by sending it an EM_GETLINECOUNT message:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>LineCount = SendMessageByVal(Text1.hWnd, EM_GETLINECOUNT, 0, 0)
</pre>
</td></tr>
</table>
</p>

<p>or you can use the EM_GETFIRSTVISIBLELINE message to determine which line is the first visible line. (Line numbers are zero-based.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>FirstVisibleLine = SendMessageByVal(Text1.hWnd, EM_GETFIRSTVISIBLELINE, 0, 0)
</pre>
</td></tr>
</table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
All the examples shown in this chapter are available on the 
companion CD. To help make the code more easily reusable, I've encapsulated all the 
examples in Function and Sub routines and stored them in BAS modules. 
Each module contains the declaration of the API functions used, as well as the 
<I>Const </I>directives that define all the necessary symbolic constants. On the CD. you'll 
also find a demonstration program that shows all the routines in action. (See 
Figure A2.)
</blockquote></div>
</p>

<p>The EM_LINESCROLL message enables you to programmatically scroll the 
contents of a TextBox control in four directions. You must pass the number of 
columns to scroll horizontally in <I>wParam </I>(positive values scroll right, negative values 
scroll left) and the number of lines to scroll vertically in 
<I>lParam</I> (positive values scroll down, negative values scroll up).
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Scroll one line down and (approximately) 4 characters to the right.
SendMessageByVal Text1.hWnd, EM_LINESCROLL, 4, 1
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F_APH02x.htm')"> <img src="F_APH02.JPG" width=404 height=197 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-2.</B> <i>The program that demonstrates how to use the routines in the TextBox.bas module.</i><!--/caption-->
</p>

<p>Notice that the number of columns used for horizontal scrolling might 
not correspond to the actual number of character scrolled if the TextBox control uses 
a nonfixed fonts. Moreover, horizontal scrolling doesn't work if the 
<I>ScrollBars </I>property is set to 2-Vertical. You can scroll the control's contents to ensure that the caret is 
visible using the EM_SCROLLCARET:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SendMessageByVal Text1.hWnd, EM_SCROLLCARET, 0, 0
</pre>
</td></tr>
</table>
</p>

<p>One of the most annoying limitations of the standard TextBox control is 
that there is no way to find out how longer lines of text are split into multiple lines. 
Using the EM_FMTLINES message, you can ask the control to include the so-called 
<I>soft line breaks </I>in the string returned by its 
<I>Text </I>property. A soft line break is the point 
where the control splits a line because it's too long for the control's width. A soft line 
break is represented by the sequence CR-CR-LF. Hard line breaks, points at which the 
user has pressed the Enter key, are represented by the CR-LF sequence. When 
sending the EM_FMTLINES message, you must pass True in 
<I>wParam </I>to activate soft line breaks, and False to disable them. I've prepared a routine that uses this feature 
to fill a String array with all the lines of text, as they appear in the control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Return an array with all the lines in the control.
' If the second optional argument is True, trailing CR-LFs are preserved.
Function GetAllLines(tb As TextBox, Optional KeepHardLineBreaks _
    As Boolean) As String()

    Dim result() As String, i As Long
    ' Activate soft line breaks. 
    SendMessageByVal tb.hWnd, EM_FMTLINES, True, 0
    ' Retrieve all the lines in one operation. This operation leaves
    ' a trailing CR character for soft line breaks.
    result() = Split(tb.Text, vbCrLf)
    ' We need a loop to trim the residual CR characters. If the second
    ' argument is True, we manually add a CR-LF pair to all the lines that
    ' don't contain the residual CR char (they were hard line breaks).
    For i = 0 To UBound(result)
        If Right$(result(i), 1) = vbCr Then
            result(i) = Left$(result(i), Len(result(i)) - 1)
        ElseIf KeepHardLineBreaks Then
            result(i) = result(i) &amp; vbCrLf
        End If
    Next
    ' Deactivate soft line breaks.
    SendMessageByVal tb.hWnd, EM_FMTLINES, False, 0
    GetAllLines = result()
End Function
</pre>
</td></tr>
</table>
</p>

<p>You can also retrieve one single line of text, using the EM_LINEINDEX 
message to determine where the line starts and the EM_LINELENGTH to determine its 
length. I've prepared a reusable routine that puts these two messages together:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function GetLine(tb As TextBox, ByVal lineNum As Long) As String
    Dim charOffset As Long, lineLen As Long
    ' Retrieve the character offset of the first character of the line.
    charOffset = SendMessageByVal(tb.hWnd, EM_LINEINDEX, lineNum, 0)
    ' Now it's possible to retrieve the length of the line.
    lineLen = SendMessageByVal(tb.hWnd, EM_LINELENGTH, charOffset, 0)
    ' Extract the line text.
    GetLine = Mid$(tb.Text, charOffset + 1, lineLen)
End Function
</pre>
</td></tr>
</table>
</p>

<p>The EM_LINEFROMCHAR message returns the number of the line given 
a character's offset; you can use this message and the EM_LINEINDEX message 
to determine the line and column coordinates of a character:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Get the line and column coordinates of a given character.
' If charIndex is negative, it returns the coordinates of the caret.
Sub GetLineColumn(tb As TextBox, ByVal charIndex As Long, line As Long, _
    column As Long)
    ' Use the caret's offset if argument is negative.
    If charIndex &lt; 0 Then charIndex = tb.SelStart
    ' Get the line number.
    line = SendMessageByVal(tb.hWnd, EM_LINEFROMCHAR, charIndex, 0)
    ' Get the column number by subtracting the line's start
    ' index from the character position.
    column = tb.SelStart - SendMessageByVal(tb.hWnd, EM_LINEINDEX, line, 0)
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Standard TextBox controls use their entire client area for editing. You can 
retrieve the dimension of such a formatting rectangle using the EM_GETRECT message, 
and you can use the EM_SETRECT to modify its size as your needs dictate. In each 
instance, you need to include the definition of the RECT structure, which is also used by 
many other API functions:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Type RECT
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type
</pre>
</td></tr>
</table>
</p>

<p>I've prepared two routines that encapsulate these messages:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Get the formatting rectangle.
Sub GetRect(tb As TextBox, Left As Long, Top As Long, Right As Long, _
    Bottom As Long)
    Dim lpRect As RECT
    SendMessage tb.hWnd, EM_GETRECT, 0, lpRect
    Left = lpRect.Left: Top = lpRect.Top
    Right = lpRect.Right: Bottom = lpRect.Bottom
End Sub

' Set the formatting rectangle and refresh the control.
Sub SetRect(tb As TextBox, ByVal Left As Long, ByVal Top As Long, _
    ByVal Right As Long, ByVal Bottom As Long)
    Dim lpRect As RECT
    lpRect.Left = Left: lpRect.Top = Top
    lpRect.Right = Right: lpRect.Bottom = Bottom
    SendMessage tb.hWnd, EM_SETRECT, 0, lpRect
End Sub
</pre>
</td></tr>
</table>
</p>

<p>For example, see how you can shrink the formatting rectangle along its 
horizontal dimension:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Left As Long, Top As Long, Right As Long, Bottom As Long
GetRect tb, Left, Top, Right, Bottom
Left = Left + 10: Right = Right - 10
SetRect tb, Left, Top, Right, Bottom
</pre>
</td></tr>
</table>
</p>

<p>One last thing that you can do with multiline TextBox controls is to set 
their tab stop positions. By default, the tab stops in a TextBox control are set at 32 
dialog units from one stop to the next, where each dialog unit is one-fourth the 
average character width. You can modify such default distances using the 
EM_SETTABSTOPS message, as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Set the tab stop distance to 20 dialog units 
' (that is, 5 characters of average width).
SendMessage Text1.hWnd, EM_SETTABSTOPS, 1, 20
</pre>
</td></tr>
</table>
</p>

<p>You can even control the position of each individual tab stop by passing 
this message an array of Long elements in 
<I>lParam</I> as well as the number of elements in the array in 
<I>wParam</I>. Here's an example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tabs(1 To 3) As Long
' Set three tab stops approximately at character positions 5, 8, and 15.
tabs(1) = 20: tabs(2) = 32: tabs(3) = 60
SendMessage Text1.hWnd, EM_SETTABSTOPS, 3, tabs(1)
</pre>
</td></tr>
</table>
</p>

<p>Notice that you pass an array to an API function by passing its first element 
by reference.
</p>

<A NAME="1051"><h2>ListBox Controls</h2></A>

<p>Next to TextBox controls, ListBox and ComboBox are the intrinsic controls that 
benefit most from the <I>SendMessage </I>API function. In this section, I describe the messages 
you can send to a ListBox control. In some situations, you can send a similar message 
to the ComboBox control as well to get the same result, even if the numeric value 
of the message is different. For example, you can retrieve the height in pixels of an 
item in the list portion of these two controls by sending them the 
LB_GETITEMHEIGHT (if you're dealing with a ListBox control) or the CB_GETITEMHEIGHT (if 
you're dealing with a ComboBox control). I've encapsulated these two messages in a 
polymorphic routine that works with both types of controls. (See Figure A-3.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The result of this routine is in pixels.
Function GetItemHeight(ctrl As Control) As Long
    Dim uMsg As Long
    If TypeOf ctrl Is ListBox Then
        uMsg = LB_GETITEMHEIGHT
    ElseIf TypeOf ctrl Is ComboBox Then
        uMsg = CB_GETITEMHEIGHT
    Else
        Exit Function
    End If
    GetItemHeight = SendMessageByVal(ctrl.hwnd, uMsg, 0, 0)
End Function
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F_Aph03x.htm')"> <img src="F_Aph03.JPG" width=404 height=268 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-3.</B> <i>The demonstration program for using the </i>SendMessage <i>function with ListBox and ComboBox controls.</i><!--/caption-->
</p>

<p>You can also set a different height for the list items by using the LB_SETITEMHEIGHT or CB_SETITEMHEIGHT message. While the height of an 
item isn't valuable information in itself, it lets you evaluate the number of visible 
elements in a ListBox control, data that isn't exposed as a property of the Visual Basic 
control. You can evaluate the number of visible elements by dividing the height of the 
internal area of the control&#8212;also known as the 
<I>client area </I>of the control&#8212;by the height 
of each item. To retrieve the height of the client area, you need another API 
function, <I>GetClientRect</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetClientRect Lib &quot;user32&quot; (ByVal hWnd As Long, _
    lpRect As RECT) As Long
</pre>
</td></tr>
</table>
</p>

<p>This is the function that puts all the pieces together and returns the number 
of items in a ListBox control that are entirely visible:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function VisibleItems(lb As ListBox) As Long
    Dim lpRect As RECT, itemHeight As Long
    ' Get client rectangle area.
    GetClientRect lb.hWnd, lpRect
    ' Get the height of each item.
    itemHeight = SendMessageByVal(lb.hWnd, LB_GETITEMHEIGHT, 0, 0)
    ' Do the division.
    VisibleItems = (lpRect.Bottom - lpRect.Top) \ itemHeight
End Function
</pre>
</td></tr>
</table>
</p>

<p>You can use this information to determine whether the ListBox control has 
a companion vertical scroll bar control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>HasCompanionScrollBar = (Visibleitems(List1) &lt; List1.ListCount)
</pre>
</td></tr>
</table>
</p>

<p>Windows provides messages for quickly searching for a string 
among the items of a ListBox or ComboBox control. More precisely, there are two 
messages for each control, one that performs a search for a partial match&#8212;that is, the 
search is successful if the searched string appears at the beginning of an element in the 
list portion&#8212;and one that looks for exact matches. You pass the index of the 
element from which you start the search to <I>wParam</I> 
(-1 to start from the very beginning), and the string being searched to <I>lParam</I> by value. The search isn't case sensitive. 
Here's a reusable routine that encapsulates the four messages and returns the index of 
the matching element or -1 if the search fails. Of course, you can reach the same 
result with a loop over the ListBox items, but the API approach is usually faster:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function FindString(ctrl As Control, ByVal search As String, Optional _
    startIndex As Long = -1, Optional ExactMatch As Boolean) As Long
    Dim uMsg As Long
    If TypeOf ctrl Is ListBox Then
        uMsg = IIf(ExactMatch, LB_FINDSTRINGEXACT, LB_FINDSTRING)
    ElseIf TypeOf ctrl Is ComboBox Then
        uMsg = IIf(ExactMatch, CB_FINDSTRINGEXACT, CB_FINDSTRING)
    Else
        Exit Function
    End If
    FindString = SendMessageString(ctrl.hwnd, uMsg, startIndex, search)
End Function
</pre>
</td></tr>
</table>
</p>

<p>Because the search starts with the element after the 
<I>startIndex </I>position, you can easily create a loop that prints all the matching elements:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print all the elements that begin with the &quot;J&quot; character.
index = -1
Do
    index = FindString(List1, &quot;J&quot;, index, False)
    If index = -1 Then Exit Do
    Print List1.List(index)
Loop
</pre>
</td></tr>
</table>
</p>

<p>A ListBox control can display a horizontal scroll bar if its contents are wider 
than its client areas, but this is another capability that isn't exposed by the Visual 
Basic control. To make the horizontal scroll bar appear, you must tell the control that 
it contains elements that are wider than its client area. (See Figure A-3.) You do 
this using the LB_SETHORIZONTALEXTENT message, which expects a width in pixels 
in the <I>wParam </I>argument:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inform the ListBox control that its contents are 400 pixels wide.
' If the control is narrower, a horizontal scroll bar will appear.
SendMessageByVal List1.hwnd, LB_SETHORIZONTALEXTENT, 400, 0
</pre>
</td></tr>
</table>
</p>

<p>You can add a lot of versatility to standard ListBox controls by setting the 
positions of their tab stops. The technique is similar to the one used for TextBox 
controls. If you add to that the ability to display a horizontal scroll bar, you see that the 
ListBox control becomes a cheap means for displaying tables&#8212;you don't have to resort 
to external ActiveX controls. All you have to do is set the tab stop position to a 
suitable distance and then add lines of tab-delimited elements, as in the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a 3-column table using a ListBox.
' The three columns hold 5, 20, and 25 characters of average width.
Dim tabs(1 To 2) As Long
tabs(1) = 20: tabs(2) = 100
SendMessage List1.hWnd, LB_SETTABSTOPS, 2, tabs(1)
' Add a horizontal scroll bar, if necessary. 
SendMessageByVal List1.hwnd, LB_SETHORIZONTALEXTENT, 400, 0
List1.AddItem &quot;1&quot; &amp; vbTab &amp; &quot;John&quot; &amp; vbTab &amp; &quot;Smith&quot;
List1.AddItem &quot;2&quot; &amp; vbTab &amp; &quot;Robert&quot; &amp; vbTab &amp; &quot;Doe&quot;
</pre>
</td></tr>
</table>
</p>

<p>You can learn how to use a few other ListBox messages by browsing the 
source code of the demonstration program provided on the companion CD.
</p>

<A NAME="1052"><h2>ComboBox Controls</h2></A>

<p>As I explained in the previous section, ComboBox and ListBox controls supports 
some common messages, even though the names and the values of the 
corresponding symbolic constants are different. For example, you can read and modify the 
height of items in the list portion using the CB_GETITEMHEIGHT and 
CB_SETITEMHEIGHT messages, and you can search items using the CB_FINDSTRINGEXACT and CB_FINDSTRING messages.
</p>

<p>But the ComboBox control also supports other interesting messages. For 
example, you can programmatically open and close the list portion of a drop-down 
ComboBox control using the CB_SHOWDROPDOWN message:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Open the list portion.
SendMessageByVal Combo1.hWnd, CB_SHOWDROPDOWN, True, 0
' Then close it.
SendMessageByVal Combo1.hWnd, CB_SHOWDROPDOWN, False, 0
</pre>
</td></tr>
</table>
</p>

<p>and you can retrieve the current visibility state of the list portion using the CB_GETDROPPEDSTATE message:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If SendMessageByVal(Combo1.hWnd, CB_GETDROPPEDSTATE, 0, 0) Then
    ' The list portion is visible.
End If
</pre>
</td></tr>
</table>
</p>

<p>One of the most useful messages for ComboBox controls is CB
_SETDROPPEDWIDTH, which lets you set the width of the ComboBox 
drop-down list although values less than the control's width are ignored:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Make the drop-down list 300 pixels wide.
SendMessageByVal cb.hwnd, CB_SETDROPPEDWIDTH, 300, 0
</pre>
</td></tr>
</table>
</p>

<p>(See Figure A-3 for an example of a ComboBox whose drop-down list is wider 
than usual.)
</p>

<p>Finally, you can use the CB_LIMITTEXT message to set a maximum number 
of characters for the control; this is similar to the 
<I>MaxLength </I>property for TextBox controls, which is missing in ComboBox controls:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Set the maximum length of text in a ComboBox control to 20 characters.
SendMessageByVal Combo1.hWnd, CB_LIMITTEXT, 20, 0
</pre>
</td></tr>
</table>
</p>




<a name="A131"></a><h2>10.2 System Functions</h2>

<A HREF="#A130">[Previous]</A> <A HREF="#A132">[Next]</A><P>

<A NAME="1053"><h1>System Functions</h1></A>

<p>Many internal Windows values and parameters are beyond Visual Basic's 
capabilities, but they're just an API function call away. In this section, I show how you 
can retrieve some important system settings and how you can augment Visual 
Basic support for the mouse and the keyboard.
</p>

<A NAME="1054"><h2>Windows Directories and Versions</h2></A>

<p>Even though Visual Basic hides most of the complexities of the operating system, 
as well as the differences among the many Windows versions around, sometimes 
you must distinguish one from another&#8212;for example to account for minor 
differences between Windows 9x and Windows NT. You can do this by examining the 
higher-order bit of the Long value returned by the 
<I>GetVersion </I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetVersion Lib &quot;kernel32&quot; () As Long

If GetVersion() And &amp;H80000000 Then
    MsgBox &quot;Running under Windows 95/98&quot;
Else
    MsgBox &quot;Running under Windows NT&quot;
End If
</pre>
</td></tr>
</table>
</p>

<p>If you need to determine the actual Windows version, you need 
the <I>GetVersionEx </I>API function, which returns information about the running 
operating system in a UDT:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128
End Type

Private Declare Function GetVersionEx Lib &quot;kernel32&quot; Alias _ 
    &quot;GetVersionExA&quot; (lpVersionInformation As OSVERSIONINFO) As Long

Dim os As OSVERSIONINFO, ver As String
' The function expects the UDT size in the UDT's first element.
os.dwOSVersionInfoSize = Len(os)
GetVersionEx os
ver = os.dwMajorVersion &amp; &quot;.&quot; &amp; Right$(&quot;0&quot; &amp; Format$(os.dwMinorVersion), 2)
Print &quot;Windows Version = &quot; &amp; ver
Print &quot;Windows Build Number = &quot; &amp; os.dwBuildNumber
</pre>
</td></tr>
</table>
</p>

<p>Windows 95 returns a version number 4.00, whereas Windows 98 returns 
version 4.10. (See Figure A-4.) You can use the build number to identify different 
service packs.
</p>

<p>All tips and tricks collections show how you can retrieve the path to the 
main Windows and System directories, which are often useful for locating other files 
that might interest you. These functions are helpful for another reason as well: They 
show you how to receive strings from an API function. In general, no API function 
directly returns a string; instead, all the functions that return a string value to the 
calling program require that you create a receiving string buffer&#8212;typically, a string filled 
with spaces or null characters&#8212;and you pass it to the routine. Most of the time, you 
must pass the buffer's length in another argument so that the API function doesn't 
accidentally write in the buffer more characters than allowed. For example, this is 
the declaration of the <I>GetWindowsDirectory</I> API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetWindowsDirectory Lib &quot;kernel32&quot; Alias _
    &quot;GetWindowsDirectoryA&quot; (ByVal lpBuffer As String, _
    ByVal nSize As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F_APH04x.htm')"> <img src="F_APH04.JPG" width=404 height=172 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-4.</B> <i>The sample program demonstrates several system, keyboard, and mouse API functions.</i><!--/caption-->
</p>

<p>You use this function by allocating a large-enough buffer, and then you pass 
it to the function. The return value of the function is the actual number of 
characters in the result string, and you can use this value to trim off characters in excess:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim buffer As String, length As Integer
buffer = Space$(512)
length = GetWindowsDirectory(buffer, Len(buffer))
Print &quot;Windows Directory = &quot; &amp; Left$(buffer, length)
</pre>
</td></tr>
</table>
</p>

<p>You can use the same method to determine the path of the 
Windows\System directory, using the <I>GetSystemDirectory 
</I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetSystemDirectory Lib &quot;kernel32&quot; Alias _
    &quot;GetSystemDirectoryA&quot; (ByVal lpBuffer As String, _
    ByVal nSize As Long) As Long

Dim buffer As String, length As Integer
buffer = Space$(512)
length = GetSystemDirectory(buffer, Len(buffer))
Print &quot;System Directory = &quot; &amp; Left$(buffer, length)
</pre>
</td></tr>
</table>
</p>

<p>The <I>GetTempPath </I>API function uses a similar syntax&#8212;although the order 
of arguments is reversed&#8212;and returns a valid directory name for storing temporary 
files, including a trailing backslash character (such as C:\WINDOWS\TEMP\):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetTempPath Lib &quot;kernel32&quot; Alias &quot;GetTempPathA&quot; _
    (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long

Dim buffer As String, length As Integer
buffer = Space$(512)
length = GetTempPath (Len(buffer), buffer)
Print &quot;Temporary Directory = &quot; &amp; Left$(buffer, length)
</pre>
</td></tr>
</table>
</p>

<p>The <I>GetUserName </I>function returns the name of the user currently logged in. 
At a first glance this function appears to use the same syntax as the functions I've 
just described. The documentation reveals, however, that it doesn't return the length 
of the result but just a zero value to indicate a failure or 1 to indicate the success of 
the operation. In this situation, you must extract the result from the buffer by 
searching for the Null character that all API functions append to result strings:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetUserName Lib &quot;advapi32.dll&quot; Alias _
    &quot;GetUserNameA&quot; (ByVal lpBuffer As String, nSize As Long) As Long

Dim buffer As String * 512, length As Long
If GetUserName buffer, Len(buffer) Then 
    ' Search the trailing Null character.
    length = InStr(buffer, vbNullChar) - 1
    Print &quot;User Name = &quot; &amp; Left$(buffer, length)
Else
    Print &quot;GetUserName function failed&quot;
End If
</pre>
</td></tr>
</table>
</p>

<p>The <I>GetComputerName </I>API function, which retrieves the name of the 
computer that's executing the program, uses yet another method: You must pass the length 
of the buffer in a <I>ByRef</I> argument. On exit from the function, this argument holds 
the length of the result:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetComputerName Lib &quot;kernel32&quot; Alias _
    &quot;GetComputerNameA&quot; (ByVal lpBuffer As String, nSize As Long) As Long

Dim buffer As String * 512, length As Long
length = Len(buffer)
If GetComputerName(buffer, length) Then
    ' Returns nonzero if successful, and modifies the length argument
    MsgBox &quot;Computer Name = &quot; &amp; Left$(buffer, length)
End If
</pre>
</td></tr>
</table>
</p>



<A NAME="1055"><h2>The Keyboard</h2></A>

<p>Visual Basic's keyboard events let you know exactly which keys are pressed 
and when. At times, however, it's useful to determine whether a given key is pressed 
even when you're not inside a keyboard event procedure. The pure Visual Basic 
solution is to store the value of the pressed key in a module-level or a global variable, 
but it's a solution that negatively impacts the reusability of the code. Fortunately, you 
can easily retrieve the current state of a given key using the 
<I>GetAsyncKeyState</I> function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function GetAsyncKeyState Lib &quot;user32&quot; _
    (ByVal vKey As Long) As Integer
</pre>
</td></tr>
</table>
</p>

<p>This function accepts a virtual key code and returns an Integer value whose 
high-order bit is set if the corresponding key is pressed. You can use all the Visual 
Basic vbKey<I>xxxx</I> symbolic constants as arguments to this function. For example, you 
can determine whether any of the shift keys is being pressed using this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim msg As String
If GetAsyncKeyState(vbKeyShift) And &amp;H8000 Then msg = msg &amp; &quot;SHIFT &quot;
If GetAsyncKeyState(vbKeyControl) And &amp;H8000 Then msg = msg &amp; &quot;CTRL &quot;
If GetAsyncKeyState(vbKeyMenu) And &amp;H8000 Then msg = msg &amp; &quot;ALT &quot;
' lblKeyboard is a Label control that displays the shift key states.
lblKeyboard.Caption = msg
</pre>
</td></tr>
</table>
</p>

<p>An interesting characteristic of the <I>GetAsynchKeyState 
</I>function is that it works even if the application doesn't have the input focus. This capability lets you build 
a Visual Basic program that reacts to hot keys even if users press them while 
they're working with another application. To use this API function to trap hot keys, you 
need to add some code into a Timer control's <I>Timer 
</I>event procedure and set the Timer's <I>Interval</I> property to a small enough value&#8212;for example, 200 milliseconds:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Detect the Ctrl+Alt+A key combination.
Private Sub Timer1_Timer()
    If GetAsyncKeyState(vbKeyA) And &amp;H8000 Then
        If GetAsyncKeyState(vbKeyControl) And &amp;H8000 Then
            If GetAsyncKeyState(vbKeyMenu) And &amp;H8000 Then
                ' Process the Ctrl+Alt+A hot key here.
            End If
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can streamline your code by taking advantage of the following 
reusable routine, which can test the state of up to three keys:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function KeysPressed(KeyCode1 As KeyCodeConstants, Optional KeyCode2 As _
    KeyCodeConstants, Optional KeyCode3 As KeyCodeConstants) As Boolean
    If GetAsyncKeyState(KeyCode1) &gt;= 0 Then Exit Function
    If KeyCode2 = 0 Then KeysPressed = True: Exit Function
    If GetAsyncKeyState(KeyCode2) &gt;= 0 Then Exit Function
    If KeyCode3 = 0 Then KeysPressed = True: Exit Function
    If GetAsyncKeyState(KeyCode3) &gt;= 0 Then Exit Function
    KeysPressed = True
End Function
</pre>
</td></tr>
</table>
</p>

<p>The three arguments are declared as KeyCodeConstant (an enumerated 
type defined in the Visual Basic runtime library), so that IntelliSense automatically 
helps you write the code for this function. See how you can rewrite the previous 
example that traps the Ctrl+Alt+A hot key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If KeysPressed(vbKeyA, vbKeyMenu, vbKeyControl) Then
    ' Process the Ctrl+Alt+A hot key here.
End If
</pre>
</td></tr>
</table>
</p>

<p>You can also modify the current state of a key, say, to programmatically 
change the state of the CapsLock, NumLock, and ScrollLock keys. For an example of 
this technique, see the &quot;<A HREF="#468">Toggling the State of Lock Keys</A>&quot; section in Chapter 10.
</p>

<A NAME="1056"><h2>The Mouse</h2></A>

<p>The support Visual Basic offers to mouse programming is defective in a few 
areas. As is true for the keyboard and its event procedures, you can derive a few bits 
of information about the mouse's position and the state of its buttons only inside 
a <I>MouseDown</I>, <I>MouseUp</I>, or <I>MouseMove 
</I>event procedure, which makes the creation of reusable routines in BAS modules a difficult task. Even more annoying, mouse 
events are raised only for the control under the mouse cursor, which forces you to write 
a lot of code just to find out where the mouse is in any given moment. 
Fortunately, querying the mouse through an API function is really simple.
</p>

<p>To begin with, you don't need a special function to retrieve the state of 
mouse buttons because you can use the <I>GetAsyncKeyState 
</I>function with the special vbKeyLButton, vbKeyRButton, and vbKeyMButton symbolic constants. Here's a 
routine that returns the current state of mouse buttons in the same bit-coded format 
as the <I>Button</I> parameter received by <I>Mouse</I>xxxx event procedures:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function MouseButton() As Integer
    If GetAsyncKeyState(vbKeyLButton) &lt; 0 Then
        MouseButton = 1
    End If
    If GetAsyncKeyState(vbKeyRButton) &lt; 0 Then 
        MouseButton = MouseButton Or 2
    End If
    If GetAsyncKeyState(vbKeyMButton) &lt; 0 Then
        MouseButton = MouseButton Or 4
    End If
End Function
</pre>
</td></tr>
</table>
</p>

<p>The Windows API includes a function for reading the position of the 
mouse cursor:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Type POINTAPI
    X As Long
    Y As Long
End Type

Private Declare Function GetCursorPos Lib &quot;user32&quot; (lpPoint As POINTAPI) _
    As Long
</pre>
</td></tr>
</table>
</p>

<p>In both cases the coordinates are in pixels and relative to the screen:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display current mouse screen coordinates in pixels using a Label control.
Dim lpPoint As POINTAPI
GetCursorPos lpPoint
lblMouseState = &quot;X = &quot; &amp; lpPoint.X &amp; &quot;   Y = &quot; &amp; lpPoint.Y
</pre>
</td></tr>
</table>
</p>

<p>To convert screen coordinates to a pair of coordinates relative to the 
client area of a window&#8212;that is, the area of a window inside its border&#8212;you can use 
the <I>ScreenToClient </I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function ScreenToClient Lib &quot;user32&quot; (ByVal hWnd As Long, _
    lpPoint As POINTAPI) As Long

' Display mouse screen coordinates relative to current form.
Dim lpPoint As POINTAPI
GetCursorPos lpPoint
ScreenToClient Me.hWnd, lpPoint
lblMouseState = &quot;X = &quot; &amp; lpPoint.X &amp; &quot;   Y = &quot; &amp; lpPoint.Y
</pre>
</td></tr>
</table>
</p>

<p>The <I>SetCursorPos </I>API function lets you move the mouse cursor anywhere 
on the screen, something that you can't do with standard Visual Basic code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function SetCursorPos Lib &quot;user32&quot; (ByVal X As Long, _
    ByVal Y As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>When you use this function, you often need to convert from client 
coordinates to screen coordinates, which you do with the 
<I>ClientToScreen </I>API function. The following code snippet moves the mouse cursor to the center of a push button:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function ClientToScreen Lib &quot;user32&quot; (ByVal hWnd As Long, _
    lpPoint As POINTAPI) As Long

' Get the coordinates (in pixels) of the center of the Command1 button.
' The coordinates are relative to the button's client area.
Dim lpPoint As POINTAPI
lpPoint.X = ScaleX(Command1.Width / 2, vbTwips, vbPixels)
lpPoint.Y = ScaleY(Command1.Height / 2, vbTwips, vbPixels)
' Convert to screen coordinates.
ClientToScreen Command1.hWnd, lpPoint
' Move the mouse cursor to that point.
SetCursorPos lpPoint.X, lpPoint.Y
</pre>
</td></tr>
</table>
</p>

<p>In some circumstances, for example, during drag-and-drop operations, you 
might want to prevent the user from moving the mouse outside a given region. You 
can achieve this behavior by setting up a rectangular 
<I>clipping area</I> with the <I>ClipCursor </I>API function. You'll often need to clip the mouse cursor to a given window, 
which you can do by retrieving the window's client area rectangle with the 
<I>GetClientRect </I>API function and convert the result to screen coordinates. The following routine 
does everything for you:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function ClipCursor Lib &quot;user32&quot; (lpRect As Any) As Long

Sub ClipMouseToWindow(ByVal hWnd As Long)
    Dim lpPoint As POINTAPI, lpRect As RECT
    ' Retrieve the coordinates of the upper-left corner of the window.
    ClientToScreen hWnd, lpPoint
    ' Get the client screen rectangle.
    GetClientRect hWnd, lpRect
    ' Manually convert the rectangle to screen coordinates.
    lpRect.Left = lpRect.Left + lpPoint.X
    lpRect.Top = lpRect.Top + lpPoint.Y
    lpRect.Right = lpRect.Right + lpPoint.X
    lpRect.Bottom = lpRect.Bottom + lpPoint.Y
    ' Enforce the clipping.
    ClipCursor lpRect
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Here's an example that uses the previous routine and then cancels the 
clipping effect:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Clip the mouse cursor to the current form's client area.
ClipMouseToWindow Me.hWnd
 ...
' When you don't need the clipping any longer. (Don't forget this!)
ClipCursor ByVal 0&amp;
</pre>
</td></tr>
</table>
</p>

<p>(Remember that a window automatically loses the mouse capture if it 
executes a <I>MsgBox </I>or <I>InputBox </I>statement.) Windows normally sends mouse messages 
to the window under the cursor. The only exception to this rule occurs when the 
user presses a mouse button on a window and then drags the mouse cursor outside it. 
In this situation, the window continues to receive mouse messages until the button 
is released. But sometimes it's convenient to receive mouse notifications even when 
the mouse is outside the window's boundaries.
</p>

<p>Consider the following situation: You want to provide the user with a visual 
clue when the mouse cursor enters the area of a control, for example by changing 
the control's background color. You can achieve this effect simply by changing the 
control's <I>BackColor </I>property in its <I>MouseMove 
</I>event because this event fires as soon as the mouse cursor hovers over the control. Unluckily, Visual Basic doesn't fire an 
event in a control when the mouse cursor exits its client area. Using pure Visual Basic, 
you're forced to write code inside the 
<I>MouseMove</I> events of the forms and of all the 
other controls on the form's surface, or you must have a Timer that periodically 
monitors where the mouse is. In no case is this an elegant or an efficient solution.
</p>

<p>A better approach would be to capture<I> </I>the mouse when the cursor enters 
the control's client area, using the <I>SetCapture 
</I>API function. When a form or a control captures the mouse, it receives mouse messages until the user clicks outside 
the form or the control or until the mouse capture is explicitly relinquished through 
a <I>ReleaseCapture </I>API function. This technique permits you to solve the problem 
by writing code in one single procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add these declarations to a BAS module.
Private Declare Function SetCapture Lib &quot;user32&quot; (ByVal hWnd As Long) _
    As Long
Private Declare Function ReleaseCapture Lib &quot;user32&quot; () As Long
Private Declare Function GetCapture Lib &quot;user32&quot; () As Long

' Change the BackColor of Frame1 control to yellow when the mouse enters 
' the control's client area, and restore it when the mouse leaves it.
Private Sub Frame1_MouseMove(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    ' Set the mouse capture unless the control already has it. 
    ' (The GetCapture API function returns the handle of the window that 
    ' has the mouse capture.)
    If GetCapture &lt;&gt; Frame1.hWnd Then
        SetCapture Frame1.hWnd
        Frame1.BackColor = vbYellow
    ElseIf X &lt; 0 Or Y &lt; 0 Or X &gt; Frame1.Width Or Y &gt; Frame1.Height Then
        ' If the mouse cursor is outside the Frame's client area, release
        ' the mouse capture and restore the BackColor property.
        ReleaseCapture
        Frame1.BackColor = vbButtonFace
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can see this technique in action in the demonstration program shown 
in Figure A-4. Anytime the user moves the mouse onto or away from the topmost 
Frame control, its background color changes.
</p>

<p>The <I>WindowsFromPoint </I>API function often comes handy when you're 
working with the mouse because it returns the handle of the window at given 
screen coordinates:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function WindowFromPointAPI Lib &quot;user32&quot; Alias _
    &quot;WindowFromPoint&quot; (ByVal xPoint As Long, ByVal yPoint As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>The following routine returns the handle of the window under the mouse 
cursor:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function WindowFromMouse() As Long
    Dim lpPoint As POINTAPI
    GetCursorPos lpPoint
    WindowFromMouse = WindowFromPoint(lpPoint.X, lpPoint.Y)
End Function
</pre>
</td></tr>
</table>
</p>

<p>For example, you can quickly determine from within a form module which control is under the 
mouse cursor using the following approach:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim handle As Long, ctrl As Control
On Error Resume Next
handle = WindowFromMouse()
For Each ctrl In Me.Controls
    If ctrl.hWnd &lt;&gt; handle Then
        ' Not on this control, or hWnd property isn't supported.
    Else
        ' For simplicity's sake, this routine doesn't account for elements
        ' of control arrays.
        Print &quot;Mouse is over control &quot; &amp; ctrl.Name
        Exit For
    End If
Next
</pre>
</td></tr>
</table>
</p>

<p>For more information, see the source code of the demonstration application 
on the companion CD.
</p>


<a name="A132"></a><h2>10.3 The Windows Registry</h2>

<A HREF="#A131">[Previous]</A> <A HREF="#A133">[Next]</A><P>

<A NAME="1057"><h1>The Windows Registry </h1></A>

<p>The Windows Registry is the area where the operating system and most 
applications store their configuration values. You must be able to read as well as to write data 
into the Registry, in order to build flexible applications that adapt themselves to 
their environment.
</p>

<A NAME="1058"><h2>Visual Basic Built-In Functions</h2></A>

<p>Unfortunately, the support for the Registry offered by Visual Basic leaves much 
to be desired and is limited to the following four commands and functions:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save a value.
SaveSetting AppName, Section, Key, Setting
' Read a value. (The Default argument is optional.)
value = GetSetting(AppName, Section, Key, Default)
' Return a list of settings and their values.
values = GetAllSettings(AppName, Section)
' Delete a value. (Section and Key arguments are optional.)
DeleteSetting AppName, Section, Key
</pre>
</td></tr>
</table>
</p>

<p>These four commands can't read and write to any area in the Registry but 
are limited to the <I>HKEY_CURRENT_USER\Software\VB and VBA Program Settings 
</I>subtree of the Registry. For example, you can use the 
<I>SaveSetting </I>function to store the initial function position and size of the main form in the MyInvoicePrg application:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SaveSetting &quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Left&quot;, frmMain.Left
SaveSetting &quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Top&quot;, frmMain.Top
SaveSetting &quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Width&quot;, frmMain.Width
SaveSetting &quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Height&quot;, frmMain.Height
</pre>
</td></tr>
</table>
</p>

<p>You can see the result of this sequence of statements in Figure A-5.
</p>

<p>
<A HREF="javascript:fullSize('F_APH05x.htm')"> <img src="F_APH05.JPG" width=404 height=335 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-5.</B> <i>All Visual Basic Registry functions read and write values in the</i> HKEY_CURRENT_USER\Software\VB<i> and</i> VBA Program Settings <i>subtree.</i><!--/caption-->
</p>

<p>You can then read back these settings using the 
<I>GetSetting </I>function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Use the Move method to avoid multiple Resize and Paint events.
frmMain.Move GetSetting(&quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Left&quot;, &quot;1000&quot;), _
    GetSetting(&quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Top&quot;, &quot;800&quot;), _
    GetSetting(&quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Width&quot;, &quot;5000&quot;), _
    GetSetting(&quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Height&quot;, &quot;4000&quot;)
</pre>
</td></tr>
</table>
</p>

<p>If the specified key doesn't exist, the <I>GetSetting 
</I>function either returns the values passed to the 
<I>Default </I>argument, or it returns an empty string if that argument 
is omitted. <I>GetAllSettings </I>returns a two dimensional array, which contains all the 
keys and the values under a given section:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim values As Variant, i As Long
values = GetAllSettings(&quot;MyInvoicePrg&quot;, &quot;frmMain&quot;)
' Each row holds two items, the key name and the key value.
For i = 0 To UBound(settings)
    Print &quot;Key =&quot; &amp; values(i, 0) &amp; &quot;  Value = &quot; &amp; values(i, 1)
Next
</pre>
</td></tr>
</table>
</p>

<p>The last keyword of the group, 
<I>DeleteSetting</I>, can delete an individual key, 
or it can delete all the keys under a given section if you omit its last argument:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Delete the &quot;Left&quot; key for the frmMain form.
DeleteSetting &quot;MyInvoicePrg&quot;, &quot;frmMain&quot;, &quot;Left&quot;
' Delete all the settings for the frmMain form.
DeleteSetting &quot;MyInvoicePrg&quot;, &quot;frmMain&quot;
</pre>
</td></tr>
</table>
</p>

<p>The demonstration program shown in Figure A-6 demonstrates how you 
can use the Visual Basic's built-in Registry functions to save and to restore form settings.
</p>

<p>
<img src="F_Aph06.GIF" width=398 height=189 border="0">
<p>
<!--caption--><B>Figure A-6.</B> <i>The demonstration program contains reusable routines for saving and restoring form settings to the Registry.</i><!--/caption-->


<A NAME="1059"><h2>The API Functions</h2></A>
<p>While the Visual Basic built-in functions are barely versatile enough for saving 
and restoring program configuration values, they entirely lack the functionality for 
accessing any region of the Registry, which you must have in order to read some 
important settings of the operating system. Luckily, the Windows API contains all the 
functions you need to perform this task.
</p>

<p><div class="warning"><blockquote>
<b>WARNING</b><hr>You must be very careful when you play with the Registry in 
this way because you might corrupt the installation of other applications or the 
operating system itself, and you might even be force to reinstall them. but in 
general, you can't do much harm if you simply read values in the Registry and don't 
write to it. To reduce risks, however, you might want to back up your system 
Registry so that you have a copy to restore if something goes wrong.
</blockquote></div>
</p>

<A NAME="1060"><h3>Predefined keys</h3></A>

<p>Before starting to play with API functions, you must have a broad idea of how 
the Registry is arranged. The system Registry is a hierarchical structure that consists 
of keys, subkeys, and values. More precisely, the Registry has a number of 
predefined top-level keys, which I've summarized in Table A-1.
</p>

<p>
<B>Table A-1.</B> <i>The predefined Registry keys.</i>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">

<tr>
<th><i>Key</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>

<tr>
<td valign="top">HKEY_CLASSES_ROOT</td>
<td valign="top">&amp;H80000000</td>
<td valign="top">The subtree that contains all the 
information about COM components installed on the 
machine. (It's actually a subtree of the HKEY_LOCAL_MACHINE key but also appears as 
a top-level key.)</td>
</tr>

<tr>
<td valign="top">HKEY_CURRENT_USER</td>
<td valign="top">&amp;H80000001</td>
<td valign="top">The subtree that contains the preferences 
for the current user. (It's actually to a subtree 
of the HKEY_USERS key but also appears as a top-level key.)</td>
</tr>

<tr>
<td valign="top">HKEY_LOCAL_MACHINE</td>
<td valign="top">&amp;H80000002</td>
<td valign="top">The subtree that contains information 
about the physical configuration of the computer, including installed hardware and software.</td>
</tr>

<tr>
<td valign="top">HKEY_USERS</td>
<td valign="top">&amp;H80000003</td>
<td valign="top">The subtree that contains the default user 
configuration and also contains information about the current user.</td>
</tr>

<tr>
<td valign="top">HKEY_PERFORMANCE_DATA</td>
<td valign="top">&amp;H80000004</td>
<td valign="top">The subtree that collects performance 
data; data is actually stored outside the Registry, 
but appears to be part of it. (It's available only in Windows NT.)</td>
</tr>

<tr>
<td valign="top">HKEY_CURRENT_CONFIG</td>
<td valign="top">&amp;H80000005</td>
<td valign="top">The subtree that contains data about the 
current configuration. (It corresponds to a 
subtree of the HKEY_LOCAL_MACHINE key but also appears as a top-level key.)</td>
</tr>

<tr>
<td valign="top">HKEY_DYN_DATA</td>
<td valign="top">&amp;H80000006</td>
<td valign="top">The subtree that collects performance 
data; this portion of the Registry is reinitialized 
at each reboot. (It's available only in 
Windows 95 and 98.)</td>
</tr>
</table>
</p>


<p>Each Registry key has a name, which is a string of up to 260 printable 
characters that can't include backslash characters (\) or wildcards (? and *). Names 
beginning with a period are reserved. Each key can contain subkeys and values. Under 
Windows 3.1, a key could hold only one unnamed value, while 32-bit platforms allow an 
unlimited number of values. (But unnamed values, called the 
<I>default values</I>, are maintained for backward compatibility.)
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
In general, Windows 9x and Windows NT greatly differ in how they 
deal with the Registry. In Windows NT, you must account for additional security 
issues, and in general you have no guarantee that you can open an existing 
Registry key or value. In this section, I stayed clear of such details and focused on 
those functions that behave the same way for all the Windows platforms. For this 
reason,  I've sometimes used &quot;old&quot; Registry functions instead of newer ones, 
which you recognize by the <I>Ex </I>suffix in their names, a suffix that stands for &quot;Extended.&quot;
</blockquote></div>
</p>

<A NAME="1061"><h3>Working with keys</h3></A>

<p>Navigating the Registry is similar to exploring a directory tree: To reach a given 
file, you must open the directory that contains it. Likewise, you reach a Registry 
subkey from another open key at a higher level in the Registry hierarchy. You must open 
a key before reading its subkeys and its values, and to do that you must supply 
the handle of another open key in the Registry. After you've worked with a key you 
must close it, as you do with files. The only keys that are always open and that don't 
need to be closed are the top-level keys listed in Table A-1. You open a key with 
the <I>RegOpenKeyEx</I> API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegOpenKeyEx Lib &quot;advapi32.dll&quot; Alias &quot;RegOpenKeyExA&quot; _
    (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As _
     Long, ByVal samDesired As Long, phkResult As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p><I>hKey </I>is the handle of an open key and can be one of the values listed 
in Table A1 or the handle of a key that you've opened previously. 
<I>lpSubKey </I>is the path from the <I>hKey </I>key to the key that you want to open. 
<I>ulOptions </I>is a reserved argument and must be 0. 
<I>samDesired </I>is the type of access you want for the key that 
you want to open and is a symbolic constant such as KEY_READ, KEY_WRITE, 
or KEY_ALL_ACCESS. Finally, <I>phkResult </I>is a Long variable passed by reference, 
which receives the handle of the key opened by the function if the operation is 
successful. You can test the success of the open operation by looking at the return value of 
the <I>RegOpenKeyEx </I>function: A zero value means that the operation succeeded, and 
any non-zero value is an error code. This behavior is common to all the Registry 
API functions, so you can easily set up a function that tests the success state of any 
call. (See the MSDN documentation for the list of error codes.)
</p>

<p>As I mentioned earlier, you must close any open key as soon as you don't 
need it any longer, which you do with the <I>RegCloseKey 
</I>API function. This function takes the handle of the key to be closed as its only argument, and returns 0 if the 
operation is successful:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegCloseKey Lib &quot;advapi32.dll&quot; (ByVal hKey As Long) _
    As Long
</pre>
</td></tr>
</table>
</p>

<p>Frequently, the presence of a subkey is enough to store significant data in 
a key. For example, if the machine has a math coprocessor, Windows creates the 
following key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\FloatingPointProcessor
</pre>
</td></tr>
</table>
</p>

<p>so you can test the presence of the coprocessor using this routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Assumes that all symbolic constants are correctly declared elsewhere.
Function MathProcessor() As Boolean
    Dim hKey As Long, Key As String
    Key = &quot;HARDWARE\DESCRIPTION\System\FloatingPointProcessor&quot;
    If RegOpenKeyEx(HKEY_LOCAL_MACHINE, Key, 0, KEY_READ, hKey) = 0 Then
        ' If the open operation succeeded, the key exists.
        MathProcessor = True
        ' Important: close the key before exiting.
        RegCloseKey hKey
    End If
End Function
</pre>
</td></tr>
</table>
</p>

<p>As you might expect, the Registry API includes a function for creating new 
keys, but its syntax is overly complex:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegCreateKeyEx Lib &quot;advapi32.dll&quot; Alias &quot;RegCreateKeyExA&quot;_
    (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long,_
    ByVal lpClass As Long, ByVal dwOptions As Long, _
    ByVal samDesired As Long, ByVal lpSecurityAttributes As Long, _
    phkResult As Long, lpdwDisposition As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>Most of the arguments have the same names and syntax as those that I've 
already described for the <I>RegOpenKeyEx </I>function, and I won't describe most of the 
new arguments because they constitute a topic too advanced for this context. You can 
pass a Long variable to the <I>lpdwDisposition 
</I>argument, and when the function returns you can test the contents in this variable. The value REG_CREATED_NEW_KEY (1) 
means that the key didn't exist and has been created and opened by this function, 
whereas the value REG_OPENED_EXISTING_KEY (2) means that the key already existed 
and the function just opened it without altering the Registry in any way. To reduce 
the confusion, I use the following routine, which creates a key if necessary and 
returns True if the key already existed:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function CreateRegistryKey(ByVal hKey As Long, ByVal KeyName As String) _
    As Boolean
    Dim handle As Long, disp As Long
    If RegCreateKeyEx(hKey, KeyName, 0, 0, 0, 0, 0, handle, disp) Then
        Err.Raise 1001, , &quot;Unable to create the registry key&quot;
    Else
        ' Return True if the key already existed.
        If disp = REG_OPENED_EXISTING_KEY Then CreateRegistryKey = True
        ' Close the key.
        RegCloseKey handle
    End If
End Function
</pre>
</td></tr>
</table>
</p>

<p>The following code snippet shows how you can use the 
<I>CreateRegistryKey </I>function to create a key with the name of your company under the key HKEY
_CURRENT_USER\Software and another key with the name of your application. 
This is the approach followed by most commercial applications, including all those 
by Microsoft and other leading software companies:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>CreateRegistryKey HKEY_CURRENT_USER, &quot;Software\YourCompany&quot;
CreateRegistryKey HKEY_CURRENT_USER, &quot;Software\YourCompany\YourApplication&quot;
</pre>
</td></tr>
</table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The <I>CreateRegistryKey 
</I>function, like all other Registry routines 
provided on the companion CD, always closes a key before exiting. This approach 
makes them &quot;safe&quot; but it also imposes a slight performance penalty because each 
call opens and closes a key that you might have to reopen immediately 
afterwards, as in the preceding example. You can't always have it all.
</blockquote></div>
</p>

<p>Finally, you can delete a key from the Registry, using the 
<I>RegDeleteKey </I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegDeleteKey Lib &quot;advapi32.dll&quot; Alias &quot;RegDeleteKeyA&quot; _
    (ByVal hKey As Long, ByVal lpSubKey As String) As Long
</pre>
</td></tr>
</table>
</p>

<p>Under Windows 95 and 98, this function deletes a key and all its 
subkeys, whereas under Windows NT you get an error if the key being deleted contains 
other keys. For this reason, you should manually delete all the subkeys first:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Delete the keys created in the previous example.
RegDeleteKey HKEY_CURRENT_USER, &quot;Software\YourCompany\YourApplication&quot;
RegDeleteKey HKEY_CURRENT_USER, &quot;Software\YourCompany&quot;
</pre>
</td></tr>
</table>
</p>



<A NAME="1062"><h3>Working with values</h3></A>

<p>In many cases, a Registry key contains one or more values, so you must learn 
how to read the information they contain. To do so, you need the 
<I>RegQueryValueEx </I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegQueryValueEx Lib &quot;advapi32.dll&quot; Alias _
    &quot;RegQueryValueExA&quot; (ByVal hKey As Long, ByVal lpValueName As String, _
    ByVal lpReserved As Long, lpType As Long, lpData As Any, _
    lpcbData As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p><I>hKey</I> is the handle of the open key that contains the value. 
<I>lpValueName </I>is the name of the value you want to read. (Use an empty string for the default 
value.) <I>lpReserved </I>must be zero. <I>lpType 
</I>is the type of the key. <I>lpData </I>is a pointer to a 
buffer that will receive the data. <I>lpcbData 
</I>is a Long variable passed by reference; on 
entry it has to contain the size in bytes of the buffer, and on exit it contains the number 
of bytes actually stored in the buffer. Most Registry values you'll want to read are of 
type REG_DWORD (a Long value), REG_SZ (a null-terminated string), or 
REG_BINARY (array of bytes).
</p>

<p>The Visual Basic environment stores some of its configuration settings as 
values under the following key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>HKEY_CURRENT_USER\Software\Microsoft\VBA\Microsoft Visual Basic
</pre>
</td></tr>
</table>
</p>

<p>You can read the FontHeight value to retrieve the size of the font used for 
the code editor, whereas the FontFace value holds the name of the font. Because the 
former value is a Long number and the latter is a string, you need two different coding 
techniques for them. Reading a Long value is simpler because you just pass a Long 
variable by reference to <I>lpData</I> and pass its length in bytes (which is 4 bytes) in 
<I>lpcbData</I>. To retrieve a string value, on the other hand, you must prepare a buffer and pass 
it by value, and when the function returns you must strip off the characters in excess:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim KeyName As String, handle As Long
Dim FontHeight As Long, FontFace As String, FontFaceLen As Long

KeyName = &quot;Software\Microsoft\VBA\Microsoft Visual Basic&quot;
If RegOpenKeyEx(HKEY_CURRENT_USER, KeyName, 0, KEY_READ, handle) Then
    MsgBox &quot;Unable to open the specified Registry key&quot;
Else
    ' Read the &quot;FontHeight&quot; value.
    If RegQueryValueEx(handle, &quot;FontHeight&quot;, 0, REG_DWORD, FontHeight, 4) _
        = 0 Then
        Print &quot;Face Height = &quot; &amp; FontHeight
    End If

    ' Read the &quot;FontFace&quot; value. 
    FontFaceLen = 128                   ' Prepare the receiving buffer.
    FontFace = Space$(FontFaceLen)
    ' Notice that FontFace is passed using ByVal.
    If RegQueryValueEx(handle, &quot;FontFace&quot;, 0, REG_SZ, ByVal FontFace, _
        FontFaceLen) = 0 Then
        ' Trim excess characters, including the trailing Nullchar.
        FontFace = Left$(FontFace, FontFaceLen - 1)
        Print &quot;Face Name = &quot; &amp; FontFace
    End If
    ' Close the Registry key.
    RegCloseKey handle
End If
</pre>
</td></tr>
</table>
</p>

<p>Because you need to read Registry values often, I've prepared a reusable 
function that performs all the necessary operations and returns the value in a Variant. 
You can also specify a default value, which you can use if the specified key or value 
doesn't exist. This tactic is similar to what you do with the Visual Basic's intrinsic 
<I>GetSetting </I>function.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function GetRegistryValue(ByVal hKey As Long, ByVal KeyName As String, _
    ByVal ValueName As String, ByVal KeyType As Integer, _
    Optional DefaultValue As Variant = Empty) As Variant

    Dim handle As Long, resLong As Long
    Dim resString As String, length As Long
    Dim resBinary() As Byte
    ' Prepare the default result.
    GetRegistryValue = DefaultValue
    ' Open the key, exit if not found.
    If RegOpenKeyEx(hKey, KeyName, 0, KEY_READ, handle) Then Exit Function

    Select Case KeyType
        Case REG_DWORD
            ' Read the value, use the default if not found.
            If RegQueryValueEx(handle, ValueName, 0, REG_DWORD, _
                resLong, 4) = 0 Then
                GetRegistryValue = resLong
            End If
        Case REG_SZ
            length = 1024: resString = Space$(length)
            If RegQueryValueEx(handle, ValueName, 0, REG_SZ, _
                ByVal resString, length) = 0 Then
                ' If value is found, trim characters in excess.
                GetRegistryValue = Left$(resString, length - 1)
            End If
        Case REG_BINARY
            length = 4096
            ReDim resBinary(length - 1) As Byte
            If RegQueryValueEx(handle, ValueName, 0, REG_BINARY, _
                resBinary(0), length) = 0 Then ReDim Preserve resBinary(length-1)As Byte
                GetRegistryValue = resBinary()
            End If
        Case Else
            Err.Raise 1001, , &quot;Unsupported value type&quot;
    End Select
    RegCloseKey handle
End Function
</pre>
</td></tr>
</table>
</p>

<p>To create a new Registry value or to modify the data of an existing value, 
you use the <I>RegSetValueEx </I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegSetValueEx Lib &quot;advapi32.dll&quot; Alias &quot;RegSetValueExA&quot; _
    (ByVal hKey As Long, ByVal lpValueName As String, _
    ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, _
    ByVal cbData As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>Let's see how we can add a LastLogin value under the key HKEY
_CURRENT_USER\Software\YourCompany\YourApplication, that we created in 
the previous section:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim handle As Long, strValue As String
' Open the key, check if any error occurred.
If RegOpenKeyEx(HKEY_CURRENT_USER, &quot;Software\YourCompany\YourApplication&quot;,_
    0, KEY_WRITE, handle) Then 
    MsgBox &quot;Unable to open the key.&quot;
Else
    ' We want to add a &quot;LastLogin&quot; value, of type string.
    strValue = FormatDateTime(Now)
    ' Strings must be passed using ByVal.
    RegSetValueEx handle, &quot;LastLogin&quot;, 0, REG_SZ, ByVal strValue, _
        Len(strValue)
    ' Don't forget to close the key.
    RegCloseKey handle
End If
</pre>
</td></tr>
</table>
</p>

<p>On the companion CD, you'll find the source code of the 
<I>SetRegistryValue </I>function, which automatically uses the correct syntax according to the type of value 
you're creating. Finally, by using the 
<I>RegDeleteValue</I> API function, you can delete a 
value under a key that you opened previously:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegDeleteValue Lib &quot;advapi32.dll&quot; Alias &quot;RegDeleteValueA&quot;_
    (ByVal hKey As Long, ByVal lpValueName As String) As Long
</pre>
</td></tr>
</table>
</p>



<A NAME="1063"><h3>Enumerating keys and values</h3></A>

<p>When you're exploring the Registry, you often need to enumerate all the keys or 
all the values under a key. The function you use to enumerate keys is 
<I>RegEnumKey</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Declare Function RegEnumKey Lib &quot;advapi32.dll&quot; _
    Alias &quot;RegEnumKeyA&quot; (ByVal hKey As Long, ByVal dwIndex As Long, _
    ByVal lpName As String, ByVal cbName As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>You must pass the handle of an open Registry key in the 
<I>hKey </I>argument, and then you repeatedly call this function, passing increasing index values in 
<I>dwIndex</I>. The <I>lpName</I> argument must be a string buffer of at least 260 characters (the 
maximum length for a key name), and <I>lpcbName 
</I>is the length of the buffer. When you exit the routine, the buffer contains a Null-terminated string, so you have to strip all 
the characters in excess. To simplify your job, I've prepared a function that iterates 
on all the subkeys of a given keys and returns an String array that contains the 
names of all the subkeys:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function EnumRegistryKeys(ByVal hKey As Long, ByVal KeyName As String) _
    As String()
    Dim handle As Long, index As Long, length As Long
    ReDim result(0 To 100) As String

    ' Open the key, exit if not found.
    If Len(Keyname) Then
        If RegOpenKeyEx(hKey, KeyName, 0, KEY_READ, handle) Then 
            Exit Function
        End If
        ' Subsequent functions use hKey.
        hKey = handle
    End If
    
    For index = 0 To 999999
        ' Make room in the array.
        If index &gt; UBound(result) Then
            ReDim Preserve result(index + 99) As String
        End If
        length = 260                   ' Max length for a key name.
        result(index) = Space$(length)
        If RegEnumKey(hKey, index, result(index), length) Then Exit For
        ' Trim characters in excess.
        result(index) = Left$(result(index), InStr(result(index), _
            vbNullChar) - 1)
    Next

    ' Close the key, if it was actually opened.
    If handle Then RegCloseKey handle
    ' Trim unused items in the array and return the results to the caller.
    ReDim Preserve result(index - 1) As String
    EnumRegistryKeys = result()
End Function
</pre>
</td></tr>
</table>
</p>

<p>Thanks to the <I>EnumRegistryKey </I>function, it's simple to dig a lot of useful 
information out of the Registry. For example, see how easy it is to fill a ListBox 
control with the names of all the components registered on the machine under 
the HKEY_CLASS_ROOT key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim keys() As String, i As Long
keys() = EnumRegistryKeys(HKEY_CLASSES_ROOT, &quot;&quot;)
List1.Clear
For i = LBound(keys) To UBound(keys)
    List1.AddItem keys(i)
Next
</pre>
</td></tr>
</table>
</p>

<p>The companion CD includes a demonstration program (shown in Figure 
A-7) that displays the list of installed COM components as well as their CLSIDs and 
the DLL or EXE file that contains each one of them. You can easily expand this first 
version to create your own utilities that track anomalies in the Registry. For example, you 
can list all the DLL and EXE files that aren't in the locations listed in the Registry. 
(COM raises an error when you try to instantiate such components.)
</p>

<p>
<A HREF="javascript:fullSize('F_Aph07x.htm')"> <img src="F_Aph07.JPG" width=404 height=231 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-7.</B> <i>You can use Registry API routines to list all the components installed on your machine, with their CLSIDs and the locations of their executable files.</i><!--/caption-->
</p>

<p>The Windows API also exposes a function for enumerating all the values 
under a given open key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function RegEnumValue Lib &quot;advapi32.dll&quot; Alias &quot;RegEnumValueA&quot; _
    (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpValueName As _
    String, lpcbValueName As Long, ByVal lpReserved As Long, _
    lpType As Long, lpData As Any, lpcbData As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>This function returns the type of each value in the 
<I>lpType </I>variable and the contents of the value in 
<I>lpData</I>. The difficulty is that you don't know in advance 
what the type of the value is, and therefore you don't know the kind of 
variable&#8212;Long, String, or Byte array&#8212;you should pass in 
<I>lpData</I>. The solution to this problem is to pass a Byte array and then move the result into a Long variable using the 
<I>CopyMemory </I>API routine or into a String variable using the VBA 
<I>StrConv </I>function. On the companion CD, you'll find the complete source of the 
<I>EnumRegistryValues </I>routine, which encapsulates all these details and returns a two-dimensional array of Variants 
containing all the values' names and data. For example, you can use this routine to 
retrieve all the Microsoft Visual Basic configuration values:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim values() As Variant, i As Long
values() = EnumRegistryValues(HKEY_CURRENT_USER, _
    &quot;Software\Microsoft\VBA\Microsoft Visual Basic&quot;)
For i = LBound(values, 2) To UBound(values, 2)
    ' Row 0 holds the value's name, row 1 holds its value.
    List1.AddItem values(0, i) &amp; &quot; = &quot; &amp; values(1, i)
Next
</pre>
</td></tr>
</table>
</p>




<a name="A133"></a><h2>10.4 Callback and Subclassing</h2>

<A HREF="#A132">[Previous]</A> <A HREF="#A134">[Next]</A><P>

<A NAME="1064"><h1>Callback and Subclassing</h1></A>

<p>As you probably remember from the &quot;<A HREF="#1049">A World of Messages</A>&quot; section near the 
beginning of this appendix, Windows deals with two types of messages: control 
messages and notification messages. Although sending a control message is just a matter of 
using the <I>SendMessage </I>API function, you'll see that intercepting a notification message 
is much more difficult and requires that you adopt an advanced programming 
technique known as <I>window subclassing</I>. But in order to understand how this technique 
works, you need to know what the <I>AddressOf </I>keyword does and how you can use it to 
set up a callback procedure.
</p>

<A NAME="1065"><h2>Callback Techniques</h2></A>

<p>Callback and subclassing capabilities are relatively new to Visual Basic, in that 
they weren't possible until version 5. What made these techniques available to Visual 
Basic programmers was the introduction of the new 
<I>AddressOf </I>keyword under 
Visual Basic 5. This keyword can be used as a prefix for the name of a routine 
defined in a BAS module, and evaluates the 32-bit address of the first statement of that routine.
</p>

<A NAME="1066"><h3>System timers</h3></A>

<p>To show this keyword in action I'll show you how you can create a timer without 
a Timer control. Such a timer might be useful, for example, when you want to 
periodically execute a piece of code located in a BAS module, and you don't want to 
add a form to the application just to get a pulse at regular intervals. Setting up a 
system timer requires only a couple of API functions:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function SetTimer Lib &quot;user32&quot; (ByVal hWnd As Long, ByVal nIDEvent_
    As Long, ByVal uElapse As Long, ByVal lpTimerFunc As Long) As Long

Declare Function KillTimer Lib &quot;user32&quot; (ByVal hWnd As Long, _
    ByVal nIDEvent As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p>For our purposes, we can ignore the first two arguments to the 
<I>SetTimer </I>function and just pass the <I>uElapse 
</I>value (which corresponds to the <I>Interval 
</I>property of a Timer control) and the 
<I>lpTimerFunc</I> value (which is the address of a routine in 
our Visual Basic program). This routine is known as the 
<I>callback procedure</I> because it's meant to be called from Windows and not from the code in our application. 
The <I>SetTimer </I>function returns the ID of the timer being created or 0 in case of error:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim timerID As Long
' Create a timer that sends a notification every 500 milliseconds.
timerID = SetTimer(0, 0, 500, AddressOf Timer_CBK)
</pre>
</td></tr>
</table>
</p>

<p>You need the return value when it's time to destroy the timer, a step that 
you absolutely must perform before closing the application if you don't want the 
program to crash:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Destroy the timer created previously.
KillTimer 0, timerID
</pre>
</td></tr>
</table>
</p>

<p>Let's see now how to build the <I>Timer_CBK 
</I>callback procedure. You derive the number and types of the arguments that Windows sends to it from the Windows 
SDK documentation or from MSDN:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Timer_CBK(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal idEvent As Long, ByVal SysTime As Long)
    ' Just display the system time in a label control.
    Form1.lblTimer = SysTime
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In this implementation, you can safely ignore the first three parameters 
and concentrate on the last one, which receives the number of milliseconds elapsed 
since the system started. This particular callback routine doesn't return a value and is 
therefore implemented as a procedure; you'll see later that in most cases callback 
routines return values to the operating system and therefore are implemented as 
functions. As usual, you'll find on the companion CD a complete demonstration program 
that contains all the routines described in this section.
</p>

<A NAME="1067"><h3>Windows enumeration</h3></A>

<p>Interesting and useful examples of using callback techniques are provided by 
the <I>EnumWindows </I>and <I>EnumChildWindows 
</I>API functions, which enumerate the top-level windows and the child windows of a given window, respectively. The 
approach used by these functions is typical of most API functions that enumerate 
Windows objects. Instead of loading the list of windows in an array or another structure, 
these functions use a callback procedure in the main application for each window 
found. Inside the callback function, you can do what you want with such data, 
including loading it into an array, a ListBox or a TreeView control. The syntax for these 
functions is the following:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function EnumWindows Lib &quot;user32&quot; (ByVal lpEnumFunc As Long, _
    ByVal lParam As Long) As Long

Declare Function EnumChildWindows Lib &quot;user32&quot; (ByVal hWndParent As Long, _
    ByVal lpEnumFunc As Long, ByVal lParam As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p><I>hWndParent </I>is the handle of the parent window. 
<I>lpEnumFunc </I>is the address of the callback function. And 
<I>lParam </I>is a parameter passed to the callback 
function; this value can be used when the same callback routine is used for different 
purposes in the application. The syntax of the callback function is the same for 
both <I>EnumWindows </I>and 
<I>EnumChildWindows</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function EnumWindows_CBK(ByVal hWnd As Long, ByVal lParam As Long) As Long
    ' Process the window's data here.
End Function
</pre>
</td></tr>
</table>
</p>

<p>where <I>hWnd </I>is the handle of the window found, and 
<I>lParam </I>is the value passed as the last argument to 
<I>EnumWindows </I>or <I>EnumChildWindows</I>. This function 
should return 1 to ask the operating system to continue the enumeration or 0 to stop 
the enumeration.</p>
<p>
It's easy to create a reusable procedure that builds on these API functions 
to return an array with the handles of all the child windows of a given window:
</p>


<p><table cellpadding=5 width="95%"><tr><td>
<pre>' An array of Longs holding the handles of all child windows
Dim windows() As Long
' The number of elements in the array.
Dim windowsCount As Long

' Return an array of Longs holding the handles of all the child windows
' of a given window. If hWnd = 0, return the top-level windows.
Function ChildWindows(ByVal hWnd As Long) As Long()
    windowsCount = 0                    ' Reset the result array.
    If hWnd Then
        EnumChildWindows hWnd, AddressOf EnumWindows_CBK, 1
    Else
        EnumWindows AddressOf EnumWindows_CBK, 1
    End If    
    ' Trim uninitialized elements and return to caller.
    ReDim Preserve windows(windowsCount) As Long
    ChildWindows = windows()
End Function

' The callback routine, common to both EnumWindows and EnumChildWindows
Function EnumWindows_CBK(ByVal hWnd As Long, ByVal lParam As Long) As Long
    If windowsCount = 0 Then
        ' Create the array at the first iteration.
        ReDim windows(100) As Long
    ElseIf windowsCount &gt;= UBound(windows) Then
        ' Make room in the array, if necessary.
        ReDim Preserve windows(windowsCount + 100) As Long
    End If
    ' Store the new item.
    windowsCount = windowsCount + 1
    windows(windowsCount) = hWnd
    ' Return 1 to continue the enumeration process.
    EnumWindows_CBK = 1
End Function
</pre>
</td></tr>
</table>
</p>

<p>On the companion CD, you'll find the source code of an 
application&#8212;also shown in Figure A-8&#8212;that displays the hierarchy of all the windows that are 
currently open in the system. This is the code that loads the TreeView control with the 
window hierarchy. Thanks to the recursion technique, the code is surprisingly compact:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    ShowWindows TreeView1, 0, Nothing
End Sub

Sub ShowWindows(tvw As TreeView, ByVal hWnd As Long, ParentNode As Node)
    Dim winHandles() As Long
    Dim i As Long, Node As MSComctlLib.Node
    
    If ParentNode Is Nothing Then
        ' If no Parent node, let's add a &quot;desktop&quot; root node.
        Set ParentNode = tvw.Nodes.Add(, , , &quot;Desktop&quot;)
    End If
    ' Retrieve all the child windows.
    winHandles() = ChildWindows(hWnd)
    For i = 1 To UBound(winHandles)
        ' Add a node for this child window--WindowDescription is a routine
        ' (not shown here) that returns a descriptive string for the window.
        Set Node = tvw.Nodes.Add(ParentNode.Index, tvwChild, , _
            WindowDescription(winHandles(i)))
        ' Recursively call this routine to show this window's children.
        ShowWindows tvw, winHandles(i), Node
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F_Aph08x.htm')"> <img src="F_Aph08.JPG" width=404 height=426 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-8.</B> <i>A utility to explore all the open windows in the system.</i><!--/caption-->
</p>

<A NAME="1068"><h2>Subclassing Techniques </h2></A>

<p>Now that you know what a callback procedure is, comprehending how 
subclassing works will be a relatively easy job.
</p>

<A NAME="1069"><h3>Basic subclassing</h3></A>

<p>You already know that Windows communicates with applications via messages, 
but you don't know yet how the mechanism actually works at a lower level. Each 
window is associated with a <I>window default 
procedure</I>, which is called any time a message is sent to the window. If this procedure were written in Visual Basic, it would 
look like this:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function WndProc(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long) As Long
    ...
End Function
</pre>
</td></tr>
</table>
</p>

<p>The four parameters that a window procedure receives are exactly the 
arguments that you (or the operating system) pass to the 
<I>SendMessage </I>when you send a message to a given window. The purpose of the window procedure is to process all the 
incoming messages and react appropriately. Each class of 
windows&#8212;top-level windows, MDI windows, TextBox controls, ListBox controls, and so 
on&#8212;behave differently because their window procedures are different.
</p>

<p>The principle of the subclassing technique is very simple: You write a 
custom window procedure and you ask Windows to call your window procedure instead 
of the standard window procedure associated with a given window. The code in 
your Visual Basic application traps all the messages sent to the window before the 
window itself (more precisely, its default window procedure) has a chance to process 
them, as I explain in the following illustration:
</p>

<p>
<A HREF="javascript:fullSize('GAph01x.htm')"> <img src="GAph01.JPG" width=404 height=236 ALIGN="BOTTOM" border=0 alt="Click to view at full size."></A>
</p>

<p>To substitute the standard window procedure with your customized 
procedure, you must use the <I>SetWindowLong </I>API function, which stores the address of 
the custom routine in the internal data table that is associated with each window:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Const GWL_WNDPROC = -4
Declare Function SetWindowLong Lib &quot;user32&quot; Alias &quot;SetWindowLongA&quot; _
    (ByVal hWnd As Long, ByVal ndx As Long, ByVal newValue As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p><I>hWnd </I>is the handle of the window. <I>ndx 
</I>is the index of the slot in the internal data table where you want to store the value. And 
<I>newValue </I>is the 32-bit value to be stored in the internal data table at the position pointed to by 
<I>nxd</I>. This function returns the value that was previously stored in that slot of the table; you must 
store such a value in a variable because you must definitely restore it before the 
application terminates or the subclassed window is closed. If you don't restore the 
address of the original window procedure, you're likely to get a GPF. In summary, this is 
the minimal code that subclasses a window:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim saveHWnd As Long        ' The handle of the subclassed window
Dim oldProcAddr As Long     ' The address of the original window procedure

Sub StartSubclassing(ByVal hWnd As Long)
    saveHWnd = hWnd
    oldProcAddr = SetWindowLong(hWnd, GWL_WNDPROC, AddressOf WndProc)
End Sub

Sub StopSubclassing()
    SetWindowLong saveHWnd, GWL_WNDPROC, oldProcAddr
End Sub

Function WndProc(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long) As Long
    ' Process the incoming messages here.
End Function
</pre>
</td></tr>
</table>
</p>

<p>Let's focus on what the custom window procedure actually does. This 
procedure can't just process a few messages and forget about the others. On the contrary, 
it's responsible for correctly forwarding all the messages to the original window 
procedure; otherwise, the window wouldn't receive all the vital messages that inform 
it when it has to resize, close, or repaint itself. In other words, if the window 
procedure stops all messages from reaching the original window procedure the application 
won't work as expected any longer. The API function that does the message forwarding 
is <I>CallWindowProc</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Declare Function CallWindowProc Lib &quot;user32&quot; Alias &quot;CallWindowProcA&quot; _
    (ByVal lpPrevWndFunc As Long, ByVal hwnd As Long, ByVal Msg As Long, _
    ByVal wParam As Long, ByVal lParam As Long) As Long
</pre>
</td></tr>
</table>
</p>

<p><I>lpPrevWndFunc </I>is the address of the original window procedure&#8212;the value 
that we saved in the <I>oldProcAddr </I>variable&#8212;and the other arguments are those 
received by the custom window procedure.
</p>

<p>Let's see a practical example of the subclassing technique. When a 
top-level window&#8212;a form, in Visual Basic parlance&#8212;moves, the operating system sends it 
a WM_MOVE message. The Visual Basic runtime eats this message without 
exposing it as an event to the application's code, but you can write a custom window 
procedure that intercepts it before Visual Basic sees it:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function WndProc(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long) As Long
    ' Send the message to the original window procedure, and then
    ' return to Windows the return value from the original procedure.
    WndProc = CallWindowProc(oldProcAddr, hWnd, uMsg, wParam, lParam)
    ' See if this is the message we're waiting for.
    If uMsg = WM_MOVE Then
        ' The window has moved.
    End If
End Function
</pre>
</td></tr>
</table>
</p>

<p>I've prepared a demonstration program that uses the code described in 
this section to trap a few messages related to forms, such as WM_MOVE, 
WM_RESIZING, and WM_APPACTIVATE. (See Figure A-9.) The last message is important because it 
lets you determine when an application loses and regains the input focus, something 
that you can't easily do in pure Visual Basic code. For example, the Windows hierarchy 
utility shown in Figure A-8 might subclass this message to automatically 
refresh its contents when the user switches to another application and then goes back to the utility.
</p>

<p>
<A HREF="javascript:fullSize('F_Aph09x.htm')"> <img src="F_Aph09.JPG" width=404 height=306 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-9.</B> <i>A program that demonstrates the basic concepts of window subclassing.</i><!--/caption-->
</p>

<p>You can generally process the incoming messages before or after calling 
the <I>CallWindowProc </I>API function. If you're interested only in knowing when a 
message is sent to the window, it's often preferable to trap it after the Visual Basic 
runtime has processed it because you can query updated form's properties. Remember, 
Windows expects that you return a value to it, and the best way to comply with 
this requirement is by using the value returned by the original window procedure. If 
you process a message before forwarding it to the original procedure, you can 
change the values in <I>wParam </I>or 
<I>lParam</I>, but this technique requires an in-depth 
knowledge of the inner workings of Windows. Any error in this phase is fatal because it 
prevents the Visual Basic application from working correctly.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Of all the advanced programming techniques you can employ 
in Visual Basic, subclassing is undoubtedly the most dangerous one. If you 
make a mistake in the custom window procedure, Windows won't forgive you and 
won't give you a chance to fix the error. For this reason, you should 
<I>always </I>save your code before running the program in the environment. Moreover, you should 
<I>never </I>stop a running program using the End button, an action which 
immediately stops the running program and prevents the 
<I>Unload </I>and <I>Terminate </I>events from 
executing, therefore depriving you of the opportunity to restore the original 
window procedure.
</blockquote></div>
</p>

<A NAME="1070"><h3>A class for subclassing</h3></A>

<p>Although the code presented in the previous version works flawlessly, it doesn't 
meet the requirements of real-world applications. The reason is simple: In a 
complex program, you usually subclass multiple forms and controls. This practice raises 
a couple of interesting problems:
</p>

<UL>

<p><li> You can't use simple variables to store the window's handle and 
the address of the original window procedure&#8212;as the previous 
simplified example does&#8212;but you need an array or a collection to account 
for multiple windows.
</li></p>
<p><li> The custom window procedure must reside in a BAS form, so the 
same procedure must serve multiple subclassed windows and you need a 
way to understand which window each message is bound to.
</li></p>
</UL>
 
<p>The best solution to both problems is to build a class module that manages 
all the subclassing chores in the program. I've prepared such a class, named 
MsgHook, and as usual you'll find it on the companion CD. Here's an abridged version of 
its source code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The MsgHook.cls class module 
Event AfterMessage(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long, retValue As Long)

Private m_hWnd As Long         ' Handle of the window being subclassed

' Start the subclassing.
Sub StartSubclass(ByVal hWnd As Long)
    ' Terminate current subclassing, if necessary.
    If m_hWnd Then StopSubclass
    ' Store argument in member variable.
    m_hWnd = hWnd
    ' Add a new item to the list of subclassed windows.
    If m_hWnd Then HookWindow Me, m_hWnd
End Sub

' Stop the subclassing.
Sub StopSubclass()
    ' Delete this item from the list of subclassed windows.
    If m_hWnd Then UnhookWindow Me
End Sub

' This procedure is called when a message is sent to this window. 
' (It's Friend because it's meant to be called by the BAS module only.)
Friend Function WndProc(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long, _
    ByVal oldWindowProc As Long) As Long

    Dim retValue As Long, Cancel As Boolean
    ' Call original window procedure.
    retValue = CallWindowProc(oldWindowProc, hWnd, uMsg, wParam, lParam)
    ' Call the application. 
    ' The application can modify the retValue argument, if desired.
    RaiseEvent AfterMessage(hWnd, uMsg, wParam, lParam, retValue)
    ' Return the value to Windows.
    WndProc = retValue
End Function

' Stop the subclassing when the object goes out of scope.
Private Sub Class_Terminate()
    If m_hWnd Then StopSubclass
End Sub 
</pre>
</td></tr>
</table>
</p>

<p>As you see, the class communicates with its clients through the 
<I>AfterMessage </I>event, which is called immediately after the original window procedure has 
processed the message. From the client application's standpoint, subclassing a window has 
become just a matter of responding to an event, an action very familiar to all Visual 
Basic programmers.
</p>

<p>Now analyze the code in the BAS module in which the subclassing 
actually occurs. First of all, you need an array of UDTs, where you can store information 
about each window being subclassed:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The WndProc.Bas module 
Type WindowInfoUDT
    hWnd As Long            ' Handle of the window being subclassed
    oldWndProc As Long      ' Address of the original window procedure
    obj As MsgHook          ' The MsgHook object serving this window
End Type
' This array stores data on subclassed windows.
Dim WindowInfo() As WindowInfoUDT
' This is the number of elements in the array.
Dim WindowInfoCount As Long
</pre>
</td></tr>
</table>
</p>

<p>The <I>HookWindow </I>and <I>UnhookWindow </I>procedures are called by the 
MsgHook class's <I>StartSubclass </I>and <I>StopSubclass 
</I>methods, respectively:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Start the subclassing of a window.
Sub HookWindow(obj As MsgHook, ByVal hWnd As Long)
    ' Make room in the array, if necessary.
    If WindowInfoCount = 0 Then
        ReDim WindowInfo(10) As WindowInfoUDT
    ElseIf WindowInfoCount &gt; UBound(WindowInfo) Then
        ReDim Preserve WindowInfo(WindowInfoCount + 9) As WindowInfoUDT
    End If
    WindowInfoCount = WindowInfoCount + 1
    
    ' Store data in the array, and start the subclassing of this window.
    With WindowInfo(WindowInfoCount)
        .hWnd = hWnd
        Set .obj = obj
        .oldWndProc = SetWindowLong(hWnd, GWL_WNDPROC, AddressOf WndProc)
    End With
End Sub

' Stop the subclassing of the window associated with an object.
Sub UnhookWindow(obj As MsgHook)
    Dim i As Long, objPointer As Long
    For i = 1 To WindowInfoCount
        If WindowInfo(i).obj Is obj Then
            ' We've found the object that's associated with this window.
            SetWindowLong WindowInfo(i).hWnd, GWL_WNDPROC, _
                WindowInfo(i).oldWndProc
            ' Remove this element from the array.
            WindowInfo(i) = WindowInfo(WindowInfoCount)
            WindowInfoCount = WindowInfoCount - 1
            Exit For
        End If
    Next
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The last procedure left to be seen in the BAS module is the custom 
window procedure. This procedure has to search for the handle of the target window of 
the incoming message, among those stored in the 
<I>WindowInfo </I>array and notify the 
corresponding instance of the MsgHook class that a message has arrived:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The custom window procedure
Function WndProc(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long) As Long
    Dim i As Long, obj As MsgHook
    Const WM_DESTROY = &amp;H2 

    ' Find this handle in the array.
    For i = 1 To WindowInfoCount
        If WindowInfo(i).hWnd = hWnd Then
            ' Notify the object that a message has arrived.
            WndProc = WindowInfo(i)obj.WndProc(hWnd, uMsg, wParam, lParam,_
                WindowInfo(i).oldWndProc)
            ' If it's a WM_DESTROY message, the window is about to close
            ' so there is no point in keeping this item in the array.
            If uMsg = WM_DESTROY Then WindowInfo(i).obj.StopSubclass
            Exit For
        End If
    Next
End Function
</pre>
</td></tr>
</table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The preceding code looks for the window handle in the array using 
a simple linear search; when the array contains only a few items, this approach 
is sufficiently fast and doesn't add a significant overhead to the class. If you 
plan to subclass more than a dozen forms and controls, you should implement a 
more sophisticated search algorithm, such as a binary search or a hash table.
</blockquote></div>
</p>

<p>In general, a window is subclassed until the client application calls the 
<I>StopSubclass </I>method of the related MsgHook object or until the object itself goes out of 
scope. (See the code in the class's <I>Terminate 
</I>event procedure.) The code in the <I>WndProc 
</I>procedure uses an additional trick to ensure that the original window procedure 
is restored before the window is closed. Because it's already subclassing the 
window, it can trap the WM_DESTROY message, which is always the last message (or at 
least one of the last messages) sent to a window before it closes. When this message 
is detected, the code immediately stops subclassing the window.
</p>

<A NAME="1071"><h3>Using the MsgHook class </h3></A>

<p>Using the MsgHook class is pretty simple: You assign an instance of it to a 
WithEvents variable, and then you invoke its <I>StartSubclass 
</I>method to actually start the subclassing. For example, you can trap WM_MOVE messages using this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents FormHook As MsgHook

Private Sub Form_Load()
    Set FormHook = New MsgHook
    FormHook.StartSubclass Me.hWnd
End Sub

Private Sub FormHook_AfterMessage(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long, retValue As Long)
    Const WM_MOVE = &amp;H3
    If uMsg = WM_MOVE Then
        lblStatus.Caption = &quot;The window has moved.&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>If you want to subclass other forms or controls, you have to create 
multiple instances of the MsgHook class&#8212;one for each window to be subclassed&#8212;and 
assign them to distinct WithEvents variables. And of course you have to write the 
proper code in each <I>AfterMessage </I>event procedure. The complete class provided on 
the companion CD supports some additional features, including a 
<I>BeforeMessage </I>event that fires before the original window procedure processes the message and an 
<I>Enabled</I> property that lets you temporarily disable the subclassing for a given window. 
Keep in mind that the MsgHook class can subclass only windows belonging to the 
current application; interprocess window subclassing is beyond the current capabilities of 
the Visual Basic and requires some C/C++ wizardry.
</p>

<p>The MsgHook class module encapsulates most of the dangerous details of 
the subclassing technique. When you turn it into an ActiveX DLL component&#8212;or 
use the version provided on the companion CD&#8212;you can safely subclass any 
window created by the current application. You can even stop an interpreted program 
without any adverse effects because the End button doesn't prevent the 
<I>Terminate </I>event from firing if the class has been compiled in a separate component. The 
compiled version also solves most&#8212;but not all&#8212;of the problems that occur when an 
interpreted code enters break mode, during which the subclassing code can't respond to 
messages. In such situations, you usually get an application crash, but the MsgHook class prevents it from happening. I plan to release a more complete version of this class, 
which I'll make available for download from my Web site at 
<I><a href="http://www.vb2themax.com" target="_window2">http://www.vb2themax.com</a></I>.
</p>

<A NAME="1072"><h3>More subclassing examples </h3></A>

<p>Now that you have a tool that implements all the nitty-gritty details of 
subclassing, you might finally see how subclassing can actually help you deliver better 
applications. The examples I show in this section are meant to be just hints of what you 
can really do with this powerful technique. As usual, you'll find all the code 
explained in this section in a sample application provided on the companion CD and 
shown in Figure A-10.
</p>

<p>
<A HREF="javascript:fullSize('F_Aph10x.htm')"> <img src="F_Aph10.JPG" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure A-10.</B> <i>The demonstration application that shows what you can achieve with the MsgHook ActiveX DLL.</i><!--/caption-->
</p>

<p>Windows sends Visual Basic forms a lot of messages that the Visual 
Basic runtime doesn't expose as events. Sometimes you don't have to manipulate 
incoming parameters because you're subclassing the form only to find out when the 
message arrives. There are many examples of such messages, including 
WM_MOUSEACTIVATE (the form or control is being activated with the mouse), WM_TIMECHANGE 
(system date and time has changed), WM_DISPLAYCHANGE (the screen resolution 
has changed), WM_COMPACTING (Windows is low in memory, and is asking 
applications to release as much memory as possible), and WM_QUERYOPEN (a form is 
about to be restored to normal size from an icon).
</p>

<p>Many other messages can't be dealt with so simply, though. For example, 
the WM_GETMINMAXINFO message is sent to a window when the user begins to 
move or resize it. When this message arrives, <I>lParam 
</I>contains the address of a MINMAXINFO structure, which in turn holds information about the region to which the form can 
be moved and the minimum and maximum size that the window can take. You 
can retrieve and modify this data, thus effectively controlling a form's size and 
position when the user resizes or maximizes it. (If you carefully look at Figure A-10, 
you'll see from the buttons in the window's caption that this form is maximized, even if 
it doesn't take the entire screen estate.) To move this information into a local 
structure, you need the <I>CopyMemory </I>API function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Type POINTAPI
    X As Long
    Y As Long
End Type
Type MINMAXINFO
    ptReserved As POINTAPI
    ptMaxSize As POINTAPI
    ptMaxPosition As POINTAPI
    ptMinTrackSize As POINTAPI
    ptMaxTrackSize As POINTAPI
End Type 

Private Sub FormHook_AfterMessage(ByVal hWnd As Long, ByVal uMsg As Long, _
    ByVal wParam As Long, ByVal lParam As Long, retValue As Long)
    Select Case uMsg
        Case WM_GETMINMAXINFO
            ' Windows is querying the form for its
            ' minimum and maximum size and position.
            Dim mmInfo As MINMAXINFO
            ' Read contents of structure pointed to by lParam.
            CopyMemory mmInfo, ByVal lParam, Len(mmInfo)
            With mmInfo
                ' ptMaxSize is the size of the maximized form.
                .ptMaxSize.X = 600
                .ptMaxSize.Y = 400
                ' ptMaxPosition is the position of the maximized form.
                .ptMaxPosition.X = 100
                .ptMaxPosition.Y = 100
                ' ptMinTrackSize is the minimum size of a form when 
                ' resized with the mouse.
                .ptMinTrackSize.X = 300
                .ptMinTrackSize.Y = 200
                ' ptMinTrackSize is the maximum size of a form when 
                ' resized with the mouse (usually equal to ptMaxSize).
                .ptMaxTrackSize.X = 600
                .ptMaxTrackSize.Y = 400
            End With
            ' Copy the data back into the original structure in memory.
            CopyMemory ByVal lParam, mmInfo, Len(mmInfo)
            ' Return 0 to say that the structure has been modified.
            retValue = 0
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>By subclassing the WM_MENUSELECT message, you can add a 
professional touch to your application. This message fires whenever the user highlights a menu 
item using the mouse or arrow keys, and you can employ it for displaying a short 
explanation of the menu item, as most commercial programs do (as shown in Figure 
A-10). The problem with this message is that you have to process the values stored in 
<I>wParam</I> and <I>lParam </I>to extract the caption of the highlighted menu item:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Put this code inside a FormHook_AfterMessage event procedure.
Case WM_MENUSELECT
    ' The menu item identifier is in the low-order word of wParam.
    ' The menu handle is in lParam.
    Dim mnuId As Long, mnuCaption As String, length As Long
    mnuId = (wParam And &amp;HFFFF&amp;)
    ' Get the menu caption.
    mnuCaption = Space$(256)
    length = GetMenuString(lParam, mnuId, mnuCaption, Len(mnuCaption), 0)
    mnuCaption = Left$(mnuCaption, length)
    Select Case mnuCaption
        Case &quot;&amp;New&quot;
            lblStatus.Caption = &quot;Create a new file&quot;
        Case &quot;&amp;Open&quot;
            lblStatus.Caption = &quot;Open an existing file&quot;
        Case &quot;&amp;Save&quot;
            lblStatus.Caption = &quot;Save a file to disk&quot;
        Case &quot;E&amp;xit&quot;
            lblStatus.Caption = &quot;Exit the program&quot;
    End Select
</pre>
</td></tr>
</table>
</p>

<p>WM_COMMAND is a multipurpose message that a form receives on many 
occasions&#8212;for example, when a menu command has been selected or when a 
control sends the form a notification message. You can trap EN_HSCROLL and 
EN_VSCROLL notification messages that TextBox controls send their parent forms when their 
edit area has been scrolled:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Put this code inside a FormHook_AfterMessage event procedure.
Case WM_COMMAND
    ' If this is a notification from a control, lParam holds its handle.
    If lParam = txtEditor.hwnd Then
        ' In this case, the notification message is in the
        ' high-order word of wParam.
        Select Case (wParam \ &amp;H10000)
            Case EN_HSCROLL
                ' The TextBox control has been scrolled horizontally.
            Case EN_VSCROLL
                ' The TextBox control has been scrolled vertically.
        End Select
    End If
</pre>
</td></tr>
</table>
</p>

<p>Of course, you can subclass any control that exposes the 
<I>hWnd </I>property, not just forms. For example, TextBox controls receive a WM_CONTEXTMENU 
message when the user right-clicks on them. The default action for this message is to 
display the default edit pop-up menu, but you can subclass the TextBox control to 
suppress this action so that you might display your own pop-up menu. (Compare this 
technique with the trick shown in the &quot;<A HREF="#105">Pop-Up Menus</A>&quot; tip in Chapter 3.) To achieve 
this result, you need to write code in the <I>BeforeMessage 
</I>event procedure and you must set the procedure's 
<I>Cancel </I>parameter to False to ask the MsgHook class not to 
execute the original window procedure. (This is one of the few cases when it's safe to do so.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents TextBoxHook As MsgHook

Private Sub Form_Load()
    Set TextBoxHook = New MsgHook
    TextBoxHook.StartSubclass txtEditor.hWnd
End Sub 

Private Sub TextBoxHook_BeforeMessage(hWnd As Long, uMsg As Long, _
    wParam As Long, lParam As Long, retValue As Long, Cancel As Boolean)
    If uMsg = WM_CONTEXTMENU Then
        ' Show a custom popup menu.
        PopupMenu mnuMyCustomPopupMenu
        ' Cancel the default processing (i.e. the default context menu).
        Cancel = True
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This appendix has taken you on quite a long journey through API territory. But as I 
told you at the beginning, these pages only scratch the surface 
of the immense power that Windows API functions give you, especially if you 
couple them with subclassing techniques. The MsgHook class on the companion CD is 
a great tool for exploring these features because you don't have to worry about 
the implementation details, and you can concentrate on the code that produces the 
effects you're interested in.
</p>

<p>
If you want to learn more about this subject, I can only suggest that you get 
a book, such as <I>Visual Basic Programmer's Guide to the Win32 API 
</I>by Dan Appleman, specifically on this topic. You should also always have the Microsoft 
Developer Network at hand for the official documentation of the thousands of functions 
that Windows exposes. Become an expert in API programming, and you'll see that 
there will be very little that you can't do in Visual Basic.
</p>

<a name="A134"></a><h1>11. About the Author</h1>

<A HREF="#A133">[Previous]</A> <A HREF="#A135">[Next]</A><P>

<H1>Francesco Balena</H1>

<P>Francesco began to study programming when it was customary to write code on 
punched cards. Since then, he has closely followed 
the evolution of hardware and software, at least when he wasn't busy playing alto sax with 
his jazz combo.
<P>
In recent years, he has written four books and over 150 articles for 
programming magazines. He is a contributing editor of <I>Visual Basic Programming Journal</I>, coauthor of 
<I>Platinum Edition Using VB5</I> (QUE), and founder and editor-in-chief of 
<I>Visual Basic Journal</I>, VBPJ's Italian licensee. He 
works as a trainer and consultant, speaks at several 
conferences for developers&#151;including Microsoft DevDays, American and 
European editions of VBITS, and Italian VB Forum workshops&#151;and also teaches on-line 
seminars via the Internet. (For more information, go to his 
<A HREF="http://www.vb2themax.com" target="_window2"><I>http://www.vb2themax.com</I></A> Web site.)
<P>
When not traveling, Francesco lives in Bari, Italy, with his wife, Adriana, and his 
son, Andrea.



<a name="A135"></a><h1>12. About This Electronic Book</h1>

<A HREF="#A134">[Previous]</A> <A HREF="#A136">[Next]</A><P>


<A NAME="1"><H1>About This Electronic Book</H1></A>
<P>This electronic book was originally created&#8212;and still may be purchased&#8212;as a print book. For simplicity, the electronic version of this book has been modified as little as possible from its original form. For instance, there may be occasional references to sample files that come with the book. These files are available with the print version, but are not provided in this electronic edition.

<A NAME="2"><H2>&#8220;Expanding&#8221; Graphics</H2></A>
<P>Many of the graphics shown in this book are quite large. To improve the readability of the book, reduced versions of these graphics are shown in the text. To see a full-size version, click on the reduced graphic.



<a name="A136"></a><h1>13. About Microsoft Press</h1>

<A HREF="#A135">[Previous]</A><P>


<CENTER><img src="MSPress1.gif" height=45 width=236></CENTER>
<P>

<B>Your Information Source</B>

<P>
Microsoft Press is a division of Microsoft Corporation and the leading source of comprehensive self-paced learning, training, evaluation, and support resources to help everyone from developers to IT professionals to end users get the most from Microsoft?technology. Choose from more than 250 current titles in print, multimedia, and network-ready formats&#8212;learning solutions made by Microsoft, with the most timely and accurate information available. For more information, visit <A href="http://mspress.microsoft.com" target="out">http://mspress.microsoft.com/</A>.



</body>
</html>
